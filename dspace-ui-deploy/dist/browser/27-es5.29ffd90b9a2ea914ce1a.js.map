{"version":3,"sources":["webpack:///src/app/collection-page/collection-form/collection-form.models.ts","webpack:///src/app/shared/comcol/comcol-forms/comcol-form/comcol-form.component.html","webpack:///src/app/collection-page/collection-form/collection-form.component.ts","webpack:///src/app/collection-page/collection-page.component.ts","webpack:///src/app/collection-page/collection-page.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/collection\\-page\\/collection\\-page\\.component$ namespace object","webpack:///src/app/collection-page/collection-form/collection-form.module.ts","webpack:///src/app/collection-page/collection-item-mapper/collection-item-mapper.component.ts","webpack:///src/app/collection-page/collection-item-mapper/collection-item-mapper.component.html","webpack:///src/app/collection-page/create-collection-page/create-collection-page.component.ts","webpack:///src/app/collection-page/create-collection-page/create-collection-page.guard.ts","webpack:///src/app/collection-page/create-collection-page/create-collection-page.component.html","webpack:///src/app/collection-page/delete-collection-page/delete-collection-page.component.html","webpack:///src/app/collection-page/delete-collection-page/delete-collection-page.component.ts","webpack:///src/app/collection-page/edit-item-template-page/edit-item-template-page.component.html","webpack:///src/app/collection-page/edit-item-template-page/edit-item-template-page.component.ts","webpack:///src/app/collection-page/edit-item-template-page/item-template-page.resolver.ts","webpack:///src/app/core/breadcrumbs/collection-breadcrumb.resolver.ts","webpack:///src/app/collection-page/collection-page-administrator.guard.ts","webpack:///src/app/collection-page/themed-collection-page.component.ts","webpack:///src/app/collection-page/collection-page-routing.module.ts","webpack:///src/app/collection-page/collection-page.module.ts","webpack:///src/app/shared/theme-support/themed.component.html"],"names":["collectionFormEntityTypeSelectionConfig","id","name","disabled","collectionFormModels","required","validators","errorMessages","back","CollectionFormComponent","formService","translate","notificationsService","authService","dsoService","requestService","objectCache","entityTypeService","super","dso","type","entityTypeSelection","ngOnInit","currentRelationshipValue","this","metadata","findAll","elementsPerPage","currentPage","pipe","subscribe","entityTypes","filter","label","forEach","index","add","value","length","select","formModel","CollectionPageComponent","constructor","collectionDataService","searchService","route","router","paginationService","authorizationDataService","paginationConfig","pageSize","sortConfig","DESC","collectionRD$","data","logoRD$","rd","payload","collection","logo","isCollectionAdmin$","isAuthorized","IsCollectionAdmin","paginationChanges$","currentPagination$","getCurrentPagination","currentSort$","getCurrentSort","itemRD$","currentPagination","currentSort","search","scope","pagination","sort","dsoTypes","ITEM","collectionPageRoute$","isNotEmpty","object","ngOnDestroy","clearPagination","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports","CollectionFormModule","CollectionItemMapperComponent","searchConfigService","itemDataService","translateService","dsoNameService","FeatureIds","defaultSortOptions","ASC","performedSearch","parent","collectionName$","getName","searchOptions$","paginatedSearchOptions","loadItemLists","shouldUpdate$","collectionAndOptions$","collectionItemsRD$","collectionRD","options","shouldUpdate","next","findAllByHref","_links","mappedItems","href","assign","mappedItemsRD$","query","buildQuery","mapItems","remove","responses$","removeMappingFromCollection","g","mapToCollection","self","showNotifications","messageInsertion","responses","successful","response","hasSucceeded","unsuccessful","hasFailed","get","amount","content","head","success","error","switchToFirstTab","tabChange","event","navigateByUrl","getCurrentUrl","url","indexOf","substring","collectionId","excludeColQuery","tabs","onCancel","navigate","SEARCH_CONFIG_SERVICE","provide","useClass","CreateCollectionPageComponent","CreateCollectionPageGuard","communityDataService","routeService","frontendURL","onSubmit","navigateToHome","navigateToNewPage","communityService","canActivate","state","parentID","queryParams","findById","communityRD","tap","isValid","DeleteCollectionPageComponent","dsoDataService","notifications","EditItemTemplatePageComponent","ItemTemplatePageResolver","CollectionBreadcrumbResolver","CollectionPageAdministratorGuard","itemTemplateService","AlertTypeEnum","first","switchMap","findByCollectionID","getCollectionEditUrl","uuid","params","breadcrumbService","dataService","followLinks","resolver","authorizationService","getFeatureID","AdministratorOf","ThemedCollectionPageComponent","CollectionPageRoutingModule","CollectionPageModule","getComponentName","importThemedComponent","themeName","importUnthemedComponent","forChild","path","component","breadcrumb","runGuardsAndResolvers","children","loadChildren","m","EditCollectionPageModule","pathMatch","item","title","breadcrumbKey","menu","public","active","visible","model","LINK","text","link","forRoot","EditItemPageModule"],"mappings":"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","file":"x","sourcesContent":["import { DynamicFormControlModel, DynamicInputModel, DynamicTextAreaModel } from '@ng-dynamic-forms/core';\nimport { DynamicSelectModelConfig } from '@ng-dynamic-forms/core/lib/model/select/dynamic-select.model';\n\nexport const collectionFormEntityTypeSelectionConfig: DynamicSelectModelConfig<string> = {\n  id: 'entityType',\n  name: 'dspace.entity.type',\n  disabled: false\n};\n\n/**\n * The dynamic form fields used for creating/editing a collection\n * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n */\nexport const collectionFormModels: DynamicFormControlModel[] = [\n  new DynamicInputModel({\n    id: 'title',\n    name: 'dc.title',\n    required: true,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'Please enter a name for this title'\n    },\n  }),\n  new DynamicTextAreaModel({\n    id: 'description',\n    name: 'dc.description',\n  }),\n  new DynamicTextAreaModel({\n    id: 'abstract',\n    name: 'dc.description.abstract',\n  }),\n  new DynamicTextAreaModel({\n    id: 'rights',\n    name: 'dc.rights',\n  }),\n  new DynamicTextAreaModel({\n    id: 'tableofcontents',\n    name: 'dc.description.tableofcontents',\n  }),\n  new DynamicTextAreaModel({\n    id: 'license',\n    name: 'dc.rights.license',\n  })\n];\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-12 d-inline-block\">\n      <label>{{type.value + '.edit.logo.label' | translate}}</label>\n    </div>\n    <ng-container *ngVar=\"(dso?.logo | async)?.payload as logo\">\n      <div class=\"col-12 d-inline-block alert\" [ngClass]=\"{'alert-danger': markLogoForDeletion}\" id=\"logo-section\" *ngIf=\"logo\">\n        <div class=\"row\">\n          <div class=\"col-8 d-inline-block\">\n            <ds-comcol-page-logo [logo]=\"logo\"></ds-comcol-page-logo>\n          </div>\n          <div class=\"col-4 d-inline-block\">\n            <div *ngIf=\"logo\" class=\"btn-group btn-group-sm float-right\" role=\"group\">\n              <button *ngIf=\"!markLogoForDeletion\" type=\"button\" class=\"btn btn-danger\"\n                      title=\"{{type.value + '.edit.logo.delete.title' | translate}}\"\n                      (click)=\"deleteLogo()\">\n                <i class=\"fas fa-trash\" aria-hidden=\"true\"></i>\n              </button>\n              <button *ngIf=\"markLogoForDeletion\" type=\"button\" class=\"btn btn-warning\"\n                      title=\"{{type.value + '.edit.logo.delete-undo.title' | translate}}\"\n                      (click)=\"undoDeleteLogo()\">\n                <i class=\"fas fa-undo\" aria-hidden=\"true\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"!logo\" class=\"col-12 d-inline-block\">\n        <ds-uploader  *ngIf=\"initializedUploaderOptions | async\"\n                      [dropMsg]=\"type.value + '.edit.logo.upload'\"\n                      [dropOverDocumentMsg]=\"type.value + '.edit.logo.upload'\"\n                      [enableDragOverDocument]=\"true\"\n                      [uploadFilesOptions]=\"uploadFilesOptions\"\n                      (onCompleteItem)=\"onCompleteItem()\"\n                      (onUploadError)=\"onUploadError()\"></ds-uploader>\n      </div>\n    </ng-container>\n  </div>\n</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"'comcol-form-id'\"\n         [formModel]=\"formModel\"\n         [displayCancel]=\"false\"\n         (submitForm)=\"onSubmit()\">\n  <button before (click)=\"back.emit()\" class=\"btn btn-outline-secondary\">\n    <i class=\"fas fa-arrow-left\"></i> {{ type.value + '.edit.return' | translate }}\n  </button>\n</ds-form>\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  DynamicFormControlModel,\n  DynamicFormOptionConfig,\n  DynamicFormService,\n  DynamicSelectModel\n} from '@ng-dynamic-forms/core';\n\nimport { Collection } from '../../core/shared/collection.model';\nimport { ComColFormComponent } from '../../shared/comcol/comcol-forms/comcol-form/comcol-form.component';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { RequestService } from '../../core/data/request.service';\nimport { ObjectCacheService } from '../../core/cache/object-cache.service';\nimport { EntityTypeService } from '../../core/data/entity-type.service';\nimport { ItemType } from '../../core/shared/item-relationships/item-type.model';\nimport { MetadataValue } from '../../core/shared/metadata.models';\nimport { getFirstSucceededRemoteListPayload } from '../../core/shared/operators';\nimport { collectionFormEntityTypeSelectionConfig, collectionFormModels, } from './collection-form.models';\nimport { NONE_ENTITY_TYPE } from '../../core/shared/item-relationships/item-type.resource-type';\n\n/**\n * Form used for creating and editing collections\n */\n@Component({\n  selector: 'ds-collection-form',\n  styleUrls: ['../../shared/comcol/comcol-forms/comcol-form/comcol-form.component.scss'],\n  templateUrl: '../../shared/comcol/comcol-forms/comcol-form/comcol-form.component.html'\n})\nexport class CollectionFormComponent extends ComColFormComponent<Collection> implements OnInit {\n  /**\n   * @type {Collection} A new collection when a collection is being created, an existing Input collection when a collection is being edited\n   */\n  @Input() dso: Collection = new Collection();\n\n  /**\n   * @type {Collection.type} This is a collection-type form\n   */\n  type = Collection.type;\n\n  /**\n   * The dynamic form field used for entity type selection\n   * @type {DynamicSelectModel<string>}\n   */\n  entityTypeSelection: DynamicSelectModel<string> = new DynamicSelectModel(collectionFormEntityTypeSelectionConfig);\n\n  /**\n   * The dynamic form fields used for creating/editing a collection\n   * @type {DynamicFormControlModel[]}\n   */\n  formModel: DynamicFormControlModel[];\n\n  public constructor(protected formService: DynamicFormService,\n                     protected translate: TranslateService,\n                     protected notificationsService: NotificationsService,\n                     protected authService: AuthService,\n                     protected dsoService: CommunityDataService,\n                     protected requestService: RequestService,\n                     protected objectCache: ObjectCacheService,\n                     protected entityTypeService: EntityTypeService) {\n    super(formService, translate, notificationsService, authService, requestService, objectCache);\n  }\n\n  ngOnInit() {\n\n    let currentRelationshipValue: MetadataValue[];\n    if (this.dso && this.dso.metadata) {\n      currentRelationshipValue = this.dso.metadata['dspace.entity.type'];\n    }\n\n    const entities$: Observable<ItemType[]> = this.entityTypeService.findAll({ elementsPerPage: 100, currentPage: 1 }).pipe(\n      getFirstSucceededRemoteListPayload()\n    );\n\n    // retrieve all entity types to populate the dropdowns selection\n    entities$.subscribe((entityTypes: ItemType[]) => {\n\n        entityTypes\n          .filter((type: ItemType) => type.label !== NONE_ENTITY_TYPE)\n          .forEach((type: ItemType, index: number) => {\n          this.entityTypeSelection.add({\n            disabled: false,\n            label: type.label,\n            value: type.label\n          } as DynamicFormOptionConfig<string>);\n          if (currentRelationshipValue && currentRelationshipValue.length > 0 && currentRelationshipValue[0].value === type.label) {\n            this.entityTypeSelection.select(index);\n            this.entityTypeSelection.disabled = true;\n          }\n        });\n\n        this.formModel = [...collectionFormModels, this.entityTypeSelection];\n\n        super.ngOnInit();\n    });\n\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, combineLatest as observableCombineLatest, Observable, Subject } from 'rxjs';\nimport { filter, map, mergeMap, startWith, switchMap, take } from 'rxjs/operators';\nimport { PaginatedSearchOptions } from '../shared/search/models/paginated-search-options.model';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { SortDirection, SortOptions } from '../core/cache/models/sort-options.model';\nimport { CollectionDataService } from '../core/data/collection-data.service';\nimport { PaginatedList } from '../core/data/paginated-list.model';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Bitstream } from '../core/shared/bitstream.model';\n\nimport { Collection } from '../core/shared/collection.model';\nimport { DSpaceObjectType } from '../core/shared/dspace-object-type.model';\nimport { Item } from '../core/shared/item.model';\nimport {\n  getAllSucceededRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  redirectOn4xx,\n  toDSpaceObjectListRD\n} from '../core/shared/operators';\n\nimport { fadeIn, fadeInOut } from '../shared/animations/fade';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { PaginationComponentOptions } from '../shared/pagination/pagination-component-options.model';\nimport { AuthService } from '../core/auth/auth.service';\nimport { PaginationService } from '../core/pagination/pagination.service';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { getCollectionPageRoute } from './collection-page-routing-paths';\n\n@Component({\n  selector: 'ds-collection-page',\n  styleUrls: ['./collection-page.component.scss'],\n  templateUrl: './collection-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\nexport class CollectionPageComponent implements OnInit {\n  collectionRD$: Observable<RemoteData<Collection>>;\n  itemRD$: Observable<RemoteData<PaginatedList<Item>>>;\n  logoRD$: Observable<RemoteData<Bitstream>>;\n  paginationConfig: PaginationComponentOptions;\n  sortConfig: SortOptions;\n  private paginationChanges$: Subject<{\n    paginationConfig: PaginationComponentOptions,\n    sortConfig: SortOptions\n  }>;\n\n  /**\n   * Whether the current user is a Community admin\n   */\n  isCollectionAdmin$: Observable<boolean>;\n\n  /**\n   * Route to the community page\n   */\n  collectionPageRoute$: Observable<string>;\n\n  constructor(\n    private collectionDataService: CollectionDataService,\n    private searchService: SearchService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private paginationService: PaginationService,\n    private authorizationDataService: AuthorizationDataService,\n  ) {\n    this.paginationConfig = new PaginationComponentOptions();\n    this.paginationConfig.id = 'cp';\n    this.paginationConfig.pageSize = 5;\n    this.paginationConfig.currentPage = 1;\n    this.sortConfig = new SortOptions('dc.date.accessioned', SortDirection.DESC);\n  }\n\n  ngOnInit(): void {\n    this.collectionRD$ = this.route.data.pipe(\n      map((data) => data.dso as RemoteData<Collection>),\n      redirectOn4xx(this.router, this.authService),\n      take(1)\n    );\n    this.logoRD$ = this.collectionRD$.pipe(\n      map((rd: RemoteData<Collection>) => rd.payload),\n      filter((collection: Collection) => hasValue(collection)),\n      mergeMap((collection: Collection) => collection.logo)\n    );\n    this.isCollectionAdmin$ = this.authorizationDataService.isAuthorized(FeatureID.IsCollectionAdmin);\n\n    this.paginationChanges$ = new BehaviorSubject({\n      paginationConfig: this.paginationConfig,\n      sortConfig: this.sortConfig\n    });\n\n    const currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    const currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, this.sortConfig);\n\n    this.itemRD$ = observableCombineLatest([currentPagination$, currentSort$]).pipe(\n      switchMap(([currentPagination, currentSort]) => this.collectionRD$.pipe(\n        getFirstSucceededRemoteData(),\n        map((rd) => rd.payload.id),\n        switchMap((id: string) => {\n          return this.searchService.search(\n            new PaginatedSearchOptions({\n              scope: id,\n              pagination: currentPagination,\n              sort: currentSort,\n              dsoTypes: [DSpaceObjectType.ITEM]\n            })).pipe(toDSpaceObjectListRD()) as Observable<RemoteData<PaginatedList<Item>>>;\n        }),\n        startWith(undefined) // Make sure switching pages shows loading component\n      )\n      )\n    );\n\n    this.collectionPageRoute$ = this.collectionRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((collection) => getCollectionPageRoute(collection.id))\n    );\n  }\n\n  isNotEmpty(object: any) {\n    return isNotEmpty(object);\n  }\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.paginationConfig.id);\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"collection-page\"\n         *ngVar=\"(collectionRD$ | async) as collectionRD\">\n        <div *ngIf=\"collectionRD?.hasSucceeded\" @fadeInOut>\n            <div *ngIf=\"collectionRD?.payload as collection\">\n              <ds-view-tracker [object]=\"collection\"></ds-view-tracker>\n              <div class=\"d-flex flex-row border-bottom mb-4 pb-4\">\n                <header class=\"comcol-header mr-auto\">\n                  <!-- Collection Name -->\n                  <ds-comcol-page-header\n                          [name]=\"collection.name\">\n                  </ds-comcol-page-header>\n                  <!-- Collection logo -->\n                  <ds-comcol-page-logo *ngIf=\"logoRD$\"\n                                   [logo]=\"(logoRD$ | async)?.payload\"\n                                   [alternateText]=\"'Collection Logo'\"\n                      [alternateText]=\"'Collection Logo'\">\n                  </ds-comcol-page-logo>\n\n                  <!-- Handle -->\n                  <ds-comcol-page-handle\n                          [content]=\"collection.handle\"\n                          [title]=\"'collection.page.handle'\" >\n                  </ds-comcol-page-handle>\n                  <!-- Introductory text -->\n                  <ds-comcol-page-content\n                          [content]=\"collection.introductoryText\"\n                          [hasInnerHtml]=\"true\">\n                  </ds-comcol-page-content>\n                  <!-- News -->\n                  <ds-comcol-page-content\n                          [content]=\"collection.sidebarText\"\n                          [hasInnerHtml]=\"true\"\n                          [title]=\"'collection.page.news'\">\n                  </ds-comcol-page-content>\n                </header>\n                <div class=\"pl-2\">\n                  <ds-dso-page-edit-button *ngIf=\"isCollectionAdmin$ | async\"  [pageRoute]=\"collectionPageRoute$ | async\" [dso]=\"collection\" [tooltipMsg]=\"'collection.page.edit'\"></ds-dso-page-edit-button>\n                </div>\n              </div>\n              <section class=\"comcol-page-browse-section\">\n              <!-- Browse-By Links -->\n              <ds-comcol-page-browse-by\n                      [id]=\"collection.id\"\n                      [contentType]=\"collection.type\">\n              </ds-comcol-page-browse-by>\n\n            <ng-container *ngVar=\"(itemRD$ | async) as itemRD\">\n                <div class=\"mt-4\" *ngIf=\"itemRD?.hasSucceeded\" @fadeIn>\n                    <h3 class=\"sr-only\">{{'collection.page.browse.recent.head' | translate}}</h3>\n                    <ds-viewable-collection\n                            [config]=\"paginationConfig\"\n                            [sortConfig]=\"sortConfig\"\n                            [objects]=\"itemRD\"\n                            [hideGear]=\"true\">\n                    </ds-viewable-collection>\n                </div>\n                <ds-error *ngIf=\"itemRD?.hasFailed\"\n                          message=\"{{'error.recent-submissions' | translate}}\"></ds-error>\n                <ds-loading *ngIf=\"!itemRD || itemRD.isLoading\"\n                            message=\"{{'loading.recent-submissions' | translate}}\"></ds-loading>\n                <div *ngIf=\"!itemRD?.isLoading && itemRD?.payload?.page.length === 0\" class=\"alert alert-info w-100\" role=\"alert\">\n                        {{'collection.page.browse.recent.empty' | translate}}\n                </div>\n            </ng-container>\n            </section>\n            <footer *ngIf=\"collection.copyrightText\" class=\"border-top my-5 pt-4\">\n          <!-- Copyright -->\n          <ds-comcol-page-content\n                      [content]=\"collection.copyrightText\"\n                      [hasInnerHtml]=\"true\">\n          </ds-comcol-page-content>\n        </footer>\n      </div>\n    </div>\n        <ds-error *ngIf=\"collectionRD?.hasFailed\"\n            message=\"{{'error.collection' | translate}}\"></ds-error>\n        <ds-loading *ngIf=\"collectionRD?.isLoading\"\n            message=\"{{'loading.collection' | translate}}\"></ds-loading>\n  </div>\n</div>\n","var map = {\n\t\"./custom/app/collection-page/collection-page.component\": [\n\t\t\"pQAh\",\n\t\t46\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"aem7\";\nmodule.exports = webpackAsyncContext;","import { NgModule } from '@angular/core';\n\nimport { CollectionFormComponent } from './collection-form.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ComcolModule } from '../../shared/comcol/comcol.module';\nimport { FormModule } from '../../shared/form/form.module';\n\n@NgModule({\n  imports: [\n    ComcolModule,\n    FormModule,\n    SharedModule\n  ],\n  declarations: [\n    CollectionFormComponent,\n  ],\n  exports: [\n    CollectionFormComponent\n  ]\n})\nexport class CollectionFormModule {\n\n}\n","import { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\n\nimport { ChangeDetectionStrategy, Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { fadeIn, fadeInOut } from '../../shared/animations/fade';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Collection } from '../../core/shared/collection.model';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { map, startWith, switchMap, take } from 'rxjs/operators';\nimport {\n  getAllSucceededRemoteData,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload,\n  toDSpaceObjectListRD\n} from '../../core/shared/operators';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { DSpaceObjectType } from '../../core/shared/dspace-object-type.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CollectionDataService } from '../../core/data/collection-data.service';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { SEARCH_CONFIG_SERVICE } from '../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../core/shared/search/search-configuration.service';\nimport { PaginatedSearchOptions } from '../../shared/search/models/paginated-search-options.model';\nimport { SearchService } from '../../core/shared/search/search.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\n\n@Component({\n  selector: 'ds-collection-item-mapper',\n  styleUrls: ['./collection-item-mapper.component.scss'],\n  templateUrl: './collection-item-mapper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ],\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n/**\n * Component used to map items to a collection\n */\nexport class CollectionItemMapperComponent implements OnInit {\n\n  FeatureIds = FeatureID;\n\n  /**\n   * A view on the tabset element\n   * Used to switch tabs programmatically\n   */\n  @ViewChild('tabs', {static: false}) tabs;\n\n  /**\n   * The collection to map items to\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n  collectionName$: Observable<string>;\n\n  /**\n   * Search options\n   */\n  searchOptions$: Observable<PaginatedSearchOptions>;\n\n  /**\n   * List of items to show under the \"Browse\" tab\n   * Items inside the collection\n   */\n  collectionItemsRD$: Observable<RemoteData<PaginatedList<DSpaceObject>>>;\n\n  /**\n   * List of items to show under the \"Map\" tab\n   * Items outside the collection\n   */\n  mappedItemsRD$: Observable<RemoteData<PaginatedList<DSpaceObject>>>;\n\n  /**\n   * Sort on title ASC by default\n   * @type {SortOptions}\n   */\n  defaultSortOptions: SortOptions = new SortOptions('dc.title', SortDirection.ASC);\n\n  /**\n   * Firing this observable (shouldUpdate$.next(true)) forces the two lists to reload themselves\n   * Usually fired after the lists their cache is cleared (to force a new request to the REST API)\n   */\n  shouldUpdate$: BehaviorSubject<boolean>;\n\n  /**\n   * Track whether at least one search has been performed or not\n   * As soon as at least one search has been performed, we display the search results\n   */\n  performedSearch = false;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              @Inject(SEARCH_CONFIG_SERVICE) private searchConfigService: SearchConfigurationService,\n              private searchService: SearchService,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private collectionDataService: CollectionDataService,\n              private translateService: TranslateService,\n              private dsoNameService: DSONameService) {\n  }\n\n  ngOnInit(): void {\n    this.collectionRD$ = this.route.parent.data.pipe(\n      map((data) => data.dso as RemoteData<Collection>),\n      getFirstSucceededRemoteData()\n    );\n\n    this.collectionName$ = this.collectionRD$.pipe(\n      map((rd: RemoteData<Collection>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n    this.searchOptions$ = this.searchConfigService.paginatedSearchOptions;\n    this.loadItemLists();\n  }\n\n  /**\n   * Load collectionItemsRD$ with a fixed scope to only obtain the items this collection owns\n   * Load mappedItemsRD$ to only obtain items this collection doesn't own\n   */\n  loadItemLists() {\n    this.shouldUpdate$ = new BehaviorSubject<boolean>(true);\n    const collectionAndOptions$ = observableCombineLatest(\n      this.collectionRD$,\n      this.searchOptions$,\n      this.shouldUpdate$\n    );\n    this.collectionItemsRD$ = collectionAndOptions$.pipe(\n      switchMap(([collectionRD, options, shouldUpdate]) => {\n        if (shouldUpdate === true) {\n          this.shouldUpdate$.next(false);\n        }\n        return this.itemDataService.findAllByHref(collectionRD.payload._links.mappedItems.href, Object.assign(options, {\n          sort: this.defaultSortOptions\n        }),!shouldUpdate, false, followLink('owningCollection')).pipe(\n          getAllSucceededRemoteData()\n        );\n      })\n    );\n    this.mappedItemsRD$ = collectionAndOptions$.pipe(\n      switchMap(([collectionRD, options, shouldUpdate]) => {\n        return this.searchService.search(Object.assign(new PaginatedSearchOptions(options), {\n          query: this.buildQuery(collectionRD.payload.id, options.query),\n          scope: undefined,\n          dsoTypes: [DSpaceObjectType.ITEM],\n          sort: this.defaultSortOptions\n        }), 10000).pipe(\n          toDSpaceObjectListRD(),\n          startWith(undefined)\n        );\n      })\n    );\n  }\n\n  /**\n   * Map/Unmap the selected items to the collection and display notifications\n   * @param ids         The list of item UUID's to map/unmap to the collection\n   * @param remove      Whether or not it's supposed to remove mappings\n   */\n  mapItems(ids: string[], remove?: boolean) {\n    const responses$ = this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((collectionRD: RemoteData<Collection>) => collectionRD.payload),\n      switchMap((collection: Collection) =>\n        observableCombineLatest(ids.map((id: string) => {\n            if (remove) {\n              return this.itemDataService.removeMappingFromCollection(id, collection.id).pipe(\n                getFirstCompletedRemoteData()\n              );\n            } else {\n              return this.itemDataService.mapToCollection(id, collection._links.self.href).pipe(\n                getFirstCompletedRemoteData()\n              );\n            }\n          }\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, remove);\n  }\n\n  /**\n   * Display notifications\n   * @param {Observable<RestResponse[]>} responses$   The responses after adding/removing a mapping\n   * @param {boolean} remove                          Whether or not the goal was to remove mappings\n   */\n  private showNotifications(responses$: Observable<RemoteData<NoContent>[]>, remove?: boolean) {\n    const messageInsertion = remove ? 'unmap' : 'map';\n\n    responses$.subscribe((responses: RemoteData<NoContent>[]) => {\n      const successful = responses.filter((response: RemoteData<any>) => response.hasSucceeded);\n      const unsuccessful = responses.filter((response: RemoteData<any>) => response.hasFailed);\n      if (successful.length > 0) {\n        const successMessages = observableCombineLatest(\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.success.head`),\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.success.content`, { amount: successful.length })\n        );\n\n        successMessages.subscribe(([head, content]) => {\n          this.notificationsService.success(head, content);\n        });\n        this.shouldUpdate$.next(true);\n      }\n      if (unsuccessful.length > 0) {\n        const unsuccessMessages = observableCombineLatest(\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.error.head`),\n          this.translateService.get(`collection.edit.item-mapper.notifications.${messageInsertion}.error.content`, { amount: unsuccessful.length })\n        );\n\n        unsuccessMessages.subscribe(([head, content]) => {\n          this.notificationsService.error(head, content);\n        });\n      }\n      this.switchToFirstTab();\n    });\n  }\n\n  /**\n   * Clear url parameters on tab change (temporary fix until pagination is improved)\n   * @param event\n   */\n  tabChange(event) {\n    this.performedSearch = false;\n    this.router.navigateByUrl(this.getCurrentUrl());\n  }\n\n  /**\n   * Get current url without parameters\n   * @returns {string}\n   */\n  getCurrentUrl(): string {\n    if (this.router.url.indexOf('?') > -1) {\n      return this.router.url.substring(0, this.router.url.indexOf('?'));\n    }\n    return this.router.url;\n  }\n\n  /**\n   * Build a query where items that are already mapped to a collection are excluded from\n   * @param collectionId    The collection's UUID\n   * @param query           The query to add to it\n   */\n  buildQuery(collectionId: string, query: string): string {\n    const excludeColQuery = `-location.coll:\\\"${collectionId}\\\"`;\n    if (isNotEmpty(query)) {\n      return `${excludeColQuery} AND ${query}`;\n    } else {\n      return excludeColQuery;\n    }\n  }\n\n  /**\n   * Switch the view to focus on the first tab\n   */\n  switchToFirstTab() {\n    this.tabs.select('browseTab');\n  }\n\n  /**\n   * When a cancel event is fired, return to the collection page\n   */\n  onCancel() {\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      take(1)\n    ).subscribe((collection: Collection) => {\n      this.router.navigate(['/collections/', collection.id]);\n    });\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2>{{'collection.edit.item-mapper.head' | translate}}</h2>\n      <p [innerHTML]=\"'collection.edit.item-mapper.collection' | translate:{ name: (collectionName$ |async) }\" id=\"collection-name\"></p>\n      <p>{{'collection.edit.item-mapper.description' | translate}}</p>\n\n      <ul ngbNav (navChange)=\"tabChange($event)\" [destroyOnHide]=\"true\" #tabs=\"ngbNav\" class=\"nav-tabs\">\n        <li [ngbNavItem]=\"'browseTab'\">\n          <a ngbNavLink>{{'collection.edit.item-mapper.tabs.browse' | translate}}</a>\n          <ng-template ngbNavContent>\n            <div class=\"mt-2\">\n              <ds-item-select class=\"mt-2\"\n                [key]=\"'browse'\"\n                [dsoRD$]=\"collectionItemsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'collection.edit.item-mapper.remove'\"\n                [cancelButton]=\"'collection.edit.item-mapper.cancel'\"\n                [dangerConfirm]=\"true\"\n                [hideCollection]=\"true\"\n                (confirm)=\"mapItems($event, true)\"\n                (cancel)=\"onCancel()\"></ds-item-select>\n            </div>\n          </ng-template>\n        </li>\n        <li [ngbNavItem]=\"'mapTab'\">\n          <a ngbNavLink>{{'collection.edit.item-mapper.tabs.map' | translate}}</a>\n          <ng-template ngbNavContent>\n            <div class=\"row mt-2\">\n              <div class=\"col-12 col-lg-6\">\n                <ds-search-form id=\"search-form\"\n                                [query]=\"(searchOptions$ | async)?.query\"\n                                [scope]=\"(searchOptions$ | async)?.scope\"\n                                [currentUrl]=\"'./'\"\n                                [inPlaceSearch]=\"true\"\n                                [searchPlaceholder]=\"'collection.edit.item-mapper.search-form.placeholder' | translate\"\n                                (submitSearch)=\"performedSearch = true\">\n                </ds-search-form>\n              </div>\n            </div>\n\n            <div *ngIf=\"performedSearch\">\n              <ds-item-select class=\"mt-2\"\n                [key]=\"'map'\"\n                [dsoRD$]=\"mappedItemsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [featureId]=\"FeatureIds.CanManageMappings\"\n                [confirmButton]=\"'collection.edit.item-mapper.confirm'\"\n                [cancelButton]=\"'collection.edit.item-mapper.cancel'\"\n                (confirm)=\"mapItems($event)\"\n                (cancel)=\"onCancel()\"></ds-item-select>\n            </div>\n            <div *ngIf=\"!performedSearch\" class=\"alert alert-info w-100\" role=\"alert\">\n              {{'collection.edit.item-mapper.no-search' | translate}}\n            </div>\n          </ng-template>\n        </li>\n      </ul>\n      <div [ngbNavOutlet]=\"tabs\"></div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { RouteService } from '../../core/services/route.service';\nimport { Router } from '@angular/router';\nimport { CreateComColPageComponent } from '../../shared/comcol/comcol-forms/create-comcol-page/create-comcol-page.component';\nimport { Collection } from '../../core/shared/collection.model';\nimport { CollectionDataService } from '../../core/data/collection-data.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\n\n/**\n * Component that represents the page where a user can create a new Collection\n */\n@Component({\n  selector: 'ds-create-collection',\n  styleUrls: ['./create-collection-page.component.scss'],\n  templateUrl: './create-collection-page.component.html'\n})\nexport class CreateCollectionPageComponent extends CreateComColPageComponent<Collection> {\n  protected frontendURL = '/collections/';\n  protected type = Collection.type;\n\n  public constructor(\n    protected communityDataService: CommunityDataService,\n    protected collectionDataService: CollectionDataService,\n    protected routeService: RouteService,\n    protected router: Router,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService,\n    protected requestService: RequestService\n  ) {\n    super(collectionDataService, communityDataService, routeService, router, notificationsService, translate, requestService);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { hasNoValue, hasValue } from '../../shared/empty.util';\nimport { CommunityDataService } from '../../core/data/community-data.service';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Community } from '../../core/shared/community.model';\nimport { map, tap } from 'rxjs/operators';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n/**\n * Prevent creation of a collection without a parent community provided\n * @class CreateCollectionPageGuard\n */\n@Injectable()\nexport class CreateCollectionPageGuard implements CanActivate {\n  public constructor(private router: Router, private communityService: CommunityDataService) {\n  }\n\n  /**\n   * True when either a parent ID query parameter has been provided and the parent ID resolves to a valid parent community\n   * Reroutes to a 404 page when the page cannot be activated\n   * @method canActivate\n   */\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    const parentID = route.queryParams.parent;\n    if (hasNoValue(parentID)) {\n      this.router.navigate(['/404']);\n      return observableOf(false);\n    }\n    return this.communityService.findById(parentID)\n      .pipe(\n        getFirstCompletedRemoteData(),\n        map((communityRD: RemoteData<Community>) => hasValue(communityRD) && communityRD.hasSucceeded && hasValue(communityRD.payload)),\n        tap((isValid: boolean) => {\n          if (!isValid) {\n            this.router.navigate(['/404']);\n          }\n        })\n    );\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12 pb-4\">\n            <h2 id=\"sub-header\" class=\"border-bottom pb-2\">{{'collection.create.sub-head' | translate:{ parent: (parentRD$| async)?.payload.name } }}</h2>\n        </div>\n    </div>\n    <ds-collection-form (submitForm)=\"onSubmit($event)\"\n                        (back)=\"navigateToHome()\"\n                        (finish)=\"navigateToNewPage()\"></ds-collection-form>\n</div>\n","<div class=\"container\">\n    <div class=\"row\">\n        <ng-container *ngVar=\"(dsoRD$ | async)?.payload as dso\">\n            <div class=\"col-12 pb-4\">\n                <h2 id=\"header\" class=\"border-bottom pb-2\">{{ 'collection.delete.head' | translate}}</h2>\n                <p class=\"pb-2\">{{ 'collection.delete.text' | translate:{ dso: dso.name } }}</p>\n                <div class=\"form-group row\">\n                  <div class=\"col text-right\">\n                    <button class=\"btn btn-outline-secondary\" (click)=\"onCancel(dso)\" [disabled]=\"(processing$ | async)\">\n                      <i class=\"fas fa-times\"></i> {{'collection.delete.cancel' | translate}}\n                    </button>\n                    <button class=\"btn btn-danger mr-2\" (click)=\"onConfirm(dso)\" [disabled]=\"(processing$ | async)\">\n                      <span *ngIf=\"processing$ | async\"><i class='fas fa-circle-notch fa-spin'></i> {{'collection.delete.processing' | translate}}</span>\n                      <span *ngIf=\"!(processing$ | async)\"><i class=\"fas fa-trash\"></i> {{'collection.delete.confirm' | translate}}</span>\n                    </button>\n                  </div>\n                </div>\n            </div>\n        </ng-container>\n\n    </div>\n\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DeleteComColPageComponent } from '../../shared/comcol/comcol-forms/delete-comcol-page/delete-comcol-page.component';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { CollectionDataService } from '../../core/data/collection-data.service';\nimport { Collection } from '../../core/shared/collection.model';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\n\n/**\n * Component that represents the page where a user can delete an existing Collection\n */\n@Component({\n  selector: 'ds-delete-collection',\n  styleUrls: ['./delete-collection-page.component.scss'],\n  templateUrl: './delete-collection-page.component.html'\n})\nexport class DeleteCollectionPageComponent extends DeleteComColPageComponent<Collection> {\n  protected frontendURL = '/collections/';\n\n  public constructor(\n    protected dsoDataService: CollectionDataService,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notifications: NotificationsService,\n    protected translate: TranslateService,\n    protected requestService: RequestService\n  ) {\n    super(dsoDataService, router, route, notifications, translate, requestService);\n  }\n}\n","<div class=\"container\" *ngVar=\"(collectionRD$ | async)?.payload as collection\">\n  <div class=\"row\">\n    <div class=\"col-12\" *ngVar=\"(itemRD$ | async) as itemRD\">\n      <ng-container *ngIf=\"itemRD?.hasSucceeded\">\n        <h2 class=\"border-bottom\">{{ 'collection.edit.template.head' | translate:{ collection: collection?.name } }}</h2>\n        <ds-item-metadata [updateService]=\"itemTemplateService\" [item]=\"itemRD?.payload\"></ds-item-metadata>\n        <button [routerLink]=\"getCollectionEditUrl(collection)\" class=\"btn btn-outline-secondary\">{{ 'collection.edit.template.cancel' | translate }}</button>\n      </ng-container>\n      <ds-loading *ngIf=\"itemRD?.isLoading\" [message]=\"'collection.edit.template.loading' | translate\"></ds-loading>\n      <ds-alert *ngIf=\"itemRD?.hasFailed\" [type]=\"AlertTypeEnum.Error\" [content]=\"'collection.edit.template.error' | translate\"></ds-alert>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Collection } from '../../core/shared/collection.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { first, map, switchMap } from 'rxjs/operators';\nimport { ItemTemplateDataService } from '../../core/data/item-template-data.service';\nimport { getCollectionEditRoute } from '../collection-page-routing-paths';\nimport { Item } from '../../core/shared/item.model';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { AlertType } from '../../shared/alert/aletr-type';\n\n@Component({\n  selector: 'ds-edit-item-template-page',\n  templateUrl: './edit-item-template-page.component.html',\n})\n/**\n * Component for editing the item template of a collection\n */\nexport class EditItemTemplatePageComponent implements OnInit {\n\n  /**\n   * The collection to edit the item template for\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The template item\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  AlertTypeEnum = AlertType;\n\n  constructor(protected route: ActivatedRoute,\n              public itemTemplateService: ItemTemplateDataService) {\n  }\n\n  ngOnInit(): void {\n    this.collectionRD$ = this.route.parent.data.pipe(first(), map((data) => data.dso));\n    this.itemRD$ = this.collectionRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((collection) => this.itemTemplateService.findByCollectionID(collection.id)),\n    );\n  }\n\n  /**\n   * Get the URL to the collection's edit page\n   * @param collection\n   */\n  getCollectionEditUrl(collection: Collection): string {\n    if (collection) {\n      return getCollectionEditRoute(collection.uuid);\n    } else {\n      return '';\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemTemplateDataService } from '../../core/data/item-template-data.service';\nimport { Observable } from 'rxjs';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific collection's item template before the route is activated\n */\n@Injectable()\nexport class ItemTemplatePageResolver implements Resolve<RemoteData<Item>> {\n  constructor(private itemTemplateService: ItemTemplateDataService) {\n  }\n\n  /**\n   * Method for resolving a collection's item template based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Collection>> Emits the found item template based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    return this.itemTemplateService.findByCollectionID(route.params.id, true, false, followLink('templateItemOf')).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DSOBreadcrumbsService } from './dso-breadcrumbs.service';\nimport { DSOBreadcrumbResolver } from './dso-breadcrumb.resolver';\nimport { Collection } from '../shared/collection.model';\nimport { CollectionDataService } from '../data/collection-data.service';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { COLLECTION_PAGE_LINKS_TO_FOLLOW } from '../../collection-page/collection-page.resolver';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a Collection\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollectionBreadcrumbResolver extends DSOBreadcrumbResolver<Collection> {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: CollectionDataService) {\n    super(breadcrumbService, dataService);\n  }\n\n  /**\n   * Method that returns the follow links to already resolve\n   * The self links defined in this list are expected to be requested somewhere in the near future\n   * Requesting them as embeds will limit the number of requests\n   */\n  get followLinks(): FollowLinkConfig<Collection>[] {\n    return COLLECTION_PAGE_LINKS_TO_FOLLOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Collection } from '../core/shared/collection.model';\nimport { CollectionPageResolver } from './collection-page.resolver';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { DsoPageSingleFeatureGuard } from '../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Collection} pages requiring administrator rights\n */\nexport class CollectionPageAdministratorGuard extends DsoPageSingleFeatureGuard<Collection> {\n  constructor(protected resolver: CollectionPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check administrator authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.AdministratorOf);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { CollectionPageComponent } from './collection-page.component';\n\n/**\n * Themed wrapper for CollectionPageComponent\n */\n@Component({\n  selector: 'ds-themed-community-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedCollectionPageComponent extends ThemedComponent<CollectionPageComponent> {\n  protected getComponentName(): string {\n    return 'CollectionPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/collection-page/collection-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./collection-page.component`);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { CollectionPageResolver } from './collection-page.resolver';\nimport { CreateCollectionPageComponent } from './create-collection-page/create-collection-page.component';\nimport { AuthenticatedGuard } from '../core/auth/authenticated.guard';\nimport { CreateCollectionPageGuard } from './create-collection-page/create-collection-page.guard';\nimport { DeleteCollectionPageComponent } from './delete-collection-page/delete-collection-page.component';\nimport { EditItemTemplatePageComponent } from './edit-item-template-page/edit-item-template-page.component';\nimport { ItemTemplatePageResolver } from './edit-item-template-page/item-template-page.resolver';\nimport { CollectionBreadcrumbResolver } from '../core/breadcrumbs/collection-breadcrumb.resolver';\nimport { DSOBreadcrumbsService } from '../core/breadcrumbs/dso-breadcrumbs.service';\nimport { LinkService } from '../core/cache/builders/link.service';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport {\n  ITEMTEMPLATE_PATH,\n  COLLECTION_EDIT_PATH,\n  COLLECTION_CREATE_PATH\n} from './collection-page-routing-paths';\nimport { CollectionPageAdministratorGuard } from './collection-page-administrator.guard';\nimport { MenuItemType } from '../shared/menu/initial-menus-state';\nimport { LinkMenuItemModel } from '../shared/menu/menu-item/models/link.model';\nimport { ThemedCollectionPageComponent } from './themed-collection-page.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: COLLECTION_CREATE_PATH,\n        component: CreateCollectionPageComponent,\n        canActivate: [AuthenticatedGuard, CreateCollectionPageGuard]\n      },\n      {\n        path: ':id',\n        resolve: {\n          dso: CollectionPageResolver,\n          breadcrumb: CollectionBreadcrumbResolver\n        },\n        runGuardsAndResolvers: 'always',\n        children: [\n          {\n            path: COLLECTION_EDIT_PATH,\n            loadChildren: () => import('./edit-collection-page/edit-collection-page.module')\n              .then((m) => m.EditCollectionPageModule),\n            canActivate: [CollectionPageAdministratorGuard]\n          },\n          {\n            path: 'delete',\n            pathMatch: 'full',\n            component: DeleteCollectionPageComponent,\n            canActivate: [AuthenticatedGuard],\n          },\n          {\n            path: ITEMTEMPLATE_PATH,\n            component: EditItemTemplatePageComponent,\n            canActivate: [AuthenticatedGuard],\n            resolve: {\n              item: ItemTemplatePageResolver,\n              breadcrumb: I18nBreadcrumbResolver\n            },\n            data: { title: 'collection.edit.template.title', breadcrumbKey: 'collection.edit.template' }\n          },\n          {\n            path: '',\n            component: ThemedCollectionPageComponent,\n            pathMatch: 'full',\n          }\n        ],\n        data: {\n          menu: {\n            public: [{\n              id: 'statistics_collection_:id',\n              active: true,\n              visible: true,\n              model: {\n                type: MenuItemType.LINK,\n                text: 'menu.section.statistics',\n                link: 'statistics/collections/:id/',\n              } as LinkMenuItemModel,\n            }],\n          },\n        },\n      },\n    ])\n  ],\n  providers: [\n    CollectionPageResolver,\n    ItemTemplatePageResolver,\n    CollectionBreadcrumbResolver,\n    DSOBreadcrumbsService,\n    LinkService,\n    CreateCollectionPageGuard,\n    CollectionPageAdministratorGuard\n  ]\n})\nexport class CollectionPageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '../shared/shared.module';\n\nimport { CollectionPageComponent } from './collection-page.component';\nimport { CollectionPageRoutingModule } from './collection-page-routing.module';\nimport { CreateCollectionPageComponent } from './create-collection-page/create-collection-page.component';\nimport { DeleteCollectionPageComponent } from './delete-collection-page/delete-collection-page.component';\nimport { EditItemTemplatePageComponent } from './edit-item-template-page/edit-item-template-page.component';\nimport { EditItemPageModule } from '../item-page/edit-item-page/edit-item-page.module';\nimport { CollectionItemMapperComponent } from './collection-item-mapper/collection-item-mapper.component';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { StatisticsModule } from '../statistics/statistics.module';\nimport { CollectionFormModule } from './collection-form/collection-form.module';\nimport { ThemedCollectionPageComponent } from './themed-collection-page.component';\nimport { ComcolModule } from '../shared/comcol/comcol.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    CollectionPageRoutingModule,\n    StatisticsModule.forRoot(),\n    EditItemPageModule,\n    CollectionFormModule,\n    ComcolModule\n  ],\n  declarations: [\n    CollectionPageComponent,\n    ThemedCollectionPageComponent,\n    CreateCollectionPageComponent,\n    DeleteCollectionPageComponent,\n    EditItemTemplatePageComponent,\n    CollectionItemMapperComponent\n  ],\n  providers: [\n    SearchService,\n  ]\n})\nexport class CollectionPageModule {\n\n}\n","<ng-template #vcr></ng-template>\n"]}