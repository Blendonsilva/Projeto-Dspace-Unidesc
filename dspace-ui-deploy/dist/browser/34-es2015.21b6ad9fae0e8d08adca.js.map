{"version":3,"sources":["webpack:///src/app/shared/comcol/comcol-forms/edit-comcol-page/edit-comcol-page.component.html","webpack:///src/app/collection-page/edit-collection-page/edit-collection-page.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-metadata/collection-metadata.component.html","webpack:///src/app/collection-page/edit-collection-page/collection-metadata/collection-metadata.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-roles/collection-roles.component.html","webpack:///src/app/collection-page/edit-collection-page/collection-roles/collection-roles.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-source/collection-source-controls/collection-source-controls.component.html","webpack:///src/app/collection-page/edit-collection-page/collection-source/collection-source-controls/collection-source-controls.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-source/collection-source.component.html","webpack:///src/app/collection-page/edit-collection-page/collection-source/collection-source.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-curate/collection-curate.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-curate/collection-curate.component.html","webpack:///src/app/collection-page/edit-collection-page/collection-authorizations/collection-authorizations.component.ts","webpack:///src/app/collection-page/edit-collection-page/collection-authorizations/collection-authorizations.component.html","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/collection-administrator.guard.ts","webpack:///src/app/collection-page/edit-collection-page/edit-collection-page.routing.module.ts","webpack:///src/app/collection-page/edit-collection-page/edit-collection-page.module.ts"],"names":["EditCollectionPageComponent","router","route","super","type","getPageUrl","collection","id","CollectionMetadataComponent","collectionDataService","itemTemplateService","notificationsService","translate","objectCache","requestService","frontendURL","ngOnInit","this","initTemplateItem","itemTemplateRD$","dsoRD$","pipe","switchMap","findByCollectionID","uuid","addItemTemplate","collection$","template$","create","templateHref$","getCollectionEndpoint","combineLatest","subscribe","template","templateHref","setStaleByHrefSubstring","navigate","deleteItemTemplate","deleteByCollectionID","tap","success","remove","self","get","error","onSubmit","navigateToHomePage","CollectionRolesComponent","constructor","parent","data","first","map","dso","comcolRoles$","name","href","_links","adminGroup","submittersGroup","itemReadGroup","bitstreamReadGroup","workflowGroups","CollectionSourceControlsComponent","scriptDataService","processDataService","collectionService","translateService","httpClient","bitstreamService","subs","testConfigRunning$","BehaviorSubject","importRunning$","reImportRunning$","contentSource$","findByHref","getContentSource","testConfiguration","contentSource","next","push","invoke","value","oaiSource","Serialize","oaiSetId","g","rd","hasFailed","filter","hasSucceeded","payload","findById","processId","isStale","process","processStatus","toString","COMPLETED","FAILED","setTimeout","output","bitstream","content","responseType","replaceAll","RegExp","info","importNow","resetAndReimport","ngOnDestroy","forEach","sub","unsubscribe","CollectionSourceComponent","objectUpdatesService","location","formService","LABEL_KEY_PREFIX","ERROR_KEY_PREFIX","OPTIONS_KEY_PREFIX","oaiSourceModel","required","validators","errorMessages","oaiSetIdModel","metadataConfigIdModel","harvestTypeModel","options","Metadata","MetadataAndRef","MetadataAndBitstreams","inputModels","formModel","D","group","formLayout","grid","host","metadataConfigId","harvestType","option","oaiSetContainer","oaiSourceContainer","harvestTypeContainer","harvestTypeNone","None","previouslySelectedHarvestType","displayedNotifications","notificationsPrefix","discardTimeOut","environment","edit","undoTimeout","url","indexOf","substr","formGroup","createFormGroup","collectionRD$","col","initializeOriginalContentSource","updateFieldTranslations","onLangChange","initialHarvestType","initializeMetadataConfigs","initialContentSource","cloneDeep","initialize","Date","update$","getFieldUpdates","updates","updateSub","update","field","configId","metadataConfigs","patchValue","metadataConfig","Object","assign","label","length","fieldModel","updateFieldTranslation","instant","keys","key","onChange","event","updateContentSourceField","model","saveFieldUpdate","getHarvesterEndpoint","take","endpoint","removeByHrefSubstring","updateContentSource","result","clearNotifications","getNotificationTitle","getNotificationContent","onCancel","back","isValid","valid","changeExternalSource","updateHarvestType","saveAddFieldUpdate","notification","CollectionCurateComponent","dsoNameService","collectionName$","getName","CollectionAuthorizationsComponent","CollectionAdministratorGuard","authorizationService","authService","getFeatureID","state","IsCollectionAdmin","EditCollectionPageRoutingModule","forChild","path","resolve","breadcrumb","breadcrumbKey","component","canActivate","children","redirectTo","pathMatch","title","hideReturnButton","showBreadcrumbs","resourcePolicyTarget","resourcePolicy","EditCollectionPageModule"],"mappings":"mUAaU,yCACE,kFAGE,yB,qCACF,8BACF,uE,0DAJK,uHAA6C,yDAE9C,mK,yBASF,wC,iCACE,+EAAkC,yB,qCACpC,+B,uDAF6B,wHACO,2ICdzC,Y,MAAMA,UAAoC,IAG/C,YACYC,EACAC,GAEVC,MAAMF,EAAQC,GAHJ,KAAAD,SACA,KAAAC,QAJZ,KAAAE,KAAO,aAaPC,WAAWC,GACT,OAAO,YAAuBA,EAAWC,K,6CAfhCP,GAA2B,8E,mDAA3BA,EAA2B,uoB,GAAA,MDbxC,yCACE,yEACE,2EACE,6EACE,4EAAI,yB,sCAAqC,8BACzC,+EACE,iF,kCAEE,8EAA6B,0B,sCAAqC,8BACtE,qEACF,mEACA,+EACE,gFACE,oFAOF,qEACA,iFACE,oFACE,wFACF,uEACA,oFACE,sFAGF,uEACF,qEACF,mEACF,iEACF,+DACF,6DACA,gC,gBA/BY,mHAGC,+MAC4B,6HAKV,yEAaf,qF,sECbT,G,sQCVH,4CAAiE,0IAC/D,sEACA,8EAAiC,yB,qCAA2D,8BAC9F,gE,MADmC,gJ,kEAEnC,6CAA+D,6IAC7D,uEACA,8EAAiC,yB,qCAA8D,8BACjG,gE,MADmC,mJ,yBAEnC,6C,iCAEE,uEACA,8EAAiC,yB,qCAA4D,8BAC/F,iE,wDAHQ,iJAE2B,iJ,yBAdvC,yCACE,yEAAO,yB,qCAAiD,8BACxD,yEACE,gFAIA,iFAIA,kFAKF,+DACF,8D,qBAhBS,+HAEI,oFAIA,qFAIA,sFCaN,Y,MAAMQ,UAAoC,IAS/C,YACYC,EACAC,EACAT,EACAC,EACAS,EACAC,EACAC,EACAC,GAEVX,MAAMM,EAAuBR,EAAQC,EAAOS,EAAsBC,GATxD,KAAAH,wBACA,KAAAC,sBACA,KAAAT,SACA,KAAAC,QACA,KAAAS,uBACA,KAAAC,YACA,KAAAC,cACA,KAAAC,iBAhBF,KAAAC,YAAc,gBACd,KAAAX,KAAO,IAAWA,KAoB5BY,WACEb,MAAMa,WACNC,KAAKC,mBAMPA,mBACED,KAAKE,gBAAkBF,KAAKG,OAAOC,KACjC,cACA,OAAAC,EAAA,GAAWhB,GAA2BW,KAAKP,oBAAoBa,mBAAmBjB,EAAWkB,QAOjGC,kBACE,MAAMC,EAAcT,KAAKG,OAAOC,KAC9B,eAEIM,EAAYD,EAAYL,KAC5B,OAAAC,EAAA,GAAWhB,GAA2BW,KAAKP,oBAAoBkB,OAAO,IAAI,IAAQtB,EAAWkB,MAAMH,KACjG,iBAGEQ,EAAgBH,EAAYL,KAChC,OAAAC,EAAA,GAAWhB,GAAeW,KAAKP,oBAAoBoB,sBAAsBxB,EAAWC,MAGtF,OAAAwB,EAAA,GAAwBL,EAAaC,EAAWE,GAAeG,UAAUA,EAAE1B,EAAY2B,EAAUC,MAC/FjB,KAAKH,eAAeqB,wBAAwBD,GAC5CjB,KAAKhB,OAAOmC,SAAS,CAAC,YAA+B9B,EAAWkB,UAOpEa,qBACE,MAAMX,EAAcT,KAAKG,OAAOC,KAC9B,eAEIM,EAAYD,EAAYL,KAC5B,OAAAC,EAAA,GAAWhB,GAA2BW,KAAKP,oBAAoBa,mBAAmBjB,EAAWkB,MAAMH,KACjG,iBAGEQ,EAAgBH,EAAYL,KAChC,OAAAC,EAAA,GAAWhB,GAAeW,KAAKP,oBAAoBoB,sBAAsBxB,EAAWC,MAGtF,OAAAwB,EAAA,GAAwBL,EAAaC,EAAWE,GAAeR,KAC7D,OAAAC,EAAA,KAAYhB,EAAY2B,EAAUC,KACzBjB,KAAKP,oBAAoB4B,qBAAqBL,EAAU3B,EAAWkB,MAAMH,KAC9E,OAAAkB,EAAA,GAAKC,IACCA,IACFvB,KAAKJ,YAAY4B,OAAOP,GACxBjB,KAAKJ,YAAY4B,OAAOR,EAASS,MACjCzB,KAAKH,eAAeqB,wBAAwBF,EAASS,MACrDzB,KAAKH,eAAeqB,wBAAwBD,GAC5CjB,KAAKH,eAAeqB,wBAAwB7B,EAAWoC,YAK/DV,UAAWQ,IACPA,EACFvB,KAAKN,qBAAqB6B,QAAQ,KAAMvB,KAAKL,UAAU+B,IAAI,0DAE3D1B,KAAKN,qBAAqBiC,MAAM,KAAM3B,KAAKL,UAAU+B,IAAI,wDAE3D1B,KAAKC,sB,6CA/FEV,GAA2B,kT,mDAA3BA,EAA2B,kmB,GAAA,MDxBxC,4C,iCAkBA,sFACoB,2DAAc,EAAAqC,SAAA,KAAd,CAA+B,0BACvB,EAAAC,uBADR,CAA+B,4BAErB,EAAAA,wB,iCAAsB,8BACpD,+B,gBAtBmC,qFAkBf,iI,kECMb,G,iECxBP,oD,iCAKA,6D,0DAHE,+EAA2B,iBCctB,Y,MAAMC,EAcXC,YACY9C,GAAA,KAAAA,QAIZc,WACEC,KAAKG,OAASH,KAAKf,MAAM+C,OAAOC,KAAK7B,KACnC,OAAA8B,EAAA,KACA,OAAAC,EAAA,GAAKF,GAASA,EAAKG,MAGrBpC,KAAKS,YAAcT,KAAKG,OAAOC,KAC7B,cACA,eAGFJ,KAAKqC,aAAerC,KAAKS,YAAYL,KACnC,OAAA+B,EAAA,GAAK9C,GAAe,CAClB,CACEiD,KAAM,mBACNC,KAAMlD,EAAWmD,OAAOC,WAAWF,MAErC,CACED,KAAM,aACNC,KAAMlD,EAAWmD,OAAOE,gBAAgBH,MAE1C,CACED,KAAM,YACNC,KAAMlD,EAAWmD,OAAOG,cAAcJ,MAExC,CACED,KAAM,iBACNC,KAAMlD,EAAWmD,OAAOI,mBAAmBL,SAE1ClD,EAAWmD,OAAOK,mB,6CAhDhBf,GAAwB,wC,mDAAxBA,EAAwB,2JDhBrC,sD,iCAMA,+B,KALyB,qF,sDCelB,G,yQCIC,4CAEQ,0LACJ,kFAAM,yB,qCAAwD,8BAClE,oE,gDAHQ,mDAEE,wI,uBAEV,4CAEI,gFACA,kFAAM,yB,qCAAyD,8BACnE,qE,MAHQ,yCAEE,yI,mEAEV,6CAEQ,oIACJ,qFAAiC,yB,qCAA0D,8BAC/F,oE,gDAHQ,mDAE6B,0I,uBAErC,6CAEI,gFACA,qFAAiC,yB,qCAA2D,8BAChG,qE,MAHQ,yCAE6B,2I,mEAErC,6CAEQ,2IACJ,qFAAiC,yB,qCAA+D,8BACpG,oE,gDAHQ,mDAE6B,oJ,uBAErC,6CAEI,gFACA,qFAAiC,yB,qCAAgE,8BACrG,qE,MAHQ,yCAE6B,qJ,0BA/CzC,yCACI,4EAAI,yB,qCAAmD,8BACvD,6EACI,oFAA+B,yB,sCAA2D,8BAC1F,oFAAM,0BAAgC,8BAC1C,qEACA,+EACI,sFAA+B,0B,sCAA0D,8BACzF,oFAAM,0B,sCAAsI,8BAChJ,qEACA,+EACI,sFAA+B,0B,sCAAyD,8BACxF,oFAAM,0B,sCAAoH,8BAC9H,qEACA,+EACI,sFAA+B,0B,sCAA4D,8BAC3F,oFAAM,0B,sCAAgI,8BAC1I,qEAEA,yF,kCAKA,uF,kCAKA,uF,kCAKA,uF,kCAKA,uF,kCAKA,uF,kCAOJ,sE,mFAlDQ,iIAE+B,4IACzB,2FAGyB,2IACzB,gNAGyB,0IACzB,8LAGyB,6IACzB,0MAGD,sHAKA,qHAKA,kHAKA,iHAKA,oHAKA,oH,0BA7CjB,uCACI,gFAoDJ,6D,4CApDkC,4EC+B3B,a,MAAMgB,EAwBXf,YAAoBgB,EACAC,EACAnD,EACAH,EACAuD,EACAC,EACAC,EACAC,GAPA,KAAAL,oBACA,KAAAC,qBACA,KAAAnD,iBACA,KAAAH,uBACA,KAAAuD,oBACA,KAAAC,mBACA,KAAAC,aACA,KAAAC,mBAbZ,KAAAC,KAAuB,GAE/B,KAAAC,mBAAqB,IAAIC,EAAA,GAAgB,GACzC,KAAAC,eAAiB,IAAID,EAAA,GAAgB,GACrC,KAAAE,iBAAmB,IAAIF,EAAA,GAAgB,GAavCxD,WAEEC,KAAK0D,eAAiB1D,KAAKiD,kBAAkBU,WAAW3D,KAAKX,WAAWmD,OAAOf,KAAKc,MAAM,GAAOnC,KAC/F,cACA,OAAAC,EAAA,GAAWhB,GAAeW,KAAKiD,kBAAkBW,iBAAiBvE,EAAWkB,MAAM,IACnF,eAQJsD,kBAAkBC,GAChB9D,KAAKsD,mBAAmBS,MAAK,GAC7B/D,KAAKqD,KAAKW,KAAKhE,KAAK+C,kBAAkBkB,OAAO,UAAW,CACtD,CAAC3B,KAAM,KAAM4B,MAAO,MACpB,CAAC5B,KAAM,KAAM4B,MAAOJ,EAAcK,WAClC,CAAC7B,KAAM,KAAM4B,OAAMA,IAAK,KAA6BE,UAAUN,EAAcO,YAC5E,IAAIjE,KACL,SAAAkE,EAAA,GACA,OAAAhD,EAAA,GAAKiD,IACCA,EAAGC,YAELxE,KAAKN,qBAAqBiC,MAAM3B,KAAKkD,iBAAiBxB,IAAI,iDAC1D1B,KAAKsD,mBAAmBS,MAAK,MAIjC,OAAAU,EAAA,GAAQF,GAAOA,EAAGG,cAAgB,YAASH,EAAGI,UAC9C,OAAAtE,EAAA,GAAWkE,GAAOvE,KAAKgD,mBAAmB4B,SAASL,EAAGI,QAAQE,WAAW,IACzE,cACA,OAAAJ,EAAA,GAAQF,IAAQA,EAAGO,UAAYP,EAAGG,cAAgBH,EAAGC,YACrD,OAAArC,EAAA,GAAKoC,GAAOA,EAAGI,SACf,eACA5D,UAAWgE,IACLA,EAAQC,cAAcC,aAAe,IAAc,IAAcC,WAAWD,YAC9EF,EAAQC,cAAcC,aAAe,IAAc,IAAcE,QAAQF,YAEzEG,WAAWA,KACTpF,KAAKH,eAAeqB,wBAAwB6D,EAAQvC,OAAOf,KAAKc,OAC/D,KAEDwC,EAAQC,cAAcC,aAAe,IAAc,IAAcE,QAAQF,aAC3EjF,KAAKN,qBAAqBiC,MAAM3B,KAAKkD,iBAAiBxB,IAAI,2CAC1D1B,KAAKsD,mBAAmBS,MAAK,IAE3BgB,EAAQC,cAAcC,aAAe,IAAc,IAAcC,WAAWD,aAC9EjF,KAAKoD,iBAAiBO,WAAWoB,EAAQvC,OAAO6C,OAAO9C,MAAMnC,KAAK,eAAsCW,UAAWuE,IACjHtF,KAAKmD,WAAWzB,IAAI4D,EAAU9C,OAAO+C,QAAQhD,KAAM,CAACiD,aAAc,SAASzE,UAAWkB,IACpF,MAAMoD,EAASpD,EAAKwD,WAAW,IAAIC,OAAO,YAAa,KAAM,MAC1DD,WAAW,yBAA0B,IACrCA,WAAW,2BAA4B,IAC1CzF,KAAKN,qBAAqBiG,KAAK3F,KAAKkD,iBAAiBxB,IAAI,6CAA8C2D,OAG3GrF,KAAKsD,mBAAmBS,MAAK,OASrC6B,YACE5F,KAAKwD,eAAeO,MAAK,GACzB/D,KAAKqD,KAAKW,KAAKhE,KAAK+C,kBAAkBkB,OAAO,UAAW,CACtD,CAAC3B,KAAM,KAAM4B,MAAO,MACpB,CAAC5B,KAAM,KAAM4B,MAAOlE,KAAKX,WAAWkB,OACnC,IACAH,KACC,SAAAkE,EAAA,GACA,OAAAhD,EAAA,GAAKiD,IACCA,EAAGC,WACLxE,KAAKN,qBAAqBiC,MAAM3B,KAAKkD,iBAAiBxB,IAAI,mDAC1D1B,KAAKwD,eAAeO,MAAK,IAEzB/D,KAAKN,qBAAqB6B,QAAQvB,KAAKkD,iBAAiBxB,IAAI,uDAGhE,OAAA+C,EAAA,GAAQF,GAAOA,EAAGG,cAAgB,YAASH,EAAGI,UAC9C,OAAAtE,EAAA,GAAWkE,GAAOvE,KAAKgD,mBAAmB4B,SAASL,EAAGI,QAAQE,WAAW,IACzE,cACA,OAAAJ,EAAA,GAAQF,IAAQA,EAAGO,UAAYP,EAAGG,cAAgBH,EAAGC,YACrD,OAAArC,EAAA,GAAKoC,GAAOA,EAAGI,SACf,eACA5D,UAAWgE,IACLA,EAAQC,cAAcC,aAAe,IAAc,IAAcC,WAAWD,YAC9EF,EAAQC,cAAcC,aAAe,IAAc,IAAcE,QAAQF,YAEzEG,WAAWA,KACTpF,KAAKH,eAAeqB,wBAAwB6D,EAAQvC,OAAOf,KAAKc,MAChEvC,KAAKH,eAAeqB,wBAAwBlB,KAAKX,WAAWmD,OAAOf,KAAKc,OACvE,KAEDwC,EAAQC,cAAcC,aAAe,IAAc,IAAcE,QAAQF,aAC3EjF,KAAKN,qBAAqBiC,MAAM3B,KAAKkD,iBAAiBxB,IAAI,6CAC1D1B,KAAKwD,eAAeO,MAAK,IAEvBgB,EAAQC,cAAcC,aAAe,IAAc,IAAcC,WAAWD,aAC9EjF,KAAKN,qBAAqB6B,QAAQvB,KAAKkD,iBAAiBxB,IAAI,gDAC5D1B,KAAKH,eAAeqB,wBAAwBlB,KAAKX,WAAWmD,OAAOf,KAAKc,MACxEvC,KAAKwD,eAAeO,MAAK,OASnC8B,mBACE7F,KAAKyD,iBAAiBM,MAAK,GAC3B/D,KAAKqD,KAAKW,KAAKhE,KAAK+C,kBAAkBkB,OAAO,UAAW,CACtD,CAAC3B,KAAM,KAAM4B,MAAO,MACpB,CAAC5B,KAAM,KAAM4B,MAAOlE,KAAKX,WAAWkB,OACnC,IACAH,KACC,SAAAkE,EAAA,GACA,OAAAhD,EAAA,GAAKiD,IACCA,EAAGC,WACLxE,KAAKN,qBAAqBiC,MAAM3B,KAAKkD,iBAAiBxB,IAAI,kDAC1D1B,KAAKyD,iBAAiBM,MAAK,IAE3B/D,KAAKN,qBAAqB6B,QAAQvB,KAAKkD,iBAAiBxB,IAAI,sDAGhE,OAAA+C,EAAA,GAAQF,GAAOA,EAAGG,cAAgB,YAASH,EAAGI,UAC9C,OAAAtE,EAAA,GAAWkE,GAAOvE,KAAKgD,mBAAmB4B,SAASL,EAAGI,QAAQE,WAAW,IACzE,cACA,OAAAJ,EAAA,GAAQF,IAAQA,EAAGO,UAAYP,EAAGG,cAAgBH,EAAGC,YACrD,OAAArC,EAAA,GAAKoC,GAAOA,EAAGI,SACf,eACA5D,UAAWgE,IACLA,EAAQC,cAAcC,aAAe,IAAc,IAAcC,WAAWD,YAC9EF,EAAQC,cAAcC,aAAe,IAAc,IAAcE,QAAQF,YAEzEG,WAAWA,KACTpF,KAAKH,eAAeqB,wBAAwB6D,EAAQvC,OAAOf,KAAKc,MAChEvC,KAAKH,eAAeqB,wBAAwBlB,KAAKX,WAAWmD,OAAOf,KAAKc,OACvE,KAEDwC,EAAQC,cAAcC,aAAe,IAAc,IAAcE,QAAQF,aAC3EjF,KAAKN,qBAAqBiC,MAAM3B,KAAKkD,iBAAiBxB,IAAI,4CAC1D1B,KAAKyD,iBAAiBM,MAAK,IAEzBgB,EAAQC,cAAcC,aAAe,IAAc,IAAcC,WAAWD,aAC9EjF,KAAKN,qBAAqB6B,QAAQvB,KAAKkD,iBAAiBxB,IAAI,+CAC5D1B,KAAKH,eAAeqB,wBAAwBlB,KAAKX,WAAWmD,OAAOf,KAAKc,MACxEvC,KAAKyD,iBAAiBM,MAAK,OAMrC+B,cACE9F,KAAKqD,KAAK0C,QAASC,IACb,YAASA,IACXA,EAAIC,iB,6CAlMCnD,GAAiC,oT,mDAAjCA,EAAiC,8wBDhC9C,4C,uCAAM,qF,gLCgCC,G,8GC9BC,6CAEQ,iI,iCAAoB,mCAExB,oFAAiC,yB,qCAAyD,8BAC9F,oE,+CAJQ,sFAG6B,8I,mEAErC,6CACQ,mIAAsB,mCAE1B,oFAAiC,yB,qCAA2D,8BAChG,oE,MADqC,gJ,mEAUzC,0CACI,kFACoE,+IADpE,8BAEA,kFACiC,yB,qCAAwD,8BAC7F,gE,+CAHW,8IAE0B,sI,uBAErC,4C,2CAAmC,8F,uBACnC,sCAA8E,yB,qCAAyD,+B,MAAzD,uI,mEAG9E,8CAOS,uIAA6B,4GAA7B,CAA6B,yGAEP,8B,+CARtB,gEAAsC,wBAAtC,CAAsC,wBAAtC,CAAsC,0BAAtC,CAAsC,mBAAtC,CAAsC,qB,mEAcnC,6CAEQ,kI,iCAAoB,mCAExB,4FAAiC,yB,qCAAyD,8BAC9F,4E,gDAJQ,sFAG6B,8I,mEAErC,6CACQ,oIAAsB,mCAE1B,4FAAiC,yB,qCAA2D,8BAChG,4E,MADqC,gJ,mEAbrD,0CACI,4EACI,gFACI,oFACI,6F,iCAMA,+F,kCAKA,4FAEQ,kI,kCAAqB,mCAEzB,8FAAiC,0B,sCAAsD,8BAC3F,6EACJ,yEACJ,qEACJ,iEACJ,6D,+CApBiD,kHAMA,kHAMzB,+NAG6B,6ICpB9C,a,MAAMoD,UAAkC,IA6L7C,YAA0BC,EACAzG,EACG0G,EACAC,EACA1G,EACAV,EACAD,EACAiE,EACApD,GAC3BX,MAAMiH,EAAsBzG,EAAsBC,GAT1B,KAAAwG,uBACA,KAAAzG,uBACG,KAAA0G,WACA,KAAAC,cACA,KAAA1G,YACA,KAAAV,QACA,KAAAD,SACA,KAAAiE,oBACA,KAAApD,iBA5K7B,KAAAyG,iBAAmB,oCAKnB,KAAAC,iBAAmB,2CAKnB,KAAAC,mBAAqB,4CAKrB,KAAAC,eAAiB,IAAI,IAAkB,CACrCnH,GAAI,YACJgD,KAAM,YACNoE,UAAU,EACVC,WAAY,CACVD,SAAU,MAEZE,cAAe,CACbF,SAAU,yDAOd,KAAAG,cAAgB,IAAI,IAAkB,CACpCvH,GAAI,WACJgD,KAAM,aAMR,KAAAwE,sBAAwB,IAAI,IAAmB,CAC7CxH,GAAI,mBACJgD,KAAM,qBAMR,KAAAyE,iBAAmB,IAAI,IAA+B,CACpDzH,GAAI,cACJgD,KAAM,cACN0E,QAAS,CACP,CACE9C,MAAO,IAAyB+C,UAElC,CACE/C,MAAO,IAAyBgD,gBAElC,CACEhD,MAAO,IAAyBiD,0BAQtC,KAAAC,YAAc,CAACpH,KAAKyG,eAAgBzG,KAAK6G,cAAe7G,KAAK8G,sBAAuB9G,KAAK+G,kBAMzF,KAAAM,UAAuC,CACrC,IAAI,EAAAC,EAAsB,CACxBhI,GAAI,qBACJiI,MAAO,CACLvH,KAAKyG,kBAGT,IAAI,EAAAa,EAAsB,CACxBhI,GAAI,kBACJiI,MAAO,CACLvH,KAAK6G,cACL7G,KAAK8G,yBAGT,IAAI,EAAAQ,EAAsB,CACxBhI,GAAI,uBACJiI,MAAO,CACLvH,KAAK+G,qBAQX,KAAAS,WAAgC,CAC9BrD,UAAW,CACTsD,KAAM,CACJC,KAAM,0BAGVrD,SAAU,CACRoD,KAAM,CACJC,KAAM,gCAGVC,iBAAkB,CAChBF,KAAM,CACJC,KAAM,gCAGVE,YAAa,CACXH,KAAM,CACJC,KAAM,SACNG,OAAQ,0BAGZC,gBAAiB,CACfL,KAAM,CACJC,KAAM,QAGVK,mBAAoB,CAClBN,KAAM,CACJC,KAAM,QAGVM,qBAAsB,CACpBP,KAAM,CACJC,KAAM,SAkBZ,KAAAO,gBAAkB,IAAyBC,KAO3C,KAAAC,8BAAgC,IAAyBlB,SAOzD,KAAAmB,uBAA0C,GAiB1CrI,WACEC,KAAKqI,oBAAsB,6CAC3BrI,KAAKsI,eAAiBC,EAAA,EAAYlJ,WAAWmJ,KAAKC,YAClDzI,KAAK0I,IAAM1I,KAAKhB,OAAO0J,IACnB1I,KAAK0I,IAAIC,QAAQ,KAAO,IAC1B3I,KAAK0I,IAAM1I,KAAK0I,IAAIE,OAAO,EAAG5I,KAAK0I,IAAIC,QAAQ,OAEjD3I,KAAK6I,UAAY7I,KAAKqG,YAAYyC,gBAAgB9I,KAAKqH,WACvDrH,KAAK+I,cAAgB/I,KAAKf,MAAM+C,OAAOC,KAAK7B,KAAK,OAAA8B,EAAA,KAAS,OAAAC,EAAA,GAAKF,GAASA,EAAKG,MAE7EpC,KAAK+I,cAAc3I,KACjB,cACA,OAAA+B,EAAA,GAAK6G,GAAQA,EAAIrE,QAAQpE,MACzB,OAAAF,EAAA,GAAWE,GAASP,KAAKiD,kBAAkBW,iBAAiBrD,IAC5D,SAAA+D,EAAA,IACAvD,UAAWwD,IACXvE,KAAKiJ,gCAAgC1E,EAAGI,WAG1C3E,KAAKkJ,0BACLlJ,KAAKL,UAAUwJ,aACZpI,UAAUA,KACTf,KAAKkJ,4BAOXD,gCAAgCnF,GAC9B9D,KAAK8D,cAAgBA,EACrB9D,KAAKoJ,mBAAqBtF,EAAc8D,YACxC5H,KAAKqJ,4BACL,MAAMC,EAAuB,SAAAC,UAAA,CAAUvJ,KAAK8D,eAC5C9D,KAAKmG,qBAAqBqD,WAAWxJ,KAAK0I,IAAK,CAACY,GAAuB,IAAIG,MAC3EzJ,KAAK0J,QAAU1J,KAAKmG,qBAAqBwD,gBAAgB3J,KAAK0I,IAAK,CAACY,IAAuBlJ,KACzF,OAAA+B,EAAA,GAAKyH,GAA0BA,EAAQN,EAAqB/I,QAE9DP,KAAK6J,UAAY7J,KAAK0J,QAAQ3I,UAAW+I,IACvC,GAAIA,EAAQ,CACV,MAAMC,EAAQD,EAAOC,MACrB,IAAIC,EACA,YAAShK,KAAK8D,gBAAkB,YAAW9D,KAAK8D,cAAcmG,mBAChED,EAAWhK,KAAK8D,cAAcmG,gBAAgB,GAAG3K,IAE/C,YAASyK,IAAU,YAASA,EAAMpC,oBACpCqC,EAAWD,EAAMpC,kBAEf,YAASoC,KACX/J,KAAK6I,UAAUqB,WAAW,CACxBnC,mBAAoB,CAClB5D,UAAW4F,EAAM5F,WAEnB2D,gBAAiB,CACfzD,SAAU0F,EAAM1F,SAChBsD,iBAAkBqC,GAEpBhC,qBAAsB,CACpBJ,YAAamC,EAAMnC,eAGvB5H,KAAK8D,cAAgB,SAAAyF,UAAA,CAAUQ,IAEjC/J,KAAK8D,cAAc6D,iBAAmBqC,KAQ5CX,4BACErJ,KAAK8G,sBAAsBE,QAAUhH,KAAK8D,cAAcmG,gBACrD9H,IAAKgI,GAAmCC,OAAOC,OAAO,CAAEnG,MAAOiG,EAAe7K,GAAIgL,MAAOH,EAAeG,SACvGtK,KAAK8G,sBAAsBE,QAAQuD,OAAS,GAC9CvK,KAAK6I,UAAUqB,WAAW,CACxBpC,gBAAiB,CACfH,iBAAkB3H,KAAK8G,sBAAsBE,QAAQ,GAAG9C,SASxDgF,0BACNlJ,KAAKoH,YAAYrB,QACdyE,IACCxK,KAAKyK,uBAAuBD,KAS1BC,uBAAuBD,GAC7BA,EAAWF,MAAQtK,KAAKL,UAAU+K,QAAQ1K,KAAKsG,iBAAmBkE,EAAWlL,IACzE,YAAWkL,EAAW7D,cACxB6D,EAAW5D,cAAgB,GAC3BwD,OAAOO,KAAKH,EAAW7D,YAAYZ,QAAS6E,IAC1CJ,EAAW5D,cAAcgE,GAAO5K,KAAKL,UAAU+K,QAAQ1K,KAAKuG,iBAAmBiE,EAAWlL,GAAK,IAAMsL,MAGrGJ,aAAsB,KACpB,YAAWA,EAAWxD,UACxBwD,EAAWxD,QAAQjB,QAAS8B,IACtB,YAAWA,EAAOyC,SACpBzC,EAAOyC,MAAQtK,KAAKL,UAAU+K,QAAQ1K,KAAKwG,mBAAqBgE,EAAWlL,GAAK,IAAMuI,EAAO3D,UAWvG2G,SAASC,GACP9K,KAAK+K,yBAAyBD,EAAME,OAAO,GAC3ChL,KAAKiL,kBAMPrJ,WAEE5B,KAAK+I,cAAc3I,KACjB,cACA,OAAA+B,EAAA,GAAK6G,GAAQA,EAAIrE,QAAQpE,MACzB,OAAAF,EAAA,GAAWE,GAASP,KAAKiD,kBAAkBiI,qBAAqB3K,IAChE,OAAA4K,EAAA,GAAK,IACLpK,UAAWqK,GAAapL,KAAKH,eAAewL,sBAAsBD,IACpEpL,KAAKH,eAAeqB,wBAAwBlB,KAAK8D,cAActB,OAAOf,KAAKc,MAE3EvC,KAAK+I,cAAc3I,KACjB,cACA,OAAA+B,EAAA,GAAK6G,GAAQA,EAAIrE,QAAQpE,MACzB,OAAAF,EAAA,GAAWE,GAASP,KAAKiD,kBAAkBqI,oBAAoB/K,EAAMP,KAAK8D,gBAC1E,OAAAqH,EAAA,GAAK,IACLpK,UAAWwK,IACP,YAAUA,EAAe3D,cAC3B5H,KAAKwL,qBACLxL,KAAKiJ,gCAAgCsC,GACrCvL,KAAKoI,uBAAuBpE,KAAKhE,KAAKN,qBAAqB6B,QAAQvB,KAAKyL,qBAAqB,SAAUzL,KAAK0L,uBAAuB,YAEnI1L,KAAKoI,uBAAuBpE,KAAKuH,KAQvCI,WACE3L,KAAKoG,SAASwF,OAMhBC,UACE,OAAQ7L,KAAK8D,cAAc8D,cAAgB,IAAyBM,MAASlI,KAAK6I,UAAUiD,MAM9FC,uBACM/L,KAAK8D,cAAc8D,cAAgB,IAAyBM,KAC9DlI,KAAK8D,cAAc8D,YAAc5H,KAAKmI,+BAEtCnI,KAAKmI,8BAAgCnI,KAAK8D,cAAc8D,YACxD5H,KAAK8D,cAAc8D,YAAc,IAAyBM,MAE5DlI,KAAKsL,qBAAoB,GAO3BA,oBAAoBU,GAClBhM,KAAKoH,YAAYrB,QACdyE,IACCxK,KAAK+K,yBAAyBP,EAAYwB,KAG9ChM,KAAKiL,kBAQPF,yBAAyBP,EAA+BwB,GAClD,YAASxB,EAAWtG,SAAYsG,EAAWlL,KAAOU,KAAK+G,iBAAiBzH,IAAO0M,KACjFhM,KAAK8D,cAAc0G,EAAWlL,IAAMkL,EAAWtG,OAOnD+G,kBACEjL,KAAKmG,qBAAqB8F,mBAAmBjM,KAAK0I,IAAK,SAAAa,UAAA,CAAUvJ,KAAK8D,gBAMxE0H,qBACExL,KAAKoI,uBAAuBrC,QAASmG,IACnClM,KAAKN,qBAAqB8B,OAAO0K,KAEnClM,KAAKoI,uBAAyB,GAMhCtC,cACM9F,KAAK6J,WACP7J,KAAK6J,UAAU5D,e,6CAhbRC,GAAyB,wV,mDAAzBA,EAAyB,kpC,GAAA,MDzCtC,yCACI,2EACI,qF,iCAMA,qF,iCAKA,mFAEQ,qDAAS,EAAAtE,c,kCAAY,mCAEzB,sFAAiC,0B,sCAAsD,8BAC3F,qEACJ,iEACA,0EAAI,0B,sCAAoD,8BACxD,gFAMA,uFACA,+EACJ,6DACA,0EACI,qFAUJ,6DACA,+EAyBA,oG,oEAKA,6DAEA,kC,gBAxEyC,mHAMA,kHAMzB,gOAG6B,4IAGrC,mIACE,8EAMO,+EACR,4JAGK,yKAWe,2IA0BrB,qHAAmC,0FAAnC,CAAmC,2F,iHC3BpC,G,yECzBA,a,MAAMuK,EAIXpK,YACU9C,EACAmN,GADA,KAAAnN,QACA,KAAAmN,iBAIVrM,WACEC,KAAKG,OAASH,KAAKf,MAAM+C,OAAOC,KAAK7B,KACnC,OAAA+K,EAAA,GAAK,GACL,OAAAhJ,EAAA,GAAKF,GAASA,EAAKG,MAGrBpC,KAAKqM,gBAAkBrM,KAAKG,OAAOC,KACjC,OAAAqE,EAAA,GAAQF,GAA+B,YAASA,IAChD,OAAApC,EAAA,GAAKoC,GACIvE,KAAKoM,eAAeE,QAAQ/H,EAAGI,Y,6CAnBjCwH,GAAyB,+E,mDAAzBA,EAAyB,sH,GAAA,MChBtC,yCACI,wEAAI,yB,sEAAiF,8BACrF,mF,iCAGJ,4DACA,gC,gBALQ,gNAEI,8I,uDDaL,G,iBEAA,a,MAAMI,EAYXxK,YACU9C,GAAA,KAAAA,QAOVc,WACEC,KAAKG,OAASH,KAAKf,MAAM+C,OAAOA,OAAOC,KAAK7B,KAAK,OAAA8B,EAAA,KAAS,OAAAC,EAAA,GAAKF,GAASA,EAAKG,O,6CArBpEmK,GAAiC,wC,mDAAjCA,EAAiC,8I,GAAA,MChB9C,yCACE,qF,iCACF,4DACA,+B,gBAFwB,mFAA6B,wG,mDDe9C,G,sIEDA,a,MAAMC,UAAqC,KAChDzK,YAAsB0K,EAA0DzN,EAA0B0N,GACxGxN,MAAMuN,EAAsBzN,EAAQ0N,GADhB,KAAAD,uBAA0D,KAAAzN,SAA0B,KAAA0N,cAO1GC,aAAa1N,EAA+B2N,GAC1C,OAAO,aAAa,KAAUC,oB,6CATrBL,GAA4B,2F,sDAA5BA,EAA4B,QAA5BA,EAA4B,qBAF3B,S,GAEP,GC2FA,S,MAAMM,G,6CAAAA,I,kDAAAA,I,uDALA,CACT,KACA,MACD,SApFQ,CACP,IAAaC,SAAS,CACpB,CACEC,KAAM,GACNC,QAAS,CACPC,WAAY,MAEdjL,KAAM,CAAEkL,cAAe,mBACvBC,UAAW,EACXC,YAAa,CAAC,IACdC,SAAU,CACR,CACEN,KAAM,GACNO,WAAY,WACZC,UAAW,QAEb,CACER,KAAM,WACNI,UAAW,EACXnL,KAAM,CACJwL,MAAO,sCACPC,kBAAkB,EAClBC,iBAAiB,IAGrB,CACEX,KAAM,QACNI,UAAW,EACXnL,KAAM,CAAEwL,MAAO,mCAAoCE,iBAAiB,IAEtE,CACEX,KAAM,SACNI,UAAW,GACXnL,KAAM,CAAEwL,MAAO,oCAAqCE,iBAAiB,IAEvE,CACEX,KAAM,SACNI,UAAW,GACXnL,KAAM,CAAEwL,MAAO,oCAAqCE,iBAAiB,IAOvE,CACEX,KAAM,iBACN/K,KAAM,CAAE0L,iBAAiB,GACzBL,SAAU,CACR,CACEN,KAAM,SACNC,QAAS,CACPW,qBAAsB,MAExBR,UAAW,KACXnL,KAAM,CAAEwL,MAAO,wCAEjB,CACET,KAAM,OACNC,QAAS,CACPY,eAAgB,MAElBT,UAAW,KACXnL,KAAM,CAAEwL,MAAO,sCAEjB,CACET,KAAM,GACNI,UAAW,GACXnL,KAAM,CAAEwL,MAAO,4CAA6CE,iBAAiB,MAInF,CACEX,KAAM,SACNI,UAAW,IACXnL,KAAM,CAAEwL,MAAO,yCAA0CC,kBAAkB,EAAMC,iBAAiB,Y,GAWvG,G,wDClEA,a,MAAMG,G,6CAAAA,I,kDAAAA,I,sDApBF,CACP,IACA,IACA,GACA,KACA,KACA,KACA,S,GAaG","file":"x","sourcesContent":["<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom\">\n        <h2>{{ type + '.edit.head' | translate }}</h2>\n        <div>\n          <a class=\"btn btn-danger\"\n             [routerLink]=\"((type === 'community') ? '/communities/' : '/collections/') + (dsoRD$ | async)?.payload.uuid + '/delete'\">\n            <i class=\"fas fa-trash\"></i> {{type + '.edit.delete' | translate}}</a>\n        </div>\n      </div>\n      <div class=\"pt-2\">\n        <ul class=\"nav nav-tabs justify-content-start mb-2\">\n          <li *ngFor=\"let page of pages\" class=\"nav-item\">\n            <a class=\"nav-link\"\n               [ngClass]=\"{'active' : page === currentPage}\"\n               [routerLink]=\"['./' + page]\">\n              {{ type + '.edit.tabs.' + page + '.head' | translate}}\n            </a>\n          </li>\n        </ul>\n        <div class=\"tab-pane active\">\n          <div class=\"mb-4\">\n            <router-outlet></router-outlet>\n          </div>\n          <div class=\"col-12 text-right\">\n            <a *ngIf=\"!hideReturnButton\" [routerLink]=\"getPageUrl((dsoRD$ | async)?.payload)\" class=\"btn btn-outline-secondary\">\n              <i class=\"fas fa-arrow-left\"></i> {{ type + '.edit.return' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EditComColPageComponent } from '../../shared/comcol/comcol-forms/edit-comcol-page/edit-comcol-page.component';\nimport { Collection } from '../../core/shared/collection.model';\nimport { getCollectionPageRoute } from '../collection-page-routing-paths';\n\n/**\n * Component that represents the page where a user can edit an existing Collection\n */\n@Component({\n  selector: 'ds-edit-collection',\n  templateUrl: '../../shared/comcol/comcol-forms/edit-comcol-page/edit-comcol-page.component.html'\n})\nexport class EditCollectionPageComponent extends EditComColPageComponent<Collection> {\n  type = 'collection';\n\n  public constructor(\n    protected router: Router,\n    protected route: ActivatedRoute\n  ) {\n    super(router, route);\n  }\n\n  /**\n   * Get the collection page url\n   * @param collection The collection for which the url is requested\n   */\n  getPageUrl(collection: Collection): string {\n    return getCollectionPageRoute(collection.id);\n  }\n}\n","<div class=\"container-fluid mb-2\" *ngVar=\"(itemTemplateRD$ | async) as itemTemplateRD\">\n  <label>{{ 'collection.edit.template.label' | translate}}</label>\n  <div class=\"button-row\">\n    <button *ngIf=\"!itemTemplateRD?.payload\" class=\"btn btn-success\" (click)=\"addItemTemplate()\">\n      <i class=\"fas fa-plus\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.add-button\" | translate}}</span>\n    </button>\n    <button *ngIf=\"itemTemplateRD?.payload\" class=\"btn btn-danger\" (click)=\"deleteItemTemplate()\">\n      <i class=\"fas fa-trash-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.delete-button\" | translate}}</span>\n    </button>\n    <button *ngIf=\"itemTemplateRD?.payload\" class=\"btn btn-primary\"\n            [routerLink]=\"'/collections/' + (dsoRD$ | async)?.payload.uuid + '/itemtemplate'\">\n      <i class=\"fas fa-edit\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"collection.edit.template.edit-button\" | translate}}</span>\n    </button>\n  </div>\n</div>\n<ds-collection-form [dso]=\"(dsoRD$ | async)?.payload\"\n                    (submitForm)=\"onSubmit($event)\"\n                    (back)=\"navigateToHomePage()\"\n                    (finish)=\"navigateToHomePage()\"></ds-collection-form>\n","import { Component } from '@angular/core';\nimport { ComcolMetadataComponent } from '../../../shared/comcol/comcol-forms/edit-comcol-page/comcol-metadata/comcol-metadata.component';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ItemTemplateDataService } from '../../../core/data/item-template-data.service';\nimport { combineLatest as combineLatestObservable, Observable } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { getCollectionItemTemplateRoute } from '../../collection-page-routing-paths';\n\n/**\n * Component for editing a collection's metadata\n */\n@Component({\n  selector: 'ds-collection-metadata',\n  templateUrl: './collection-metadata.component.html',\n})\nexport class CollectionMetadataComponent extends ComcolMetadataComponent<Collection> {\n  protected frontendURL = '/collections/';\n  protected type = Collection.type;\n\n  /**\n   * The collection's item template\n   */\n  itemTemplateRD$: Observable<RemoteData<Item>>;\n\n  public constructor(\n    protected collectionDataService: CollectionDataService,\n    protected itemTemplateService: ItemTemplateDataService,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService,\n    protected objectCache: ObjectCacheService,\n    protected requestService: RequestService\n  ) {\n    super(collectionDataService, router, route, notificationsService, translate);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.initTemplateItem();\n  }\n\n  /**\n   * Initialize the collection's item template\n   */\n  initTemplateItem() {\n    this.itemTemplateRD$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((collection: Collection) => this.itemTemplateService.findByCollectionID(collection.uuid))\n    );\n  }\n\n  /**\n   * Add a new item template to the collection and redirect to the item template edit page\n   */\n  addItemTemplate() {\n    const collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    const template$ = collection$.pipe(\n      switchMap((collection: Collection) => this.itemTemplateService.create(new Item(), collection.uuid).pipe(\n        getFirstSucceededRemoteDataPayload(),\n      )),\n    );\n    const templateHref$ = collection$.pipe(\n      switchMap((collection) => this.itemTemplateService.getCollectionEndpoint(collection.id)),\n    );\n\n    combineLatestObservable(collection$, template$, templateHref$).subscribe(([collection, template, templateHref]) => {\n      this.requestService.setStaleByHrefSubstring(templateHref);\n      this.router.navigate([getCollectionItemTemplateRoute(collection.uuid)]);\n    });\n  }\n\n  /**\n   * Delete the item template from the collection\n   */\n  deleteItemTemplate() {\n    const collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n    );\n    const template$ = collection$.pipe(\n      switchMap((collection: Collection) => this.itemTemplateService.findByCollectionID(collection.uuid).pipe(\n        getFirstSucceededRemoteDataPayload(),\n      )),\n    );\n    const templateHref$ = collection$.pipe(\n      switchMap((collection) => this.itemTemplateService.getCollectionEndpoint(collection.id)),\n    );\n\n    combineLatestObservable(collection$, template$, templateHref$).pipe(\n      switchMap(([collection, template, templateHref]) => {\n        return this.itemTemplateService.deleteByCollectionID(template, collection.uuid).pipe(\n          tap((success: boolean) => {\n            if (success) {\n              this.objectCache.remove(templateHref);\n              this.objectCache.remove(template.self);\n              this.requestService.setStaleByHrefSubstring(template.self);\n              this.requestService.setStaleByHrefSubstring(templateHref);\n              this.requestService.setStaleByHrefSubstring(collection.self);\n            }\n          })\n        );\n      })\n    ).subscribe((success: boolean) => {\n      if (success) {\n        this.notificationsService.success(null, this.translate.get('collection.edit.template.notifications.delete.success'));\n      } else {\n        this.notificationsService.error(null, this.translate.get('collection.edit.template.notifications.delete.error'));\n      }\n      this.initTemplateItem();\n    });\n  }\n}\n","<ds-comcol-role\n  *ngFor=\"let comcolRole of comcolRoles$ | async\"\n  [dso]=\"collection$ | async\"\n  [comcolRole]=\"comcolRole\"\n>\n</ds-comcol-role>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { HALLink } from '../../../core/shared/hal-link.model';\n\n/**\n * Component for managing a collection's roles\n */\n@Component({\n  selector: 'ds-collection-roles',\n  templateUrl: './collection-roles.component.html',\n})\nexport class CollectionRolesComponent implements OnInit {\n\n  dsoRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The different roles for the collection, as an observable.\n   */\n  comcolRoles$: Observable<HALLink[]>;\n\n  /**\n   * The collection to manage, as an observable.\n   */\n  collection$: Observable<Collection>;\n\n  constructor(\n    protected route: ActivatedRoute,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      first(),\n      map((data) => data.dso),\n    );\n\n    this.collection$ = this.dsoRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    );\n\n    this.comcolRoles$ = this.collection$.pipe(\n      map((collection) => [\n        {\n          name: 'collection-admin',\n          href: collection._links.adminGroup.href,\n        },\n        {\n          name: 'submitters',\n          href: collection._links.submittersGroup.href,\n        },\n        {\n          name: 'item_read',\n          href: collection._links.itemReadGroup.href,\n        },\n        {\n          name: 'bitstream_read',\n          href: collection._links.bitstreamReadGroup.href,\n        },\n        ...collection._links.workflowGroups,\n      ]),\n    );\n  }\n}\n","<div *ngVar=\"(contentSource$ |async) as contentSource\">\n    <div class=\"container-fluid\" *ngIf=\"shouldShow\">\n        <h4>{{ 'collection.source.controls.head' | translate }}</h4>\n        <div>\n            <span class=\"font-weight-bold\">{{'collection.source.controls.harvest.status' | translate}}</span>\n            <span>{{contentSource?.harvestStatus}}</span>\n        </div>\n        <div>\n            <span class=\"font-weight-bold\">{{'collection.source.controls.harvest.start' | translate}}</span>\n            <span>{{contentSource?.harvestStartTime ? contentSource?.harvestStartTime : 'collection.source.controls.harvest.no-information'|translate }}</span>\n        </div>\n        <div>\n            <span class=\"font-weight-bold\">{{'collection.source.controls.harvest.last' | translate}}</span>\n            <span>{{contentSource?.message ? contentSource?.message : 'collection.source.controls.harvest.no-information'|translate }}</span>\n        </div>\n        <div>\n            <span class=\"font-weight-bold\">{{'collection.source.controls.harvest.message' | translate}}</span>\n            <span>{{contentSource?.lastHarvested ? contentSource?.lastHarvested : 'collection.source.controls.harvest.no-information'|translate }}</span>\n        </div>\n\n        <button *ngIf=\"!(testConfigRunning$ |async)\" class=\"btn btn-secondary\"\n                [disabled]=\"!(isEnabled)\"\n                (click)=\"testConfiguration(contentSource)\">\n            <span>{{'collection.source.controls.test.submit' | translate}}</span>\n        </button>\n        <button *ngIf=\"(testConfigRunning$ |async)\" class=\"btn btn-secondary\"\n                [disabled]=\"true\">\n            <span class=\"spinner-border spinner-border-sm spinner-button\" role=\"status\" aria-hidden=\"true\"></span>\n            <span>{{'collection.source.controls.test.running' | translate}}</span>\n        </button>\n        <button *ngIf=\"!(importRunning$ |async)\" class=\"btn btn-primary\"\n                [disabled]=\"!(isEnabled)\"\n                (click)=\"importNow()\">\n            <span class=\"d-none d-sm-inline\">{{'collection.source.controls.import.submit' | translate}}</span>\n        </button>\n        <button *ngIf=\"(importRunning$ |async)\" class=\"btn btn-primary\"\n                [disabled]=\"true\">\n            <span class=\"spinner-border spinner-border-sm spinner-button\" role=\"status\" aria-hidden=\"true\"></span>\n            <span class=\"d-none d-sm-inline\">{{'collection.source.controls.import.running' | translate}}</span>\n        </button>\n        <button *ngIf=\"!(reImportRunning$ |async)\" class=\"btn btn-primary\"\n                [disabled]=\"!(isEnabled)\"\n                (click)=\"resetAndReimport()\">\n            <span class=\"d-none d-sm-inline\">&nbsp;{{'collection.source.controls.reset.submit' | translate}}</span>\n        </button>\n        <button *ngIf=\"(reImportRunning$ |async)\" class=\"btn btn-primary\"\n                [disabled]=\"true\">\n            <span class=\"spinner-border spinner-border-sm spinner-button\" role=\"status\" aria-hidden=\"true\"></span>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{'collection.source.controls.reset.running' | translate}}</span>\n        </button>\n\n\n    </div>\n</div>","import { Component, Input, OnDestroy } from '@angular/core';\nimport { ScriptDataService } from '../../../../core/data/processes/script-data.service';\nimport { ContentSource } from '../../../../core/shared/content-source.model';\nimport { ProcessDataService } from '../../../../core/data/processes/process-data.service';\nimport {\n  getAllCompletedRemoteData,\n  getAllSucceededRemoteDataPayload,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload\n} from '../../../../core/shared/operators';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { hasValue, hasValueOperator } from '../../../../shared/empty.util';\nimport { ProcessStatus } from '../../../../process-page/processes/process-status.model';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { RequestService } from '../../../../core/data/request.service';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { Collection } from '../../../../core/shared/collection.model';\nimport { CollectionDataService } from '../../../../core/data/collection-data.service';\nimport { Process } from '../../../../process-page/processes/process.model';\nimport { TranslateService } from '@ngx-translate/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BitstreamDataService } from '../../../../core/data/bitstream-data.service';\nimport { ContentSourceSetSerializer } from '../../../../core/shared/content-source-set-serializer';\n\n/**\n * Component that contains the controls to run, reset and test the harvest\n */\n@Component({\n  selector: 'ds-collection-source-controls',\n  styleUrls: ['./collection-source-controls.component.scss'],\n  templateUrl: './collection-source-controls.component.html',\n})\nexport class CollectionSourceControlsComponent implements OnDestroy {\n\n  /**\n   * Should the controls be enabled.\n   */\n  @Input() isEnabled: boolean;\n\n  /**\n   * The current collection\n   */\n  @Input() collection: Collection;\n\n  /**\n   * Should the control section be shown\n   */\n  @Input() shouldShow: boolean;\n\n  contentSource$: Observable<ContentSource>;\n  private subs: Subscription[] = [];\n\n  testConfigRunning$ = new BehaviorSubject(false);\n  importRunning$ = new BehaviorSubject(false);\n  reImportRunning$ = new BehaviorSubject(false);\n\n  constructor(private scriptDataService: ScriptDataService,\n              private processDataService: ProcessDataService,\n              private requestService: RequestService,\n              private notificationsService: NotificationsService,\n              private collectionService: CollectionDataService,\n              private translateService: TranslateService,\n              private httpClient: HttpClient,\n              private bitstreamService: BitstreamDataService\n  ) {\n  }\n\n  ngOnInit() {\n    // ensure the contentSource gets updated after being set to stale\n    this.contentSource$ = this.collectionService.findByHref(this.collection._links.self.href, false).pipe(\n      getAllSucceededRemoteDataPayload(),\n      switchMap((collection) => this.collectionService.getContentSource(collection.uuid, false)),\n      getAllSucceededRemoteDataPayload()\n    );\n  }\n\n  /**\n   * Tests the provided content source's configuration.\n   * @param contentSource - The content source to be tested\n   */\n  testConfiguration(contentSource) {\n    this.testConfigRunning$.next(true);\n    this.subs.push(this.scriptDataService.invoke('harvest', [\n      {name: '-g', value: null},\n      {name: '-a', value: contentSource.oaiSource},\n      {name: '-i', value: new ContentSourceSetSerializer().Serialize(contentSource.oaiSetId)},\n    ], []).pipe(\n      getFirstCompletedRemoteData(),\n      tap((rd) => {\n        if (rd.hasFailed) {\n          // show a notification when the script invocation fails\n          this.notificationsService.error(this.translateService.get('collection.source.controls.test.submit.error'));\n          this.testConfigRunning$.next(false);\n        }\n      }),\n      // filter out responses that aren't successful since the pinging of the process only needs to happen when the invocation was successful.\n      filter((rd) => rd.hasSucceeded && hasValue(rd.payload)),\n      switchMap((rd) => this.processDataService.findById(rd.payload.processId, false)),\n      getAllCompletedRemoteData(),\n      filter((rd) => !rd.isStale && (rd.hasSucceeded || rd.hasFailed)),\n      map((rd) => rd.payload),\n      hasValueOperator(),\n    ).subscribe((process: Process) => {\n        if (process.processStatus.toString() !== ProcessStatus[ProcessStatus.COMPLETED].toString() &&\n          process.processStatus.toString() !== ProcessStatus[ProcessStatus.FAILED].toString()) {\n          // Ping the current process state every 5s\n          setTimeout(() => {\n            this.requestService.setStaleByHrefSubstring(process._links.self.href);\n          }, 5000);\n        }\n        if (process.processStatus.toString() === ProcessStatus[ProcessStatus.FAILED].toString()) {\n          this.notificationsService.error(this.translateService.get('collection.source.controls.test.failed'));\n          this.testConfigRunning$.next(false);\n        }\n        if (process.processStatus.toString() === ProcessStatus[ProcessStatus.COMPLETED].toString()) {\n          this.bitstreamService.findByHref(process._links.output.href).pipe(getFirstSucceededRemoteDataPayload()).subscribe((bitstream) => {\n            this.httpClient.get(bitstream._links.content.href, {responseType: 'text'}).subscribe((data: any) => {\n              const output = data.replaceAll(new RegExp('.*\\\\@(.*)', 'g'), '$1')\n                .replaceAll('The script has started', '')\n                .replaceAll('The script has completed', '');\n              this.notificationsService.info(this.translateService.get('collection.source.controls.test.completed'), output);\n            });\n          });\n          this.testConfigRunning$.next(false);\n        }\n      }\n    ));\n  }\n\n  /**\n   * Start the harvest for the current collection\n   */\n  importNow() {\n    this.importRunning$.next(true);\n    this.subs.push(this.scriptDataService.invoke('harvest', [\n      {name: '-r', value: null},\n      {name: '-c', value: this.collection.uuid},\n    ], [])\n      .pipe(\n        getFirstCompletedRemoteData(),\n        tap((rd) => {\n          if (rd.hasFailed) {\n            this.notificationsService.error(this.translateService.get('collection.source.controls.import.submit.error'));\n            this.importRunning$.next(false);\n          } else {\n            this.notificationsService.success(this.translateService.get('collection.source.controls.import.submit.success'));\n          }\n        }),\n        filter((rd) => rd.hasSucceeded && hasValue(rd.payload)),\n        switchMap((rd) => this.processDataService.findById(rd.payload.processId, false)),\n        getAllCompletedRemoteData(),\n        filter((rd) => !rd.isStale && (rd.hasSucceeded || rd.hasFailed)),\n        map((rd) => rd.payload),\n        hasValueOperator(),\n      ).subscribe((process) => {\n          if (process.processStatus.toString() !== ProcessStatus[ProcessStatus.COMPLETED].toString() &&\n            process.processStatus.toString() !== ProcessStatus[ProcessStatus.FAILED].toString()) {\n            // Ping the current process state every 5s\n            setTimeout(() => {\n              this.requestService.setStaleByHrefSubstring(process._links.self.href);\n              this.requestService.setStaleByHrefSubstring(this.collection._links.self.href);\n            }, 5000);\n          }\n          if (process.processStatus.toString() === ProcessStatus[ProcessStatus.FAILED].toString()) {\n            this.notificationsService.error(this.translateService.get('collection.source.controls.import.failed'));\n            this.importRunning$.next(false);\n          }\n          if (process.processStatus.toString() === ProcessStatus[ProcessStatus.COMPLETED].toString()) {\n            this.notificationsService.success(this.translateService.get('collection.source.controls.import.completed'));\n            this.requestService.setStaleByHrefSubstring(this.collection._links.self.href);\n            this.importRunning$.next(false);\n          }\n        }\n      ));\n  }\n\n  /**\n   * Reset and reimport the current collection\n   */\n  resetAndReimport() {\n    this.reImportRunning$.next(true);\n    this.subs.push(this.scriptDataService.invoke('harvest', [\n      {name: '-o', value: null},\n      {name: '-c', value: this.collection.uuid},\n    ], [])\n      .pipe(\n        getFirstCompletedRemoteData(),\n        tap((rd) => {\n          if (rd.hasFailed) {\n            this.notificationsService.error(this.translateService.get('collection.source.controls.reset.submit.error'));\n            this.reImportRunning$.next(false);\n          } else {\n            this.notificationsService.success(this.translateService.get('collection.source.controls.reset.submit.success'));\n          }\n        }),\n        filter((rd) => rd.hasSucceeded && hasValue(rd.payload)),\n        switchMap((rd) => this.processDataService.findById(rd.payload.processId, false)),\n        getAllCompletedRemoteData(),\n        filter((rd) => !rd.isStale && (rd.hasSucceeded || rd.hasFailed)),\n        map((rd) => rd.payload),\n        hasValueOperator(),\n      ).subscribe((process) => {\n          if (process.processStatus.toString() !== ProcessStatus[ProcessStatus.COMPLETED].toString() &&\n            process.processStatus.toString() !== ProcessStatus[ProcessStatus.FAILED].toString()) {\n            // Ping the current process state every 5s\n            setTimeout(() => {\n              this.requestService.setStaleByHrefSubstring(process._links.self.href);\n              this.requestService.setStaleByHrefSubstring(this.collection._links.self.href);\n            }, 5000);\n          }\n          if (process.processStatus.toString() === ProcessStatus[ProcessStatus.FAILED].toString()) {\n            this.notificationsService.error(this.translateService.get('collection.source.controls.reset.failed'));\n            this.reImportRunning$.next(false);\n          }\n          if (process.processStatus.toString() === ProcessStatus[ProcessStatus.COMPLETED].toString()) {\n            this.notificationsService.success(this.translateService.get('collection.source.controls.reset.completed'));\n            this.requestService.setStaleByHrefSubstring(this.collection._links.self.href);\n            this.reImportRunning$.next(false);\n          }\n        }\n      ));\n  }\n\n  ngOnDestroy(): void {\n    this.subs.forEach((sub) => {\n      if (hasValue(sub)) {\n        sub.unsubscribe();\n      }\n    });\n  }\n}\n","<div class=\"container-fluid\">\n    <div class=\"d-inline-block float-right\">\n        <button class=\" btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n                [disabled]=\"!(hasChanges() | async)\"\n                (click)=\"discard()\"><i\n                class=\"fas fa-times\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n                (click)=\"reinstate()\"><i\n                class=\"fas fa-undo-alt\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-primary\"\n                [disabled]=\"!(hasChanges() | async) || !isValid() || (initialHarvestType === harvestTypeNone && contentSource.harvestType === initialHarvestType)\"\n                (click)=\"onSubmit()\"><i\n                class=\"fas fa-save\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n        </button>\n    </div>\n    <h4>{{ 'collection.edit.tabs.source.head' | translate }}</h4>\n    <div *ngIf=\"contentSource\" class=\"form-check mb-4\">\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"externalSourceCheck\"\n               [checked]=\"(contentSource?.harvestType !== harvestTypeNone)\" (change)=\"changeExternalSource()\">\n        <label class=\"form-check-label\"\n               for=\"externalSourceCheck\">{{ 'collection.edit.tabs.source.external' | translate }}</label>\n    </div>\n    <ds-loading *ngIf=\"!contentSource\" [message]=\"'loading.content-source' | translate\"></ds-loading>\n    <h4 *ngIf=\"contentSource && (contentSource?.harvestType !== harvestTypeNone)\">{{ 'collection.edit.tabs.source.form.head' | translate }}</h4>\n</div>\n<div class=\"row\">\n    <ds-form *ngIf=\"formGroup && contentSource && (contentSource?.harvestType !== harvestTypeNone)\"\n             [formId]=\"'collection-source-form-id'\"\n             [formGroup]=\"formGroup\"\n             [formModel]=\"formModel\"\n             [formLayout]=\"formLayout\"\n             [displaySubmit]=\"false\"\n             [displayCancel]=\"false\"\n             (dfChange)=\"onChange($event)\"\n             (submitForm)=\"onSubmit()\"\n             (cancel)=\"onCancel()\"></ds-form>\n</div>\n<div class=\"container mt-2\" *ngIf=\"(contentSource?.harvestType !== harvestTypeNone)\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"d-inline-block float-right ml-1\">\n                <button class=\" btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n                        [disabled]=\"!(hasChanges() | async)\"\n                        (click)=\"discard()\"><i\n                        class=\"fas fa-times\"></i>\n                    <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n                </button>\n                <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n                        (click)=\"reinstate()\"><i\n                        class=\"fas fa-undo-alt\"></i>\n                    <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n                </button>\n                <button class=\"btn btn-primary\"\n                        [disabled]=\"!(hasChanges() | async) || !isValid() || (initialHarvestType === harvestTypeNone && contentSource.harvestType === initialHarvestType)\"\n                        (click)=\"onSubmit()\"><i\n                        class=\"fas fa-save\"></i>\n                    <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n<ds-collection-source-controls\n        [isEnabled]=\"!(hasChanges()|async)\"\n        [shouldShow]=\"contentSource?.harvestType !== harvestTypeNone\"\n        [collection]=\"(collectionRD$ |async)?.payload\"\n>\n</ds-collection-source-controls>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractTrackableComponent } from '../../../shared/trackable/abstract-trackable.component';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicOptionControlModel,\n  DynamicRadioGroupModel,\n  DynamicSelectModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { Location } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { FormGroup } from '@angular/forms';\nimport { hasNoValue, hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { ContentSource, ContentSourceHarvestType } from '../../../core/shared/content-source.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { first, map, switchMap, take } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FieldUpdate, FieldUpdates } from '../../../core/data/object-updates/object-updates.reducer';\nimport { cloneDeep } from 'lodash';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { getFirstSucceededRemoteData, getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { MetadataConfig } from '../../../core/shared/metadata-config.model';\nimport { INotification } from '../../../shared/notifications/models/notification.model';\nimport { RequestService } from '../../../core/data/request.service';\nimport { environment } from '../../../../environments/environment';\n\n/**\n * Component for managing the content source of the collection\n */\n@Component({\n  selector: 'ds-collection-source',\n  templateUrl: './collection-source.component.html',\n})\nexport class CollectionSourceComponent extends AbstractTrackableComponent implements OnInit, OnDestroy {\n  /**\n   * The current collection's remote data\n   */\n  collectionRD$: Observable<RemoteData<Collection>>;\n\n  /**\n   * The collection's content source\n   */\n  contentSource: ContentSource;\n\n  /**\n   * The current update to the content source\n   */\n  update$: Observable<FieldUpdate>;\n\n  /**\n   * The initial harvest type we started off with\n   * Used to compare changes\n   */\n  initialHarvestType: ContentSourceHarvestType;\n\n  /**\n   * @type {string} Key prefix used to generate form labels\n   */\n  LABEL_KEY_PREFIX = 'collection.edit.tabs.source.form.';\n\n  /**\n   * @type {string} Key prefix used to generate form error messages\n   */\n  ERROR_KEY_PREFIX = 'collection.edit.tabs.source.form.errors.';\n\n  /**\n   * @type {string} Key prefix used to generate form option labels\n   */\n  OPTIONS_KEY_PREFIX = 'collection.edit.tabs.source.form.options.';\n\n  /**\n   * The Dynamic Input Model for the OAI Provider\n   */\n  oaiSourceModel = new DynamicInputModel({\n    id: 'oaiSource',\n    name: 'oaiSource',\n    required: true,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must provide a set id of the target collection.'\n    }\n  });\n\n  /**\n   * The Dynamic Input Model for the OAI Set\n   */\n  oaiSetIdModel = new DynamicInputModel({\n    id: 'oaiSetId',\n    name: 'oaiSetId'\n  });\n\n  /**\n   * The Dynamic Input Model for the Metadata Format used\n   */\n  metadataConfigIdModel = new DynamicSelectModel({\n    id: 'metadataConfigId',\n    name: 'metadataConfigId'\n  });\n\n  /**\n   * The Dynamic Input Model for the type of harvesting\n   */\n  harvestTypeModel = new DynamicRadioGroupModel<string>({\n    id: 'harvestType',\n    name: 'harvestType',\n    options: [\n      {\n        value: ContentSourceHarvestType.Metadata\n      },\n      {\n        value: ContentSourceHarvestType.MetadataAndRef\n      },\n      {\n        value: ContentSourceHarvestType.MetadataAndBitstreams\n      }\n    ]\n  });\n\n  /**\n   * All input models in a simple array for easier iterations\n   */\n  inputModels = [this.oaiSourceModel, this.oaiSetIdModel, this.metadataConfigIdModel, this.harvestTypeModel];\n\n  /**\n   * The dynamic form fields used for editing the content source of a collection\n   * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicFormGroupModel({\n      id: 'oaiSourceContainer',\n      group: [\n        this.oaiSourceModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'oaiSetContainer',\n      group: [\n        this.oaiSetIdModel,\n        this.metadataConfigIdModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'harvestTypeContainer',\n      group: [\n        this.harvestTypeModel\n      ]\n    })\n  ];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    oaiSource: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    oaiSetId: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    metadataConfigId: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    harvestType: {\n      grid: {\n        host: 'col-12',\n        option: 'btn-outline-secondary'\n      }\n    },\n    oaiSetContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    oaiSourceContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    harvestTypeContainer: {\n      grid: {\n        host: 'row'\n      }\n    }\n  };\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Subscription to update the current form\n   */\n  updateSub: Subscription;\n\n  /**\n   * The content harvesting type used when harvesting is disabled\n   */\n  harvestTypeNone = ContentSourceHarvestType.None;\n\n  /**\n   * The previously selected harvesting type\n   * Used for switching between ContentSourceHarvestType.None and the previously selected value when enabling / disabling harvesting\n   * Defaults to ContentSourceHarvestType.Metadata\n   */\n  previouslySelectedHarvestType = ContentSourceHarvestType.Metadata;\n\n  /**\n   * Notifications displayed after clicking submit\n   * These are cleaned up every time a user submits the form to prevent error or other notifications from staying active\n   * while they shouldn't be.\n   */\n  displayedNotifications: INotification[] = [];\n\n  public constructor(public objectUpdatesService: ObjectUpdatesService,\n                     public notificationsService: NotificationsService,\n                     protected location: Location,\n                     protected formService: DynamicFormService,\n                     protected translate: TranslateService,\n                     protected route: ActivatedRoute,\n                     protected router: Router,\n                     protected collectionService: CollectionDataService,\n                     protected requestService: RequestService) {\n    super(objectUpdatesService, notificationsService, translate);\n  }\n\n  /**\n   * Initialize properties to setup the Field Update and Form\n   */\n  ngOnInit(): void {\n    this.notificationsPrefix = 'collection.edit.tabs.source.notifications.';\n    this.discardTimeOut = environment.collection.edit.undoTimeout;\n    this.url = this.router.url;\n    if (this.url.indexOf('?') > 0) {\n      this.url = this.url.substr(0, this.url.indexOf('?'));\n    }\n    this.formGroup = this.formService.createFormGroup(this.formModel);\n    this.collectionRD$ = this.route.parent.data.pipe(first(), map((data) => data.dso));\n\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.getContentSource(uuid)),\n      getFirstCompletedRemoteData(),\n    ).subscribe((rd: RemoteData<ContentSource>) => {\n      this.initializeOriginalContentSource(rd.payload);\n    });\n\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n  }\n\n  /**\n   * Initialize the Field Update and subscribe on it to fire updates to the form whenever it changes\n   */\n  initializeOriginalContentSource(contentSource: ContentSource) {\n    this.contentSource = contentSource;\n    this.initialHarvestType = contentSource.harvestType;\n    this.initializeMetadataConfigs();\n    const initialContentSource = cloneDeep(this.contentSource);\n    this.objectUpdatesService.initialize(this.url, [initialContentSource], new Date());\n    this.update$ = this.objectUpdatesService.getFieldUpdates(this.url, [initialContentSource]).pipe(\n      map((updates: FieldUpdates) => updates[initialContentSource.uuid])\n    );\n    this.updateSub = this.update$.subscribe((update: FieldUpdate) => {\n      if (update) {\n        const field = update.field as ContentSource;\n        let configId;\n        if (hasValue(this.contentSource) && isNotEmpty(this.contentSource.metadataConfigs)) {\n          configId = this.contentSource.metadataConfigs[0].id;\n        }\n        if (hasValue(field) && hasValue(field.metadataConfigId)) {\n          configId = field.metadataConfigId;\n        }\n        if (hasValue(field)) {\n          this.formGroup.patchValue({\n            oaiSourceContainer: {\n              oaiSource: field.oaiSource\n            },\n            oaiSetContainer: {\n              oaiSetId: field.oaiSetId,\n              metadataConfigId: configId\n            },\n            harvestTypeContainer: {\n              harvestType: field.harvestType\n            }\n          });\n          this.contentSource = cloneDeep(field);\n        }\n        this.contentSource.metadataConfigId = configId;\n      }\n    });\n  }\n\n  /**\n   * Fill the metadataConfigIdModel's options using the contentSource's metadataConfigs property\n   */\n  initializeMetadataConfigs() {\n    this.metadataConfigIdModel.options = this.contentSource.metadataConfigs\n      .map((metadataConfig: MetadataConfig) => Object.assign({ value: metadataConfig.id, label: metadataConfig.label }));\n    if (this.metadataConfigIdModel.options.length > 0) {\n      this.formGroup.patchValue({\n        oaiSetContainer: {\n          metadataConfigId: this.metadataConfigIdModel.options[0].value\n        }\n      });\n    }\n  }\n\n  /**\n   * Used the update translations of errors and labels on init and on language change\n   */\n  private updateFieldTranslations() {\n    this.inputModels.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        this.updateFieldTranslation(fieldModel);\n      }\n    );\n  }\n\n  /**\n   * Update the translations of a DynamicInputModel\n   * @param fieldModel\n   */\n  private updateFieldTranslation(fieldModel: DynamicFormControlModel) {\n    fieldModel.label = this.translate.instant(this.LABEL_KEY_PREFIX + fieldModel.id);\n    if (isNotEmpty(fieldModel.validators)) {\n      fieldModel.errorMessages = {};\n      Object.keys(fieldModel.validators).forEach((key) => {\n        fieldModel.errorMessages[key] = this.translate.instant(this.ERROR_KEY_PREFIX + fieldModel.id + '.' + key);\n      });\n    }\n    if (fieldModel instanceof DynamicOptionControlModel) {\n      if (isNotEmpty(fieldModel.options)) {\n        fieldModel.options.forEach((option) => {\n          if (hasNoValue(option.label)) {\n            option.label = this.translate.instant(this.OPTIONS_KEY_PREFIX + fieldModel.id + '.' + option.value);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Fired whenever the form receives an update and makes sure the Content Source and field update is up-to-date with the changes\n   * @param event\n   */\n  onChange(event) {\n    this.updateContentSourceField(event.model, true);\n    this.saveFieldUpdate();\n  }\n\n  /**\n   * Submit the edited Content Source to the REST API, re-initialize the field update and display a notification\n   */\n  onSubmit() {\n    // Remove cached harvester request to allow for latest harvester to be displayed when switching tabs\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.getHarvesterEndpoint(uuid)),\n      take(1)\n    ).subscribe((endpoint) => this.requestService.removeByHrefSubstring(endpoint));\n    this.requestService.setStaleByHrefSubstring(this.contentSource._links.self.href);\n    // Update harvester\n    this.collectionRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((col) => col.payload.uuid),\n      switchMap((uuid) => this.collectionService.updateContentSource(uuid, this.contentSource)),\n      take(1)\n    ).subscribe((result: ContentSource | INotification) => {\n      if (hasValue((result as any).harvestType)) {\n        this.clearNotifications();\n        this.initializeOriginalContentSource(result as ContentSource);\n        this.displayedNotifications.push(this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved')));\n      } else {\n        this.displayedNotifications.push(result as INotification);\n      }\n    });\n  }\n\n  /**\n   * Cancel the edit and return to the previous page\n   */\n  onCancel() {\n    this.location.back();\n  }\n\n  /**\n   * Is the current form valid to be submitted ?\n   */\n  isValid(): boolean {\n    return (this.contentSource.harvestType === ContentSourceHarvestType.None) || this.formGroup.valid;\n  }\n\n  /**\n   * Switch the external source on or off and fire a field update\n   */\n  changeExternalSource() {\n    if (this.contentSource.harvestType === ContentSourceHarvestType.None) {\n      this.contentSource.harvestType = this.previouslySelectedHarvestType;\n    } else {\n      this.previouslySelectedHarvestType = this.contentSource.harvestType;\n      this.contentSource.harvestType = ContentSourceHarvestType.None;\n    }\n    this.updateContentSource(false);\n  }\n\n  /**\n   * Loop over all inputs and update the Content Source with their value\n   * @param updateHarvestType   When set to false, the harvestType of the contentSource will be ignored in the update\n   */\n  updateContentSource(updateHarvestType: boolean) {\n    this.inputModels.forEach(\n      (fieldModel: DynamicInputModel) => {\n        this.updateContentSourceField(fieldModel, updateHarvestType);\n      }\n    );\n    this.saveFieldUpdate();\n  }\n\n  /**\n   * Update the Content Source with the value from a DynamicInputModel\n   * @param fieldModel          The fieldModel to fetch the value from and update the contentSource with\n   * @param updateHarvestType   When set to false, the harvestType of the contentSource will be ignored in the update\n   */\n  updateContentSourceField(fieldModel: DynamicInputModel, updateHarvestType: boolean) {\n    if (hasValue(fieldModel.value) && !(fieldModel.id === this.harvestTypeModel.id && !updateHarvestType)) {\n      this.contentSource[fieldModel.id] = fieldModel.value;\n    }\n  }\n\n  /**\n   * Save the current Content Source to the Object Updates cache\n   */\n  saveFieldUpdate() {\n    this.objectUpdatesService.saveAddFieldUpdate(this.url, cloneDeep(this.contentSource));\n  }\n\n  /**\n   * Clear possible active notifications\n   */\n  clearNotifications() {\n    this.displayedNotifications.forEach((notification: INotification) => {\n      this.notificationsService.remove(notification);\n    });\n    this.displayedNotifications = [];\n  }\n\n  /**\n   * Make sure open subscriptions are closed\n   */\n  ngOnDestroy(): void {\n    if (this.updateSub) {\n      this.updateSub.unsubscribe();\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { filter, map, take } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { hasValue } from '../../../shared/empty.util';\n\n/**\n * Component for managing a collection's curation tasks\n */\n@Component({\n  selector: 'ds-collection-curate',\n  templateUrl: './collection-curate.component.html',\n})\nexport class CollectionCurateComponent {\n  dsoRD$: Observable<RemoteData<Collection>>;\n  collectionName$: Observable<string>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dsoNameService: DSONameService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.data.pipe(\n      take(1),\n      map((data) => data.dso),\n    );\n\n    this.collectionName$ = this.dsoRD$.pipe(\n      filter((rd: RemoteData<Collection>) => hasValue(rd)),\n      map((rd: RemoteData<Collection>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n  }\n}\n","<div class=\"container\">\n    <h3>{{'collection.curate.header' |translate:{collection: (collectionName$ |async)} }}</h3>\n    <ds-curation-form\n            [dsoHandle]=\"(dsoRD$|async)?.payload.handle\"\n    ></ds-curation-form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\n\n@Component({\n  selector: 'ds-collection-authorizations',\n  templateUrl: './collection-authorizations.component.html',\n})\n/**\n * Component that handles the Collection Authorizations\n */\nexport class CollectionAuthorizationsComponent<TDomain extends DSpaceObject> implements OnInit {\n\n  /**\n   * The initial DSO object\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the collection\n   */\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.parent.parent.data.pipe(first(), map((data) => data.dso));\n  }\n}\n","<div class=\"container\">\n  <ds-resource-policies [resourceType]=\"'collection'\" [resourceUUID]=\"(dsoRD$ | async)?.payload?.id\"></ds-resource-policies>\n</div>\n","import { Injectable } from '@angular/core';\nimport { SingleFeatureAuthorizationGuard } from './single-feature-authorization.guard';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../../../auth/auth.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../feature-id';\n\n/**\n * Prevent unauthorized activating and loading of routes when the current authenticated user\n * isn't a Collection administrator\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollectionAdministratorGuard extends SingleFeatureAuthorizationGuard {\n  constructor(protected authorizationService: AuthorizationDataService, protected router: Router, protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check group management rights\n   */\n  getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.IsCollectionAdmin);\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CollectionItemMapperComponent } from '../collection-item-mapper/collection-item-mapper.component';\nimport { EditCollectionPageComponent } from './edit-collection-page.component';\nimport { CollectionMetadataComponent } from './collection-metadata/collection-metadata.component';\nimport { CollectionRolesComponent } from './collection-roles/collection-roles.component';\nimport { CollectionSourceComponent } from './collection-source/collection-source.component';\nimport { CollectionCurateComponent } from './collection-curate/collection-curate.component';\nimport { CollectionAuthorizationsComponent } from './collection-authorizations/collection-authorizations.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ResourcePolicyTargetResolver } from '../../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyCreateComponent } from '../../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyResolver } from '../../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyEditComponent } from '../../shared/resource-policies/edit/resource-policy-edit.component';\nimport { CollectionAdministratorGuard } from '../../core/data/feature-authorization/feature-authorization-guard/collection-administrator.guard';\n\n/**\n * Routing module that handles the routing for the Edit Collection page administrator functionality\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { breadcrumbKey: 'collection.edit' },\n        component: EditCollectionPageComponent,\n        canActivate: [CollectionAdministratorGuard],\n        children: [\n          {\n            path: '',\n            redirectTo: 'metadata',\n            pathMatch: 'full'\n          },\n          {\n            path: 'metadata',\n            component: CollectionMetadataComponent,\n            data: {\n              title: 'collection.edit.tabs.metadata.title',\n              hideReturnButton: true,\n              showBreadcrumbs: true\n            }\n          },\n          {\n            path: 'roles',\n            component: CollectionRolesComponent,\n            data: { title: 'collection.edit.tabs.roles.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'source',\n            component: CollectionSourceComponent,\n            data: { title: 'collection.edit.tabs.source.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'curate',\n            component: CollectionCurateComponent,\n            data: { title: 'collection.edit.tabs.curate.title', showBreadcrumbs: true }\n          },\n/*          {\n            path: 'authorizations',\n            component: CollectionAuthorizationsComponent,\n            data: { title: 'collection.edit.tabs.authorizations.title', showBreadcrumbs: true }\n          },*/\n          {\n            path: 'authorizations',\n            data: { showBreadcrumbs: true },\n            children: [\n              {\n                path: 'create',\n                resolve: {\n                  resourcePolicyTarget: ResourcePolicyTargetResolver\n                },\n                component: ResourcePolicyCreateComponent,\n                data: { title: 'resource-policies.create.page.title' }\n              },\n              {\n                path: 'edit',\n                resolve: {\n                  resourcePolicy: ResourcePolicyResolver\n                },\n                component: ResourcePolicyEditComponent,\n                data: { title: 'resource-policies.edit.page.title' }\n              },\n              {\n                path: '',\n                component: CollectionAuthorizationsComponent,\n                data: { title: 'collection.edit.tabs.authorizations.title', showBreadcrumbs: true }\n              }\n            ]\n          },\n          {\n            path: 'mapper',\n            component: CollectionItemMapperComponent,\n            data: { title: 'collection.edit.tabs.item-mapper.title', hideReturnButton: true, showBreadcrumbs: true }\n          },\n        ]\n      }\n    ])\n  ],\n  providers: [\n    ResourcePolicyResolver,\n    ResourcePolicyTargetResolver\n  ]\n})\nexport class EditCollectionPageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { EditCollectionPageComponent } from './edit-collection-page.component';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { EditCollectionPageRoutingModule } from './edit-collection-page.routing.module';\nimport { CollectionMetadataComponent } from './collection-metadata/collection-metadata.component';\nimport { CollectionRolesComponent } from './collection-roles/collection-roles.component';\nimport { CollectionCurateComponent } from './collection-curate/collection-curate.component';\nimport { CollectionSourceComponent } from './collection-source/collection-source.component';\nimport { CollectionAuthorizationsComponent } from './collection-authorizations/collection-authorizations.component';\nimport { CollectionFormModule } from '../collection-form/collection-form.module';\nimport { CollectionSourceControlsComponent } from './collection-source/collection-source-controls/collection-source-controls.component';\nimport { ResourcePoliciesModule } from '../../shared/resource-policies/resource-policies.module';\nimport { FormModule } from '../../shared/form/form.module';\nimport { ComcolModule } from '../../shared/comcol/comcol.module';\n\n/**\n * Module that contains all components related to the Edit Collection page administrator functionality\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    EditCollectionPageRoutingModule,\n    CollectionFormModule,\n    ResourcePoliciesModule,\n    FormModule,\n    ComcolModule\n  ],\n  declarations: [\n    EditCollectionPageComponent,\n    CollectionMetadataComponent,\n    CollectionRolesComponent,\n    CollectionCurateComponent,\n    CollectionSourceComponent,\n\n    CollectionSourceControlsComponent,\n    CollectionAuthorizationsComponent\n  ]\n})\nexport class EditCollectionPageModule {\n\n}\n"]}