{"version":3,"sources":["webpack:///src/app/bitstream-page/edit-bitstream-page/edit-bitstream-page.component.html","webpack:///src/app/bitstream-page/edit-bitstream-page/edit-bitstream-page.component.ts","webpack:///src/app/bitstream-page/bitstream-page.resolver.ts","webpack:///src/app/bitstream-page/bitstream-authorizations/bitstream-authorizations.component.ts","webpack:///src/app/bitstream-page/bitstream-authorizations/bitstream-authorizations.component.html","webpack:///src/app/bitstream-page/legacy-bitstream-url.resolver.ts","webpack:///src/app/bitstream-page/bitstream-page-routing.module.ts","webpack:///src/app/bitstream-page/bitstream-page.module.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.ts","webpack:///src/app/shared/form/form.module.ts","webpack:///src/app/access-control/access-control-routing-paths.ts"],"names":["EditBitstreamPageComponent","constructor","route","router","changeDetectorRef","location","formService","translate","bitstreamService","dsoNameService","notificationsService","bitstreamFormatService","KEY_PREFIX","LABEL_KEY_SUFFIX","HINT_KEY_SUFFIX","NOTIFICATIONS_PREFIX","IMAGE_WIDTH_METADATA","IMAGE_HEIGHT_METADATA","IIIF_TOC_METADATA","IIIF_LABEL_METADATA","findAllOptions","elementsPerPage","fileNameModel","hasSelectableMetadata","metadataFields","repeatable","submissionId","id","name","required","validators","errorMessages","primaryBitstreamModel","descriptionModel","rows","selectedFormatModel","newFormatModel","iiifLabelModel","grid","host","iiifLabelContainer","D","group","this","iiifTocModel","iiifTocContainer","iiifWidthModel","iiifWidthContainer","iiifHeightModel","iiifHeightContainer","inputModels","formModel","newFormatBaseLayout","formLayout","fileName","primaryBitstream","description","embargo","selectedFormat","newFormat","fileNamePrimaryContainer","descriptionContainer","formatContainer","isIIIF","subs","ngOnInit","itemId","snapshot","queryParams","entityType","bitstreamRD$","data","pipe","map","bitstream","bitstreamFormatsRD$","findAll","bitstream$","allFormats$","push","subscribe","allFormats","formats","page","setIiifStatus","onLangChange","updateFieldTranslations","setForm","formGroup","createFormGroup","updateFormatModel","updateForm","patchValue","firstMetadataValue","firstMetadata","value","undefined","iiifLabel","iiifToc","iiifWidth","iiifHeight","format","originalFormat","updateNewFormatLayout","options","Object","assign","label","isUnknownFormat","instant","shortDescription","selectedId","find","f","supportLevel","Unknown","forEach","fieldModel","updateFieldTranslation","hint","onChange","event","model","onSubmit","updatedValues","getRawValue","updatedBitstream","formToBitstream","updateFormat","g","formatResponse","hasFailed","payload","error","errorMessage","switchMap","update","commitUpdates","success","navigateToItemEditBitstreams","rawForm","cloneDeep","newMetadata","metadata","setFirstValue","onCancel","navigate","bundle","mergeMap","item","regexExcludeBundles","regexIIIFItem","isImage$","mimetype","includes","isIIIFBundle$","getName","match","isEnabled$","iiifSub","combineLatest","isImage","isIIIFBundle","isEnabled","detectChanges","ngOnDestroy","filter","subscription","unsubscribe","BitstreamPageResolver","resolve","state","findById","params","followLinks","BitstreamAuthorizationsComponent","dsoRD$","first","LegacyBitstreamUrlResolver","bitstreamDataService","prefix","suffix","filename","sequenceId","sequence_id","findByItemHandle","BitstreamPageRoutingModule","forChild","path","component","canActivate","children","resourcePolicyTarget","title","showBreadcrumbs","resourcePolicy","BitstreamPageModule","DsDynamicFormComponent","componentService","super","blur","EventEmitter","change","focus","ngbEvent","FormModule","provide","useValue","GROUP_EDIT_PATH","getGroupEditRoute","toString"],"mappings":"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","file":"x","sourcesContent":["<ng-container *ngVar=\"(bitstreamRD$ | async) as bitstreamRD\">\n  <div class=\"container\" *ngVar=\"(bitstreamFormatsRD$ | async) as formatsRD\">\n    <div class=\"row\" *ngIf=\"bitstreamRD?.hasSucceeded && formatsRD?.hasSucceeded\">\n      <div class=\"col-md-2\">\n        <ds-thumbnail [thumbnail]=\"bitstreamRD?.payload\"></ds-thumbnail>\n      </div>\n      <div class=\"col-md-10\">\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <h3>{{bitstreamRD?.payload?.name}} <span class=\"text-muted\">({{bitstreamRD?.payload?.sizeBytes | dsFileSize}})</span></h3>\n            </div>\n          </div>\n        </div>\n        <ds-form *ngIf=\"formGroup\" [formId]=\"'edit-bitstream-form-id'\"\n                  [formGroup]=\"formGroup\"\n                  [formModel]=\"formModel\"\n                  [formLayout]=\"formLayout\"\n                  [submitLabel]=\"'form.save'\"\n                  (submitForm)=\"onSubmit()\"\n                  (cancel)=\"onCancel()\"\n                  (dfChange)=\"onChange($event)\">\n          <div additional class=\"container py-3\">\n            <a [routerLink]=\"['/bitstreams', bitstreamRD?.payload?.id, 'authorizations']\">{{'bitstream.edit.authorizations.link' | translate}}</a>\n          </div>\n        </ds-form>\n      </div>\n    </div>\n    <ds-error *ngIf=\"bitstreamRD?.hasFailed\" message=\"{{'error.bitstream' | translate}}\"></ds-error>\n    <ds-loading *ngIf=\"!bitstreamRD || !formatsRD || bitstreamRD?.isLoading || formatsRD?.isLoading\"\n                message=\"{{'loading.bitstream' | translate}}\"></ds-loading>\n  </div>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\nimport { Bitstream } from '../../core/shared/bitstream.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, mergeMap, switchMap } from 'rxjs/operators';\nimport {\n  combineLatest,\n  combineLatest as observableCombineLatest,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicSelectModel\n} from '@ng-dynamic-forms/core';\nimport { FormGroup } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { DynamicCustomSwitchModel } from '../../shared/form/builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.model';\nimport { cloneDeep } from 'lodash';\nimport { BitstreamDataService } from '../../core/data/bitstream-data.service';\nimport {\n  getAllSucceededRemoteDataPayload,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getFirstSucceededRemoteDataPayload,\n  getRemoteDataPayload\n} from '../../core/shared/operators';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { BitstreamFormatDataService } from '../../core/data/bitstream-format-data.service';\nimport { BitstreamFormat } from '../../core/shared/bitstream-format.model';\nimport { BitstreamFormatSupportLevel } from '../../core/shared/bitstream-format-support-level';\nimport { hasValue, isNotEmpty, isEmpty } from '../../shared/empty.util';\nimport { Metadata } from '../../core/shared/metadata.utils';\nimport { Location } from '@angular/common';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { getEntityEditRoute, getItemEditRoute } from '../../item-page/item-page-routing-paths';\nimport { Bundle } from '../../core/shared/bundle.model';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { Item } from '../../core/shared/item.model';\nimport {\n  DsDynamicInputModel\n} from '../../shared/form/builder/ds-dynamic-form-ui/models/ds-dynamic-input.model';\nimport { DsDynamicTextAreaModel } from '../../shared/form/builder/ds-dynamic-form-ui/models/ds-dynamic-textarea.model';\n\n@Component({\n  selector: 'ds-edit-bitstream-page',\n  styleUrls: ['./edit-bitstream-page.component.scss'],\n  templateUrl: './edit-bitstream-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n/**\n * Page component for editing a bitstream\n */\nexport class EditBitstreamPageComponent implements OnInit, OnDestroy {\n\n  /**\n   * The bitstream's remote data observable\n   * Tracks changes and updates the view\n   */\n  bitstreamRD$: Observable<RemoteData<Bitstream>>;\n\n  /**\n   * The formats their remote data observable\n   * Tracks changes and updates the view\n   */\n  bitstreamFormatsRD$: Observable<RemoteData<PaginatedList<BitstreamFormat>>>;\n\n  /**\n   * The bitstream to edit\n   */\n  bitstream: Bitstream;\n\n  /**\n   * The originally selected format\n   */\n  originalFormat: BitstreamFormat;\n\n  /**\n   * A list of all available bitstream formats\n   */\n  formats: BitstreamFormat[];\n\n  /**\n   * @type {string} Key prefix used to generate form messages\n   */\n  KEY_PREFIX = 'bitstream.edit.form.';\n\n  /**\n   * @type {string} Key suffix used to generate form labels\n   */\n  LABEL_KEY_SUFFIX = '.label';\n\n  /**\n   * @type {string} Key suffix used to generate form labels\n   */\n  HINT_KEY_SUFFIX = '.hint';\n\n  /**\n   * @type {string} Key prefix used to generate notification messages\n   */\n  NOTIFICATIONS_PREFIX = 'bitstream.edit.notifications.';\n\n  /**\n   * IIIF image width metadata key\n   */\n  IMAGE_WIDTH_METADATA = 'iiif.image.width';\n\n  /**\n   * IIIF image height metadata key\n   */\n  IMAGE_HEIGHT_METADATA = 'iiif.image.height';\n\n  /**\n   * IIIF table of contents metadata key\n   */\n  IIIF_TOC_METADATA = 'iiif.toc';\n\n  /**\n   * IIIF label metadata key\n   */\n  IIIF_LABEL_METADATA = 'iiif.label';\n\n  /**\n   * Options for fetching all bitstream formats\n   */\n  findAllOptions = { elementsPerPage: 9999 };\n\n  /**\n   * The Dynamic Input Model for the file's name\n   */\n  fileNameModel = new DsDynamicInputModel({\n    hasSelectableMetadata: false, metadataFields: [], repeatable: false, submissionId: '',\n    id: 'fileName',\n    name: 'fileName',\n    required: true,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must provide a file name for the bitstream'\n    }\n  });\n\n  /**\n   * The Dynamic Switch Model for the file's name\n   */\n  primaryBitstreamModel = new DynamicCustomSwitchModel({\n      id: 'primaryBitstream',\n      name: 'primaryBitstream'\n    }\n  );\n\n  /**\n   * The Dynamic TextArea Model for the file's description\n   */\n  descriptionModel = new DsDynamicTextAreaModel({\n    hasSelectableMetadata: false, metadataFields: [], repeatable: false, submissionId: '',\n    id: 'description',\n    name: 'description',\n    rows: 10\n  });\n\n  /**\n   * The Dynamic Input Model for the selected format\n   */\n  selectedFormatModel = new DynamicSelectModel({\n    id: 'selectedFormat',\n    name: 'selectedFormat'\n  });\n\n  /**\n   * The Dynamic Input Model for supplying more format information\n   */\n  newFormatModel = new DynamicInputModel({\n    id: 'newFormat',\n    name: 'newFormat'\n  });\n\n  /**\n   * The Dynamic Input Model for the iiif label\n   */\n  iiifLabelModel = new DsDynamicInputModel({\n    hasSelectableMetadata: false, metadataFields: [], repeatable: false, submissionId: '',\n    id: 'iiifLabel',\n    name: 'iiifLabel'\n  },\n    {\n        grid: {\n          host: 'col col-lg-6 d-inline-block'\n        }\n    });\n  iiifLabelContainer = new DynamicFormGroupModel({\n    id: 'iiifLabelContainer',\n    group: [this.iiifLabelModel]\n  },{\n    grid: {\n      host: 'form-row'\n    }\n  });\n\n  iiifTocModel = new DsDynamicInputModel({\n    hasSelectableMetadata: false, metadataFields: [], repeatable: false, submissionId: '',\n    id: 'iiifToc',\n    name: 'iiifToc',\n  },{\n    grid: {\n      host: 'col col-lg-6 d-inline-block'\n    }\n  });\n  iiifTocContainer = new DynamicFormGroupModel({\n    id: 'iiifTocContainer',\n    group: [this.iiifTocModel]\n  },{\n    grid: {\n      host: 'form-row'\n    }\n  });\n\n  iiifWidthModel = new DsDynamicInputModel({\n    hasSelectableMetadata: false, metadataFields: [], repeatable: false, submissionId: '',\n    id: 'iiifWidth',\n    name: 'iiifWidth',\n  },{\n    grid: {\n      host: 'col col-lg-6 d-inline-block'\n    }\n  });\n  iiifWidthContainer = new DynamicFormGroupModel({\n    id: 'iiifWidthContainer',\n    group: [this.iiifWidthModel]\n  },{\n    grid: {\n      host: 'form-row'\n    }\n  });\n\n  iiifHeightModel = new DsDynamicInputModel({\n    hasSelectableMetadata: false, metadataFields: [], repeatable: false, submissionId: '',\n    id: 'iiifHeight',\n    name: 'iiifHeight'\n  },{\n    grid: {\n      host: 'col col-lg-6 d-inline-block'\n    }\n  });\n  iiifHeightContainer = new DynamicFormGroupModel({\n    id: 'iiifHeightContainer',\n    group: [this.iiifHeightModel]\n  },{\n    grid: {\n      host: 'form-row'\n    }\n  });\n\n  /**\n   * All input models in a simple array for easier iterations\n   */\n  inputModels = [this.fileNameModel, this.primaryBitstreamModel, this.descriptionModel, this.selectedFormatModel,\n    this.newFormatModel];\n\n  /**\n   * The dynamic form fields used for editing the information of a bitstream\n   * @type {(DynamicInputModel | DynamicTextAreaModel)[]}\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicFormGroupModel({\n      id: 'fileNamePrimaryContainer',\n      group: [\n        this.fileNameModel,\n        this.primaryBitstreamModel\n      ]\n    },{\n        grid: {\n          host: 'form-row'\n        }\n      }),\n    new DynamicFormGroupModel({\n      id: 'descriptionContainer',\n      group: [\n        this.descriptionModel\n      ]\n    }),\n    new DynamicFormGroupModel({\n      id: 'formatContainer',\n      group: [\n        this.selectedFormatModel,\n        this.newFormatModel\n      ]\n    })\n  ];\n\n  /**\n   * The base layout of the \"Other Format\" input\n   */\n  newFormatBaseLayout = 'col col-sm-6 d-inline-block';\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    fileName: {\n      grid: {\n        host: 'col col-sm-8 d-inline-block'\n      }\n    },\n    primaryBitstream: {\n      grid: {\n        host: 'col col-sm-4 d-inline-block switch'\n      }\n    },\n    description: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    embargo: {\n      grid: {\n        host: 'col-12 d-inline-block'\n      }\n    },\n    selectedFormat: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    newFormat: {\n      grid: {\n        host: this.newFormatBaseLayout + ' invisible'\n      }\n    },\n    fileNamePrimaryContainer: {\n      grid: {\n        host: 'row position-relative'\n      }\n    },\n    descriptionContainer: {\n      grid: {\n        host: 'row'\n      }\n    },\n    formatContainer: {\n      grid: {\n        host: 'row'\n      }\n    }\n  };\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * The ID of the item the bitstream originates from\n   * Taken from the current query parameters when present\n   * This will determine the route of the item edit page to return to\n   */\n  itemId: string;\n\n  /**\n   * The entity type of the item the bitstream originates from\n   * Taken from the current query parameters when present\n   * This will determine the route of the item edit page to return to\n   */\n  entityType: string;\n\n  /**\n   * Set to true when the parent item supports IIIF.\n   */\n  isIIIF = false;\n\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private changeDetectorRef: ChangeDetectorRef,\n              private location: Location,\n              private formService: DynamicFormService,\n              private translate: TranslateService,\n              private bitstreamService: BitstreamDataService,\n              private dsoNameService: DSONameService,\n              private notificationsService: NotificationsService,\n              private bitstreamFormatService: BitstreamFormatDataService) {\n  }\n\n  /**\n   * Initialize the component\n   * - Create a FormGroup using the FormModel defined earlier\n   * - Subscribe on the route data to fetch the bitstream to edit and update the form values\n   * - Translate the form labels and hints\n   */\n  ngOnInit(): void {\n\n    this.itemId = this.route.snapshot.queryParams.itemId;\n    this.entityType = this.route.snapshot.queryParams.entityType;\n    this.bitstreamRD$ = this.route.data.pipe(map((data) => data.bitstream));\n    this.bitstreamFormatsRD$ = this.bitstreamFormatService.findAll(this.findAllOptions);\n\n    const bitstream$ = this.bitstreamRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload()\n    );\n\n    const allFormats$ = this.bitstreamFormatsRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload()\n    );\n\n    this.subs.push(\n      observableCombineLatest(\n        bitstream$,\n        allFormats$\n      ).subscribe(([bitstream, allFormats]) => {\n        this.bitstream = bitstream as Bitstream;\n        this.formats = allFormats.page;\n        this.setIiifStatus(this.bitstream);\n      })\n    );\n\n    this.subs.push(\n      this.translate.onLangChange\n        .subscribe(() => {\n        this.updateFieldTranslations();\n      })\n    );\n  }\n\n  /**\n   * Initializes the form.\n   */\n  setForm() {\n    this.formGroup = this.formService.createFormGroup(this.formModel);\n    this.updateFormatModel();\n    this.updateForm(this.bitstream);\n    this.updateFieldTranslations();\n  }\n\n  /**\n   * Update the current form values with bitstream properties\n   * @param bitstream\n   */\n  updateForm(bitstream: Bitstream) {\n    this.formGroup.patchValue({\n      fileNamePrimaryContainer: {\n        fileName: bitstream.name,\n        primaryBitstream: false\n      },\n      descriptionContainer: {\n        description: bitstream.firstMetadataValue('dc.description')\n      },\n      formatContainer: {\n        newFormat: hasValue(bitstream.firstMetadata('dc.format')) ? bitstream.firstMetadata('dc.format').value : undefined\n      }\n    });\n    if (this.isIIIF) {\n      this.formGroup.patchValue({\n        iiifLabelContainer: {\n          iiifLabel: bitstream.firstMetadataValue(this.IIIF_LABEL_METADATA)\n        },\n        iiifTocContainer: {\n          iiifToc: bitstream.firstMetadataValue(this.IIIF_TOC_METADATA)\n        },\n        iiifWidthContainer: {\n          iiifWidth: bitstream.firstMetadataValue(this.IMAGE_WIDTH_METADATA)\n        },\n        iiifHeightContainer: {\n          iiifHeight: bitstream.firstMetadataValue(this.IMAGE_HEIGHT_METADATA)\n        }\n      });\n    }\n    this.bitstream.format.pipe(\n      getAllSucceededRemoteDataPayload()\n    ).subscribe((format: BitstreamFormat) => {\n      this.originalFormat = format;\n      this.formGroup.patchValue({\n        formatContainer: {\n          selectedFormat: format.id\n        }\n      });\n      this.updateNewFormatLayout(format.id);\n    });\n  }\n\n  /**\n   * Create the list of unknown format IDs an add options to the selectedFormatModel\n   */\n  updateFormatModel() {\n    this.selectedFormatModel.options = this.formats.map((format: BitstreamFormat) =>\n      Object.assign({\n        value: format.id,\n        label: this.isUnknownFormat(format.id) ? this.translate.instant(this.KEY_PREFIX + 'selectedFormat.unknown') : format.shortDescription\n      }));\n  }\n\n  /**\n   * Update the layout of the \"Other Format\" input depending on the selected format\n   * @param selectedId\n   */\n  updateNewFormatLayout(selectedId: string) {\n    if (this.isUnknownFormat(selectedId)) {\n      this.formLayout.newFormat.grid.host = this.newFormatBaseLayout;\n    } else {\n      this.formLayout.newFormat.grid.host = this.newFormatBaseLayout + ' invisible';\n    }\n  }\n\n  /**\n   * Is the provided format (id) part of the list of unknown formats?\n   * @param id\n   */\n  isUnknownFormat(id: string): boolean {\n    const format = this.formats.find((f: BitstreamFormat) => f.id === id);\n    return hasValue(format) && format.supportLevel === BitstreamFormatSupportLevel.Unknown;\n  }\n\n  /**\n   * Used to update translations of labels and hints on init and on language change\n   */\n  private updateFieldTranslations() {\n    this.inputModels.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        this.updateFieldTranslation(fieldModel);\n      }\n    );\n  }\n\n  /**\n   * Update the translations of a DynamicFormControlModel\n   * @param fieldModel\n   */\n  private updateFieldTranslation(fieldModel) {\n    fieldModel.label = this.translate.instant(this.KEY_PREFIX + fieldModel.id + this.LABEL_KEY_SUFFIX);\n    if (fieldModel.id !== this.primaryBitstreamModel.id) {\n      fieldModel.hint = this.translate.instant(this.KEY_PREFIX + fieldModel.id + this.HINT_KEY_SUFFIX);\n    }\n  }\n\n  /**\n   * Fired whenever the form receives an update and changes the layout of the \"Other Format\" input, depending on the selected format\n   * @param event\n   */\n  onChange(event) {\n    const model = event.model;\n    if (model.id === this.selectedFormatModel.id) {\n      this.updateNewFormatLayout(model.value);\n    }\n  }\n\n  /**\n   * Check for changes against the bitstream and send update requests to the REST API\n   */\n  onSubmit() {\n    const updatedValues = this.formGroup.getRawValue();\n    const updatedBitstream = this.formToBitstream(updatedValues);\n    const selectedFormat = this.formats.find((f: BitstreamFormat) => f.id === updatedValues.formatContainer.selectedFormat);\n    const isNewFormat = selectedFormat.id !== this.originalFormat.id;\n\n    let bitstream$;\n\n    if (isNewFormat) {\n      bitstream$ = this.bitstreamService.updateFormat(this.bitstream, selectedFormat).pipe(\n        getFirstCompletedRemoteData(),\n        map((formatResponse: RemoteData<Bitstream>) => {\n          if (hasValue(formatResponse) && formatResponse.hasFailed) {\n            this.notificationsService.error(\n              this.translate.instant(this.NOTIFICATIONS_PREFIX + 'error.format.title'),\n              formatResponse.errorMessage\n            );\n          } else {\n            return formatResponse.payload;\n          }\n        })\n      );\n    } else {\n      bitstream$ = observableOf(this.bitstream);\n    }\n\n    bitstream$.pipe(\n      switchMap(() => {\n        return this.bitstreamService.update(updatedBitstream).pipe(\n          getFirstSucceededRemoteDataPayload()\n        );\n      })\n    ).subscribe(() => {\n      this.bitstreamService.commitUpdates();\n      this.notificationsService.success(\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'saved.title'),\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'saved.content')\n      );\n      this.navigateToItemEditBitstreams();\n    });\n  }\n\n  /**\n   * Parse form data to an updated bitstream object\n   * @param rawForm   Raw form data\n   */\n  formToBitstream(rawForm): Bitstream {\n    const updatedBitstream = cloneDeep(this.bitstream);\n    const newMetadata = updatedBitstream.metadata;\n    // TODO: Set bitstream to primary when supported\n    const primary = rawForm.fileNamePrimaryContainer.primaryBitstream;\n    Metadata.setFirstValue(newMetadata, 'dc.title', rawForm.fileNamePrimaryContainer.fileName);\n    Metadata.setFirstValue(newMetadata, 'dc.description', rawForm.descriptionContainer.description);\n    if (this.isIIIF) {\n      // It's helpful to remove these metadata elements entirely when the form value is empty.\n      // This avoids potential issues on the REST side and makes it possible to do things like\n      // remove an existing \"table of contents\" entry.\n      if (isEmpty(rawForm.iiifLabelContainer.iiifLabel)) {\n\n        delete newMetadata[this.IIIF_LABEL_METADATA];\n      } else {\n        Metadata.setFirstValue(newMetadata, this.IIIF_LABEL_METADATA, rawForm.iiifLabelContainer.iiifLabel);\n      }\n     if (isEmpty(rawForm.iiifTocContainer.iiifToc)) {\n       delete newMetadata[this.IIIF_TOC_METADATA];\n     } else {\n        Metadata.setFirstValue(newMetadata, this.IIIF_TOC_METADATA, rawForm.iiifTocContainer.iiifToc);\n     }\n      if (isEmpty(rawForm.iiifWidthContainer.iiifWidth)) {\n        delete newMetadata[this.IMAGE_WIDTH_METADATA];\n      } else {\n        Metadata.setFirstValue(newMetadata, this.IMAGE_WIDTH_METADATA, rawForm.iiifWidthContainer.iiifWidth);\n      }\n      if (isEmpty(rawForm.iiifHeightContainer.iiifHeight)) {\n        delete newMetadata[this.IMAGE_HEIGHT_METADATA];\n      } else {\n        Metadata.setFirstValue(newMetadata, this.IMAGE_HEIGHT_METADATA, rawForm.iiifHeightContainer.iiifHeight);\n      }\n    }\n    if (isNotEmpty(rawForm.formatContainer.newFormat)) {\n      Metadata.setFirstValue(newMetadata, 'dc.format', rawForm.formatContainer.newFormat);\n    }\n    updatedBitstream.metadata = newMetadata;\n    return updatedBitstream;\n  }\n\n  /**\n   * Cancel the form and return to the previous page\n   */\n  onCancel() {\n    this.navigateToItemEditBitstreams();\n  }\n\n  /**\n   * When the item ID is present, navigate back to the item's edit bitstreams page,\n   * otherwise retrieve the item ID based on the owning bundle's link\n   */\n  navigateToItemEditBitstreams() {\n    if (hasValue(this.itemId)) {\n      this.router.navigate([getEntityEditRoute(this.entityType, this.itemId), 'bitstreams']);\n    } else {\n      this.bitstream.bundle.pipe(getFirstSucceededRemoteDataPayload(),\n          mergeMap((bundle: Bundle) => bundle.item.pipe(getFirstSucceededRemoteDataPayload())))\n          .subscribe((item) => {\n            this.router.navigate(([getItemEditRoute(item), 'bitstreams']));\n          });\n    }\n  }\n\n  /**\n   * Verifies that the parent item is iiif-enabled. Checks bitstream mimetype to be\n   * sure it's an image, excluding bitstreams in the THUMBNAIL or OTHERCONTENT bundles.\n   * @param bitstream\n   */\n  setIiifStatus(bitstream: Bitstream) {\n\n    const regexExcludeBundles = /OTHERCONTENT|THUMBNAIL|LICENSE/;\n    const regexIIIFItem = /true|yes/i;\n\n    const isImage$ = this.bitstream.format.pipe(\n      getFirstSucceededRemoteData(),\n      map((format: RemoteData<BitstreamFormat>) => format.payload.mimetype.includes('image/')));\n\n    const isIIIFBundle$ = this.bitstream.bundle.pipe(\n      getFirstSucceededRemoteData(),\n      map((bundle: RemoteData<Bundle>) =>\n        this.dsoNameService.getName(bundle.payload).match(regexExcludeBundles) == null));\n\n    const isEnabled$ = this.bitstream.bundle.pipe(\n      getFirstSucceededRemoteData(),\n      map((bundle: RemoteData<Bundle>) => bundle.payload.item.pipe(\n          getFirstSucceededRemoteData(),\n          map((item: RemoteData<Item>) =>\n            (item.payload.firstMetadataValue('dspace.iiif.enabled') &&\n              item.payload.firstMetadataValue('dspace.iiif.enabled').match(regexIIIFItem) !== null)\n      ))));\n\n    const iiifSub = combineLatest(\n      isImage$,\n      isIIIFBundle$,\n      isEnabled$\n    ).subscribe(([isImage, isIIIFBundle, isEnabled]) => {\n      if (isImage && isIIIFBundle && isEnabled) {\n        this.isIIIF = true;\n        this.inputModels.push(this.iiifLabelModel);\n        this.formModel.push(this.iiifLabelContainer);\n        this.inputModels.push(this.iiifTocModel);\n        this.formModel.push(this.iiifTocContainer);\n        this.inputModels.push(this.iiifWidthModel);\n        this.formModel.push(this.iiifWidthContainer);\n        this.inputModels.push(this.iiifHeightModel);\n        this.formModel.push(this.iiifHeightContainer);\n      }\n      this.setForm();\n      this.changeDetectorRef.detectChanges();\n    });\n\n    this.subs.push(iiifSub);\n\n  }\n\n  /**\n   * Unsubscribe from open subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { Bitstream } from '../core/shared/bitstream.model';\nimport { BitstreamDataService } from '../core/data/bitstream-data.service';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific bitstream before the route is activated\n */\n@Injectable()\nexport class BitstreamPageResolver implements Resolve<RemoteData<Bitstream>> {\n  constructor(private bitstreamService: BitstreamDataService) {\n  }\n\n  /**\n   * Method for resolving a bitstream based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found bitstream based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Bitstream>> {\n    return this.bitstreamService.findById(route.params.id, true, false, ...this.followLinks)\n      .pipe(\n        getFirstCompletedRemoteData(),\n      );\n  }\n    /**\n     * Method that returns the follow links to already resolve\n     * The self links defined in this list are expected to be requested somewhere in the near future\n     * Requesting them as embeds will limit the number of requests\n     */\n    get followLinks(): FollowLinkConfig<Bitstream>[] {\n        return [\n            followLink('bundle', {}, followLink('item')),\n            followLink('format')\n        ];\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\nimport { RemoteData } from '../../core/data/remote-data';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\n\n@Component({\n  selector: 'ds-collection-authorizations',\n  templateUrl: './bitstream-authorizations.component.html',\n})\n/**\n * Component that handles the Collection Authorizations\n */\nexport class BitstreamAuthorizationsComponent<TDomain extends DSpaceObject> implements OnInit {\n\n  /**\n   * The initial DSO object\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the collection\n   */\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.data.pipe(first(), map((data) => data.bitstream));\n  }\n}\n","<div class=\"container\">\n  <ds-resource-policies [resourceType]=\"'bitstream'\" [resourceUUID]=\"(dsoRD$ | async)?.payload?.id\"></ds-resource-policies>\n  <div class=\"button-row bottom\">\n    <div class=\"text-right\">\n      <a [routerLink]=\"['/bitstreams', (dsoRD$ | async)?.payload?.id, 'edit']\" role=\"button\" class=\"btn btn-outline-secondary mr-1\">\n        <i class=\"fas fa-arrow-left\"></i> {{'bitstream.edit.return' | translate}}\n      </a>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Bitstream } from '../core/shared/bitstream.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { hasNoValue } from '../shared/empty.util';\nimport { BitstreamDataService } from '../core/data/bitstream-data.service';\n\n/**\n * This class resolves a bitstream based on the DSpace 6 XMLUI or JSPUI bitstream download URLs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LegacyBitstreamUrlResolver implements Resolve<RemoteData<Bitstream>> {\n  constructor(protected bitstreamDataService: BitstreamDataService) {\n  }\n\n  /**\n   * Resolve a bitstream based on the handle of the item, and the sequence id or the filename of the\n   * bitstream\n   *\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found bitstream based on the parameters in\n   * current route, or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n    Observable<RemoteData<Bitstream>> {\n      const prefix = route.params.prefix;\n      const suffix = route.params.suffix;\n      const filename = route.params.filename;\n\n      let sequenceId = route.params.sequence_id;\n      if (hasNoValue(sequenceId)) {\n        sequenceId = route.queryParams.sequenceId;\n      }\n\n      return this.bitstreamDataService.findByItemHandle(\n        `${prefix}/${suffix}`,\n        sequenceId,\n        filename,\n      ).pipe(\n        getFirstCompletedRemoteData()\n      );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EditBitstreamPageComponent } from './edit-bitstream-page/edit-bitstream-page.component';\nimport { AuthenticatedGuard } from '../core/auth/authenticated.guard';\nimport { BitstreamPageResolver } from './bitstream-page.resolver';\nimport { BitstreamDownloadPageComponent } from '../shared/bitstream-download-page/bitstream-download-page.component';\nimport { ResourcePolicyTargetResolver } from '../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyCreateComponent } from '../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyResolver } from '../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyEditComponent } from '../shared/resource-policies/edit/resource-policy-edit.component';\nimport { BitstreamAuthorizationsComponent } from './bitstream-authorizations/bitstream-authorizations.component';\nimport { LegacyBitstreamUrlResolver } from './legacy-bitstream-url.resolver';\n\nconst EDIT_BITSTREAM_PATH = ':id/edit';\nconst EDIT_BITSTREAM_AUTHORIZATIONS_PATH = ':id/authorizations';\n\n/**\n * Routing module to help navigate Bitstream pages\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        // Resolve XMLUI bitstream download URLs\n        path: 'handle/:prefix/:suffix/:filename',\n        component: BitstreamDownloadPageComponent,\n        resolve: {\n          bitstream: LegacyBitstreamUrlResolver\n        },\n      },\n      {\n        // Resolve JSPUI bitstream download URLs\n        path: ':prefix/:suffix/:sequence_id/:filename',\n        component: BitstreamDownloadPageComponent,\n        resolve: {\n          bitstream: LegacyBitstreamUrlResolver\n        },\n      },\n      {\n        // Resolve angular bitstream download URLs\n        path: ':id/download',\n        component: BitstreamDownloadPageComponent,\n        resolve: {\n          bitstream: BitstreamPageResolver\n        },\n      },\n      {\n        path: EDIT_BITSTREAM_PATH,\n        component: EditBitstreamPageComponent,\n        resolve: {\n          bitstream: BitstreamPageResolver\n        },\n        canActivate: [AuthenticatedGuard]\n      },\n      {\n        path: EDIT_BITSTREAM_AUTHORIZATIONS_PATH,\n\n        children: [\n          {\n            path: 'create',\n            resolve: {\n              resourcePolicyTarget: ResourcePolicyTargetResolver\n            },\n            component: ResourcePolicyCreateComponent,\n            data: { title: 'resource-policies.create.page.title', showBreadcrumbs: true }\n          },\n          {\n            path: 'edit',\n            resolve: {\n              resourcePolicy: ResourcePolicyResolver\n            },\n            component: ResourcePolicyEditComponent,\n            data: { title: 'resource-policies.edit.page.title', showBreadcrumbs: true }\n          },\n          {\n            path: '',\n            resolve: {\n              bitstream: BitstreamPageResolver\n            },\n            component: BitstreamAuthorizationsComponent,\n            data: { title: 'bitstream.edit.authorizations.title', showBreadcrumbs: true }\n          }\n        ]\n      }\n    ])\n  ],\n  providers: [\n    BitstreamPageResolver,\n  ]\n})\nexport class BitstreamPageRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { EditBitstreamPageComponent } from './edit-bitstream-page/edit-bitstream-page.component';\nimport { BitstreamPageRoutingModule } from './bitstream-page-routing.module';\nimport { BitstreamAuthorizationsComponent } from './bitstream-authorizations/bitstream-authorizations.component';\nimport { FormModule } from '../shared/form/form.module';\nimport { ResourcePoliciesModule } from '../shared/resource-policies/resource-policies.module';\n\n/**\n * This module handles all components that are necessary for Bitstream related pages\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    BitstreamPageRoutingModule,\n    FormModule,\n    ResourcePoliciesModule\n  ],\n  declarations: [\n    BitstreamAuthorizationsComponent,\n    EditBitstreamPageComponent\n  ]\n})\nexport class BitstreamPageModule {\n}\n","<ds-dynamic-form-control-container *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                                   [formId]=\"formId\"\n                                   [group]=\"formGroup\"\n                                   [hasErrorMessaging]=\"model.hasErrorMessages\"\n                                   [hidden]=\"model.hidden\"\n                                   [layout]=\"formLayout\"\n                                   [model]=\"model\"\n                                   [templates]=\"templates\"\n                                   [asBootstrapFormGroup]=\"true\"\n                                   (dfBlur)=\"onCustomEvent($event, blur)\"\n                                   (dfChange)=\"onCustomEvent($event, change)\"\n                                   (dfFocus)=\"onCustomEvent($event, focus)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></ds-dynamic-form-control-container>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormComponent,\n  DynamicFormControlContainerComponent,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicFormComponentService,\n  DynamicTemplateDirective,\n} from '@ng-dynamic-forms/core';\nimport { DsDynamicFormControlContainerComponent } from './ds-dynamic-form-control-container.component';\n\n@Component({\n  selector: 'ds-dynamic-form',\n  templateUrl: './ds-dynamic-form.component.html'\n})\nexport class DsDynamicFormComponent extends DynamicFormComponent {\n\n  @Input() formId: string;\n  @Input() formGroup: FormGroup;\n  @Input() formModel: DynamicFormControlModel[];\n  @Input() formLayout: DynamicFormLayout;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n\n  @Output() ngbEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n  @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n  @ViewChildren(DsDynamicFormControlContainerComponent) components: QueryList<DynamicFormControlContainerComponent>;\n\n  constructor(changeDetectorRef: ChangeDetectorRef, componentService: DynamicFormComponentService) {\n    super(changeDetectorRef, componentService);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormComponent } from './form.component';\nimport { DsDynamicFormComponent } from './builder/ds-dynamic-form-ui/ds-dynamic-form.component';\nimport {\n  DsDynamicFormControlContainerComponent,\n  dsDynamicFormControlMapFn\n} from './builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component';\nimport { DsDynamicListComponent } from './builder/ds-dynamic-form-ui/models/list/dynamic-list.component';\nimport { DsDynamicLookupComponent } from './builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component';\nimport { DsDynamicDisabledComponent } from './builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component';\nimport { DsDynamicLookupRelationModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { DsDynamicScrollableDropdownComponent } from './builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component';\nimport { DsDynamicTagComponent } from './builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component';\nimport { DsDynamicOneboxComponent } from './builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component';\nimport { DsDynamicRelationGroupComponent } from './builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.components';\nimport { DsDatePickerComponent } from './builder/ds-dynamic-form-ui/models/date-picker/date-picker.component';\nimport { DsDynamicFormGroupComponent } from './builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component';\nimport { DsDynamicFormArrayComponent } from './builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component';\nimport { DsDatePickerInlineComponent } from './builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component';\nimport { DsDynamicLookupRelationSearchTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component';\nimport { DsDynamicLookupRelationSelectionTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component';\nimport { DsDynamicLookupRelationExternalSourceTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component';\nimport { SharedModule } from '../shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SearchModule } from '../search/search.module';\nimport { DYNAMIC_FORM_CONTROL_MAP_FN, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport { ExistingMetadataListElementComponent } from './builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component';\nimport { ExistingRelationListElementComponent } from './builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component';\nimport { ExternalSourceEntryImportModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component';\nimport { CustomSwitchComponent } from './builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component';\nimport { DynamicFormsNGBootstrapUIModule } from '@ng-dynamic-forms/ui-ng-bootstrap';\n\nconst COMPONENTS = [\n  CustomSwitchComponent,\n  DsDynamicFormComponent,\n  DsDynamicFormControlContainerComponent,\n  DsDynamicListComponent,\n  DsDynamicLookupComponent,\n  DsDynamicLookupRelationSearchTabComponent,\n  DsDynamicLookupRelationSelectionTabComponent,\n  DsDynamicLookupRelationExternalSourceTabComponent,\n  DsDynamicDisabledComponent,\n  DsDynamicLookupRelationModalComponent,\n  DsDynamicScrollableDropdownComponent,\n  DsDynamicTagComponent,\n  DsDynamicOneboxComponent,\n  DsDynamicRelationGroupComponent,\n  DsDatePickerComponent,\n  DsDynamicFormGroupComponent,\n  DsDynamicFormArrayComponent,\n  DsDatePickerInlineComponent,\n  ExistingMetadataListElementComponent,\n  ExistingRelationListElementComponent,\n  ExternalSourceEntryImportModalComponent,\n  FormComponent\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    DynamicFormsCoreModule,\n    DynamicFormsNGBootstrapUIModule,\n    SearchModule,\n    SharedModule,\n    TranslateModule\n  ],\n  exports: [\n    ...COMPONENTS\n  ],\n  providers: [\n    {\n      provide: DYNAMIC_FORM_CONTROL_MAP_FN,\n      useValue: dsDynamicFormControlMapFn\n    }\n  ]\n})\nexport class FormModule {\n}\n","import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getAccessControlModuleRoute } from '../app-routing-paths';\n\nexport const GROUP_EDIT_PATH = 'groups';\n\nexport function getGroupsRoute() {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH).toString();\n}\n\nexport function getGroupEditRoute(id: string) {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH, id).toString();\n}\n"]}