{"version":3,"sources":["webpack:///src/app/request-copy/request-copy-routing-paths.ts","webpack:///src/app/request-copy/grant-deny-request-copy/grant-deny-request-copy.component.html","webpack:///src/app/request-copy/grant-deny-request-copy/grant-deny-request-copy.component.ts","webpack:///src/app/request-copy/request-copy.resolver.ts","webpack:///src/app/request-copy/email-request-copy/request-copy-email.model.ts","webpack:///src/app/request-copy/email-request-copy/email-request-copy.component.html","webpack:///src/app/request-copy/email-request-copy/email-request-copy.component.ts","webpack:///src/app/request-copy/deny-request-copy/deny-request-copy.component.html","webpack:///src/app/request-copy/deny-request-copy/deny-request-copy.component.ts","webpack:///src/app/request-copy/grant-request-copy/grant-request-copy.component.html","webpack:///src/app/request-copy/grant-request-copy/grant-request-copy.component.ts","webpack:///src/app/request-copy/request-copy-routing.module.ts","webpack:///src/app/request-copy/request-copy.module.ts"],"names":["getRequestCopyRoute","token","toString","GrantDenyRequestCopyComponent","constructor","router","route","authService","itemDataService","nameService","ngOnInit","this","itemRequestRD$","data","pipe","map","request","g","itemRD$","switchMap","itemRequest","findById","itemId","itemName$","item","getName","itemUrl$","denyRoute$","grantRoute$","RequestCopyResolver","itemRequestDataService","resolve","state","params","RequestCopyEmail","subject","message","EmailRequestCopyComponent","location","send","EventEmitter","submit","emit","return","back","DenyRequestCopyComponent","translateService","itemRequestService","notificationsService","msgParams$","getAuthenticatedUserFromStore","user","uri","firstMetadataValue","Object","assign","recipientName","requestName","itemUrl","handle","itemName","authorName","name","authorEmail","email","subject$","get","message$","deny","subscribe","rd","hasSucceeded","success","navigateByUrl","error","errorMessage","GrantRequestCopyComponent","suggestOpenAccess","grant","RequestCopyRoutingModule","forChild","path","children","component","RequestCopyModule"],"mappings":"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","file":"x","sourcesContent":["import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getRequestCopyModulePath } from '../app-routing-paths';\n\nexport function getRequestCopyRoute(token: string) {\n  return new URLCombiner(getRequestCopyModulePath(), token).toString();\n}\n\nexport const REQUEST_COPY_DENY_PATH = 'deny';\n\nexport function getRequestCopyDenyRoute(token: string) {\n  return new URLCombiner(getRequestCopyRoute(token), REQUEST_COPY_DENY_PATH).toString();\n}\n\nexport const REQUEST_COPY_GRANT_PATH = 'grant';\n\nexport function getRequestCopyGrantRoute(token: string) {\n  return new URLCombiner(getRequestCopyRoute(token), REQUEST_COPY_GRANT_PATH).toString();\n}\n","<div class=\"container\" *ngVar=\"(itemRequestRD$ | async) as itemRequestRD\">\n  <h3 class=\"mb-4\">{{'grant-deny-request-copy.header' | translate}}</h3>\n  <div *ngIf=\"itemRequestRD && itemRequestRD.hasSucceeded\">\n    <div *ngIf=\"!itemRequestRD.payload.decisionDate\">\n      <p [innerHTML]=\"'grant-deny-request-copy.intro1' | translate:{ url: (itemUrl$ | async), name: (itemName$ | async) }\"></p>\n      <p>{{'grant-deny-request-copy.intro2' | translate}}</p>\n\n      <div class=\"btn-group \">\n        <a [routerLink]=\"grantRoute$ | async\"\n           class=\"btn btn-outline-primary\"\n           title=\"{{'grant-deny-request-copy.grant' | translate }}\">\n          {{'grant-deny-request-copy.grant' | translate }}\n        </a>\n\n        <a [routerLink]=\"denyRoute$ | async\"\n           class=\"btn btn-outline-danger\"\n           title=\"{{'grant-deny-request-copy.deny' | translate }}\">\n          {{'grant-deny-request-copy.deny' | translate }}\n        </a>\n      </div>\n    </div>\n    <div *ngIf=\"itemRequestRD.payload.decisionDate\" class=\"processed-message\">\n      <p>{{'grant-deny-request-copy.processed' | translate}}</p>\n      <p class=\"text-center\">\n        <a routerLink=\"/home\" class=\"btn btn-primary\">{{'grant-deny-request-copy.home-page' | translate}}</a>\n      </p>\n    </div>\n  </div>\n  <ds-loading *ngIf=\"!itemRequestRD || itemRequestRD?.isLoading\"></ds-loading>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ItemRequest } from '../../core/shared/item-request.model';\nimport { Observable } from 'rxjs';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload,\n  redirectOn4xx\n} from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { getRequestCopyDenyRoute, getRequestCopyGrantRoute } from '../request-copy-routing-paths';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { getItemPageRoute } from '../../item-page/item-page-routing-paths';\n\n@Component({\n  selector: 'ds-grant-deny-request-copy',\n  styleUrls: ['./grant-deny-request-copy.component.scss'],\n  templateUrl: './grant-deny-request-copy.component.html'\n})\n/**\n * Component for an author to decide to grant or deny an item request\n */\nexport class GrantDenyRequestCopyComponent implements OnInit {\n  /**\n   * The item request to grant or deny\n   */\n  itemRequestRD$: Observable<RemoteData<ItemRequest>>;\n\n  /**\n   * The item the request is requesting access to\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The name of the item\n   */\n  itemName$: Observable<string>;\n\n  /**\n   * The url of the item\n   */\n  itemUrl$: Observable<string>;\n\n  /**\n   * The route to the page for denying access to the item\n   */\n  denyRoute$: Observable<string>;\n\n  /**\n   * The route to the page for granting access to the item\n   */\n  grantRoute$: Observable<string>;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private itemDataService: ItemDataService,\n    private nameService: DSONameService,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.itemRequestRD$ = this.route.data.pipe(\n      map((data) => data.request as RemoteData<ItemRequest>),\n      getFirstCompletedRemoteData(),\n      redirectOn4xx(this.router, this.authService),\n    );\n    this.itemRD$ = this.itemRequestRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((itemRequest: ItemRequest) => this.itemDataService.findById(itemRequest.itemId)),\n    );\n    this.itemName$ = this.itemRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((item) => this.nameService.getName(item)),\n    );\n    this.itemUrl$ = this.itemRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((item) => getItemPageRoute(item)),\n    );\n\n    this.denyRoute$ = this.itemRequestRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((itemRequest: ItemRequest) => getRequestCopyDenyRoute(itemRequest.token))\n    );\n    this.grantRoute$ = this.itemRequestRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((itemRequest: ItemRequest) => getRequestCopyGrantRoute(itemRequest.token))\n    );\n  }\n\n}\n","import { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemRequest } from '../core/shared/item-request.model';\nimport { Observable } from 'rxjs';\nimport { ItemRequestDataService } from '../core/data/item-request-data.service';\nimport { Injectable } from '@angular/core';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\n\n/**\n * Resolves an {@link ItemRequest} from the token found in the route's parameters\n */\n@Injectable()\nexport class RequestCopyResolver implements Resolve<RemoteData<ItemRequest>> {\n\n  constructor(\n    private itemRequestDataService: ItemRequestDataService,\n  ) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<ItemRequest>> | Promise<RemoteData<ItemRequest>> | RemoteData<ItemRequest> {\n    return this.itemRequestDataService.findById(route.params.token).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n\n}\n","/**\n * A class representing an email to send back to the user requesting an item\n */\nexport class RequestCopyEmail {\n  constructor(public subject: string,\n              public message: string) {\n  }\n}\n","<form>\n  <div class=\"form-group\">\n    <label for=\"subject\">{{ 'grant-deny-request-copy.email.subject' | translate }}</label>\n    <input type=\"text\" class=\"form-control\" id=\"subject\" [ngClass]=\"{'is-invalid': !subject || subject.length === 0}\" [(ngModel)]=\"subject\" name=\"subject\">\n    <div *ngIf=\"!subject || subject.length === 0\" class=\"invalid-feedback\">\n      {{ 'grant-deny-request-copy.email.subject.empty' | translate }}\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"message\">{{ 'grant-deny-request-copy.email.message' | translate }}</label>\n    <textarea class=\"form-control\" id=\"message\" rows=\"8\" [ngClass]=\"{'is-invalid': !message || message.length === 0}\" [(ngModel)]=\"message\" name=\"message\"></textarea>\n    <div *ngIf=\"!message || message.length === 0\" class=\"invalid-feedback\">\n      {{ 'grant-deny-request-copy.email.message.empty' | translate }}\n    </div>\n  </div>\n  <ng-content></ng-content>\n  <div class=\"d-flex flex-row-reverse\">\n    <button (click)=\"submit()\"\n            [disabled]=\"!message || message.length === 0 || !subject || subject.length === 0\"\n            class=\"btn btn-primary\"\n            title=\"{{'grant-deny-request-copy.email.send' | translate }}\">\n      <i class=\"fas fa-envelope\"></i> {{'grant-deny-request-copy.email.send' | translate }}\n    </button>\n    <button (click)=\"return()\"\n            class=\"btn btn-outline-secondary mr-1\"\n            title=\"{{'grant-deny-request-copy.email.back' | translate }}\">\n      <i class=\"fas fa-arrow-left\"></i> {{'grant-deny-request-copy.email.back' | translate }}\n    </button>\n  </div>\n</form>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { RequestCopyEmail } from './request-copy-email.model';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'ds-email-request-copy',\n  styleUrls: ['./email-request-copy.component.scss'],\n  templateUrl: './email-request-copy.component.html'\n})\n/**\n * A form component for an email to send back to the user requesting an item\n */\nexport class EmailRequestCopyComponent {\n  /**\n   * Event emitter for sending the email\n   */\n  @Output() send: EventEmitter<RequestCopyEmail> = new EventEmitter<RequestCopyEmail>();\n\n  /**\n   * The subject of the email\n   */\n  @Input() subject: string;\n\n  /**\n   * The contents of the email\n   */\n  @Input() message: string;\n\n  constructor(protected location: Location) {\n  }\n\n  /**\n   * Submit the email\n   */\n  submit() {\n    this.send.emit(new RequestCopyEmail(this.subject, this.message));\n  }\n\n  /**\n   * Return to the previous page\n   */\n  return() {\n    this.location.back();\n  }\n}\n","<div class=\"container\" *ngVar=\"(itemRequestRD$ | async) as itemRequestRD\">\n  <h3 class=\"mb-4\">{{'deny-request-copy.header' | translate}}</h3>\n  <div *ngIf=\"itemRequestRD && itemRequestRD.hasSucceeded\">\n    <p>{{'deny-request-copy.intro' | translate}}</p>\n\n    <ds-email-request-copy [subject]=\"subject$ | async\" [message]=\"message$ | async\" (send)=\"deny($event)\"></ds-email-request-copy>\n  </div>\n  <ds-loading *ngIf=\"!itemRequestRD || itemRequestRD?.isLoading\"></ds-loading>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ItemRequest } from '../../core/shared/item-request.model';\nimport { Observable } from 'rxjs';\nimport {\n  getFirstCompletedRemoteData, getFirstSucceededRemoteDataPayload,\n  redirectOn4xx\n} from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest as observableCombineLatest } from 'rxjs';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { Item } from '../../core/shared/item.model';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { ItemRequestDataService } from '../../core/data/item-request-data.service';\nimport { RequestCopyEmail } from '../email-request-copy/request-copy-email.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\n\n@Component({\n  selector: 'ds-deny-request-copy',\n  styleUrls: ['./deny-request-copy.component.scss'],\n  templateUrl: './deny-request-copy.component.html'\n})\n/**\n * Component for denying an item request\n */\nexport class DenyRequestCopyComponent implements OnInit {\n  /**\n   * The item request to deny\n   */\n  itemRequestRD$: Observable<RemoteData<ItemRequest>>;\n\n  /**\n   * The default subject of the message to send to the user requesting the item\n   */\n  subject$: Observable<string>;\n  /**\n   * The default contents of the message to send to the user requesting the item\n   */\n  message$: Observable<string>;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private translateService: TranslateService,\n    private itemDataService: ItemDataService,\n    private nameService: DSONameService,\n    private itemRequestService: ItemRequestDataService,\n    private notificationsService: NotificationsService,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.itemRequestRD$ = this.route.data.pipe(\n      map((data) => data.request as RemoteData<ItemRequest>),\n      getFirstCompletedRemoteData(),\n      redirectOn4xx(this.router, this.authService),\n    );\n\n    const msgParams$ = observableCombineLatest(\n      this.itemRequestRD$.pipe(getFirstSucceededRemoteDataPayload()),\n      this.authService.getAuthenticatedUserFromStore(),\n    ).pipe(\n      switchMap(([itemRequest, user]: [ItemRequest, EPerson]) => {\n        return this.itemDataService.findById(itemRequest.itemId).pipe(\n          getFirstSucceededRemoteDataPayload(),\n          map((item: Item) => {\n            const uri = item.firstMetadataValue('dc.identifier.uri');\n            return Object.assign({\n              recipientName: itemRequest.requestName,\n              itemUrl: isNotEmpty(uri) ? uri : item.handle,\n              itemName: this.nameService.getName(item),\n              authorName: user.name,\n              authorEmail: user.email,\n            });\n          }),\n        );\n      }),\n    );\n\n    this.subject$ = this.translateService.get('deny-request-copy.email.subject');\n    this.message$ = msgParams$.pipe(\n      switchMap((params) => this.translateService.get('deny-request-copy.email.message', params)),\n    );\n  }\n\n  /**\n   * Deny the item request\n   * @param email Subject and contents of the message to send back to the user requesting the item\n   */\n  deny(email: RequestCopyEmail) {\n    this.itemRequestRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((itemRequest: ItemRequest) => this.itemRequestService.deny(itemRequest.token, email)),\n      getFirstCompletedRemoteData()\n    ).subscribe((rd) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get('deny-request-copy.success'));\n        this.router.navigateByUrl('/');\n      } else {\n        this.notificationsService.error(this.translateService.get('deny-request-copy.error'), rd.errorMessage);\n      }\n    });\n  }\n\n}\n","<div class=\"container\" *ngVar=\"(itemRequestRD$ | async) as itemRequestRD\">\n  <h3 class=\"mb-4\">{{'grant-request-copy.header' | translate}}</h3>\n  <div *ngIf=\"itemRequestRD && itemRequestRD.hasSucceeded\">\n    <p>{{'grant-request-copy.intro' | translate}}</p>\n\n    <ds-email-request-copy [subject]=\"subject$ | async\" [message]=\"message$ | async\" (send)=\"grant($event)\">\n      <p>{{ 'grant-deny-request-copy.email.permissions.info' | translate }}</p>\n      <form class=\"mb-3\">\n        <div class=\"form-check\">\n          <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"permissions\" [(ngModel)]=\"suggestOpenAccess\" name=\"permissions\">\n          <label class=\"form-check-label\" for=\"permissions\">{{ 'grant-deny-request-copy.email.permissions.label' | translate }}</label>\n        </div>\n      </form>\n    </ds-email-request-copy>\n  </div>\n  <ds-loading *ngIf=\"!itemRequestRD || itemRequestRD?.isLoading\"></ds-loading>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ItemRequest } from '../../core/shared/item-request.model';\nimport { Observable } from 'rxjs';\nimport {\n  getFirstCompletedRemoteData, getFirstSucceededRemoteDataPayload,\n  redirectOn4xx\n} from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest as observableCombineLatest } from 'rxjs';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { Item } from '../../core/shared/item.model';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { ItemRequestDataService } from '../../core/data/item-request-data.service';\nimport { RequestCopyEmail } from '../email-request-copy/request-copy-email.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\n\n@Component({\n  selector: 'ds-grant-request-copy',\n  styleUrls: ['./grant-request-copy.component.scss'],\n  templateUrl: './grant-request-copy.component.html'\n})\n/**\n * Component for granting an item request\n */\nexport class GrantRequestCopyComponent implements OnInit {\n  /**\n   * The item request to accept\n   */\n  itemRequestRD$: Observable<RemoteData<ItemRequest>>;\n\n  /**\n   * The default subject of the message to send to the user requesting the item\n   */\n  subject$: Observable<string>;\n  /**\n   * The default contents of the message to send to the user requesting the item\n   */\n  message$: Observable<string>;\n\n  /**\n   * Whether or not the item should be open access, to avoid future requests\n   * Defaults to false\n   */\n  suggestOpenAccess = false;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private translateService: TranslateService,\n    private itemDataService: ItemDataService,\n    private nameService: DSONameService,\n    private itemRequestService: ItemRequestDataService,\n    private notificationsService: NotificationsService,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.itemRequestRD$ = this.route.data.pipe(\n      map((data) => data.request as RemoteData<ItemRequest>),\n      getFirstCompletedRemoteData(),\n      redirectOn4xx(this.router, this.authService),\n    );\n\n    const msgParams$ = observableCombineLatest(\n      this.itemRequestRD$.pipe(getFirstSucceededRemoteDataPayload()),\n      this.authService.getAuthenticatedUserFromStore(),\n    ).pipe(\n      switchMap(([itemRequest, user]: [ItemRequest, EPerson]) => {\n        return this.itemDataService.findById(itemRequest.itemId).pipe(\n          getFirstSucceededRemoteDataPayload(),\n          map((item: Item) => {\n            const uri = item.firstMetadataValue('dc.identifier.uri');\n            return Object.assign({\n              recipientName: itemRequest.requestName,\n              itemUrl: isNotEmpty(uri) ? uri : item.handle,\n              itemName: this.nameService.getName(item),\n              authorName: user.name,\n              authorEmail: user.email,\n            });\n          }),\n        );\n      }),\n    );\n\n    this.subject$ = this.translateService.get('grant-request-copy.email.subject');\n    this.message$ = msgParams$.pipe(\n      switchMap((params) => this.translateService.get('grant-request-copy.email.message', params)),\n    );\n  }\n\n  /**\n   * Grant the item request\n   * @param email Subject and contents of the message to send back to the user requesting the item\n   */\n  grant(email: RequestCopyEmail) {\n    this.itemRequestRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((itemRequest: ItemRequest) => this.itemRequestService.grant(itemRequest.token, email, this.suggestOpenAccess)),\n      getFirstCompletedRemoteData()\n    ).subscribe((rd) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get('grant-request-copy.success'));\n        this.router.navigateByUrl('/');\n      } else {\n        this.notificationsService.error(this.translateService.get('grant-request-copy.error'), rd.errorMessage);\n      }\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { RequestCopyResolver } from './request-copy.resolver';\nimport { GrantDenyRequestCopyComponent } from './grant-deny-request-copy/grant-deny-request-copy.component';\nimport { REQUEST_COPY_DENY_PATH, REQUEST_COPY_GRANT_PATH } from './request-copy-routing-paths';\nimport { DenyRequestCopyComponent } from './deny-request-copy/deny-request-copy.component';\nimport { GrantRequestCopyComponent } from './grant-request-copy/grant-request-copy.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: ':token',\n        resolve: {\n          request: RequestCopyResolver\n        },\n        children: [\n          {\n            path: '',\n            component: GrantDenyRequestCopyComponent,\n          },\n          {\n            path: REQUEST_COPY_DENY_PATH,\n            component: DenyRequestCopyComponent,\n          },\n          {\n            path: REQUEST_COPY_GRANT_PATH,\n            component: GrantRequestCopyComponent,\n          },\n        ]\n      }\n    ])\n  ],\n  providers: [\n    RequestCopyResolver,\n    GrantDenyRequestCopyComponent\n  ]\n})\nexport class RequestCopyRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { GrantDenyRequestCopyComponent } from './grant-deny-request-copy/grant-deny-request-copy.component';\nimport { RequestCopyRoutingModule } from './request-copy-routing.module';\nimport { DenyRequestCopyComponent } from './deny-request-copy/deny-request-copy.component';\nimport { EmailRequestCopyComponent } from './email-request-copy/email-request-copy.component';\nimport { GrantRequestCopyComponent } from './grant-request-copy/grant-request-copy.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RequestCopyRoutingModule\n  ],\n  declarations: [\n    GrantDenyRequestCopyComponent,\n    DenyRequestCopyComponent,\n    EmailRequestCopyComponent,\n    GrantRequestCopyComponent,\n  ],\n  providers: []\n})\n\n/**\n * Module related to components used to grant or deny an item request\n */\nexport class RequestCopyModule {\n\n}\n"]}