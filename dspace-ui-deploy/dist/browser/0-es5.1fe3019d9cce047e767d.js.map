{"version":3,"sources":["webpack:///src/app/shared/search/search-filters/search-filter/search-filter-type-decorator.ts","webpack:///src/app/shared/search/search-settings/search-settings.component.ts","webpack:///src/app/shared/search/search-settings/search-settings.component.html","webpack:///src/app/shared/search/search.component.ts","webpack:///src/app/shared/search/search.component.html","webpack:///src/app/shared/search/search-switch-configuration/search-switch-configuration.component.ts","webpack:///src/app/shared/search/search-switch-configuration/search-switch-configuration.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/search\\-page\\/configuration\\-search\\-page\\.component$ namespace object","webpack:///src/app/shared/search/search.utils.ts","webpack:///src/app/shared/search/search-results/search-results.component.ts","webpack:///src/app/shared/search/search-results/search-results.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-wrapper/search-facet-filter-wrapper.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-wrapper/search-facet-filter-wrapper.component.html","webpack:///src/app/search-page/configuration-search-page.component.ts","webpack:///src/app/shared/search/search-labels/search-label/search-label.component.ts","webpack:///src/app/shared/search/search-labels/search-label/search-label.component.html","webpack:///src/app/shared/search/search-labels/search-labels.component.ts","webpack:///src/app/shared/search/search-labels/search-labels.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter/search-facet-filter.component.ts","webpack:///src/app/shared/search/models/filter-type.model.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-range-filter/search-range-filter.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-range-filter/search-range-filter.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-options/search-facet-selected-option/search-facet-selected-option.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-options/search-facet-selected-option/search-facet-selected-option.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-options/search-facet-option/search-facet-option.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-options/search-facet-option/search-facet-option.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-text-filter/search-text-filter.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-text-filter/search-text-filter.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-hierarchy-filter/search-hierarchy-filter.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-hierarchy-filter/search-hierarchy-filter.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-boolean-filter/search-boolean-filter.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-boolean-filter/search-boolean-filter.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-options/search-facet-range-option/search-facet-range-option.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-facet-filter-options/search-facet-range-option/search-facet-range-option.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-authority-filter/search-authority-filter.component.html","webpack:///src/app/shared/search/search-filters/search-filter/search-authority-filter/search-authority-filter.component.ts","webpack:///src/app/shared/search/search.module.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-filter.component.ts","webpack:///src/app/shared/search/search-filters/search-filter/search-filter.component.html","webpack:///src/app/shared/search/search-sidebar/search-sidebar.component.ts","webpack:///src/app/shared/search/search-sidebar/search-sidebar.component.html","webpack:///src/app/search-page/themed-configuration-search-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/shared/search/search-filters/search-filters.component.ts","webpack:///src/app/shared/search/search-filters/search-filters.component.html"],"names":["filterTypeMap","Map","renderFacetFor","type","objectElement","set","renderFilterType","get","SearchSettingsComponent","constructor","service","route","router","paginationService","searchConfigurationService","reloadOrder","event","values","target","value","split","this","updateRoute","paginationID","sortField","sortDirection","page","SEARCH_CONFIG_SERVICE","deselectObject","selectObject","SearchComponent","sidebarService","windowService","searchConfigService","routeService","configurationList","context","Search","configuration","useCachedVersionIfAvailable","inPlaceSearch","paginationId","searchEnabled","sideBarWidth","searchFormPlaceholder","selectable","showSidebar","showViewModes","currentConfiguration$","currentContext$","currentScope$","currentSortOptions$","resultsRD$","searchOptions$","sortOptionsList$","initialized$","resultFound","EventEmitter","isXsOrSm$","isXsOrSm","ngOnInit","useUniquePageId","uniqueId","setPaginationId","setParameter","fixedFilterQuery","isSidebarCollapsed$","isSidebarCollapsed","searchLink","getSearchLink","next","configuration$","getCurrentConfiguration","pipe","searchSortOptions$","getConfigurationSearchConfig","searchConfig","getConfigurationSortOptions","sortOption$","searchSortOptions","getCurrentSort","getSearchOptions","sub","searchOptions","pagination","id","subscribe","sortOption","combinedOptions","Object","assign","sort","newSearchOptions","JSON","stringify","scope","retrieveSearchResults","changeContext","closeSidebar","collapse","changeViewMode","openSidebar","expand","ngOnDestroy","unsubscribe","paginatedSearchOptions","search","isOptional","g","results","hasSucceeded","payload","length","emit","isCollapsed","SearchSwitchConfigurationComponent","searchService","changeConfiguration","defaultConfiguration","currentConfiguration","index","findIndex","selectedOption","onSelect","navigationExtras","queryParams","navigate","getSearchLinkParts","compare","item1","item2","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","module","exports","getFacetValueForType","facetValue","searchFilterConfig","regex","RegExp","escapeRegExp","paramName","_links","exec","href","authorityKey","addOperatorToFilterValue","input","replace","stripOperatorFromFilterValue","lastIndexOf","substring","operator","endsWith","SearchResultsComponent","hasNoValue","disableHeader","hidePaginationDetail","selectionConfig","isLoading","showError","searchResults","hasFailed","errorMessage","statusCode","errorMessageLabel","surroundStringWithQuotes","result","startsWith","SearchFacetFilterWrapperComponent","injector","searchFilter","getSearchFilter","objectInjector","Injector","create","providers","provide","useFactory","deps","parent","filterConfig","filterType","ConfigurationSearchPageComponent","super","useClass","SearchLabelComponent","removeParameters","getRemoveParams","filterName","getFilterName","appliedFilters","filters","field","find","f","key","newValues","filter","v","getPageParam","normalizeFilterValue","SearchLabelsComponent","getCurrentFrontendFilters","params","labels","forEach","SearchFacetFilterComponent","filterService","rdbs","isLastPage$","BehaviorSubject","subs","filterSearchResults","collapseNextUpdate","animationState","currentUrl","url","filterValues$","currentPage","getCurrentPage","distinctUntilChanged","push","updateFilterValueList","facetValues$","options","switchMap","getFacetValuesFor","filterValues","facetOutcome","newValues$","showFirstPageOnly","aggregate","tap","rd","selectedValues$","getSelectedValuesForFilter","selectedValues","fValue","concat","getFacetValue","label","take","isChecked","isFilterActiveWithValue","showMore","incrementPage","name","resetPage","getPage","onSubmit","data","facet","queryParamsHandling","onClick","hasValue","findSuggestions","toLowerCase","displayValue","getDisplayValue","query","transform","count","trackUpdate","facetLoad","opacity","FilterType","authority","text","range","hierarchy","SearchRangeFilterComponent","SearchFacetSelectedOptionComponent","dateFormats","platformId","min","max","Date","getUTCFullYear","moment","minValue","year","maxValue","iniMin","getQueryParameterValue","startWith","iniMax","minmax","keyboardControl","newMin","newMax","startKeyboardControl","stopKeyboardControl","shouldShowSlider","PLATFORM_ID","updateRemoveParams","removeQueryParams","selectedValue","SearchFacetOptionComponent","isVisible","checked","updateAddParams","addQueryParams","filterValue","SearchTextFilterComponent","a","SearchHierarchyFilterComponent","SearchBooleanFilterComponent","SearchFacetRangeOptionComponent","updateChangeParams","parts","trim","changeQueryParams","SearchAuthorityFilterComponent","SearchModule","ENTRY_COMPONENTS","static","ngModule","component","forChild","missingTranslationHandler","useDefaultLang","withEntryComponents","SearchFilterComponent","sequenceService","focusBox","sequenceId","getSelectedValues","active$","isActive","collapsed$","initializeFilter","toggle","finishSlide","fromState","closed","toState","notab","startSlide","regionId","toggleId","RD","valuesRD","totalElements","SearchSidebarComponent","toggleSidebar","ThemedConfigurationSearchPageComponent","inAndOutputNames","getComponentName","importThemedComponent","themeName","importUnthemedComponent","SearchFiltersComponent","initFilters","refreshFilters","clearParams","getConfig","currentScope","config"],"mappings":"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","file":"x","sourcesContent":["import { FilterType } from '../../models/filter-type.model';\n\n/**\n * Contains the mapping between a facet component and a FilterType\n */\nconst filterTypeMap = new Map();\n\n/**\n * Sets the mapping for a facet component in relation to a filter type\n * @param {FilterType} type The type for which the matching component is mapped\n * @returns Decorator function that performs the actual mapping on initialization of the facet component\n */\nexport function renderFacetFor(type: FilterType) {\n  return function decorator(objectElement: any) {\n    if (!objectElement) {\n      return;\n    }\n    filterTypeMap.set(type, objectElement);\n  };\n}\n\n/**\n * Requests the matching facet component based on a given filter type\n * @param {FilterType} type The filter type for which the facet component is requested\n * @returns The facet component's constructor that matches the given filter type\n */\nexport function renderFilterType(type: FilterType) {\n  return filterTypeMap.get(type);\n}\n","import { Component, Inject, Input } from '@angular/core';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { SortDirection, SortOptions } from '../../../core/cache/models/sort-options.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SearchConfigurationService } from '../../../core/shared/search/search-configuration.service';\nimport { SEARCH_CONFIG_SERVICE } from '../../../my-dspace-page/my-dspace-page.component';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-search-settings',\n  styleUrls: ['./search-settings.component.scss'],\n  templateUrl: './search-settings.component.html'\n})\n\n/**\n * This component represents the part of the search sidebar that contains the general search settings.\n */\nexport class SearchSettingsComponent {\n  /**\n   * The current sort option used\n   */\n  @Input() currentSortOption: SortOptions;\n\n  /**\n   * All sort options that are shown in the settings\n   */\n  @Input() sortOptionsList: SortOptions[];\n\n  constructor(private service: SearchService,\n              private route: ActivatedRoute,\n              private router: Router,\n              private paginationService: PaginationService,\n              @Inject(SEARCH_CONFIG_SERVICE) public searchConfigurationService: SearchConfigurationService) {\n  }\n\n  /**\n   * Method to change the current sort field and direction\n   * @param {Event} event Change event containing the sort direction and sort field\n   */\n  reloadOrder(event: Event) {\n    const values = (event.target as HTMLInputElement).value.split(',');\n    this.paginationService.updateRoute(this.searchConfigurationService.paginationID, {\n      sortField: values[0],\n      sortDirection: values[1] as SortDirection,\n      page: 1\n    });\n  }\n}\n","<ng-container>\n    <h3>{{ 'search.sidebar.settings.title' | translate}}</h3>\n    <div class=\"result-order-settings\">\n    <ds-sidebar-dropdown *ngIf=\"sortOptionsList\"\n                         [id]=\"'search-sidebar-sort'\"\n                         [label]=\"'search.sidebar.settings.sort-by'\"\n                         (change)=\"reloadOrder($event)\">\n        <option *ngFor=\"let sortOptionsEntry of sortOptionsList\"\n                [value]=\"sortOptionsEntry.field + ',' + sortOptionsEntry.direction.toString()\"\n                [selected]=\"sortOptionsEntry.field === currentSortOption?.field && sortOptionsEntry.direction === (currentSortOption?.direction)? 'selected': null\">\n            {{'sorting.' + sortOptionsEntry.field + '.' + sortOptionsEntry.direction | translate}}\n        </option>\n    </ds-sidebar-dropdown>\n    </div>\n    <ds-page-size-selector></ds-page-size-selector>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { uniqueId } from 'lodash';\n\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { pushInOut } from '../animations/push';\nimport { HostWindowService } from '../host-window.service';\nimport { SidebarService } from '../sidebar/sidebar.service';\nimport { hasValue } from '../empty.util';\nimport { RouteService } from '../../core/services/route.service';\nimport { SEARCH_CONFIG_SERVICE } from '../../my-dspace-page/my-dspace-page.component';\nimport { PaginatedSearchOptions } from './models/paginated-search-options.model';\nimport { SearchResult } from './models/search-result.model';\nimport { SearchConfigurationService } from '../../core/shared/search/search-configuration.service';\nimport { SearchService } from '../../core/shared/search/search.service';\nimport { currentPath } from '../utils/route.utils';\nimport { Context } from '../../core/shared/context.model';\nimport { SortOptions } from '../../core/cache/models/sort-options.model';\nimport { SearchConfig } from '../../core/shared/search/search-filters/search-config.model';\nimport { SearchConfigurationOption } from './search-switch-configuration/search-configuration-option.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport { followLink } from '../utils/follow-link-config.model';\nimport { Item } from '../../core/shared/item.model';\nimport { SearchObjects } from './models/search-objects.model';\nimport { ViewMode } from '../../core/shared/view-mode.model';\nimport { SelectionConfig } from './search-results/search-results.component';\nimport { ListableObject } from '../object-collection/shared/listable-object.model';\nimport { CollectionElementLinkType } from '../object-collection/collection-element-link.type';\n\n@Component({\n  selector: 'ds-search',\n  styleUrls: ['./search.component.scss'],\n  templateUrl: './search.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [pushInOut],\n})\n\n/**\n * This component renders a sidebar, a search input bar and the search results.\n */\nexport class SearchComponent implements OnInit {\n\n  /**\n   * The list of available configuration options\n   */\n  @Input() configurationList: SearchConfigurationOption[] = [];\n\n  /**\n   * The current context\n   * If empty, 'search' is used\n   */\n  @Input() context: Context = Context.Search;\n\n  /**\n   * The configuration to use for the search options\n   * If empty, 'default' is used\n   */\n  @Input() configuration = 'default';\n\n  /**\n   * The actual query for the fixed filter.\n   * If empty, the query will be determined by the route parameter called 'filter'\n   */\n  @Input() fixedFilterQuery: string;\n\n  /**\n   * If this is true, the request will only be sent if there's\n   * no valid cached version. Defaults to true\n   */\n  @Input() useCachedVersionIfAvailable = true;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch = true;\n\n  /**\n   * The link type of the listed search results\n   */\n  @Input() linkType: CollectionElementLinkType;\n\n  /**\n   * The pagination id used in the search\n   */\n  @Input() paginationId = 'spc';\n\n  /**\n   * Whether or not the search bar should be visible\n   */\n  @Input() searchEnabled = true;\n\n  /**\n   * The width of the sidebar (bootstrap columns)\n   */\n  @Input() sideBarWidth = 3;\n\n  /**\n   * The placeholder of the search form input\n   */\n  @Input() searchFormPlaceholder = 'search.search-form.placeholder';\n\n  /**\n   * A boolean representing if result entries are selectable\n   */\n  @Input() selectable = false;\n\n  /**\n   * The config option used for selection functionality\n   */\n  @Input() selectionConfig: SelectionConfig;\n\n  /**\n   * A boolean representing if show search sidebar button\n   */\n  @Input() showSidebar = true;\n\n  /**\n   * Whether to show the view mode switch\n   */\n  @Input() showViewModes = true;\n\n  /**\n   * List of available view mode\n   */\n  @Input() useUniquePageId: false;\n\n  /**\n   * List of available view mode\n   */\n  @Input() viewModeList: ViewMode[];\n\n  /**\n   * The current configuration used during the search\n   */\n  currentConfiguration$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * The current context used during the search\n   */\n  currentContext$: BehaviorSubject<Context> = new BehaviorSubject<Context>(null);\n\n  /**\n   * The current sort options used\n   */\n  currentScope$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * The current sort options used\n   */\n  currentSortOptions$: BehaviorSubject<SortOptions> = new BehaviorSubject<SortOptions>(null);\n\n  /**\n   * The current search results\n   */\n  resultsRD$: BehaviorSubject<RemoteData<PaginatedList<SearchResult<DSpaceObject>>>> = new BehaviorSubject(null);\n\n  /**\n   * The current paginated search options\n   */\n  searchOptions$: BehaviorSubject<PaginatedSearchOptions> = new BehaviorSubject<PaginatedSearchOptions>(null);\n\n  /**\n   * The available sort options list\n   */\n  sortOptionsList$: BehaviorSubject<SortOptions[]> = new BehaviorSubject<SortOptions[]>([]);\n\n  /**\n   * TRUE if the search option are initialized\n   */\n  initialized$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Observable for whether or not the sidebar is currently collapsed\n   */\n  isSidebarCollapsed$: Observable<boolean>;\n\n  /**\n   * Emits true if were on a small screen\n   */\n  isXsOrSm$: Observable<boolean>;\n\n  /**\n   * Link to the search page\n   */\n  searchLink: string;\n\n  /**\n   * Subscription to unsubscribe from\n   */\n  sub: Subscription;\n\n  /**\n   * Emits an event with the current search result entries\n   */\n  @Output() resultFound: EventEmitter<SearchObjects<DSpaceObject>> = new EventEmitter<SearchObjects<DSpaceObject>>();\n\n  /**\n   * Emits event when the user deselect result entry\n   */\n  @Output() deselectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * Emits event when the user select result entry\n   */\n  @Output() selectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  constructor(protected service: SearchService,\n              protected sidebarService: SidebarService,\n              protected windowService: HostWindowService,\n              @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n              protected routeService: RouteService,\n              protected router: Router) {\n    this.isXsOrSm$ = this.windowService.isXsOrSm();\n  }\n\n  /**\n   * Listening to changes in the paginated search options\n   * If something changes, update the search results\n   *\n   * Listen to changes in the scope\n   * If something changes, update the list of scopes for the dropdown\n   */\n  ngOnInit(): void {\n    if (this.useUniquePageId) {\n      // Create an unique pagination id related to the instance of the SearchComponent\n      this.paginationId = uniqueId(this.paginationId);\n    }\n\n    this.searchConfigService.setPaginationId(this.paginationId);\n\n    if (hasValue(this.configuration)) {\n      this.routeService.setParameter('configuration', this.configuration);\n    }\n    if (hasValue(this.fixedFilterQuery)) {\n      this.routeService.setParameter('fixedFilterQuery', this.fixedFilterQuery);\n    }\n\n    this.isSidebarCollapsed$ = this.isSidebarCollapsed();\n    this.searchLink = this.getSearchLink();\n    this.currentContext$.next(this.context);\n\n    // Determinate PaginatedSearchOptions and listen to any update on it\n    const configuration$: Observable<string> = this.searchConfigService\n      .getCurrentConfiguration(this.configuration).pipe(distinctUntilChanged());\n    const searchSortOptions$: Observable<SortOptions[]> = configuration$.pipe(\n      switchMap((configuration: string) => this.searchConfigService\n        .getConfigurationSearchConfig(configuration, this.service)),\n      map((searchConfig: SearchConfig) => this.searchConfigService.getConfigurationSortOptions(searchConfig)),\n      distinctUntilChanged()\n    );\n    const sortOption$: Observable<SortOptions> = searchSortOptions$.pipe(\n      switchMap((searchSortOptions: SortOptions[]) => {\n        const defaultSort: SortOptions = searchSortOptions[0];\n        return this.searchConfigService.getCurrentSort(this.paginationId, defaultSort);\n      }),\n      distinctUntilChanged()\n    );\n    const searchOptions$: Observable<PaginatedSearchOptions> = this.getSearchOptions().pipe(distinctUntilChanged());\n\n    this.sub = combineLatest([configuration$, searchSortOptions$, searchOptions$, sortOption$]).pipe(\n      filter(([configuration, searchSortOptions, searchOptions, sortOption]: [string, SortOptions[], PaginatedSearchOptions, SortOptions]) => {\n        // filter for search options related to instanced paginated id\n        return searchOptions.pagination.id === this.paginationId;\n      }),\n      debounceTime(100)\n    ).subscribe(([configuration, searchSortOptions, searchOptions, sortOption]: [string, SortOptions[], PaginatedSearchOptions, SortOptions]) => {\n      // Build the PaginatedSearchOptions object\n      const combinedOptions = Object.assign({}, searchOptions,\n        {\n          configuration: searchOptions.configuration || configuration,\n          sort: sortOption || searchOptions.sort\n        });\n      const newSearchOptions = new PaginatedSearchOptions(combinedOptions);\n      // check if search options are changed\n      // if so retrieve new related results otherwise skip it\n      if (JSON.stringify(newSearchOptions) !== JSON.stringify(this.searchOptions$.value)) {\n        // Initialize variables\n        this.currentConfiguration$.next(configuration);\n        this.currentSortOptions$.next(newSearchOptions.sort);\n        this.currentScope$.next(newSearchOptions.scope);\n        this.sortOptionsList$.next(searchSortOptions);\n        this.searchOptions$.next(newSearchOptions);\n        this.initialized$.next(true);\n        // retrieve results\n        this.retrieveSearchResults(newSearchOptions);\n      }\n    });\n  }\n\n  /**\n   * Change the current context\n   * @param context\n   */\n  public changeContext(context: Context) {\n    this.currentContext$.next(context);\n  }\n\n  /**\n   * Set the sidebar to a collapsed state\n   */\n  public closeSidebar(): void {\n    this.sidebarService.collapse();\n  }\n\n  /**\n   * Reset result list on view mode change\n   */\n  public changeViewMode() {\n    this.resultsRD$.next(null);\n  }\n\n  /**\n   * Set the sidebar to an expanded state\n   */\n  public openSidebar(): void {\n    this.sidebarService.expand();\n  }\n\n  /**\n   * Unsubscribe from the subscription\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  /**\n   * Get the current paginated search options\n   * @returns {Observable<PaginatedSearchOptions>}\n   */\n  protected getSearchOptions(): Observable<PaginatedSearchOptions> {\n    return this.searchConfigService.paginatedSearchOptions;\n  }\n\n  /**\n   * Retrieve search result by the given search options\n   * @param searchOptions\n   * @private\n   */\n  private retrieveSearchResults(searchOptions: PaginatedSearchOptions) {\n    this.resultsRD$.next(null);\n    this.service.search(\n      searchOptions,\n      undefined,\n      this.useCachedVersionIfAvailable,\n      true,\n      followLink<Item>('thumbnail', { isOptional: true })\n    ).pipe(getFirstCompletedRemoteData())\n      .subscribe((results: RemoteData<SearchObjects<DSpaceObject>>) => {\n        if (results.hasSucceeded && results.payload?.page?.length > 0) {\n          this.resultFound.emit(results.payload);\n        }\n        this.resultsRD$.next(results);\n      });\n  }\n\n  /**\n   * Check if the sidebar is collapsed\n   * @returns {Observable<boolean>} emits true if the sidebar is currently collapsed, false if it is expanded\n   */\n  private isSidebarCollapsed(): Observable<boolean> {\n    return this.sidebarService.isCollapsed;\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  private getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.service.getSearchLink();\n  }\n\n\n}\n","<div class=\"container\" *ngIf=\"(isXsOrSm$ | async)\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <ng-template *ngTemplateOutlet=\"searchForm\"></ng-template>\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"!showSidebar && (initialized$ | async)\">\n  <ng-template *ngTemplateOutlet=\"searchContent\"></ng-template>\n</div>\n\n<ds-page-with-sidebar *ngIf=\"showSidebar && (initialized$ | async)\" [id]=\"'search-page'\" [sidebarContent]=\"sidebarContent\">\n  <ng-template *ngTemplateOutlet=\"searchContent\"></ng-template>\n</ds-page-with-sidebar>\n\n<ng-template #searchContent>\n    <div class=\"row\">\n        <div class=\"col-12\" *ngIf=\"!(isXsOrSm$ | async)\">\n            <ng-template *ngTemplateOutlet=\"searchForm\"></ng-template>\n            <ng-content select=\"[additionalSearchOptions]\"></ng-content>\n        </div>\n        <div id=\"search-content\" class=\"col-12\">\n            <div class=\"d-block d-md-none search-controls clearfix\">\n                <ds-view-mode-switch [viewModeList]=\"viewModeList\" [inPlaceSearch]=\"inPlaceSearch\"></ds-view-mode-switch>\n                <button (click)=\"openSidebar()\" aria-controls=\"#search-body\"\n                        class=\"btn btn-outline-primary float-right open-sidebar\"><i\n                        class=\"fas fa-sliders\"></i> {{\"search.sidebar.open\"\n                        | translate}}\n                </button>\n            </div>\n            <ds-search-results [searchResults]=\"resultsRD$ | async\"\n                               [searchConfig]=\"searchOptions$ | async\"\n                               [configuration]=\"(currentConfiguration$ | async)\"\n                               [disableHeader]=\"!searchEnabled\"\n                               [linkType]=\"linkType\"\n                               [context]=\"(currentContext$ | async)\"\n                               [selectable]=\"selectable\"\n                               [selectionConfig]=\"selectionConfig\"\n                               (deselectObject)=\"deselectObject.emit($event)\"\n                               (selectObject)=\"selectObject.emit($event)\"></ds-search-results>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #sidebarContent>\n    <ds-search-sidebar id=\"search-sidebar\" *ngIf=\"!(isXsOrSm$ | async)\"\n                       [configurationList]=\"configurationList\"\n                       [configuration]=\"(currentConfiguration$ | async)\"\n                       [currentScope]=\"(currentScope$ | async)\"\n                       [resultCount]=\"(resultsRD$ | async)?.payload?.totalElements\"\n                       [searchOptions]=\"(searchOptions$ | async)\"\n                       [sortOptionsList]=\"(sortOptionsList$ | async)\"\n                       [currentSortOption]=\"(currentSortOptions$ | async)\"\n                       [inPlaceSearch]=\"inPlaceSearch\"\n                       [viewModeList]=\"viewModeList\"\n                       [showViewModes]=\"showViewModes\"\n                       (changeConfiguration)=\"changeContext($event.context)\"\n                       (changeViewMode)=\"changeViewMode()\"></ds-search-sidebar>\n    <ds-search-sidebar id=\"search-sidebar-sm\" *ngIf=\"(isXsOrSm$ | async)\"\n                       [configurationList]=\"configurationList\"\n                       [configuration]=\"(currentConfiguration$ | async)\"\n                       [currentScope]=\"(currentScope$ | async)\"\n                       [resultCount]=\"(resultsRD$ | async)?.payload.totalElements\"\n                       [searchOptions]=\"(searchOptions$ | async)\"\n                       [sortOptionsList]=\"(sortOptionsList$ | async)\"\n                       [currentSortOption]=\"(currentSortOptions$ | async)\"\n                       [viewModeList]=\"viewModeList\"\n                       [showViewModes]=\"showViewModes\"\n                       (toggleSidebar)=\"closeSidebar()\"\n                       (changeConfiguration)=\"changeContext($event.context)\"\n                       (changeViewMode)=\"changeViewMode()\">\n    </ds-search-sidebar>\n</ng-template>\n\n<ng-template #searchForm>\n    <ds-search-form *ngIf=\"searchEnabled\" id=\"search-form\"\n                    [query]=\"(searchOptions$ | async)?.query\"\n                    [scope]=\"(searchOptions$ | async)?.scope\"\n                    [currentUrl]=\"searchLink\"\n                    [showScopeSelector]=\"true\"\n                    [inPlaceSearch]=\"inPlaceSearch\"\n                    [searchPlaceholder]=\"searchFormPlaceholder | translate\">\n    </ds-search-form>\n    <div class=\"row mb-3 mb-md-1\">\n        <div class=\"labels col-sm-9\">\n            <ds-search-labels *ngIf=\"searchEnabled\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-labels>\n        </div>\n    </div>\n</ng-template>\n","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { NavigationExtras, Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { hasValue } from '../../empty.util';\nimport { SEARCH_CONFIG_SERVICE } from '../../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../../core/shared/search/search-configuration.service';\nimport { MyDSpaceConfigurationValueType } from '../../../my-dspace-page/my-dspace-configuration-value-type';\nimport { SearchConfigurationOption } from './search-configuration-option.model';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { currentPath } from '../../utils/route.utils';\nimport { findIndex } from 'lodash';\n\n@Component({\n  selector: 'ds-search-switch-configuration',\n  styleUrls: ['./search-switch-configuration.component.scss'],\n  templateUrl: './search-switch-configuration.component.html',\n})\n/**\n * Represents a select that allow to switch over available search configurations\n */\nexport class SearchSwitchConfigurationComponent implements OnDestroy, OnInit {\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n  /**\n   * The list of available configuration options\n   */\n  @Input() configurationList: SearchConfigurationOption[] = [];\n  /**\n   * The default configuration to use if no defined\n   */\n  @Input() defaultConfiguration: string;\n  /**\n   * The selected option\n   */\n  public selectedOption: SearchConfigurationOption;\n\n  /**\n   * Subscription to unsubscribe from\n   */\n  private sub: Subscription;\n\n  /**\n   * Emits event when the user select a new configuration\n   */\n  @Output() changeConfiguration: EventEmitter<SearchConfigurationOption> = new EventEmitter<SearchConfigurationOption>();\n\n  constructor(private router: Router,\n              private searchService: SearchService,\n              @Inject(SEARCH_CONFIG_SERVICE) private searchConfigService: SearchConfigurationService) {\n  }\n\n  /**\n   * Init current configuration\n   */\n  ngOnInit() {\n    this.searchConfigService.getCurrentConfiguration(this.defaultConfiguration)\n      .subscribe((currentConfiguration) => {\n        const index = findIndex(this.configurationList, {value: currentConfiguration });\n        this.selectedOption = this.configurationList[index];\n      });\n  }\n\n  /**\n   * Init current configuration\n   */\n  onSelect() {\n    const navigationExtras: NavigationExtras = {\n      queryParams: {configuration: this.selectedOption.value},\n    };\n\n    this.changeConfiguration.emit(this.selectedOption);\n    this.router.navigate(this.getSearchLinkParts(), navigationExtras);\n  }\n\n  /**\n   * Define the select 'compareWith' method to tell Angular how to compare the values\n   *\n   * @param item1\n   * @param item2\n   */\n  compare(item1: MyDSpaceConfigurationValueType, item2: MyDSpaceConfigurationValueType) {\n    return item1 === item2;\n  }\n\n  /**\n   * Make sure the subscription is unsubscribed from when this component is destroyed\n   */\n  ngOnDestroy() {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  public getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * @returns {string[]} The base path to the search page, or the current page when inPlaceSearch is true, split in separate pieces\n   */\n  public getSearchLinkParts(): string[] {\n    if (this.searchService) {\n      return [];\n    }\n    return this.getSearchLink().split('/');\n  }\n}\n","<div *ngIf=\"configurationList?.length > 1\" class=\"search-switch-configuration\">\n  <h5 id=\"configuration-switch\">{{ 'search.switch-configuration.title' | translate}}</h5>\n\n  <select class=\"form-control\"\n          aria-labelledby=\"configuration-switch\"\n          [compareWith]=\"compare\"\n          [(ngModel)]=\"selectedOption\"\n          (change)=\"onSelect()\">\n    <option *ngFor=\"let option of configurationList;\" [ngValue]=\"option\">\n      {{option.label | translate}}\n    </option>\n  </select>\n\n</div>\n","var map = {\n\t\"./custom/app/search-page/configuration-search-page.component\": [\n\t\t\"uy9d\",\n\t\t72\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"F1tE\";\nmodule.exports = webpackAsyncContext;","import { FacetValue } from './models/facet-value.model';\nimport { SearchFilterConfig } from './models/search-filter-config.model';\nimport { isNotEmpty } from '../empty.util';\n\n/**\n * Get a facet's value by matching its parameter in the search href, this will include the operator of the facet value\n * If the {@link FacetValue} doesn't contain a search link, its raw value will be returned as a fallback\n * @param facetValue\n * @param searchFilterConfig\n */\nexport function getFacetValueForType(facetValue: FacetValue, searchFilterConfig: SearchFilterConfig): string {\n  const regex = new RegExp(`[?|&]${escapeRegExp(searchFilterConfig.paramName)}=(${escapeRegExp(facetValue.value)}[^&]*)`, 'g');\n  if (isNotEmpty(facetValue._links)) {\n    const values = regex.exec(facetValue._links.search.href);\n    if (isNotEmpty(values)) {\n      return values[1];\n    }\n  }\n  if (facetValue.authorityKey) {\n    return addOperatorToFilterValue(facetValue.authorityKey, 'authority');\n  }\n\n  return addOperatorToFilterValue(facetValue.value, 'equals');\n}\n\n/**\n * Escape a string to be used in a JS regular expression\n *\n * @param input the string to escape\n */\nexport function escapeRegExp(input: string): string {\n  return input.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Strip the operator from a filter value\n * Warning: This expects the value to end with an operator, otherwise it might strip unwanted content\n * @param value\n */\nexport function stripOperatorFromFilterValue(value: string) {\n  if (value.lastIndexOf(',') > -1) {\n    return value.substring(0, value.lastIndexOf(','));\n  }\n  return value;\n}\n\n/**\n * Add an operator to a string\n * @param value\n * @param operator\n */\nexport function addOperatorToFilterValue(value: string, operator: string) {\n  if (!value.endsWith(`,${operator}`)) {\n    return `${value},${operator}`;\n  }\n  return value;\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { fadeIn, fadeInOut } from '../../animations/fade';\nimport { SearchResult } from '../models/search-result.model';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { hasNoValue, isNotEmpty } from '../../empty.util';\nimport { SortOptions } from '../../../core/cache/models/sort-options.model';\nimport { ListableObject } from '../../object-collection/shared/listable-object.model';\nimport { CollectionElementLinkType } from '../../object-collection/collection-element-link.type';\nimport { ViewMode } from '../../../core/shared/view-mode.model';\nimport { Context } from '../../../core/shared/context.model';\nimport { PaginatedSearchOptions } from '../models/paginated-search-options.model';\n\nexport interface SelectionConfig {\n  repeatable: boolean;\n  listId: string;\n}\n\n@Component({\n  selector: 'ds-search-results',\n  templateUrl: './search-results.component.html',\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n\n/**\n * Component that represents all results from a search\n */\nexport class SearchResultsComponent {\n  hasNoValue = hasNoValue;\n\n  /**\n   * The link type of the listed search results\n   */\n  @Input() linkType: CollectionElementLinkType;\n\n  /**\n   * The actual search result objects\n   */\n  @Input() searchResults: RemoteData<PaginatedList<SearchResult<DSpaceObject>>>;\n\n  /**\n   * The current configuration of the search\n   */\n  @Input() searchConfig: PaginatedSearchOptions;\n\n  /**\n   * The current sorting configuration of the search\n   */\n  @Input() sortConfig: SortOptions;\n\n  /**\n   * The current view-mode of the list\n   */\n  @Input() viewMode: ViewMode;\n\n  /**\n   * An optional configuration to filter the result on one type\n   */\n  @Input() configuration: string;\n\n  /**\n   * Whether or not to hide the header of the results\n   * Defaults to a visible header\n   */\n  @Input() disableHeader = false;\n\n  /**\n   * A boolean representing if result entries are selectable\n   */\n  @Input() selectable = false;\n\n  @Input() context: Context;\n\n  /**\n   * Option for hiding the pagination detail\n   */\n  @Input() hidePaginationDetail = false;\n\n  /**\n   * The config option used for selection functionality\n   */\n  @Input() selectionConfig: SelectionConfig = null;\n\n  @Output() deselectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  @Output() selectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * Check if search results are loading\n   */\n  isLoading() {\n    return !this.showError() && (hasNoValue(this.searchResults) || hasNoValue(this.searchResults.payload) || this.searchResults.isLoading);\n  }\n\n  showError(): boolean {\n    return this.searchResults?.hasFailed && (!this.searchResults?.errorMessage || this.searchResults?.statusCode !== 400);\n  }\n\n  errorMessageLabel(): string {\n    return (this.searchResults?.statusCode  === 422) ? 'error.invalid-search-query' : 'error.search-results';\n  }\n\n  /**\n   * Method to change the given string by surrounding it by quotes if not already present.\n   */\n  surroundStringWithQuotes(input: string): string {\n    let result = input;\n\n    if (isNotEmpty(result) && !(result.startsWith('\\\"') && result.endsWith('\\\"'))) {\n      result = `\"${result}\"`;\n    }\n\n    return result;\n  }\n}\n","<h2 *ngIf=\"!disableHeader\">{{ (configuration ? configuration + '.search.results.head' : 'search.results.head') | translate }}</h2>\n<div *ngIf=\"searchResults && searchResults?.hasSucceeded && !searchResults?.isLoading && searchResults?.payload?.page.length > 0\" @fadeIn>\n    <ds-viewable-collection\n            [config]=\"searchConfig.pagination\"\n            [sortConfig]=\"searchConfig.sort\"\n            [objects]=\"searchResults\"\n            [hideGear]=\"true\"\n            [selectable]=\"selectable\"\n            [selectionConfig]=\"selectionConfig\"\n            [linkType]=\"linkType\"\n            [context]=\"context\"\n            [hidePaginationDetail]=\"hidePaginationDetail\"\n            (deselectObject)=\"deselectObject.emit($event)\"\n            (selectObject)=\"selectObject.emit($event)\"\n            >\n    </ds-viewable-collection>\n</div>\n<ds-loading *ngIf=\"isLoading()\" message=\"{{'loading.search-results' | translate}}\"></ds-loading>\n<ds-error\n        *ngIf=\"showError()\"\n        message=\"{{errorMessageLabel() | translate}}\"></ds-error>\n<div *ngIf=\"searchResults?.payload?.page.length == 0 || searchResults?.statusCode == 400\">\n    {{ 'search.results.no-results' | translate }}\n    <a [routerLink]=\"['/search']\"\n       [queryParams]=\"{ query: surroundStringWithQuotes(searchConfig?.query) }\"\n       queryParamsHandling=\"merge\">\n        {{\"search.results.no-results-link\" | translate}}\n    </a>\n</div>\n","import { Component, Injector, Input, OnInit } from '@angular/core';\nimport { renderFilterType } from '../search-filter-type-decorator';\nimport { FilterType } from '../../../models/filter-type.model';\nimport { SearchFilterConfig } from '../../../models/search-filter-config.model';\nimport { FILTER_CONFIG, IN_PLACE_SEARCH } from '../../../../../core/shared/search/search-filter.service';\nimport { GenericConstructor } from '../../../../../core/shared/generic-constructor';\nimport { SearchFacetFilterComponent } from '../search-facet-filter/search-facet-filter.component';\n\n@Component({\n  selector: 'ds-search-facet-filter-wrapper',\n  templateUrl: './search-facet-filter-wrapper.component.html'\n})\n\n/**\n * Wrapper component that renders a specific facet filter based on the filter config's type\n */\nexport class SearchFacetFilterWrapperComponent implements OnInit {\n  /**\n   * Configuration for the filter of this wrapper component\n   */\n  @Input() filterConfig: SearchFilterConfig;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * The constructor of the search facet filter that should be rendered, based on the filter config's type\n   */\n  searchFilter: GenericConstructor<SearchFacetFilterComponent>;\n  /**\n   * Injector to inject a child component with the @Input parameters\n   */\n  objectInjector: Injector;\n\n  constructor(private injector: Injector) {\n  }\n\n  /**\n   * Initialize and add the filter config to the injector\n   */\n  ngOnInit(): void {\n    this.searchFilter = this.getSearchFilter();\n    this.objectInjector = Injector.create({\n      providers: [\n        { provide: FILTER_CONFIG, useFactory: () => (this.filterConfig), deps: [] },\n        { provide: IN_PLACE_SEARCH, useFactory: () => (this.inPlaceSearch), deps: [] }\n      ],\n      parent: this.injector\n    });\n  }\n\n  /**\n   * Find the correct component based on the filter config's type\n   */\n  private getSearchFilter() {\n    const type: FilterType = this.filterConfig.filterType;\n    return renderFilterType(type);\n  }\n}\n","<ng-container *ngComponentOutlet=\"searchFilter injector: objectInjector;\"></ng-container>","import { HostWindowService } from '../shared/host-window.service';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { SearchComponent } from '../shared/search/search.component';\nimport { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { pushInOut } from '../shared/animations/push';\nimport { SEARCH_CONFIG_SERVICE } from '../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { RouteService } from '../core/services/route.service';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { Router } from '@angular/router';\n\n/**\n * This component renders a search page using a configuration as input.\n */\n@Component({\n  selector: 'ds-configuration-search-page',\n  styleUrls: ['../shared/search/search.component.scss'],\n  templateUrl: '../shared/search/search.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [pushInOut],\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n\nexport class ConfigurationSearchPageComponent extends SearchComponent {\n\n  constructor(protected service: SearchService,\n              protected sidebarService: SidebarService,\n              protected windowService: HostWindowService,\n              @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n              protected routeService: RouteService,\n              protected router: Router) {\n    super(service, sidebarService, windowService, searchConfigService, routeService, router);\n  }\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Params, Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { hasValue, isNotEmpty } from '../../../empty.util';\nimport { SearchService } from '../../../../core/shared/search/search.service';\nimport { currentPath } from '../../../utils/route.utils';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\nimport { SearchConfigurationService } from '../../../../core/shared/search/search-configuration.service';\n\n@Component({\n  selector: 'ds-search-label',\n  templateUrl: './search-label.component.html',\n})\n\n/**\n * Component that represents the label containing the currently active filters\n */\nexport class SearchLabelComponent implements OnInit {\n  @Input() key: string;\n  @Input() value: string;\n  @Input() inPlaceSearch: boolean;\n  @Input() appliedFilters: Observable<Params>;\n  searchLink: string;\n  removeParameters: Observable<Params>;\n\n  /**\n   * The name of the filter without the f. prefix\n   */\n  filterName: string;\n\n  /**\n   * Initialize the instance variable\n   */\n  constructor(\n    private searchService: SearchService,\n    private paginationService: PaginationService,\n    private searchConfigurationService: SearchConfigurationService,\n    private router: Router) {\n  }\n\n  ngOnInit(): void {\n    this.searchLink = this.getSearchLink();\n    this.removeParameters = this.getRemoveParams();\n    this.filterName = this.getFilterName();\n  }\n\n  /**\n   * Calculates the parameters that should change if a given value for the given filter would be removed from the active filters\n   * @returns {Observable<Params>} The changed filter parameters\n   */\n  getRemoveParams(): Observable<Params> {\n    return this.appliedFilters.pipe(\n      map((filters) => {\n        const field: string = Object.keys(filters).find((f) => f === this.key);\n        const newValues = hasValue(filters[field]) ? filters[field].filter((v) => v !== this.value) : null;\n        const page = this.paginationService.getPageParam(this.searchConfigurationService.paginationID);\n        return {\n          [field]: isNotEmpty(newValues) ? newValues : null,\n          [page]: 1\n        };\n      })\n    );\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  private getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * TODO to review after https://github.com/DSpace/dspace-angular/issues/368 is resolved\n   * Strips authority operator from filter value\n   * e.g. 'test ,authority' => 'test'\n   *\n   * @param value\n   */\n  normalizeFilterValue(value: string) {\n    // const pattern = /,[^,]*$/g;\n    const pattern = /,authority*$/g;\n    return value.replace(pattern, '');\n  }\n\n  private getFilterName(): string {\n    return this.key.startsWith('f.') ? this.key.substring(2) : this.key;\n  }\n}\n","<a class=\"badge badge-primary mr-1 mb-1 text-capitalize\"\n   [routerLink]=\"searchLink\"\n   [queryParams]=\"(removeParameters | async)\" queryParamsHandling=\"merge\">\n    {{('search.filters.applied.' + key) | translate}}: {{'search.filters.' + filterName + '.' + value | translate: {default: normalizeFilterValue(value)} }}\n    <span> ×</span>\n</a>\n","import { Component, Inject, Input } from '@angular/core';\nimport { SEARCH_CONFIG_SERVICE } from '../../../my-dspace-page/my-dspace-page.component';\nimport { Observable } from 'rxjs';\nimport { Params, Router } from '@angular/router';\nimport { SearchConfigurationService } from '../../../core/shared/search/search-configuration.service';\nimport { map } from 'rxjs/operators';\nimport { stripOperatorFromFilterValue } from '../search.utils';\n\n@Component({\n  selector: 'ds-search-labels',\n  styleUrls: ['./search-labels.component.scss'],\n  templateUrl: './search-labels.component.html',\n})\n\n/**\n * Component that represents the labels containing the currently active filters\n */\nexport class SearchLabelsComponent {\n  /**\n   * Emits the currently active filters\n   */\n  appliedFilters: Observable<Params>;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * Initialize the instance variable\n   */\n  constructor(\n    protected router: Router,\n    @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService) {\n    this.appliedFilters = this.searchConfigService.getCurrentFrontendFilters().pipe(\n      map((params) => {\n        const labels = {};\n        Object.keys(params)\n          .forEach((key) => {\n            labels[key] = [...params[key].map((value) => stripOperatorFromFilterValue(value))];\n          });\n        return labels;\n      })\n    );\n  }\n}\n","<div class=\"labels\">\n    <ng-container *ngFor=\"let key of ((appliedFilters | async) | dsObjectKeys)\">\n        <ds-search-label *ngFor=\"let value of (appliedFilters | async)[key]\" [inPlaceSearch]=\"inPlaceSearch\" [key]=\"key\" [value]=\"value\" [appliedFilters]=\"appliedFilters\"></ds-search-label>\n    </ng-container>\n</div>\n","import {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription\n} from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, take, tap } from 'rxjs/operators';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RemoteDataBuildService } from '../../../../../core/cache/builders/remote-data-build.service';\nimport { PaginatedList } from '../../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../../core/data/remote-data';\nimport { hasNoValue, hasValue, isNotEmpty } from '../../../../empty.util';\nimport { EmphasizePipe } from '../../../../utils/emphasize.pipe';\nimport { FacetValue } from '../../../models/facet-value.model';\nimport { SearchFilterConfig } from '../../../models/search-filter-config.model';\nimport { SearchService } from '../../../../../core/shared/search/search.service';\nimport {\n  FILTER_CONFIG,\n  IN_PLACE_SEARCH,\n  SearchFilterService\n} from '../../../../../core/shared/search/search-filter.service';\nimport { SearchConfigurationService } from '../../../../../core/shared/search/search-configuration.service';\nimport { getFirstSucceededRemoteData } from '../../../../../core/shared/operators';\nimport { InputSuggestion } from '../../../../input-suggestions/input-suggestions.model';\nimport { SearchOptions } from '../../../models/search-options.model';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../../my-dspace-page/my-dspace-page.component';\nimport { currentPath } from '../../../../utils/route.utils';\nimport { getFacetValueForType, stripOperatorFromFilterValue } from '../../../search.utils';\nimport { createPendingRemoteDataObject } from '../../../../remote-data.utils';\n\n@Component({\n  selector: 'ds-search-facet-filter',\n  template: ``,\n})\n\n/**\n * Super class for all different representations of facets\n */\nexport class SearchFacetFilterComponent implements OnInit, OnDestroy {\n  /**\n   * Emits an array of pages with values found for this facet\n   */\n  filterValues$: Subject<RemoteData<PaginatedList<FacetValue>[]>>;\n\n  /**\n   * Emits the current last shown page of this facet's values\n   */\n  currentPage: Observable<number>;\n\n  /**\n   * Emits true if the current page is also the last page available\n   */\n  isLastPage$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  /**\n   * The value of the input field that is used to query for possible values for this filter\n   */\n  filter: string;\n\n  /**\n   * List of subscriptions to unsubscribe from\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Emits the result values for this filter found by the current filter query\n   */\n  filterSearchResults: Observable<InputSuggestion[]> = observableOf([]);\n\n  /**\n   * Emits the active values for this filter\n   */\n  selectedValues$: Observable<FacetValue[]>;\n  protected collapseNextUpdate = true;\n\n  /**\n   * State of the requested facets used to time the animation\n   */\n  animationState = 'loading';\n\n  /**\n   * Emits all current search options available in the search URL\n   */\n  searchOptions$: Observable<SearchOptions>;\n\n  /**\n   * The current URL\n   */\n  currentUrl: string;\n\n  constructor(protected searchService: SearchService,\n              protected filterService: SearchFilterService,\n              protected rdbs: RemoteDataBuildService,\n              protected router: Router,\n              @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n              @Inject(IN_PLACE_SEARCH) public inPlaceSearch: boolean,\n              @Inject(FILTER_CONFIG) public filterConfig: SearchFilterConfig) {\n  }\n\n  /**\n   * Initializes all observable instance variables and starts listening to them\n   */\n  ngOnInit(): void {\n    this.currentUrl = this.router.url;\n    this.filterValues$ = new BehaviorSubject(createPendingRemoteDataObject());\n    this.currentPage = this.getCurrentPage().pipe(distinctUntilChanged());\n\n    this.searchOptions$ = this.searchConfigService.searchOptions;\n    this.subs.push(this.searchOptions$.subscribe(() => this.updateFilterValueList()));\n    const facetValues$ = observableCombineLatest(this.searchOptions$, this.currentPage).pipe(\n      map(([options, page]) => {\n        return { options, page };\n      }),\n      switchMap(({ options, page }) => {\n        return this.searchService.getFacetValuesFor(this.filterConfig, page, options)\n          .pipe(\n            getFirstSucceededRemoteData(),\n            map((results) => {\n                return {\n                  values: observableOf(results),\n                  page: page\n                };\n              }\n            )\n          );\n      })\n    );\n\n    let filterValues = [];\n    this.subs.push(facetValues$.subscribe((facetOutcome) => {\n      const newValues$ = facetOutcome.values;\n\n      if (this.collapseNextUpdate) {\n        this.showFirstPageOnly();\n        facetOutcome.page = 1;\n        this.collapseNextUpdate = false;\n      }\n      if (facetOutcome.page === 1) {\n        filterValues = [];\n      }\n\n      filterValues = [...filterValues, newValues$];\n\n      this.subs.push(this.rdbs.aggregate(filterValues).pipe(\n        tap((rd: RemoteData<PaginatedList<FacetValue>[]>) => {\n          this.selectedValues$ = this.filterService.getSelectedValuesForFilter(this.filterConfig).pipe(\n            map((selectedValues) => {\n              return selectedValues.map((value: string) => {\n                const fValue = [].concat(...rd.payload.map((page) => page.page)).find((facetValue: FacetValue) => this.getFacetValue(facetValue) === value);\n                if (hasValue(fValue)) {\n                  return fValue;\n                }\n                return Object.assign(new FacetValue(), { label: stripOperatorFromFilterValue(value), value: value });\n              });\n            })\n          );\n        })\n      ).subscribe((rd: RemoteData<PaginatedList<FacetValue>[]>) => {\n        this.animationState = 'ready';\n        this.filterValues$.next(rd);\n\n      }));\n      this.subs.push(newValues$.pipe(take(1)).subscribe((rd) => {\n        this.isLastPage$.next(hasNoValue(rd.payload.next));\n      }));\n    }));\n\n  }\n\n  /**\n   * Prepare for refreshing the values of this filter\n   */\n  updateFilterValueList() {\n    this.animationState = 'loading';\n    this.collapseNextUpdate = true;\n    this.filter = '';\n  }\n\n  /**\n   * Checks if a value for this filter is currently active\n   */\n  isChecked(value: FacetValue): Observable<boolean> {\n    return this.filterService.isFilterActiveWithValue(this.filterConfig.paramName, value.value);\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  public getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * @returns {string[]} The base path to the search page, or the current page when inPlaceSearch is true, split in separate pieces\n   */\n  public getSearchLinkParts(): string[] {\n    if (this.inPlaceSearch) {\n      return [];\n    }\n    return this.getSearchLink().split('/');\n  }\n\n  /**\n   * Show the next page as well\n   */\n  showMore() {\n    this.filterService.incrementPage(this.filterConfig.name);\n  }\n\n  /**\n   * Make sure only the first page is shown\n   */\n  showFirstPageOnly() {\n    this.filterService.resetPage(this.filterConfig.name);\n  }\n\n  /**\n   * @returns {Observable<number>} The current page of this filter\n   */\n  getCurrentPage(): Observable<number> {\n    return this.filterService.getPage(this.filterConfig.name);\n  }\n\n  /**\n   * Submits a new active custom value to the filter from the input field\n   * @param data The string from the input field\n   */\n  onSubmit(data: any) {\n    this.selectedValues$.pipe(take(1)).subscribe((selectedValues) => {\n        if (isNotEmpty(data)) {\n          this.router.navigate(this.getSearchLinkParts(), {\n            queryParams:\n              {\n                [this.filterConfig.paramName]: [\n                  ...selectedValues.map((facet) => this.getFacetValue(facet)),\n                  data\n                ]\n              },\n            queryParamsHandling: 'merge'\n          });\n          this.filter = '';\n        }\n        this.filterSearchResults = observableOf([]);\n      }\n    );\n  }\n\n  /**\n   * On click, set the input's value to the clicked data\n   * @param data The value of the option that was clicked\n   */\n  onClick(data: any) {\n    this.filter = data;\n  }\n\n  /**\n   * For usage of the hasValue function in the template\n   */\n  hasValue(o: any): boolean {\n    return hasValue(o);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Updates the found facet value suggestions for a given query\n   * Transforms the found values into display values\n   * @param data The query for which is being searched\n   */\n  findSuggestions(data): void {\n    if (isNotEmpty(data)) {\n      this.searchOptions$.pipe(take(1)).subscribe(\n        (options) => {\n          this.filterSearchResults = this.searchService.getFacetValuesFor(this.filterConfig, 1, options, data.toLowerCase())\n            .pipe(\n              getFirstSucceededRemoteData(),\n              map(\n                (rd: RemoteData<PaginatedList<FacetValue>>) => {\n                  return rd.payload.page.map((facet) => {\n                    return {\n                      displayValue: this.getDisplayValue(facet, data),\n                      value: stripOperatorFromFilterValue(this.getFacetValue(facet))\n                    };\n                  });\n                }\n              ));\n        }\n      );\n    } else {\n      this.filterSearchResults = observableOf([]);\n    }\n  }\n\n  /**\n   * Retrieve facet value\n   */\n  protected getFacetValue(facet: FacetValue): string {\n    return getFacetValueForType(facet, this.filterConfig);\n  }\n\n  /**\n   * Transforms the facet value string, so if the query matches part of the value, it's emphasized in the value\n   * @param {FacetValue} facet The value of the facet as returned by the server\n   * @param {string} query The query that was used to search facet values\n   * @returns {string} The facet value with the query part emphasized\n   */\n  getDisplayValue(facet: FacetValue, query: string): string {\n    return new EmphasizePipe().transform(facet.value, query) + ' (' + facet.count + ')';\n  }\n\n  /**\n   * Prevent unnecessary rerendering\n   */\n  trackUpdate(index, value: FacetValue) {\n    return value ? value._links.search.href : undefined;\n  }\n}\n\nexport const facetLoad = trigger('facetLoad', [\n  state('ready', style({ opacity: 1 })),\n  state('loading', style({ opacity: 0 })),\n  transition('loading <=> ready', animate(100)),\n]);\n","/**\n * Enumeration containing all possible types for filters\n */\nexport enum FilterType {\n  /**\n   * Represents authority facets\n   */\n  authority = 'authority',\n\n  /**\n   * Represents simple text facets\n   */\n  text = 'text',\n\n  /**\n   * Represents date facets\n   */\n  range = 'date',\n\n  /**\n   * Represents hierarchically structured facets\n   */\n  hierarchy = 'hierarchical',\n\n  /**\n   * Represents binary facets\n   */\n  boolean = 'standard'\n}\n","<div>\n    <div class=\"filters py-2\">\n        <form #form=\"ngForm\" (ngSubmit)=\"onSubmit()\" class=\"add-filter row\"\n              [action]=\"currentUrl\">\n            <div class=\"col-6 form-group mb-0\">\n                <label>\n                  <span class=\"font-weight-bold\">\n                    {{'search.filters.filter.' + filterConfig.name + '.min.label' | translate}}\n                  </span>\n                  <input type=\"text\" [(ngModel)]=\"range[0]\" [name]=\"filterConfig.paramName + '.min'\"\n                         class=\"form-control\" (blur)=\"onSubmit()\"\n                         aria-label=\"Mininum value\"\n                         [placeholder]=\"'search.filters.filter.' + filterConfig.name + '.min.placeholder' | translate\"\n                  />\n                </label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <span class=\"font-weight-bold\">\n                      {{'search.filters.filter.' + filterConfig.name + '.max.label' | translate}}\n                    </span>\n                    <input type=\"text\" [(ngModel)]=\"range[1]\" [name]=\"filterConfig.paramName + '.max'\"\n                           class=\"form-control\" (blur)=\"onSubmit()\"\n                           aria-label=\"Maximum value\"\n                           [placeholder]=\"'search.filters.filter.' + filterConfig.name + '.max.placeholder' | translate\"\n                    />\n                </label>\n            </div>\n            <label class=\"d-none\">\n                <input type=\"submit\" class=\"d-none\"/>\n                <span>{{'search.filters.search.submit' | translate}}</span>\n            </label>\n        </form>\n\n        <ng-container *ngIf=\"shouldShowSlider()\">\n            <nouislider [connect]=\"true\" [min]=\"min\" [max]=\"max\" [step]=\"1\"\n                        [dsDebounce]=\"250\" (onDebounce)=\"onSubmit()\"\n                        (keydown)=\"startKeyboardControl()\" (keyup)=\"stopKeyboardControl()\"\n                        [(ngModel)]=\"range\" ngDefaultControl>\n            </nouislider>\n        </ng-container>\n      <ng-container *ngFor=\"let page of (filterValues$ | async)?.payload\">\n        <div [@facetLoad]=\"animationState\">\n          <ds-search-facet-range-option *ngFor=\"let value of page.page; trackBy: trackUpdate\" [filterConfig]=\"filterConfig\" [filterValue]=\"value\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-range-option>\n          </div>\n        </ng-container>\n    </div>\n</div>\n","import { combineLatest as observableCombineLatest, Subscription } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Component, Inject, OnDestroy, OnInit, PLATFORM_ID } from '@angular/core';\nimport { RemoteDataBuildService } from '../../../../../core/cache/builders/remote-data-build.service';\nimport { FilterType } from '../../../models/filter-type.model';\nimport { renderFacetFor } from '../search-filter-type-decorator';\nimport { facetLoad, SearchFacetFilterComponent } from '../search-facet-filter/search-facet-filter.component';\nimport { SearchFilterConfig } from '../../../models/search-filter-config.model';\nimport {\n  FILTER_CONFIG,\n  IN_PLACE_SEARCH,\n  SearchFilterService\n} from '../../../../../core/shared/search/search-filter.service';\nimport { SearchService } from '../../../../../core/shared/search/search.service';\nimport { Router } from '@angular/router';\nimport * as moment from 'moment';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../../../../core/shared/search/search-configuration.service';\nimport { RouteService } from '../../../../../core/services/route.service';\nimport { hasValue } from '../../../../empty.util';\n\n/**\n * The suffix for a range filters' minimum in the frontend URL\n */\nexport const RANGE_FILTER_MIN_SUFFIX = '.min';\n\n/**\n * The suffix for a range filters' maximum in the frontend URL\n */\nexport const RANGE_FILTER_MAX_SUFFIX = '.max';\n\n/**\n * The date formats that are possible to appear in a date filter\n */\nconst dateFormats = ['YYYY', 'YYYY-MM', 'YYYY-MM-DD'];\n\n/**\n * This component renders a simple item page.\n * The route parameter 'id' is used to request the item it represents.\n * All fields of the item that should be displayed, are defined in its template.\n */\n@Component({\n  selector: 'ds-search-range-filter',\n  styleUrls: ['./search-range-filter.component.scss'],\n  templateUrl: './search-range-filter.component.html',\n  animations: [facetLoad]\n})\n\n/**\n * Component that represents a range facet for a specific filter configuration\n */\n@renderFacetFor(FilterType.range)\nexport class SearchRangeFilterComponent extends SearchFacetFilterComponent implements OnInit, OnDestroy {\n  /**\n   * Fallback minimum for the range\n   */\n  min = 1950;\n\n  /**\n   * Fallback maximum for the range\n   */\n  max = new Date().getUTCFullYear();\n\n  /**\n   * The current range of the filter\n   */\n  range;\n\n  /**\n   * Subscription to unsubscribe from\n   */\n  sub: Subscription;\n\n  /**\n   * Whether the sider is being controlled by the keyboard.\n   * Supresses any changes until the key is released.\n   */\n  keyboardControl: boolean;\n\n  constructor(protected searchService: SearchService,\n              protected filterService: SearchFilterService,\n              protected router: Router,\n              protected rdbs: RemoteDataBuildService,\n              @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n              @Inject(IN_PLACE_SEARCH) public inPlaceSearch: boolean,\n              @Inject(FILTER_CONFIG) public filterConfig: SearchFilterConfig,\n              @Inject(PLATFORM_ID) private platformId: any,\n              private route: RouteService) {\n    super(searchService, filterService, rdbs, router, searchConfigService, inPlaceSearch, filterConfig);\n\n  }\n\n  /**\n   * Initialize with the min and max values as configured in the filter configuration\n   * Set the initial values of the range\n   */\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.min = moment(this.filterConfig.minValue, dateFormats).year() || this.min;\n    this.max = moment(this.filterConfig.maxValue, dateFormats).year() || this.max;\n    const iniMin = this.route.getQueryParameterValue(this.filterConfig.paramName + RANGE_FILTER_MIN_SUFFIX).pipe(startWith(undefined));\n    const iniMax = this.route.getQueryParameterValue(this.filterConfig.paramName + RANGE_FILTER_MAX_SUFFIX).pipe(startWith(undefined));\n    this.sub = observableCombineLatest(iniMin, iniMax).pipe(\n      map(([min, max]) => {\n        const minimum = hasValue(min) ? min : this.min;\n        const maximum = hasValue(max) ? max : this.max;\n        return [minimum, maximum];\n      })\n    ).subscribe((minmax) => this.range = minmax);\n  }\n\n  /**\n   * Submits new custom range values to the range filter from the widget\n   */\n  onSubmit() {\n    if (this.keyboardControl) {\n      return;  // don't submit if a key is being held down\n    }\n\n    const newMin = this.range[0] !== this.min ? [this.range[0]] : null;\n    const newMax = this.range[1] !== this.max ? [this.range[1]] : null;\n    this.router.navigate(this.getSearchLinkParts(), {\n      queryParams:\n        {\n          [this.filterConfig.paramName + RANGE_FILTER_MIN_SUFFIX]: newMin,\n          [this.filterConfig.paramName + RANGE_FILTER_MAX_SUFFIX]: newMax\n        },\n      queryParamsHandling: 'merge'\n    });\n    this.filter = '';\n  }\n\n  startKeyboardControl(): void {\n    this.keyboardControl = true;\n  }\n\n  stopKeyboardControl(): void {\n    this.keyboardControl = false;\n  }\n\n  /**\n   * TODO when upgrading nouislider, verify that this check is still needed.\n   * Prevents AoT bug\n   * @returns {boolean} True if the platformId is a platform browser\n   */\n  shouldShowSlider(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SearchFilterConfig } from '../../../../models/search-filter-config.model';\nimport { SearchService } from '../../../../../../core/shared/search/search.service';\nimport { SearchFilterService } from '../../../../../../core/shared/search/search-filter.service';\nimport { hasValue } from '../../../../../empty.util';\nimport { SearchConfigurationService } from '../../../../../../core/shared/search/search-configuration.service';\nimport { FacetValue } from '../../../../models/facet-value.model';\nimport { currentPath } from '../../../../../utils/route.utils';\nimport { getFacetValueForType } from '../../../../search.utils';\nimport { PaginationService } from '../../../../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-search-facet-selected-option',\n  styleUrls: ['./search-facet-selected-option.component.scss'],\n  templateUrl: './search-facet-selected-option.component.html',\n})\n\n/**\n * Represents a single selected option in a filter facet\n */\nexport class SearchFacetSelectedOptionComponent implements OnInit, OnDestroy {\n  /**\n   * The value for this component\n   */\n  @Input() selectedValue: FacetValue;\n\n  /**\n   * The filter configuration for this facet option\n   */\n  @Input() filterConfig: SearchFilterConfig;\n\n  /**\n   * Emits the active values for this filter\n   */\n  @Input() selectedValues$: Observable<FacetValue[]>;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * UI parameters when this filter is removed\n   */\n  removeQueryParams;\n\n  /**\n   * Subscription to unsubscribe from on destroy\n   */\n  sub: Subscription;\n\n  /**\n   * Link to the search page\n   */\n  searchLink: string;\n\n  constructor(protected searchService: SearchService,\n              protected filterService: SearchFilterService,\n              protected searchConfigService: SearchConfigurationService,\n              protected router: Router,\n              protected paginationService: PaginationService\n  ) {\n  }\n\n  /**\n   * Initializes all observable instance variables and starts listening to them\n   */\n  ngOnInit(): void {\n    this.sub = observableCombineLatest(this.selectedValues$, this.searchConfigService.searchOptions)\n      .subscribe(([selectedValues, searchOptions]) => {\n        this.updateRemoveParams(selectedValues);\n      });\n    this.searchLink = this.getSearchLink();\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  private getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * Calculates the parameters that should change if a given value for this filter would be removed from the active filters\n   * @param {string[]} selectedValues The values that are currently selected for this filter\n   */\n  private updateRemoveParams(selectedValues: FacetValue[]): void {\n    const page = this.paginationService.getPageParam(this.searchConfigService.paginationID);\n    this.removeQueryParams = {\n      [this.filterConfig.paramName]: selectedValues\n        .filter((facetValue: FacetValue) => facetValue.label !== this.selectedValue.label)\n        .map((facetValue: FacetValue) => this.getFacetValue(facetValue)),\n      [page]: 1\n    };\n  }\n  /**\n   * TODO to review after https://github.com/DSpace/dspace-angular/issues/368 is resolved\n   * Retrieve facet value related to facet type\n   */\n  private getFacetValue(facetValue: FacetValue): string {\n    return getFacetValueForType(facetValue, this.filterConfig);\n  }\n\n  /**\n   * Make sure the subscription is unsubscribed from when this component is destroyed\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","<a class=\"d-flex flex-row\"\n   [tabIndex]=\"-1\"\n   [routerLink]=\"[searchLink]\"\n   [queryParams]=\"removeQueryParams\" queryParamsHandling=\"merge\">\n  <label class=\"mb-0\">\n    <input type=\"checkbox\" [checked]=\"true\" class=\"my-1 align-self-stretch\"/>\n    <span class=\"filter-value pl-1 text-capitalize\">\n        {{ 'search.filters.' + filterConfig.name + '.' + selectedValue.value | translate: {default: selectedValue.label} }}\n    </span>\n  </label>\n</a>\n","<a *ngIf=\"isVisible | async\" class=\"d-flex flex-row\"\n   [tabIndex]=\"-1\"\n   [routerLink]=\"[searchLink]\"\n   [queryParams]=\"addQueryParams\" queryParamsHandling=\"merge\">\n  <label class=\"mb-0\">\n    <input type=\"checkbox\" [checked]=\"false\" class=\"my-1 align-self-stretch\"/>\n    <span class=\"filter-value px-1\">\n      {{ 'search.filters.' + filterConfig.name + '.' + filterValue.value | translate: {default: filterValue.value} }}\n    </span>\n  </label>\n  <span class=\"float-right filter-value-count ml-auto\">\n                        <span class=\"badge badge-secondary badge-pill\">{{filterValue.count}}</span>\n                    </span>\n</a>\n","import { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FacetValue } from '../../../../models/facet-value.model';\nimport { SearchFilterConfig } from '../../../../models/search-filter-config.model';\nimport { SearchService } from '../../../../../../core/shared/search/search.service';\nimport { SearchFilterService } from '../../../../../../core/shared/search/search-filter.service';\nimport { SearchConfigurationService } from '../../../../../../core/shared/search/search-configuration.service';\nimport { hasValue } from '../../../../../empty.util';\nimport { currentPath } from '../../../../../utils/route.utils';\nimport { getFacetValueForType } from '../../../../search.utils';\nimport { PaginationService } from '../../../../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-search-facet-option',\n  styleUrls: ['./search-facet-option.component.scss'],\n  templateUrl: './search-facet-option.component.html',\n})\n\n/**\n * Represents a single option in a filter facet\n */\nexport class SearchFacetOptionComponent implements OnInit, OnDestroy {\n  /**\n   * A single value for this component\n   */\n  @Input() filterValue: FacetValue;\n\n  /**\n   * The filter configuration for this facet option\n   */\n  @Input() filterConfig: SearchFilterConfig;\n\n  /**\n   * Emits the active values for this filter\n   */\n  @Input() selectedValues$: Observable<FacetValue[]>;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * Emits true when this option should be visible and false when it should be invisible\n   */\n  isVisible: Observable<boolean>;\n\n  /**\n   * UI parameters when this filter is added\n   */\n  addQueryParams;\n\n  /**\n   * Link to the search page\n   */\n  searchLink: string;\n  /**\n   * Subscription to unsubscribe from on destroy\n   */\n  sub: Subscription;\n\n  paginationId: string;\n\n  constructor(protected searchService: SearchService,\n              protected filterService: SearchFilterService,\n              protected searchConfigService: SearchConfigurationService,\n              protected router: Router,\n              protected paginationService: PaginationService\n  ) {\n  }\n\n  /**\n   * Initializes all observable instance variables and starts listening to them\n   */\n  ngOnInit(): void {\n    this.paginationId = this.searchConfigService.paginationID;\n    this.searchLink = this.getSearchLink();\n    this.isVisible = this.isChecked().pipe(map((checked: boolean) => !checked));\n    this.sub = observableCombineLatest(this.selectedValues$, this.searchConfigService.searchOptions)\n      .subscribe(([selectedValues, searchOptions]) => {\n        this.updateAddParams(selectedValues);\n      });\n  }\n\n  /**\n   * Checks if a value for this filter is currently active\n   */\n  private isChecked(): Observable<boolean> {\n    return this.filterService.isFilterActiveWithValue(this.filterConfig.paramName, this.getFacetValue());\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  private getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * Calculates the parameters that should change if a given value for this filter would be added to the active filters\n   * @param {string[]} selectedValues The values that are currently selected for this filter\n   */\n  private updateAddParams(selectedValues: FacetValue[]): void {\n    const page = this.paginationService.getPageParam(this.searchConfigService.paginationID);\n    this.addQueryParams = {\n      [this.filterConfig.paramName]: [...selectedValues.map((facetValue: FacetValue) => getFacetValueForType(facetValue, this.filterConfig)), this.getFacetValue()],\n      [page]: 1\n    };\n  }\n\n  /**\n   * TODO to review after https://github.com/DSpace/dspace-angular/issues/368 is resolved\n   * Retrieve facet value related to facet type\n   */\n  private getFacetValue(): string {\n    return getFacetValueForType(this.filterValue, this.filterConfig);\n  }\n\n  /**\n   * Make sure the subscription is unsubscribed from when this component is destroyed\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","<div>\n    <div class=\"filters py-2\">\n        <ds-search-facet-selected-option *ngFor=\"let value of (selectedValues$ | async)\" [selectedValue]=\"value\" [filterConfig]=\"filterConfig\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-selected-option>\n        <ng-container *ngFor=\"let page of (filterValues$ | async)?.payload\">\n          <div [@facetLoad]=\"animationState\">\n                  <ds-search-facet-option *ngFor=\"let value of page.page; trackBy: trackUpdate\" [filterConfig]=\"filterConfig\" [filterValue]=\"value\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-option>\n          </div>\n        </ng-container>\n        <div class=\"clearfix toggle-more-filters\">\n            <a class=\"float-left\" *ngIf=\"!(isLastPage$ | async)\"\n               (click)=\"showMore()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-more\" | translate}}\n            </a>\n            <a class=\"float-right\" *ngIf=\"(currentPage | async) > 1\"\n               (click)=\"showFirstPageOnly()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-less\" | translate}}\n            </a>\n        </div>\n    </div>\n    <ds-filter-input-suggestions [suggestions]=\"(filterSearchResults | async)\"\n                          [placeholder]=\"'search.filters.filter.' + filterConfig.name + '.placeholder' | translate\"\n                          [label]=\"'search.filters.filter.' + filterConfig.name + '.label' | translate\"\n                          [action]=\"currentUrl\"\n                          [name]=\"filterConfig.paramName\"\n                          [(ngModel)]=\"filter\"\n                          (submitSuggestion)=\"onSubmit($event)\"\n                          (clickSuggestion)=\"onClick($event)\"\n                          (findSuggestions)=\"findSuggestions($event)\"\n                          ngDefaultControl></ds-filter-input-suggestions>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FilterType } from '../../../models/filter-type.model';\nimport { facetLoad, SearchFacetFilterComponent } from '../search-facet-filter/search-facet-filter.component';\nimport { renderFacetFor } from '../search-filter-type-decorator';\nimport { addOperatorToFilterValue, } from '../../../search.utils';\n\n/**\n * This component renders a simple item page.\n * The route parameter 'id' is used to request the item it represents.\n * All fields of the item that should be displayed, are defined in its template.\n */\n\n@Component({\n  selector: 'ds-search-text-filter',\n  styleUrls: ['./search-text-filter.component.scss'],\n  templateUrl: './search-text-filter.component.html',\n  animations: [facetLoad]\n})\n\n/**\n * Component that represents a text facet for a specific filter configuration\n */\n@renderFacetFor(FilterType.text)\nexport class SearchTextFilterComponent extends SearchFacetFilterComponent implements OnInit {\n  /**\n   * Submits a new active custom value to the filter from the input field\n   * Overwritten method from parent component, adds the \"query\" operator to the received data before passing it on\n   * @param data The string from the input field\n   */\n  onSubmit(data: any) {\n    super.onSubmit(addOperatorToFilterValue(data, 'query'));\n  }\n}\n","<div>\n    <div class=\"filters py-2\">\n        <ds-search-facet-selected-option *ngFor=\"let value of (selectedValues$ | async)\" [selectedValue]=\"value\" [filterConfig]=\"filterConfig\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-selected-option>\n        <ng-container *ngFor=\"let page of (filterValues$ | async)?.payload\">\n          <div [@facetLoad]=\"animationState\">\n            <ds-search-facet-option *ngFor=\"let value of page.page; trackBy: trackUpdate\" [filterConfig]=\"filterConfig\" [filterValue]=\"value\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-option>\n          </div>\n        </ng-container>\n        <div class=\"clearfix toggle-more-filters\">\n            <a class=\"float-left\" *ngIf=\"!(isLastPage$ | async)\"\n               (click)=\"showMore()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-more\" | translate}}\n            </a>\n            <a class=\"float-right\" *ngIf=\"(currentPage | async) > 1\"\n               (click)=\"showFirstPageOnly()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-less\" | translate}}\n            </a>\n        </div>\n    </div>\n    <ds-filter-input-suggestions [suggestions]=\"(filterSearchResults | async)\"\n                          [placeholder]=\"'search.filters.filter.' + filterConfig.name + '.placeholder' | translate\"\n                          [label]=\"'search.filters.filter.' + filterConfig.name + '.label' | translate\"\n                          [action]=\"currentUrl\"\n                          [name]=\"filterConfig.paramName\"\n                          [(ngModel)]=\"filter\"\n                          (submitSuggestion)=\"onSubmit($event)\"\n                          (clickSuggestion)=\"onClick($event)\"\n                          (findSuggestions)=\"findSuggestions($event)\"\n                          ngDefaultControl\n    ></ds-filter-input-suggestions>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FilterType } from '../../../models/filter-type.model';\nimport { renderFacetFor } from '../search-filter-type-decorator';\nimport { facetLoad, SearchFacetFilterComponent } from '../search-facet-filter/search-facet-filter.component';\n\n@Component({\n  selector: 'ds-search-hierarchy-filter',\n  styleUrls: ['./search-hierarchy-filter.component.scss'],\n  templateUrl: './search-hierarchy-filter.component.html',\n  animations: [facetLoad]\n})\n\n/**\n * Component that represents a hierarchy facet for a specific filter configuration\n */\n@renderFacetFor(FilterType.hierarchy)\nexport class SearchHierarchyFilterComponent extends SearchFacetFilterComponent implements OnInit {\n}\n","<div>\n    <div class=\"filters py-2\">\n        <ds-search-facet-selected-option *ngFor=\"let value of (selectedValues$ | async)\" [selectedValue]=\"value\" [filterConfig]=\"filterConfig\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-selected-option>\n      <ng-container *ngFor=\"let page of (filterValues$ | async)?.payload\">\n        <div [@facetLoad]=\"animationState\">\n            <ds-search-facet-option *ngFor=\"let value of page.page; trackBy: trackUpdate\" [filterConfig]=\"filterConfig\" [filterValue]=\"value\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-option>\n        </div>\n        </ng-container>\n        <div class=\"clearfix toggle-more-filters\">\n            <a class=\"float-left\" *ngIf=\"!(isLastPage$ | async)\"\n               (click)=\"showMore()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-more\" | translate}}\n            </a>\n            <a class=\"float-right\" *ngIf=\"(currentPage | async) > 1\"\n               (click)=\"showFirstPageOnly()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-less\" | translate}}\n            </a>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FilterType } from '../../../models/filter-type.model';\nimport { renderFacetFor } from '../search-filter-type-decorator';\nimport { facetLoad, SearchFacetFilterComponent } from '../search-facet-filter/search-facet-filter.component';\n\n@Component({\n  selector: 'ds-search-boolean-filter',\n  styleUrls: ['./search-boolean-filter.component.scss'],\n  templateUrl: './search-boolean-filter.component.html',\n  animations: [facetLoad]\n})\n\n/**\n * Component that represents a boolean facet for a specific filter configuration\n */\n@renderFacetFor(FilterType.boolean)\nexport class SearchBooleanFilterComponent extends SearchFacetFilterComponent implements OnInit {\n}\n","<a *ngIf=\"isVisible | async\" class=\"d-flex flex-row\"\n   [routerLink]=\"[searchLink]\"\n   [queryParams]=\"changeQueryParams\" queryParamsHandling=\"merge\">\n  <span class=\"filter-value px-1\">{{filterValue.label}}</span>\n  <span class=\"float-right filter-value-count ml-auto\">\n                        <span class=\"badge badge-secondary badge-pill\">{{filterValue.count}}</span>\n                    </span>\n</a>\n","import { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FacetValue } from '../../../../models/facet-value.model';\nimport { SearchFilterConfig } from '../../../../models/search-filter-config.model';\nimport { SearchService } from '../../../../../../core/shared/search/search.service';\nimport { SearchFilterService } from '../../../../../../core/shared/search/search-filter.service';\nimport {\n  RANGE_FILTER_MAX_SUFFIX,\n  RANGE_FILTER_MIN_SUFFIX\n} from '../../search-range-filter/search-range-filter.component';\nimport { SearchConfigurationService } from '../../../../../../core/shared/search/search-configuration.service';\nimport { hasValue } from '../../../../../empty.util';\nimport { currentPath } from '../../../../../utils/route.utils';\nimport { PaginationService } from '../../../../../../core/pagination/pagination.service';\n\nconst rangeDelimiter = '-';\n\n@Component({\n  selector: 'ds-search-facet-range-option',\n  styleUrls: ['./search-facet-range-option.component.scss'],\n  // templateUrl: './search-facet-range-option.component.html',\n  templateUrl: './search-facet-range-option.component.html',\n})\n\n/**\n * Represents a single option in a range filter facet\n */\nexport class SearchFacetRangeOptionComponent implements OnInit, OnDestroy {\n  /**\n   * A single value for this component\n   */\n  @Input() filterValue: FacetValue;\n\n  /**\n   * The filter configuration for this facet option\n   */\n  @Input() filterConfig: SearchFilterConfig;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * Emits true when this option should be visible and false when it should be invisible\n   */\n  isVisible: Observable<boolean>;\n\n  /**\n   * UI parameters when this filter is changed\n   */\n  changeQueryParams;\n\n  /**\n   * Subscription to unsubscribe from on destroy\n   */\n  sub: Subscription;\n\n  /**\n   * Link to the search page\n   */\n  searchLink: string;\n\n  constructor(protected searchService: SearchService,\n              protected filterService: SearchFilterService,\n              protected searchConfigService: SearchConfigurationService,\n              protected router: Router,\n              protected paginationService: PaginationService\n  ) {\n  }\n\n  /**\n   * Initializes all observable instance variables and starts listening to them\n   */\n  ngOnInit(): void {\n    this.searchLink = this.getSearchLink();\n    this.isVisible = this.isChecked().pipe(map((checked: boolean) => !checked));\n    this.sub = this.searchConfigService.searchOptions.subscribe(() => {\n      this.updateChangeParams();\n    });\n  }\n\n  /**\n   * Checks if a value for this filter is currently active\n   */\n  private isChecked(): Observable<boolean> {\n    return this.filterService.isFilterActiveWithValue(this.filterConfig.paramName, this.filterValue.value);\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  private getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * Calculates the parameters that should change if a given values for this range filter would be changed\n   */\n  private updateChangeParams(): void {\n    const parts = this.filterValue.value.split(rangeDelimiter);\n    const min = parts.length > 1 ? parts[0].trim() : this.filterValue.value;\n    const max = parts.length > 1 ? parts[1].trim() : this.filterValue.value;\n    const page = this.paginationService.getPageParam(this.searchConfigService.paginationID);\n    this.changeQueryParams = {\n      [this.filterConfig.paramName + RANGE_FILTER_MIN_SUFFIX]: [min],\n      [this.filterConfig.paramName + RANGE_FILTER_MAX_SUFFIX]: [max],\n      [page]: 1\n    };\n  }\n\n  /**\n   * Make sure the subscription is unsubscribed from when this component is destroyed\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","<div>\n    <div class=\"filters py-2\">\n        <ds-search-facet-selected-option *ngFor=\"let value of (selectedValues$ | async)\" [selectedValue]=\"value\" [filterConfig]=\"filterConfig\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-selected-option>\n        <ng-container *ngFor=\"let page of (filterValues$ | async)?.payload\">\n          <div [@facetLoad]=\"animationState\">\n                  <ds-search-facet-option *ngFor=\"let value of page.page; trackBy: trackUpdate\" [filterConfig]=\"filterConfig\" [filterValue]=\"value\" [selectedValues$]=\"selectedValues$\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-facet-option>\n          </div>\n        </ng-container>\n        <div class=\"clearfix toggle-more-filters\">\n            <a class=\"float-left\" *ngIf=\"!(isLastPage$ | async)\"\n               (click)=\"showMore()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-more\" | translate}}\n            </a>\n            <a class=\"float-right\" *ngIf=\"(currentPage | async) > 1\"\n               (click)=\"showFirstPageOnly()\" href=\"javascript:void(0);\">\n              {{\"search.filters.filter.show-less\" | translate}}\n            </a>\n        </div>\n    </div>\n    <ds-filter-input-suggestions [suggestions]=\"(filterSearchResults | async)\"\n                          [placeholder]=\"'search.filters.filter.' + filterConfig.name + '.placeholder' | translate\"\n                          [label]=\"'search.filters.filter.' + filterConfig.name + '.label' | translate\"\n                          [action]=\"currentUrl\"\n                          [name]=\"filterConfig.paramName\"\n                          [(ngModel)]=\"filter\"\n                          (submitSuggestion)=\"onSubmit($event)\"\n                          (clickSuggestion)=\"onSubmit($event)\"\n                          (findSuggestions)=\"findSuggestions($event)\"\n                          ngDefaultControl></ds-filter-input-suggestions>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FilterType } from '../../../models/filter-type.model';\nimport { facetLoad, SearchFacetFilterComponent } from '../search-facet-filter/search-facet-filter.component';\nimport { renderFacetFor } from '../search-filter-type-decorator';\n\n@Component({\n  selector: 'ds-search-authority-filter',\n  styleUrls: ['./search-authority-filter.component.scss'],\n  templateUrl: './search-authority-filter.component.html',\n  animations: [facetLoad]\n})\n\n/**\n * Component that represents an authority facet for a specific filter configuration\n */\n@renderFacetFor(FilterType.authority)\nexport class SearchAuthorityFilterComponent extends SearchFacetFilterComponent implements OnInit {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SearchSwitchConfigurationComponent } from './search-switch-configuration/search-switch-configuration.component';\nimport { SearchFiltersComponent } from './search-filters/search-filters.component';\nimport { SearchFilterComponent } from './search-filters/search-filter/search-filter.component';\nimport { SearchFacetFilterComponent } from './search-filters/search-filter/search-facet-filter/search-facet-filter.component';\nimport { SearchLabelsComponent } from './search-labels/search-labels.component';\nimport { SearchLabelComponent } from './search-labels/search-label/search-label.component';\nimport { SearchFacetFilterWrapperComponent } from './search-filters/search-filter/search-facet-filter-wrapper/search-facet-filter-wrapper.component';\nimport { SearchRangeFilterComponent } from './search-filters/search-filter/search-range-filter/search-range-filter.component';\nimport { SearchTextFilterComponent } from './search-filters/search-filter/search-text-filter/search-text-filter.component';\nimport { SearchHierarchyFilterComponent } from './search-filters/search-filter/search-hierarchy-filter/search-hierarchy-filter.component';\nimport { SearchBooleanFilterComponent } from './search-filters/search-filter/search-boolean-filter/search-boolean-filter.component';\nimport { SearchFacetOptionComponent } from './search-filters/search-filter/search-facet-filter-options/search-facet-option/search-facet-option.component';\nimport { SearchFacetSelectedOptionComponent } from './search-filters/search-filter/search-facet-filter-options/search-facet-selected-option/search-facet-selected-option.component';\nimport { SearchFacetRangeOptionComponent } from './search-filters/search-filter/search-facet-filter-options/search-facet-range-option/search-facet-range-option.component';\nimport { SearchAuthorityFilterComponent } from './search-filters/search-filter/search-authority-filter/search-authority-filter.component';\nimport { SearchSidebarComponent } from './search-sidebar/search-sidebar.component';\nimport { SearchSettingsComponent } from './search-settings/search-settings.component';\nimport { ConfigurationSearchPageComponent } from '../../search-page/configuration-search-page.component';\nimport { ThemedConfigurationSearchPageComponent } from '../../search-page/themed-configuration-search-page.component';\nimport { SearchObjects } from './models/search-objects.model';\nimport { FacetConfigResponse } from './models/facet-config-response.model';\nimport { FacetValues } from './models/facet-values.model';\nimport { SearchResult } from './models/search-result.model';\nimport { MissingTranslationHandler, TranslateModule } from '@ngx-translate/core';\nimport { MissingTranslationHelper } from '../translate/missing-translation.helper';\nimport { SharedModule } from '../shared.module';\nimport { SearchResultsComponent } from './search-results/search-results.component';\nimport { SearchComponent } from './search.component';\n\nconst COMPONENTS = [\n  SearchComponent,\n  SearchResultsComponent,\n  SearchSidebarComponent,\n  SearchSettingsComponent,\n  SearchFiltersComponent,\n  SearchFilterComponent,\n  SearchFacetFilterComponent,\n  SearchLabelsComponent,\n  SearchLabelComponent,\n  SearchFacetFilterWrapperComponent,\n  SearchRangeFilterComponent,\n  SearchTextFilterComponent,\n  SearchHierarchyFilterComponent,\n  SearchBooleanFilterComponent,\n  SearchFacetOptionComponent,\n  SearchFacetSelectedOptionComponent,\n  SearchFacetRangeOptionComponent,\n  SearchAuthorityFilterComponent,\n  SearchSwitchConfigurationComponent,\n  ConfigurationSearchPageComponent,\n  ThemedConfigurationSearchPageComponent\n];\n\nconst ENTRY_COMPONENTS = [\n  SearchFacetFilterComponent,\n  SearchRangeFilterComponent,\n  SearchTextFilterComponent,\n  SearchHierarchyFilterComponent,\n  SearchBooleanFilterComponent,\n  SearchFacetOptionComponent,\n  SearchFacetSelectedOptionComponent,\n  SearchFacetRangeOptionComponent,\n  SearchAuthorityFilterComponent,\n];\n\n/**\n * Declaration needed to make sure all decorator functions are called in time\n */\nexport const MODELS = [\n  SearchObjects,\n  FacetConfigResponse,\n  FacetValues,\n  SearchResult\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule.forChild({\n      missingTranslationHandler: { provide: MissingTranslationHandler, useClass: MissingTranslationHelper },\n      useDefaultLang: true\n    }),\n    SharedModule.withEntryComponents()\n  ],\n  exports: [\n    ...COMPONENTS\n  ]\n})\nexport class SearchModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during SSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: SearchModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({ provide: component }))\n    };\n  }\n}\n","import { Component, Inject, Input, OnInit } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { filter, map, startWith, switchMap, take } from 'rxjs/operators';\n\nimport { SearchFilterConfig } from '../../models/search-filter-config.model';\nimport { SearchFilterService } from '../../../../core/shared/search/search-filter.service';\nimport { slide } from '../../../animations/slide';\nimport { isNotEmpty } from '../../../empty.util';\nimport { SearchService } from '../../../../core/shared/search/search.service';\nimport { SearchConfigurationService } from '../../../../core/shared/search/search-configuration.service';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../my-dspace-page/my-dspace-page.component';\nimport { SequenceService } from '../../../../core/shared/sequence.service';\n\n@Component({\n  selector: 'ds-search-filter',\n  styleUrls: ['./search-filter.component.scss'],\n  templateUrl: './search-filter.component.html',\n  animations: [slide],\n})\n\n/**\n * Represents a part of the filter section for a single type of filter\n */\nexport class SearchFilterComponent implements OnInit {\n  /**\n   * The filter config for this component\n   */\n  @Input() filter: SearchFilterConfig;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * True when the filter is 100% collapsed in the UI\n   */\n  closed: boolean;\n\n  /**\n   * True when the filter controls should be hidden & removed from the tablist\n   */\n  notab: boolean;\n\n  /**\n   * True when the filter toggle button is focused\n   */\n  focusBox = false;\n\n  /**\n   * Emits true when the filter is currently collapsed in the store\n   */\n  collapsed$: Observable<boolean>;\n\n  /**\n   * Emits all currently selected values for this filter\n   */\n  selectedValues$: Observable<string[]>;\n\n  /**\n   * Emits true when the current filter is supposed to be shown\n   */\n  active$: Observable<boolean>;\n\n  private readonly sequenceId: number;\n\n  constructor(\n    private filterService: SearchFilterService,\n    private searchService: SearchService,\n    @Inject(SEARCH_CONFIG_SERVICE) private searchConfigService: SearchConfigurationService,\n    private sequenceService: SequenceService,\n  ) {\n    this.sequenceId = this.sequenceService.next();\n  }\n\n  /**\n   * Requests the current set values for this filter\n   * If the filter config is open by default OR the filter has at least one value, the filter should be initially expanded\n   * Else, the filter should initially be collapsed\n   */\n  ngOnInit() {\n    this.selectedValues$ = this.getSelectedValues();\n    this.active$ = this.isActive();\n    this.collapsed$ = this.isCollapsed();\n    this.initializeFilter();\n    this.selectedValues$.pipe(take(1)).subscribe((selectedValues) => {\n      if (isNotEmpty(selectedValues)) {\n        this.filterService.expand(this.filter.name);\n      }\n    });\n  }\n\n  /**\n   *  Changes the state for this filter to collapsed when it's expanded and to expanded it when it's collapsed\n   */\n  toggle() {\n    this.filterService.toggle(this.filter.name);\n  }\n\n  /**\n   * Checks if the filter is currently collapsed\n   * @returns {Observable<boolean>} Emits true when the current state of the filter is collapsed, false when it's expanded\n   */\n  private isCollapsed(): Observable<boolean> {\n    return this.filterService.isCollapsed(this.filter.name);\n  }\n\n  /**\n   *  Sets the initial state of the filter\n   */\n  initializeFilter() {\n    this.filterService.initializeFilter(this.filter);\n  }\n\n  /**\n   * @returns {Observable<string[]>} Emits a list of all values that are currently active for this filter\n   */\n  private getSelectedValues(): Observable<string[]> {\n    return this.filterService.getSelectedValuesForFilter(this.filter);\n  }\n\n  /**\n   * Method to change this.collapsed to false when the slide animation ends and is sliding open\n   * @param event The animation event\n   */\n  finishSlide(event: any): void {\n    if (event.fromState === 'collapsed') {\n      this.closed = false;\n    }\n    if (event.toState === 'collapsed') {\n      this.notab = true;\n    }\n  }\n\n  /**\n   * Method to change this.collapsed to true when the slide animation starts and is sliding closed\n   * @param event The animation event\n   */\n  startSlide(event: any): void {\n    if (event.toState === 'collapsed') {\n      this.closed = true;\n    }\n    if (event.fromState === 'collapsed') {\n      this.notab = false;\n    }\n  }\n\n  get regionId(): string {\n    return `search-filter-region-${this.sequenceId}`;\n  }\n\n  get toggleId(): string {\n    return `search-filter-toggle-${this.sequenceId}`;\n  }\n\n  /**\n   * Check if a given filter is supposed to be shown or not\n   * @returns {Observable<boolean>} Emits true whenever a given filter config should be shown\n   */\n  private isActive(): Observable<boolean> {\n    return this.selectedValues$.pipe(\n      switchMap((isActive) => {\n        if (isNotEmpty(isActive)) {\n          return observableOf(true);\n        } else {\n          return this.searchConfigService.searchOptions.pipe(\n            switchMap((options) => {\n                return this.searchService.getFacetValuesFor(this.filter, 1, options).pipe(\n                  filter((RD) => !RD.isLoading),\n                  map((valuesRD) => {\n                    return valuesRD.payload?.totalElements > 0;\n                  }),);\n              }\n            ));\n        }\n      }),\n      startWith(true));\n  }\n}\n","<div class=\"facet-filter d-block mb-3 p-3\" *ngIf=\"active$ | async\"\n     [id]=\"regionId\" [attr.aria-labelledby]=\"toggleId\" [ngClass]=\"{ 'focus': focusBox }\" role=\"region\">\n  <button (click)=\"toggle()\" (focusin)=\"focusBox = true\" (focusout)=\"focusBox = false\"\n          class=\"filter-name d-flex\" [attr.aria-controls]=\"regionId\" [id]=\"toggleId\"\n          [attr.aria-expanded]=\"false\"\n          [attr.aria-label]=\"((collapsed$ | async) ? 'search.filters.filter.expand' : 'search.filters.filter.collapse') | translate\"\n  >\n    <h5 class=\"d-inline-block mb-0\">\n      {{'search.filters.filter.' + filter.name + '.head'| translate}}\n    </h5>\n    <span class=\"filter-toggle flex-grow-1 fas p-auto\"\n          [ngClass]=\"(collapsed$ | async) ? 'fa-plus' : 'fa-minus'\"\n          [title]=\"((collapsed$ | async) ? 'search.filters.filter.expand' : 'search.filters.filter.collapse') | translate\">\n    </span>\n  </button>\n  <div [@slide]=\"(collapsed$ | async) ? 'collapsed' : 'expanded'\"\n       (@slide.start)=\"startSlide($event)\" (@slide.done)=\"finishSlide($event)\"\n       class=\"search-filter-wrapper\" [ngClass]=\"{ 'closed' : closed, 'notab': notab }\">\n    <ds-search-facet-filter-wrapper\n      [filterConfig]=\"filter\"\n      [inPlaceSearch]=\"inPlaceSearch\">\n    </ds-search-facet-filter-wrapper>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { SearchConfigurationOption } from '../search-switch-configuration/search-configuration-option.model';\nimport { Observable } from 'rxjs';\nimport { PaginatedSearchOptions } from '../models/paginated-search-options.model';\nimport { SortOptions } from '../../../core/cache/models/sort-options.model';\nimport { ViewMode } from '../../../core/shared/view-mode.model';\n\n/**\n * This component renders a simple item page.\n * The route parameter 'id' is used to request the item it represents.\n * All fields of the item that should be displayed, are defined in its template.\n */\n\n@Component({\n  selector: 'ds-search-sidebar',\n  styleUrls: ['./search-sidebar.component.scss'],\n  templateUrl: './search-sidebar.component.html',\n})\n\n/**\n * Component representing the sidebar on the search page\n */\nexport class SearchSidebarComponent {\n\n  /**\n   * The configuration to use for the search options\n   */\n  @Input() configuration;\n\n  /**\n   * The list of available configuration options\n   */\n  @Input() configurationList: SearchConfigurationOption[];\n\n  /**\n   * The current search scope\n   */\n  @Input() currentScope: string;\n\n  /**\n   * The current sort option used\n   */\n  @Input() currentSortOption: SortOptions;\n\n  /**\n   * The total amount of results\n   */\n  @Input() resultCount;\n\n  /**\n   * The list of available view mode options\n   */\n  @Input() viewModeList: ViewMode[];\n\n  /**\n   * Whether to show the view mode switch\n   */\n  @Input() showViewModes = true;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * The configuration for the current paginated search results\n   */\n  @Input() searchOptions: PaginatedSearchOptions;\n\n  /**\n   * All sort options that are shown in the settings\n   */\n  @Input() sortOptionsList: SortOptions[];\n\n  /**\n   * Emits when the search filters values may be stale, and so they must be refreshed.\n   */\n  @Input() refreshFilters: Observable<any>;\n\n  /**\n   * Emits event when the user clicks a button to open or close the sidebar\n   */\n  @Output() toggleSidebar = new EventEmitter<boolean>();\n\n  /**\n   * Emits event when the user select a new configuration\n   */\n  @Output() changeConfiguration: EventEmitter<SearchConfigurationOption> = new EventEmitter<SearchConfigurationOption>();\n\n  /**\n   * Emits event when the user select a new view mode\n   */\n  @Output() changeViewMode: EventEmitter<ViewMode> = new EventEmitter<ViewMode>();\n\n}\n","<div>\n    <div id=\"sidebar-options\" class=\"d-block d-md-none search-controls clearfix\">\n        <small class=\"results\">{{resultCount}} {{\"search.sidebar.results\" | translate}}</small>\n        <button (click)=\"toggleSidebar.emit()\"\n                aria-controls=\"#search-body\"\n                class=\"btn btn-outline-primary float-right close-sidebar\"><i\n                class=\"fas fa-arrow-right\" [title]=\"'search.sidebar.close' | translate\"></i> {{\"search.sidebar.close\" | translate}}\n        </button>\n    </div>\n    <div id=\"search-sidebar-content\">\n        <ds-view-mode-switch *ngIf=\"showViewModes\" class=\"d-none d-md-block\"\n                             [viewModeList]=\"viewModeList\"\n                             (changeViewMode)=\"changeViewMode.emit($event)\"></ds-view-mode-switch>\n        <div class=\"sidebar-content\">\n            <ds-search-switch-configuration *ngIf=\"configurationList\"\n                                            [configurationList]=\"configurationList\"\n                                            [defaultConfiguration]=\"configuration\"\n                                            [inPlaceSearch]=\"inPlaceSearch\"\n                                            (changeConfiguration)=\"changeConfiguration.emit($event)\"></ds-search-switch-configuration>\n            <ds-search-filters [currentScope]=\"currentScope\"\n                               [currentConfiguration]=\"configuration\"\n                               [refreshFilters]=\"refreshFilters\"\n                               [inPlaceSearch]=\"inPlaceSearch\"></ds-search-filters>\n            <ds-search-settings [currentSortOption]=\"currentSortOption\" [sortOptionsList]=\"sortOptionsList\"></ds-search-settings>\n        </div>\n    </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { ConfigurationSearchPageComponent } from './configuration-search-page.component';\nimport { Observable } from 'rxjs';\nimport { Context } from '../core/shared/context.model';\n\n/**\n * Themed wrapper for ConfigurationSearchPageComponent\n */\n@Component({\n  selector: 'ds-themed-configuration-search-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedConfigurationSearchPageComponent extends ThemedComponent<ConfigurationSearchPageComponent> {\n  /**\n   * The configuration to use for the search options\n   * If empty, the configuration will be determined by the route parameter called 'configuration'\n   */\n  @Input() configuration: string;\n\n  /**\n   * The actual query for the fixed filter.\n   * If empty, the query will be determined by the route parameter called 'filter'\n   */\n  @Input() fixedFilterQuery: string;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch = true;\n\n  /**\n   * Whether or not the search bar should be visible\n   */\n  @Input()\n  searchEnabled = true;\n\n  /**\n   * The width of the sidebar (bootstrap columns)\n   */\n  @Input()\n  sideBarWidth = 3;\n\n  /**\n   * The currently applied configuration (determines title of search)\n   */\n  @Input()\n  configuration$: Observable<string>;\n\n  /**\n   * The current context\n   */\n  @Input()\n  context: Context;\n\n  protected inAndOutputNames: (keyof ConfigurationSearchPageComponent & keyof this)[] =\n    ['context', 'configuration', 'fixedFilterQuery', 'inPlaceSearch', 'searchEnabled', 'sideBarWidth'];\n\n  protected getComponentName(): string {\n    return 'ConfigurationSearchPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/search-page/configuration-search-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./configuration-search-page.component`);\n  }\n\n}\n","<ng-template #vcr></ng-template>\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { SearchFilterConfig } from '../models/search-filter-config.model';\nimport { SearchConfigurationService } from '../../../core/shared/search/search-configuration.service';\nimport { SearchFilterService } from '../../../core/shared/search/search-filter.service';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { SEARCH_CONFIG_SERVICE } from '../../../my-dspace-page/my-dspace-page.component';\nimport { currentPath } from '../../utils/route.utils';\nimport { Router } from '@angular/router';\nimport { hasValue } from '../../empty.util';\n\n@Component({\n  selector: 'ds-search-filters',\n  styleUrls: ['./search-filters.component.scss'],\n  templateUrl: './search-filters.component.html',\n\n})\n\n/**\n * This component represents the part of the search sidebar that contains filters.\n */\nexport class SearchFiltersComponent implements OnInit, OnDestroy {\n  /**\n   * An observable containing configuration about which filters are shown and how they are shown\n   */\n  filters: Observable<RemoteData<SearchFilterConfig[]>>;\n\n  /**\n   * List of all filters that are currently active with their value set to null.\n   * Used to reset all filters at once\n   */\n  clearParams;\n\n  /**\n   * The configuration to use for the search options\n   */\n  @Input() currentConfiguration;\n\n  /**\n   * The current search scope\n   */\n  @Input() currentScope: string;\n\n  /**\n   * True when the search component should show results on the current page\n   */\n  @Input() inPlaceSearch;\n\n  /**\n   * Emits when the search filters values may be stale, and so they must be refreshed.\n   */\n  @Input() refreshFilters: Observable<any>;\n\n  /**\n   * Link to the search page\n   */\n  searchLink: string;\n\n  subs = [];\n\n  /**\n   * Initialize instance variables\n   * @param {SearchService} searchService\n   * @param {SearchFilterService} filterService\n   * @param {Router} router\n   * @param {SearchConfigurationService} searchConfigService\n   */\n  constructor(\n    private searchService: SearchService,\n    private filterService: SearchFilterService,\n    private router: Router,\n    @Inject(SEARCH_CONFIG_SERVICE) private searchConfigService: SearchConfigurationService) {\n  }\n\n  ngOnInit(): void {\n\n    this.initFilters();\n\n    if (this.refreshFilters) {\n      this.subs.push(this.refreshFilters.subscribe(() => this.initFilters()));\n    }\n\n    this.clearParams = this.searchConfigService.getCurrentFrontendFilters().pipe(map((filters) => {\n      Object.keys(filters).forEach((f) => filters[f] = null);\n      return filters;\n    }));\n    this.searchLink = this.getSearchLink();\n  }\n\n  initFilters() {\n    this.filters = this.searchService.getConfig(this.currentScope, this.currentConfiguration).pipe(\n      getFirstSucceededRemoteData()\n    );\n  }\n\n  /**\n   * @returns {string} The base path to the search page, or the current page when inPlaceSearch is true\n   */\n  getSearchLink(): string {\n    if (this.inPlaceSearch) {\n      return currentPath(this.router);\n    }\n    return this.searchService.getSearchLink();\n  }\n\n  /**\n   * Prevent unnecessary rerendering\n   */\n  trackUpdate(index, config: SearchFilterConfig) {\n    return config ? config.name : undefined;\n  }\n\n  ngOnDestroy() {\n    this.subs.forEach((sub) => {\n      if (hasValue(sub)) {\n        sub.unsubscribe();\n      }\n    });\n  }\n}\n","<h3>{{\"search.filters.head\" | translate}}</h3>\n<div *ngIf=\"(filters | async)?.hasSucceeded\">\n    <div *ngFor=\"let filter of (filters | async)?.payload; trackBy: trackUpdate\">\n        <ds-search-filter [filter]=\"filter\" [inPlaceSearch]=\"inPlaceSearch\"></ds-search-filter>\n    </div>\n</div>\n<a class=\"btn btn-primary\" [routerLink]=\"[searchLink]\" [queryParams]=\"clearParams | async\" queryParamsHandling=\"merge\" role=\"button\"><i class=\"fas fa-undo\"></i> {{\"search.filters.reset\" | translate}}</a>\n"]}