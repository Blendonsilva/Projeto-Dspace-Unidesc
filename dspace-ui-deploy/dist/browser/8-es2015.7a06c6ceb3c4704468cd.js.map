{"version":3,"sources":["webpack:///src/app/shared/comcol/comcol-page-content/comcol-page-content.component.ts","webpack:///src/app/shared/comcol/comcol-page-content/comcol-page-content.component.html","webpack:///src/app/shared/comcol/comcol-forms/edit-comcol-page/comcol-role/comcol-role.component.ts","webpack:///src/app/shared/comcol/comcol-forms/edit-comcol-page/comcol-role/comcol-role.component.html","webpack:///src/app/shared/comcol/comcol-page-handle/comcol-page-handle.component.ts","webpack:///src/app/shared/comcol/comcol-page-handle/comcol-page-handle.component.html","webpack:///src/app/shared/comcol/comcol-page-browse-by/comcol-page-browse-by.component.ts","webpack:///src/app/shared/comcol/comcol-page-browse-by/comcol-page-browse-by.component.html","webpack:///src/app/shared/comcol/comcol-forms/delete-comcol-page/delete-comcol-page.component.ts","webpack:///src/app/shared/comcol/comcol-forms/comcol-form/comcol-form.component.ts","webpack:///src/app/shared/comcol/comcol-forms/comcol-form/comcol-form.component.html","webpack:///src/app/shared/comcol/comcol.module.ts","webpack:///src/app/shared/comcol/comcol-forms/create-comcol-page/create-comcol-page.component.ts","webpack:///src/app/shared/comcol/comcol-page-logo/comcol-page-logo.component.ts","webpack:///src/app/shared/comcol/comcol-page-logo/comcol-page-logo.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.ts","webpack:///src/app/shared/form/form.module.ts","webpack:///src/app/shared/comcol/comcol-forms/edit-comcol-page/edit-comcol-page.component.ts","webpack:///src/app/shared/comcol/comcol-page-header/comcol-page-header.component.ts","webpack:///src/app/shared/comcol/comcol-page-header/comcol-page-header.component.html"],"names":["ComcolPageContentComponent","ComcolRoleComponent","constructor","requestService","groupService","comcolRole$","undefined","groupLink","this","comcolRole","href","newRole","next","getValue","create","createComcolGroup","dso","name","pipe","g","subscribe","rd","hasSucceeded","clearGroupsRequests","setStaleByHrefSubstring","delete","deleteComcolGroup","ngOnInit","groupRD$","role","findByHref","group$","payload","editGroupLink$","group","id","hasNoGroup$","hasAnonymousGroup$","hasCustomGroup$","ComcolPageHandleComponent","getHandle","content","ComcolPageBrowseByComponent","route","router","browseService","getBrowseDefinitions","browseDefListRD","allOptions","page","map","config","label","routerLink","params","scope","contentType","currentOptionId$","onSelectChange","newId","selectedOption","find","option","navigate","queryParams","DeleteComColPageComponent","dsoDataService","notifications","translate","processing$","dsoRD$","data","onConfirm","response","successMessage","instant","type","success","refreshCache","errorMessage","error","onCancel","frontendURL","uuid","back","ComColFormComponent","formService","notificationsService","authService","objectCache","LABEL_KEY_PREFIX","ERROR_KEY_PREFIX","uploadFilesOptions","Object","assign","autoUpload","submitForm","EventEmitter","finish","initializedUploaderOptions","markLogoForDeletion","subs","formModel","forEach","fieldModel","value","firstMetadataValue","formGroup","createFormGroup","updateFieldTranslations","onLangChange","push","dsoService","getLogoEndpoint","logo","logoRD","url","authToken","buildAuthHeader","method","PUT","onSubmit","_links","deleteLogo","get","POST","emit","formMetadata","language","hasOwnProperty","updatedDSO","metadata","operations","op","path","uploader","uploaderComponent","validators","errorMessages","keys","key","undoDeleteLogo","removeByHrefSubstring","self","remove","onCompleteItem","onUploadError","ngOnDestroy","filter","subscription","unsubscribe","ComcolModule","CreateComColPageComponent","parentDataService","routeService","parentUUID$","getQueryParameterValue","parentID","parentRD$","findById","event","dsoRD","newUUID","queue","length","options","uploadAll","navigateToNewPage","navigateToHome","ComcolPageLogoComponent","holderSource","errorHandler","currentTarget","src","DsDynamicFormComponent","changeDetectorRef","componentService","super","blur","change","focus","ngbEvent","FormModule","provide","useValue","EditComColPageComponent","events","initPageParamsByRoute","pages","routeConfig","children","child","getPageUrl","currentPage","snapshot","firstChild","hideReturnButton","ComcolPageHeaderComponent"],"mappings":"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","file":"x","sourcesContent":["import { Component, Input } from '@angular/core';\n\n/**\n * This component renders any content inside of this component.\n * If there is a title set it will render the title.\n * If hasInnerHtml is true the content will be handled as html.\n * To see how it is used see collection-page or community-page.\n */\n@Component({\n  selector: 'ds-comcol-page-content',\n  styleUrls: ['./comcol-page-content.component.scss'],\n  templateUrl: './comcol-page-content.component.html'\n})\nexport class ComcolPageContentComponent {\n\n  // Optional title\n  @Input() title: string;\n\n  // The content to render. Might be html\n  @Input() content: string;\n\n  // flag whether the content contains html syntax or not\n  @Input() hasInnerHtml: boolean;\n\n}\n","<div *ngIf=\"content\" class=\"content-with-optional-title mb-2\">\n    <h2 *ngIf=\"title\">{{ title | translate }}</h2>\n    <div *ngIf=\"hasInnerHtml\" [innerHtml]=\"content\"></div>\n    <div *ngIf=\"!hasInnerHtml\">{{content}}</div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Group } from '../../../../../core/eperson/models/group.model';\nimport { Community } from '../../../../../core/shared/community.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { GroupDataService } from '../../../../../core/eperson/group-data.service';\nimport { Collection } from '../../../../../core/shared/collection.model';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { getAllCompletedRemoteData, getFirstCompletedRemoteData } from '../../../../../core/shared/operators';\nimport { RequestService } from '../../../../../core/data/request.service';\nimport { RemoteData } from '../../../../../core/data/remote-data';\nimport { HALLink } from '../../../../../core/shared/hal-link.model';\nimport { getGroupEditRoute } from '../../../../../access-control/access-control-routing-paths';\nimport { hasNoValue, hasValue } from '../../../../empty.util';\nimport { NoContent } from '../../../../../core/shared/NoContent.model';\n\n/**\n * Component for managing a community or collection role.\n */\n@Component({\n  selector: 'ds-comcol-role',\n  styleUrls: ['./comcol-role.component.scss'],\n  templateUrl: './comcol-role.component.html'\n})\nexport class ComcolRoleComponent implements OnInit {\n\n  /**\n   * The community or collection to manage.\n   */\n  @Input()\n  dso: Community | Collection;\n\n  /**\n   * The role to manage\n   */\n  comcolRole$: BehaviorSubject<HALLink> = new BehaviorSubject(undefined);\n\n  /**\n   * The group for this role, as an observable remote data.\n   */\n  groupRD$: Observable<RemoteData<Group>>;\n\n  /**\n   * The group for this role, as an observable.\n   */\n  group$: Observable<Group>;\n\n  /**\n   * The link to the group edit page as an observable.\n   */\n  editGroupLink$: Observable<string>;\n\n  /**\n   * True if there is no group for this ComcolRole.\n   */\n  hasNoGroup$: Observable<boolean>;\n\n  /**\n   * Return true if the group for this ComcolRole is the Anonymous group, as an observable.\n   */\n  hasAnonymousGroup$: Observable<boolean>;\n\n  /**\n   * Return true if there is a group for this ComcolRole other than the Anonymous group, as an observable.\n   */\n  hasCustomGroup$: Observable<boolean>;\n\n  constructor(\n    protected requestService: RequestService,\n    protected groupService: GroupDataService,\n  ) {\n  }\n\n  /**\n   * The link to the related group.\n   */\n  get groupLink(): string {\n    return this.comcolRole.href;\n  }\n\n  /**\n   * The role to manage\n   */\n  @Input()\n  set comcolRole(newRole: HALLink) {\n    this.comcolRole$.next(newRole);\n  }\n\n  get comcolRole(): HALLink {\n    return this.comcolRole$.getValue();\n  }\n\n  /**\n   * Create a group for this community or collection role.\n   */\n  create() {\n    this.groupService.createComcolGroup(this.dso, this.comcolRole.name, this.groupLink).pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<Group>) => {\n\n      if (rd.hasSucceeded) {\n        this.groupService.clearGroupsRequests();\n        this.requestService.setStaleByHrefSubstring(this.comcolRole.href);\n      } else {\n        // TODO show error notification\n      }\n    });\n  }\n\n  /**\n   * Delete the group for this community or collection role.\n   */\n  delete() {\n    this.groupService.deleteComcolGroup(this.groupLink).pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<NoContent>) => {\n      if (rd.hasSucceeded) {\n        this.groupService.clearGroupsRequests();\n        this.requestService.setStaleByHrefSubstring(this.comcolRole.href);\n      } else {\n        // TODO show error notification\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.groupRD$ = this.comcolRole$.pipe(\n      filter((role: HALLink) => hasValue(role)),\n      switchMap((role: HALLink) => this.groupService.findByHref(role.href)),\n      getAllCompletedRemoteData(),\n    );\n\n    this.group$ = this.groupRD$.pipe(\n      map((rd: RemoteData<Group>) => {\n        if (hasValue(rd.payload)) {\n          return rd.payload;\n        } else {\n          return undefined;\n        }\n      })\n    );\n\n    this.editGroupLink$ = this.group$.pipe(\n      map((group: Group) => hasValue(group) ? getGroupEditRoute(group.id) : undefined),\n    );\n\n    this.hasNoGroup$ = this.group$.pipe(\n      map((group: Group) => hasNoValue(group)),\n    );\n\n    this.hasAnonymousGroup$ = this.group$.pipe(\n      map((group: Group) => hasValue(group) && group.name === 'Anonymous'),\n    );\n\n    this.hasCustomGroup$ = this.group$.pipe(\n      map((group: Group) => hasValue(group) && group.name !== 'Anonymous'),\n    );\n  }\n}\n","<div class=\"card p-2 m-3 {{(comcolRole$ | async)?.name}}\">\n\n  <div class=\"card-body d-flex flex-column\"\n       *ngVar=\"group$ | async as group\">\n\n    <h5 class=\"w-100\">\n      {{'comcol-role.edit.' + (comcolRole$ | async)?.name + '.name' | translate}}\n    </h5>\n\n    <div class=\"mt-2 mb-2\">\n      <ds-alert [type]=\"'alert-info'\" >{{'comcol-role.edit.' + (comcolRole$ | async)?.name + '.description' | translate}}</ds-alert>\n    </div>\n\n    <div class=\"d-flex flex-md-row justify-content-between flex-column\">\n      <div class=\"w-100 d-flex align-items-center\">\n        <ds-loading *ngIf=\"!(groupRD$ | async)\"></ds-loading>\n        <div *ngIf=\"hasNoGroup$ | async\">\n          {{'comcol-role.edit.no-group' | translate}}\n        </div>\n        <div *ngIf=\"hasAnonymousGroup$ | async\">\n          {{'comcol-role.edit.' + (comcolRole$ | async)?.name + '.anonymous-group' | translate}}\n        </div>\n        <a *ngIf=\"hasCustomGroup$ | async\"\n           routerLink=\"{{editGroupLink$ | async}}\">\n          {{group.name}}\n        </a>\n      </div>\n\n      <div class=\"flex-shrink-0\">\n        <button *ngIf=\"hasNoGroup$ | async\"\n             class=\"btn btn-primary create\"\n             (click)=\"create()\">\n          <i class=\"fas fa-plus\" aria-hidden=\"true\"></i> {{'comcol-role.edit.create' | translate}}\n        </button>\n        <button *ngIf=\"hasAnonymousGroup$ | async\"\n             class=\"btn btn-primary restrict\"\n             (click)=\"create()\">\n          {{'comcol-role.edit.restrict' | translate}}\n        </button>\n        <button *ngIf=\"hasCustomGroup$ | async\"\n             class=\"btn btn-danger delete\"\n             (click)=\"delete()\">\n          <i class=\"fas fa-trash\" aria-hidden=\"true\"></i> {{'comcol-role.edit.delete' | translate}}\n        </button>\n      </div>\n\n    </div>\n\n\n  </div>\n\n</div>\n","import { Component, Injectable, Input } from '@angular/core';\n\n/**\n * This component builds a URL from the value of \"handle\"\n */\n\n@Component({\n  selector: 'ds-comcol-page-handle',\n  styleUrls: ['./comcol-page-handle.component.scss'],\n  templateUrl: './comcol-page-handle.component.html'\n})\n\n@Injectable()\nexport class ComcolPageHandleComponent {\n\n  // Optional title\n  @Input() title: string;\n\n  // The value of \"handle\"\n  @Input() content: string;\n\n  public getHandle(): string {\n    return this.content;\n  }\n}\n","<div *ngIf=\"content\" class=\"content-with-optional-title mb-2\">\n    <h2 class=\"d-inline-block h6\" *ngIf=\"title\">{{ title | translate }}</h2>\n    <div  class=\"d-inline-block \"><a href=\"{{getHandle()}}\">{{getHandle()}}</a></div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { getCommunityPageRoute } from '../../../community-page/community-page-routing-paths';\nimport { getCollectionPageRoute } from '../../../collection-page/collection-page-routing-paths';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { BrowseDefinition } from '../../../core/shared/browse-definition.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { BrowseService } from '../../../core/browse/browse.service';\n\nexport interface ComColPageNavOption {\n  id: string;\n  label: string;\n  routerLink: string;\n  params?: any;\n}\n\n/**\n * A component to display the \"Browse By\" section of a Community or Collection page\n * It expects the ID of the Community or Collection as input to be passed on as a scope\n */\n@Component({\n  selector: 'ds-comcol-page-browse-by',\n  styleUrls: ['./comcol-page-browse-by.component.scss'],\n  templateUrl: './comcol-page-browse-by.component.html'\n})\nexport class ComcolPageBrowseByComponent implements OnInit {\n  /**\n   * The ID of the Community or Collection\n   */\n  @Input() id: string;\n  @Input() contentType: string;\n\n  allOptions: ComColPageNavOption[];\n\n  currentOptionId$: Observable<string>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private browseService: BrowseService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.browseService.getBrowseDefinitions()\n      .pipe(getFirstCompletedRemoteData<PaginatedList<BrowseDefinition>>())\n      .subscribe((browseDefListRD: RemoteData<PaginatedList<BrowseDefinition>>) => {\n        if (browseDefListRD.hasSucceeded) {\n          this.allOptions = browseDefListRD.payload.page\n            .map((config: BrowseDefinition) => ({\n              id: config.id,\n              label: `browse.comcol.by.${config.id}`,\n              routerLink: `/browse/${config.id}`,\n              params: { scope: this.id }\n            }));\n\n          if (this.contentType === 'collection') {\n            this.allOptions = [{\n              id: this.id,\n              label: 'collection.page.browse.recent.head',\n              routerLink: getCollectionPageRoute(this.id)\n            }, ...this.allOptions];\n          } else if (this.contentType === 'community') {\n            this.allOptions = [{\n              id: this.id,\n              label: 'community.all-lists.head',\n              routerLink: getCommunityPageRoute(this.id)\n            }, ...this.allOptions];\n          }\n        }\n      });\n\n    this.currentOptionId$ = this.route.params.pipe(\n      map((params: Params) => params.id)\n    );\n  }\n\n  onSelectChange(newId: string) {\n    const selectedOption = this.allOptions\n      .find((option: ComColPageNavOption) => option.id === newId);\n\n    this.router.navigate([selectedOption.routerLink], { queryParams: selectedOption.params });\n  }\n}\n","<h2 class=\"comcol-browse-label h5\">{{'browse.comcol.head' | translate}}</h2>\n<nav class=\"comcol-browse mb-4\" aria-label=\"Browse Community or Collection\">\n  <div class=\"d-none d-sm-block\">\n\n    <div class=\"list-group list-group-horizontal\">\n      <a *ngFor=\"let option of allOptions\"\n         class=\"list-group-item\"\n         [routerLink]=\"option.routerLink\"\n         [queryParams]=\"option.params\"\n         routerLinkActive=\"active\">{{ option.label | translate }}</a>\n    </div>\n  </div>\n\n  <div class=\"d-block d-sm-none\">\n    <select name=\"browse-type\"\n            class=\"form-control\"\n            aria-label=\"Browse Community or Collection\"\n            (ngModelChange)=\"onSelectChange($event)\" [ngModel]=\"currentOptionId$ | async\">\n      <option *ngFor=\"let option of allOptions\"\n              [ngValue]=\"option.id\"\n              [attr.selected]=\"(currentOptionId$ | async) === option.id ? 'selected' : null\">{{ option.label | translate }}</option>\n    </select>\n  </div>\n</nav>\n","import { Component, OnInit } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { first, map } from 'rxjs/operators';\nimport { NotificationsService } from '../../../notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\nimport { NoContent } from '../../../../core/shared/NoContent.model';\nimport { RequestService } from '../../../../core/data/request.service';\nimport { ComColDataService } from '../../../../core/data/comcol-data.service';\nimport { Community } from '../../../../core/shared/community.model';\nimport { Collection } from '../../../../core/shared/collection.model';\n\n/**\n * Component representing the delete page for communities and collections\n */\n@Component({\n  selector: 'ds-delete-comcol',\n  template: ''\n})\nexport class DeleteComColPageComponent<TDomain extends Community | Collection> implements OnInit {\n  /**\n   * Frontend endpoint for this type of DSO\n   */\n  protected frontendURL: string;\n  /**\n   * The initial DSO object\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * A boolean representing if a delete operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  public processing$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  public constructor(\n    protected dsoDataService: ComColDataService<TDomain>,\n    protected router: Router,\n    protected route: ActivatedRoute,\n    protected notifications: NotificationsService,\n    protected translate: TranslateService,\n    protected requestService: RequestService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dsoRD$ = this.route.data.pipe(first(), map((data) => data.dso));\n  }\n\n  /**\n   * @param {TDomain} dso The DSO to delete\n   * Deletes an existing DSO and redirects to the home page afterwards, showing a notification that states whether or not the deletion was successful\n   */\n  onConfirm(dso: TDomain) {\n    this.processing$.next(true);\n    this.dsoDataService.delete(dso.id)\n      .pipe(getFirstCompletedRemoteData())\n      .subscribe((response: RemoteData<NoContent>) => {\n        if (response.hasSucceeded) {\n          const successMessage = this.translate.instant((dso as any).type + '.delete.notification.success');\n          this.notifications.success(successMessage);\n          this.dsoDataService.refreshCache(dso);\n        } else {\n          const errorMessage = this.translate.instant((dso as any).type + '.delete.notification.fail');\n          this.notifications.error(errorMessage);\n        }\n        this.router.navigate(['/']);\n      });\n  }\n\n  /**\n   * @param {TDomain} dso The DSO for which the delete action was canceled\n   * When a delete is canceled, the user is redirected to the DSO's edit page\n   */\n  onCancel(dso: TDomain) {\n    this.router.navigate([this.frontendURL + '/' + dso.uuid + '/edit']);\n  }\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { DynamicFormControlModel, DynamicFormService, DynamicInputModel } from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { BehaviorSubject, combineLatest as observableCombineLatest, Subscription } from 'rxjs';\nimport { AuthService } from '../../../../core/auth/auth.service';\nimport { ObjectCacheService } from '../../../../core/cache/object-cache.service';\nimport { ComColDataService } from '../../../../core/data/comcol-data.service';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { RequestService } from '../../../../core/data/request.service';\nimport { RestRequestMethod } from '../../../../core/data/rest-request-method';\nimport { Bitstream } from '../../../../core/shared/bitstream.model';\nimport { Collection } from '../../../../core/shared/collection.model';\nimport { Community } from '../../../../core/shared/community.model';\nimport { MetadataMap, MetadataValue } from '../../../../core/shared/metadata.models';\nimport { ResourceType } from '../../../../core/shared/resource-type';\nimport { hasValue, isNotEmpty } from '../../../empty.util';\nimport { NotificationsService } from '../../../notifications/notifications.service';\nimport { UploaderOptions } from '../../../uploader/uploader-options.model';\nimport { UploaderComponent } from '../../../uploader/uploader.component';\nimport { Operation } from 'fast-json-patch';\nimport { NoContent } from '../../../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\n\n/**\n * A form for creating and editing Communities or Collections\n */\n@Component({\n  selector: 'ds-comcol-form',\n  styleUrls: ['./comcol-form.component.scss'],\n  templateUrl: './comcol-form.component.html'\n})\nexport class ComColFormComponent<T extends Collection | Community> implements OnInit, OnDestroy {\n\n  /**\n   * The logo uploader component\n   */\n  @ViewChild(UploaderComponent) uploaderComponent: UploaderComponent;\n\n  /**\n   * DSpaceObject that the form represents\n   */\n  @Input() dso: T;\n\n  /**\n   * Type of DSpaceObject that the form represents\n   */\n  type: ResourceType;\n\n  /**\n   * @type {string} Key prefix used to generate form labels\n   */\n  LABEL_KEY_PREFIX = '.form.';\n\n  /**\n   * @type {string} Key prefix used to generate form error messages\n   */\n  ERROR_KEY_PREFIX = '.form.errors.';\n\n  /**\n   * The form model that represents the fields in the form\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * The uploader configuration options\n   * @type {UploaderOptions}\n   */\n  uploadFilesOptions: UploaderOptions = Object.assign(new UploaderOptions(), {\n    autoUpload: false\n  });\n\n  /**\n   * Emits DSO and Uploader when the form is submitted\n   */\n  @Output() submitForm: EventEmitter<{\n    dso: T,\n    uploader: FileUploader,\n    deleteLogo: boolean,\n    operations: Operation[],\n  }> = new EventEmitter();\n\n  /**\n   * Event emitted on back\n   */\n  @Output() back: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Fires an event when the logo has finished uploading (with or without errors) or was removed\n   */\n  @Output() finish: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Observable keeping track whether or not the uploader has finished initializing\n   * Used to start rendering the uploader component\n   */\n  initializedUploaderOptions = new BehaviorSubject(false);\n\n  /**\n   * Is the logo marked to be deleted?\n   */\n  markLogoForDeletion = false;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * The service used to fetch from or send data to\n   */\n  protected dsoService: ComColDataService<Community | Collection>;\n\n  public constructor(protected formService: DynamicFormService,\n                     protected translate: TranslateService,\n                     protected notificationsService: NotificationsService,\n                     protected authService: AuthService,\n                     protected requestService: RequestService,\n                     protected objectCache: ObjectCacheService) {\n  }\n\n  ngOnInit(): void {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.value = this.dso.firstMetadataValue(fieldModel.name);\n      }\n    );\n    this.formGroup = this.formService.createFormGroup(this.formModel);\n\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n\n    if (hasValue(this.dso.id)) {\n      this.subs.push(\n        observableCombineLatest([\n          this.dsoService.getLogoEndpoint(this.dso.id),\n          this.dso.logo\n        ]).subscribe(([href, logoRD]: [string, RemoteData<Bitstream>]) => {\n          this.uploadFilesOptions.url = href;\n          this.uploadFilesOptions.authToken = this.authService.buildAuthHeader();\n          // If the object already contains a logo, send out a PUT request instead of POST for setting a new logo\n          if (hasValue(logoRD.payload)) {\n            this.uploadFilesOptions.method = RestRequestMethod.PUT;\n          }\n          this.initializedUploaderOptions.next(true);\n        })\n      );\n    } else {\n      // Set a placeholder URL to not break the uploader component. This will be replaced once the object is created.\n      this.uploadFilesOptions.url = 'placeholder';\n      this.uploadFilesOptions.authToken = this.authService.buildAuthHeader();\n      this.initializedUploaderOptions.next(true);\n    }\n  }\n\n  /**\n   * Checks which new fields were added and sends the updated version of the DSO to the parent component\n   */\n  onSubmit() {\n    if (this.markLogoForDeletion && hasValue(this.dso.id) && hasValue(this.dso._links.logo)) {\n      this.dsoService.deleteLogo(this.dso).pipe(\n        getFirstCompletedRemoteData()\n      ).subscribe((response: RemoteData<NoContent>) => {\n        if (response.hasSucceeded) {\n          this.notificationsService.success(\n            this.translate.get(this.type.value + '.edit.logo.notifications.delete.success.title'),\n            this.translate.get(this.type.value + '.edit.logo.notifications.delete.success.content')\n          );\n        } else {\n          this.notificationsService.error(\n            this.translate.get(this.type.value + '.edit.logo.notifications.delete.error.title'),\n            response.errorMessage\n          );\n        }\n        this.dso.logo = undefined;\n        this.uploadFilesOptions.method = RestRequestMethod.POST;\n        this.refreshCache();\n        this.finish.emit();\n      });\n    }\n\n    const formMetadata = {}  as MetadataMap;\n    this.formModel.forEach((fieldModel: DynamicInputModel) => {\n      const value: MetadataValue = {\n        value: fieldModel.value as string,\n        language: null\n      } as any;\n      if (formMetadata.hasOwnProperty(fieldModel.name)) {\n        formMetadata[fieldModel.name].push(value);\n      } else {\n        formMetadata[fieldModel.name] = [value];\n      }\n    });\n\n    const updatedDSO = Object.assign({}, this.dso, {\n      metadata: {\n        ...this.dso.metadata,\n        ...formMetadata\n      },\n      type: Community.type\n    });\n\n    const operations: Operation[] = [];\n    this.formModel.forEach((fieldModel: DynamicInputModel) => {\n      if (fieldModel.value !== this.dso.firstMetadataValue(fieldModel.name)) {\n        operations.push({\n          op: 'replace',\n          path: `/metadata/${fieldModel.name}`,\n          value: {\n            value: fieldModel.value,\n            language: null,\n          },\n        });\n      }\n    });\n\n    this.submitForm.emit({\n      dso: updatedDSO,\n      uploader: hasValue(this.uploaderComponent) ? this.uploaderComponent.uploader : undefined,\n      deleteLogo: this.markLogoForDeletion,\n      operations: operations,\n    });\n  }\n\n  /**\n   * Used the update translations of errors and labels on init and on language change\n   */\n  private updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.type.value + this.LABEL_KEY_PREFIX + fieldModel.id);\n        if (isNotEmpty(fieldModel.validators)) {\n          fieldModel.errorMessages = {};\n          Object.keys(fieldModel.validators).forEach((key) => {\n            fieldModel.errorMessages[key] = this.translate.instant(this.type.value + this.ERROR_KEY_PREFIX + fieldModel.id + '.' + key);\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Mark the logo to be deleted\n   * Send out a delete request to remove the logo from the community/collection and display notifications\n   */\n  deleteLogo() {\n    this.markLogoForDeletion = true;\n  }\n\n  /**\n   * Undo marking the logo to be deleted\n   */\n  undoDeleteLogo() {\n    this.markLogoForDeletion = false;\n  }\n\n  /**\n   * Refresh the object's cache to ensure the latest version\n   */\n  private refreshCache() {\n    this.requestService.removeByHrefSubstring(this.dso._links.self.href);\n    this.objectCache.remove(this.dso._links.self.href);\n  }\n\n  /**\n   * The request was successful, display a success notification\n   */\n  public onCompleteItem() {\n    if (hasValue(this.dso.id)) {\n      this.refreshCache();\n    }\n    this.notificationsService.success(null, this.translate.get(this.type.value + '.edit.logo.notifications.add.success'));\n    this.finish.emit();\n  }\n\n  /**\n   * The request was unsuccessful, display an error notification\n   */\n  public onUploadError() {\n    this.notificationsService.error(null, this.translate.get(this.type.value + '.edit.logo.notifications.add.error'));\n    this.finish.emit();\n  }\n\n  /**\n   * Unsubscribe from open subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-12 d-inline-block\">\n      <label>{{type.value + '.edit.logo.label' | translate}}</label>\n    </div>\n    <ng-container *ngVar=\"(dso?.logo | async)?.payload as logo\">\n      <div class=\"col-12 d-inline-block alert\" [ngClass]=\"{'alert-danger': markLogoForDeletion}\" id=\"logo-section\" *ngIf=\"logo\">\n        <div class=\"row\">\n          <div class=\"col-8 d-inline-block\">\n            <ds-comcol-page-logo [logo]=\"logo\"></ds-comcol-page-logo>\n          </div>\n          <div class=\"col-4 d-inline-block\">\n            <div *ngIf=\"logo\" class=\"btn-group btn-group-sm float-right\" role=\"group\">\n              <button *ngIf=\"!markLogoForDeletion\" type=\"button\" class=\"btn btn-danger\"\n                      title=\"{{type.value + '.edit.logo.delete.title' | translate}}\"\n                      (click)=\"deleteLogo()\">\n                <i class=\"fas fa-trash\" aria-hidden=\"true\"></i>\n              </button>\n              <button *ngIf=\"markLogoForDeletion\" type=\"button\" class=\"btn btn-warning\"\n                      title=\"{{type.value + '.edit.logo.delete-undo.title' | translate}}\"\n                      (click)=\"undoDeleteLogo()\">\n                <i class=\"fas fa-undo\" aria-hidden=\"true\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"!logo\" class=\"col-12 d-inline-block\">\n        <ds-uploader  *ngIf=\"initializedUploaderOptions | async\"\n                      [dropMsg]=\"type.value + '.edit.logo.upload'\"\n                      [dropOverDocumentMsg]=\"type.value + '.edit.logo.upload'\"\n                      [enableDragOverDocument]=\"true\"\n                      [uploadFilesOptions]=\"uploadFilesOptions\"\n                      (onCompleteItem)=\"onCompleteItem()\"\n                      (onUploadError)=\"onUploadError()\"></ds-uploader>\n      </div>\n    </ng-container>\n  </div>\n</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"'comcol-form-id'\"\n         [formModel]=\"formModel\"\n         [displayCancel]=\"false\"\n         (submitForm)=\"onSubmit()\">\n  <button before (click)=\"back.emit()\" class=\"btn btn-outline-secondary\">\n    <i class=\"fas fa-arrow-left\"></i> {{ type.value + '.edit.return' | translate }}\n  </button>\n</ds-form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComcolPageContentComponent } from './comcol-page-content/comcol-page-content.component';\nimport { ComcolPageHandleComponent } from './comcol-page-handle/comcol-page-handle.component';\nimport { ComcolPageHeaderComponent } from './comcol-page-header/comcol-page-header.component';\nimport { ComcolPageLogoComponent } from './comcol-page-logo/comcol-page-logo.component';\nimport { ComColFormComponent } from './comcol-forms/comcol-form/comcol-form.component';\nimport { CreateComColPageComponent } from './comcol-forms/create-comcol-page/create-comcol-page.component';\nimport { EditComColPageComponent } from './comcol-forms/edit-comcol-page/edit-comcol-page.component';\nimport { DeleteComColPageComponent } from './comcol-forms/delete-comcol-page/delete-comcol-page.component';\nimport { ComcolPageBrowseByComponent } from './comcol-page-browse-by/comcol-page-browse-by.component';\nimport { ComcolRoleComponent } from './comcol-forms/edit-comcol-page/comcol-role/comcol-role.component';\nimport { SharedModule } from '../shared.module';\nimport { FormModule } from '../form/form.module';\n\nconst COMPONENTS = [\n  ComcolPageContentComponent,\n  ComcolPageHandleComponent,\n  ComcolPageHeaderComponent,\n  ComcolPageLogoComponent,\n  ComColFormComponent,\n  CreateComColPageComponent,\n  EditComColPageComponent,\n  DeleteComColPageComponent,\n  ComcolPageBrowseByComponent,\n  ComcolRoleComponent,\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    FormModule,\n    SharedModule\n  ],\n  exports: [\n    ...COMPONENTS\n  ]\n})\nexport class ComcolModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ComColDataService } from '../../../../core/data/comcol-data.service';\nimport { CommunityDataService } from '../../../../core/data/community-data.service';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { RouteService } from '../../../../core/services/route.service';\nimport { Community } from '../../../../core/shared/community.model';\nimport { getFirstSucceededRemoteDataPayload, } from '../../../../core/shared/operators';\nimport { ResourceType } from '../../../../core/shared/resource-type';\nimport { hasValue, isNotEmpty, isNotUndefined } from '../../../empty.util';\nimport { NotificationsService } from '../../../notifications/notifications.service';\nimport { RequestParam } from '../../../../core/cache/models/request-param.model';\nimport { RequestService } from '../../../../core/data/request.service';\nimport { Collection } from '../../../../core/shared/collection.model';\n\n/**\n * Component representing the create page for communities and collections\n */\n@Component({\n  selector: 'ds-create-comcol',\n  template: ''\n})\nexport class CreateComColPageComponent<TDomain extends Collection | Community> implements OnInit {\n  /**\n   * Frontend endpoint for this type of DSO\n   */\n  protected frontendURL: string;\n\n  /**\n   * The provided UUID for the parent community\n   */\n  public parentUUID$: Observable<string>;\n\n  /**\n   * The parent community of the object that is to be created\n   */\n  public parentRD$: Observable<RemoteData<Community>>;\n\n  /**\n   * The UUID of the newly created object\n   */\n  private newUUID: string;\n\n  /**\n   * The type of the dso\n   */\n  protected type: ResourceType;\n\n  public constructor(\n    protected dsoDataService: ComColDataService<TDomain>,\n    protected parentDataService: CommunityDataService,\n    protected routeService: RouteService,\n    protected router: Router,\n    protected notificationsService: NotificationsService,\n    protected translate: TranslateService,\n    protected requestService: RequestService\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.parentUUID$ = this.routeService.getQueryParameterValue('parent');\n    this.parentUUID$.pipe(take(1)).subscribe((parentID: string) => {\n      if (isNotEmpty(parentID)) {\n        this.parentRD$ = this.parentDataService.findById(parentID);\n      }\n    });\n  }\n\n  /**\n   * Creates a new DSO based on the submitted user data and navigates to the new object's home page\n   * @param event   The event returned by the community/collection form. Contains the new dso and logo uploader\n   */\n  onSubmit(event) {\n    const dso = event.dso;\n    const uploader = event.uploader;\n\n    this.parentUUID$.pipe(\n      take(1),\n      mergeMap((uuid: string) => {\n      const params = uuid ? [new RequestParam('parent', uuid)] : [];\n      return this.dsoDataService.create(dso, ...params)\n        .pipe(getFirstSucceededRemoteDataPayload()\n        );\n      }))\n      .subscribe((dsoRD: TDomain) => {\n        if (isNotUndefined(dsoRD)) {\n          this.newUUID = dsoRD.uuid;\n          if (uploader.queue.length > 0) {\n            this.dsoDataService.getLogoEndpoint(this.newUUID).pipe(take(1)).subscribe((href: string) => {\n              uploader.options.url = href;\n              uploader.uploadAll();\n            });\n          } else {\n            this.navigateToNewPage();\n          }\n          this.dsoDataService.refreshCache(dsoRD);\n        }\n        this.notificationsService.success(null, this.translate.get(this.type.value + '.create.notifications.success'));\n      });\n  }\n\n  /**\n   * Navigate to home page\n   */\n  navigateToHome() {\n    this.router.navigate(['/home']);\n  }\n\n  /**\n   * Navigate to the page of the newly created object\n   */\n  navigateToNewPage() {\n    if (hasValue(this.newUUID)) {\n      this.router.navigate([this.frontendURL + this.newUUID]);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Bitstream } from '../../../core/shared/bitstream.model';\n\n@Component({\n  selector: 'ds-comcol-page-logo',\n  styleUrls: ['./comcol-page-logo.component.scss'],\n  templateUrl: './comcol-page-logo.component.html',\n})\nexport class ComcolPageLogoComponent {\n  @Input() logo: Bitstream;\n\n  @Input() alternateText: string;\n\n  /**\n   * The default 'holder.js' image\n   */\n  holderSource = 'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2293%22%20height%3D%22120%22%20viewBox%3D%220%200%2093%20120%22%20preserveAspectRatio%3D%22none%22%3E%3C!--%0ASource%20URL%3A%20holder.js%2F93x120%3Ftext%3DNo%20Thumbnail%0ACreated%20with%20Holder.js%202.8.2.%0ALearn%20more%20at%20http%3A%2F%2Fholderjs.com%0A(c)%202012-2015%20Ivan%20Malopinsky%20-%20http%3A%2F%2Fimsky.co%0A--%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%3C!%5BCDATA%5B%23holder_1543e460b05%20text%20%7B%20fill%3A%23AAAAAA%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A10pt%20%7D%20%5D%5D%3E%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1543e460b05%22%3E%3Crect%20width%3D%2293%22%20height%3D%22120%22%20fill%3D%22%23EEEEEE%22%2F%3E%3Cg%3E%3Ctext%20x%3D%2235.6171875%22%20y%3D%2257%22%3ENo%3C%2Ftext%3E%3Ctext%20x%3D%2210.8125%22%20y%3D%2272%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E';\n\n  errorHandler(event) {\n    event.currentTarget.src = this.holderSource;\n  }\n\n}\n","<div *ngIf=\"logo\" class=\"dso-logo mb-3\">\n    <img [src]=\"logo._links.content.href\" class=\"img-fluid\" [attr.alt]=\"alternateText ? alternateText : null\" (error)=\"errorHandler($event)\"/>\n</div>\n","<ds-dynamic-form-control-container *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                                   [formId]=\"formId\"\n                                   [group]=\"formGroup\"\n                                   [hasErrorMessaging]=\"model.hasErrorMessages\"\n                                   [hidden]=\"model.hidden\"\n                                   [layout]=\"formLayout\"\n                                   [model]=\"model\"\n                                   [templates]=\"templates\"\n                                   [asBootstrapFormGroup]=\"true\"\n                                   (dfBlur)=\"onCustomEvent($event, blur)\"\n                                   (dfChange)=\"onCustomEvent($event, change)\"\n                                   (dfFocus)=\"onCustomEvent($event, focus)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></ds-dynamic-form-control-container>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormComponent,\n  DynamicFormControlContainerComponent,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicFormComponentService,\n  DynamicTemplateDirective,\n} from '@ng-dynamic-forms/core';\nimport { DsDynamicFormControlContainerComponent } from './ds-dynamic-form-control-container.component';\n\n@Component({\n  selector: 'ds-dynamic-form',\n  templateUrl: './ds-dynamic-form.component.html'\n})\nexport class DsDynamicFormComponent extends DynamicFormComponent {\n\n  @Input() formId: string;\n  @Input() formGroup: FormGroup;\n  @Input() formModel: DynamicFormControlModel[];\n  @Input() formLayout: DynamicFormLayout;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n\n  @Output() ngbEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n  @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n  @ViewChildren(DsDynamicFormControlContainerComponent) components: QueryList<DynamicFormControlContainerComponent>;\n\n  constructor(changeDetectorRef: ChangeDetectorRef, componentService: DynamicFormComponentService) {\n    super(changeDetectorRef, componentService);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormComponent } from './form.component';\nimport { DsDynamicFormComponent } from './builder/ds-dynamic-form-ui/ds-dynamic-form.component';\nimport {\n  DsDynamicFormControlContainerComponent,\n  dsDynamicFormControlMapFn\n} from './builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component';\nimport { DsDynamicListComponent } from './builder/ds-dynamic-form-ui/models/list/dynamic-list.component';\nimport { DsDynamicLookupComponent } from './builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component';\nimport { DsDynamicDisabledComponent } from './builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component';\nimport { DsDynamicLookupRelationModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { DsDynamicScrollableDropdownComponent } from './builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component';\nimport { DsDynamicTagComponent } from './builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component';\nimport { DsDynamicOneboxComponent } from './builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component';\nimport { DsDynamicRelationGroupComponent } from './builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.components';\nimport { DsDatePickerComponent } from './builder/ds-dynamic-form-ui/models/date-picker/date-picker.component';\nimport { DsDynamicFormGroupComponent } from './builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component';\nimport { DsDynamicFormArrayComponent } from './builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component';\nimport { DsDatePickerInlineComponent } from './builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component';\nimport { DsDynamicLookupRelationSearchTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component';\nimport { DsDynamicLookupRelationSelectionTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component';\nimport { DsDynamicLookupRelationExternalSourceTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component';\nimport { SharedModule } from '../shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SearchModule } from '../search/search.module';\nimport { DYNAMIC_FORM_CONTROL_MAP_FN, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport { ExistingMetadataListElementComponent } from './builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component';\nimport { ExistingRelationListElementComponent } from './builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component';\nimport { ExternalSourceEntryImportModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component';\nimport { CustomSwitchComponent } from './builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component';\nimport { DynamicFormsNGBootstrapUIModule } from '@ng-dynamic-forms/ui-ng-bootstrap';\n\nconst COMPONENTS = [\n  CustomSwitchComponent,\n  DsDynamicFormComponent,\n  DsDynamicFormControlContainerComponent,\n  DsDynamicListComponent,\n  DsDynamicLookupComponent,\n  DsDynamicLookupRelationSearchTabComponent,\n  DsDynamicLookupRelationSelectionTabComponent,\n  DsDynamicLookupRelationExternalSourceTabComponent,\n  DsDynamicDisabledComponent,\n  DsDynamicLookupRelationModalComponent,\n  DsDynamicScrollableDropdownComponent,\n  DsDynamicTagComponent,\n  DsDynamicOneboxComponent,\n  DsDynamicRelationGroupComponent,\n  DsDatePickerComponent,\n  DsDynamicFormGroupComponent,\n  DsDynamicFormArrayComponent,\n  DsDatePickerInlineComponent,\n  ExistingMetadataListElementComponent,\n  ExistingRelationListElementComponent,\n  ExternalSourceEntryImportModalComponent,\n  FormComponent\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    DynamicFormsCoreModule,\n    DynamicFormsNGBootstrapUIModule,\n    SearchModule,\n    SharedModule,\n    TranslateModule\n  ],\n  exports: [\n    ...COMPONENTS\n  ],\n  providers: [\n    {\n      provide: DYNAMIC_FORM_CONTROL_MAP_FN,\n      useValue: dsDynamicFormControlMapFn\n    }\n  ]\n})\nexport class FormModule {\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { isNotEmpty } from '../../../empty.util';\nimport { DSpaceObject } from '../../../../core/shared/dspace-object.model';\n\n/**\n * Component representing the edit page for communities and collections\n */\n@Component({\n  selector: 'ds-edit-comcol',\n  template: ''\n})\nexport class EditComColPageComponent<TDomain extends DSpaceObject> implements OnInit {\n  /**\n   * The type of DSpaceObject (used to create i18n messages)\n   */\n  public type: string;\n\n  /**\n   * The current page outlet string\n   */\n  public currentPage: string;\n\n  /**\n   * All possible page outlet strings\n   */\n  public pages: string[];\n\n  /**\n   * The DSO to render the edit page for\n   */\n  public dsoRD$: Observable<RemoteData<TDomain>>;\n\n  /**\n   * Hide the default return button?\n   */\n  public hideReturnButton: boolean;\n\n  public constructor(\n    protected router: Router,\n    protected route: ActivatedRoute\n  ) {\n    this.router.events.subscribe(() => this.initPageParamsByRoute());\n  }\n\n  ngOnInit(): void {\n    this.initPageParamsByRoute();\n    this.pages = this.route.routeConfig.children\n      .map((child: any) => child.path)\n      .filter((path: string) => isNotEmpty(path)); // ignore reroutes\n    this.dsoRD$ = this.route.data.pipe(first(), map((data) => data.dso));\n  }\n\n  /**\n   * Get the dso's page url\n   * This method is expected to be overridden in the edit community/collection page components\n   * @param dso The DSpaceObject for which the url is requested\n   */\n  getPageUrl(dso: TDomain): string {\n    return this.router.url;\n  }\n\n  /**\n   * Set page params depending on the route\n   */\n  initPageParamsByRoute() {\n    this.currentPage = this.route.snapshot.firstChild.routeConfig.path;\n    this.hideReturnButton = this.route.routeConfig.children\n      .find((child: any) => child.path === this.currentPage).data.hideReturnButton;\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ds-comcol-page-header',\n  styleUrls: ['./comcol-page-header.component.scss'],\n  templateUrl: './comcol-page-header.component.html',\n})\nexport class ComcolPageHeaderComponent {\n  @Input() name: string;\n}\n","<h1 *ngIf=\"name\">{{ name }}</h1>"]}