{"version":3,"sources":["webpack:///src/themes lazy ^\\.\\/.*\\/app\\/register\\-page\\/create\\-profile\\/create\\-profile\\.component$ namespace object","webpack:///src/app/core/resolving/resolver.actions.ts","webpack:///src/app/register-page/register-email/register-email.component.ts","webpack:///src/app/register-page/register-email/register-email.component.html","webpack:///src/app/register-page/create-profile/themed-create-profile.component.ts","webpack:///src/app/register-page/register-page-routing.module.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/register-page/register-page.module.ts","webpack:///src/app/core/data/registration-response-parsing.service.ts","webpack:///src/app/core/data/eperson-registration.service.ts","webpack:///src/app/register-page/create-profile/create-profile.component.ts","webpack:///src/app/register-page/create-profile/create-profile.component.html","webpack:///src/app/item-page/item.resolver.ts","webpack:///src/app/item-page/item-page.resolver.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","ResolverActionTypes","RESOLVED","ResolvedAction","constructor","url","dso","type","this","payload","RegisterEmailComponent","ThemedCreateProfileComponent","RegisterPageRoutingModule","getComponentName","importThemedComponent","themeName","importUnthemedComponent","forChild","path","component","data","title","registration","canActivate","RegisterPageModule","ProfilePageModule","RegistrationResponseParsingService","EpersonRegistrationService","parse","request","assign","statusCode","requestService","rdbService","halService","linkPath","searchByTokenPath","getRegistrationEndpoint","getEndpoint","getTokenSearchEndpoint","token","pipe","filter","href","registerEmail","email","requestId","generateRequestId","find","send","subscribe","buildFromRequestUUID","g","searchByToken","href$","getResponseParser","buildSingle","skipWhile","rd","isStale","restResponse","user","CreateProfileComponent","translateService","ePersonDataService","store","router","route","formBuilder","notificationsService","endUserAgreementService","isInValidPassword","ngOnInit","registration$","activeLangs","languages","MyLangConfig","active","userInfoForm","group","firstName","FormControl","validators","Validators","required","lastName","contactPhone","language","setInValid","$event","password","setPasswordValue","get","submitEperson","invalid","values","metadata","value","canLogIn","requireCertificate","isCookieAccepted","String","removeCookieAccepted","eperson","createEPersonForToken","hasSucceeded","success","dispatch","navigate","error","ITEM_PAGE_LINKS_TO_FOLLOW","ItemResolver","itemService","state","itemRD$","findById","params","itemRD","ItemPageResolver","super","itemRoute","thisRoute","startsWith","itemId","uuid","subRoute","substring","indexOf","length","navigateByUrl"],"mappings":"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","file":"x","sourcesContent":["var map = {\n\t\"./custom/app/register-page/create-profile/create-profile.component\": [\n\t\t\"yxWx\",\n\t\t70\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"5PCp\";\nmodule.exports = webpackAsyncContext;","import { type } from '../../shared/ngrx/type';\nimport { Action } from '@ngrx/store';\nimport { DSpaceObject } from '../shared/dspace-object.model';\n\nexport const ResolverActionTypes = {\n  RESOLVED: type('dspace/resolver/RESOLVED')\n};\n\n/**\n * An action that indicates a route object has been resolved.\n *\n * It isn't used in a reducer for now. Its purpose is to be able to be notified that an object\n * has been resolved in an effect.\n */\nexport class ResolvedAction implements Action {\n  type = ResolverActionTypes.RESOLVED;\n  payload: {\n    url: string,\n    dso: DSpaceObject\n  };\n\n  constructor(url: string, dso: DSpaceObject) {\n    this.payload = { url, dso };\n  }\n}\n\nexport type ResolverAction = ResolvedAction;\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-register-email',\n  styleUrls: ['./register-email.component.scss'],\n  templateUrl: './register-email.component.html'\n})\n/**\n * Component responsible the email registration step when registering as a new user\n */\nexport class RegisterEmailComponent {\n\n}\n","<ds-register-email-form\n        [MESSAGE_PREFIX]=\"'register-page.registration'\">\n</ds-register-email-form>\n","import { Component } from '@angular/core';\nimport { CreateProfileComponent } from './create-profile.component';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\n\n/**\n * Themed wrapper for CreateProfileComponent\n */\n@Component({\n  selector: 'ds-themed-create-profile',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedCreateProfileComponent extends ThemedComponent<CreateProfileComponent> {\n  protected getComponentName(): string {\n    return 'CreateProfileComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/register-page/create-profile/create-profile.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./create-profile.component`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { RegisterEmailComponent } from './register-email/register-email.component';\nimport { ItemPageResolver } from '../item-page/item-page.resolver';\nimport { RegistrationResolver } from '../register-email-form/registration.resolver';\nimport { EndUserAgreementCookieGuard } from '../core/end-user-agreement/end-user-agreement-cookie.guard';\nimport { ThemedCreateProfileComponent } from './create-profile/themed-create-profile.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: RegisterEmailComponent,\n        data: {title: 'register-email.title'},\n      },\n      {\n        path: ':token',\n        component: ThemedCreateProfileComponent,\n        resolve: {registration: RegistrationResolver},\n        canActivate: [EndUserAgreementCookieGuard]\n      }\n    ])\n  ],\n  providers: [\n    RegistrationResolver,\n    ItemPageResolver\n  ]\n})\n/**\n * Module related to the navigation to components used to register a new user\n */\nexport class RegisterPageRoutingModule {\n}\n","<ng-template #vcr></ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { RegisterPageRoutingModule } from './register-page-routing.module';\nimport { RegisterEmailComponent } from './register-email/register-email.component';\nimport { CreateProfileComponent } from './create-profile/create-profile.component';\nimport { RegisterEmailFormModule } from '../register-email-form/register-email-form.module';\nimport { ProfilePageModule } from '../profile-page/profile-page.module';\nimport { ThemedCreateProfileComponent } from './create-profile/themed-create-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RegisterPageRoutingModule,\n    RegisterEmailFormModule,\n    ProfilePageModule,\n  ],\n  declarations: [\n    RegisterEmailComponent,\n    CreateProfileComponent,\n    ThemedCreateProfileComponent\n  ],\n  providers: []\n})\n\n/**\n * Module related to components used to register a new user\n */\nexport class RegisterPageModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ParsedResponse\n} from '../cache/response.models';\nimport { RawRestResponse } from '../dspace-rest/raw-rest-response.model';\nimport { ResponseParsingService } from './parsing.service';\nimport { RestRequest } from './request.models';\nimport { Registration } from '../shared/registration.model';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Parsing service responsible for parsing a Registration response\n */\nexport class RegistrationResponseParsingService implements ResponseParsingService {\n\n  parse(request: RestRequest, data: RawRestResponse): ParsedResponse {\n    const payload = data.payload;\n\n    const registration = Object.assign(new Registration(), payload);\n\n    return new ParsedResponse(data.statusCode, undefined, registration);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { RequestService } from './request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { GetRequest, PostRequest } from './request.models';\nimport { Observable } from 'rxjs';\nimport { filter, find, map, skipWhile } from 'rxjs/operators';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { Registration } from '../shared/registration.model';\nimport { getFirstCompletedRemoteData, getFirstSucceededRemoteData } from '../shared/operators';\nimport { ResponseParsingService } from './parsing.service';\nimport { GenericConstructor } from '../shared/generic-constructor';\nimport { RegistrationResponseParsingService } from './registration-response-parsing.service';\nimport { RemoteData } from './remote-data';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\n\n@Injectable(\n  {\n    providedIn: 'root',\n  }\n)\n/**\n * Service that will register a new email address and request a token\n */\nexport class EpersonRegistrationService {\n\n  protected linkPath = 'registrations';\n  protected searchByTokenPath = '/search/findByToken?token=';\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected halService: HALEndpointService,\n  ) {\n\n  }\n\n  /**\n   * Retrieves the Registration endpoint\n   */\n  getRegistrationEndpoint(): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Retrieves the endpoint to search by registration token\n   */\n  getTokenSearchEndpoint(token: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      map((href: string) => `${href}${this.searchByTokenPath}${token}`));\n  }\n\n  /**\n   * Register a new email address\n   * @param email\n   */\n  registerEmail(email: string): Observable<RemoteData<Registration>> {\n    const registration = new Registration();\n    registration.email = email;\n\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getRegistrationEndpoint();\n\n    href$.pipe(\n      find((href: string) => hasValue(href)),\n      map((href: string) => {\n        const request = new PostRequest(requestId, href, registration);\n        this.requestService.send(request);\n      })\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID<Registration>(requestId).pipe(\n      getFirstCompletedRemoteData()\n    );\n  }\n\n  /**\n   * Search a registration based on the provided token\n   * @param token\n   */\n  searchByToken(token: string): Observable<Registration> {\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getTokenSearchEndpoint(token).pipe(\n      find((href: string) => hasValue(href)),\n    );\n\n    href$.subscribe((href: string) => {\n      const request = new GetRequest(requestId, href);\n      Object.assign(request, {\n        getResponseParser(): GenericConstructor<ResponseParsingService> {\n          return RegistrationResponseParsingService;\n        }\n      });\n      this.requestService.send(request, true);\n    });\n\n    return this.rdbService.buildSingle<Registration>(href$).pipe(\n      skipWhile((rd: RemoteData<Registration>) => rd.isStale),\n      getFirstSucceededRemoteData(),\n      map((restResponse: RemoteData<Registration>) => {\n        return Object.assign(new Registration(), {\n          email: restResponse.payload.email, token: token, user: restResponse.payload.user\n        });\n      }),\n    );\n\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\nimport { Registration } from '../../core/shared/registration.model';\nimport { Observable } from 'rxjs';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { LangConfig } from '../../../config/lang-config.interface';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../../core/core.reducers';\nimport { AuthenticateAction } from '../../core/auth/auth.actions';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { environment } from '../../../environments/environment';\nimport { isEmpty } from '../../shared/empty.util';\nimport { RemoteData } from '../../core/data/remote-data';\nimport {\n  END_USER_AGREEMENT_METADATA_FIELD,\n  EndUserAgreementService\n} from '../../core/end-user-agreement/end-user-agreement.service';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n/**\n * Component that renders the create profile page to be used by a user registering through a token\n */\n@Component({\n  selector: 'ds-create-profile',\n  styleUrls: ['./create-profile.component.scss'],\n  templateUrl: './create-profile.component.html'\n})\nexport class CreateProfileComponent implements OnInit {\n  registration$: Observable<Registration>;\n\n  email: string;\n  token: string;\n\n  isInValidPassword = true;\n  password: string;\n\n  userInfoForm: FormGroup;\n  activeLangs: LangConfig[];\n\n  constructor(\n    private translateService: TranslateService,\n    private ePersonDataService: EPersonDataService,\n    private store: Store<CoreState>,\n    private router: Router,\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private notificationsService: NotificationsService,\n    private endUserAgreementService: EndUserAgreementService\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.registration$ = this.route.data.pipe(\n      map((data) => data.registration as Registration),\n    );\n    this.registration$.subscribe((registration: Registration) => {\n      this.email = registration.email;\n      this.token = registration.token;\n    });\n    this.activeLangs = environment.languages.filter((MyLangConfig) => MyLangConfig.active === true);\n\n    this.userInfoForm = this.formBuilder.group({\n      firstName: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      lastName: new FormControl('', {\n        validators: [Validators.required],\n      }),\n      contactPhone: new FormControl(''),\n      language: new FormControl(''),\n    });\n\n  }\n\n  /**\n   * Sets the validity of the password based on a value emitted from the form\n   * @param $event\n   */\n  setInValid($event: boolean) {\n    this.isInValidPassword = $event || isEmpty(this.password);\n  }\n\n  /**\n   * Sets the value of the password based on a value emitted from the form\n   * @param $event\n   */\n  setPasswordValue($event: string) {\n    this.password = $event;\n    this.isInValidPassword = this.isInValidPassword || isEmpty(this.password);\n  }\n\n  get firstName() {\n    return this.userInfoForm.get('firstName');\n  }\n\n  get lastName() {\n    return this.userInfoForm.get('lastName');\n  }\n\n  get contactPhone() {\n    return this.userInfoForm.get('contactPhone');\n  }\n\n  get language() {\n    return this.userInfoForm.get('language');\n  }\n\n  /**\n   * Submits the eperson to the service to be created.\n   * The submission will not be made when the form or the password is not valid.\n   */\n  submitEperson() {\n    if (!(this.userInfoForm.invalid || this.isInValidPassword)) {\n      const values = {\n        metadata: {\n          'eperson.firstname': [\n            {\n              value: this.firstName.value\n            }\n          ],\n          'eperson.lastname': [\n            {\n              value: this.lastName.value\n            },\n          ],\n          'eperson.phone': [\n            {\n              value: this.contactPhone.value\n            }\n          ],\n          'eperson.language': [\n            {\n              value: this.language.value\n            }\n          ]\n        },\n        email: this.email,\n        password: this.password,\n        canLogIn: true,\n        requireCertificate: false\n      };\n\n      // If the End User Agreement cookie is accepted, add end-user agreement metadata to the user\n      if (this.endUserAgreementService.isCookieAccepted()) {\n        values.metadata[END_USER_AGREEMENT_METADATA_FIELD] = [\n          {\n            value: String(true)\n          }\n        ];\n        this.endUserAgreementService.removeCookieAccepted();\n      }\n\n      const eperson = Object.assign(new EPerson(), values);\n      this.ePersonDataService.createEPersonForToken(eperson, this.token).pipe(\n        getFirstCompletedRemoteData(),\n      ).subscribe((rd: RemoteData<EPerson>) => {\n        if (rd.hasSucceeded) {\n          this.notificationsService.success(this.translateService.get('register-page.create-profile.submit.success.head'),\n            this.translateService.get('register-page.create-profile.submit.success.content'));\n          this.store.dispatch(new AuthenticateAction(this.email, this.password));\n          this.router.navigate(['/home']);\n        } else {\n          this.notificationsService.error(this.translateService.get('register-page.create-profile.submit.error.head'),\n            this.translateService.get('register-page.create-profile.submit.error.content'));\n        }\n      });\n    }\n  }\n\n}\n","<div class=\"container\">\n    <h3 class=\"mb-4\">{{'register-page.create-profile.header' | translate}}</h3>\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'register-page.create-profile.identification.header' | translate}}</div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{'register-page.create-profile.identification.email' | translate}}</label>\n                    <span id=\"email\">{{(registration$ |async).email}}</span></div>\n            </div>\n            <form [class]=\"'ng-invalid'\" [formGroup]=\"userInfoForm\" (ngSubmit)=\"submitEperson()\">\n\n                <div class=\"form-group\">\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label for=\"firstName\">{{'register-page.create-profile.identification.first-name' | translate}}</label>\n                            <input [className]=\"(firstName.invalid) && (firstName.dirty || firstName.touched) ? 'form-control is-invalid' :'form-control'\"\n                                   type=\"text\" id=\"firstName\" formControlName=\"firstName\"/>\n                            <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\"\n                                 class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"firstName.errors && firstName.errors.required\">\n                        {{ 'register-page.create-profile.identification.first-name.error' | translate }}\n                    </span>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label\n                                    for=\"lastName\">{{'register-page.create-profile.identification.last-name' | translate}}</label>\n                            <input\n                                    [className]=\"(lastName.invalid) && (lastName.dirty || lastName.touched) ? 'form-control is-invalid' :'form-control'\"\n                                    id=\"lastName\" formControlName=\"lastName\">\n                            <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\"\n                                 class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"lastName.errors && lastName.errors.required\">\n                        {{ 'register-page.create-profile.identification.last-name.error' | translate }}\n                    </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label\n                                    for=\"contactPhone\">{{'register-page.create-profile.identification.contact' | translate}}</label>\n                            <input class=\"form-control\" id=\"contactPhone\" formControlName=\"contactPhone\">\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <label\n                                    for=\"language\">{{'register-page.create-profile.identification.language' |translate}}</label>\n\n                            <select id=\"language\" formControlName=\"language\" class=\"form-control\">\n                                <option [value]=\"''\"></option>\n                                <option *ngFor=\"let lang of activeLangs\" [value]=\"lang.code\">{{lang.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'register-page.create-profile.security.header' | translate}}</div>\n        <div class=\"card-body\">\n\n            <ds-profile-page-security-form\n                    [passwordCanBeEmpty]=\"false\"\n                    [FORM_PREFIX]=\"'register-page.create-profile.security.'\"\n                    (isInvalid)=\"setInValid($event)\"\n                    (passwordValue)=\"setPasswordValue($event)\"\n            ></ds-profile-page-security-form>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <button\n                    [disabled]=\"isInValidPassword || userInfoForm.invalid\"\n                    class=\"btn btn-default btn-primary\"\n                    (click)=\"submitEperson()\">{{'register-page.create-profile.submit' | translate}}</button>\n        </div>\n    </div>\n\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const ITEM_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Item>[] = [\n  followLink('owningCollection', {},\n    followLink('parentCommunity', {},\n      followLink('parentCommunity'))\n  ),\n  followLink('relationships'),\n  followLink('version', {}, followLink('versionhistory')),\n  followLink('thumbnail')\n];\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ItemResolver implements Resolve<RemoteData<Item>> {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    const itemRD$ = this.itemService.findById(route.params.id,\n      true,\n      false,\n      ...ITEM_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    itemRD$.subscribe((itemRD: RemoteData<Item>) => {\n      this.store.dispatch(new ResolvedAction(state.url, itemRD.payload));\n    });\n\n    return itemRD$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { Store } from '@ngrx/store';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getItemPageRoute } from './item-page-routing-paths';\nimport { ItemResolver } from './item.resolver';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated and will redirect to the\n * entity page\n */\n@Injectable()\nexport class ItemPageResolver extends ItemResolver {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n    super(itemService, store, router);\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    return super.resolve(route, state).pipe(\n      map((rd: RemoteData<Item>) => {\n        if (rd.hasSucceeded && hasValue(rd.payload)) {\n          const itemRoute = getItemPageRoute(rd.payload);\n          const thisRoute = state.url;\n          if (!thisRoute.startsWith(itemRoute)) {\n            const itemId = rd.payload.uuid;\n            const subRoute = thisRoute.substring(thisRoute.indexOf(itemId) + itemId.length, thisRoute.length);\n            this.router.navigateByUrl(itemRoute + subRoute);\n          }\n        }\n        return rd;\n      })\n    );\n  }\n}\n"]}