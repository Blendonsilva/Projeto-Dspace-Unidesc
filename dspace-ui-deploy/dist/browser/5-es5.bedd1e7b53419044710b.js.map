{"version":3,"sources":["webpack:///src/app/core/json-patch/builder/json-patch-operation-path-combiner.ts","webpack:///src/app/submission/import-external/import-external-preview/submission-import-external-preview.component.ts","webpack:///src/app/submission/import-external/import-external-preview/submission-import-external-preview.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/submission\\/edit\\/submission\\-edit\\.component$ namespace object","webpack:///src/app/submission/import-external/import-external-searchbar/submission-import-external-searchbar.component.ts","webpack:///src/app/submission/import-external/import-external-searchbar/submission-import-external-searchbar.component.html","webpack:///src/app/submission/sections/sections-type.ts","webpack:///src/app/submission/submit/themed-submission-submit.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/submission\\/import\\-external\\/submission\\-import\\-external\\.component$ namespace object","webpack:///src/app/submission/import-external/submission-import-external.component.ts","webpack:///src/app/submission/import-external/submission-import-external.component.html","webpack:///src/app/submission/edit/submission-edit.component.ts","webpack:///src/app/submission/edit/submission-edit.component.html","webpack:///src/app/submission/form/submission-upload-files/submission-upload-files.component.ts","webpack:///src/app/submission/form/submission-upload-files/submission-upload-files.component.html","webpack:///src/app/submission/submit/submission-submit.component.ts","webpack:///src/app/submission/utils/parseSectionErrorPaths.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/submission\\/submit\\/submission\\-submit\\.component$ namespace object","webpack:///src/app/submission/sections/sections-decorator.ts","webpack:///src/app/submission/sections/sections.service.ts","webpack:///src/app/submission/sections/container/section-container.component.ts","webpack:///src/app/submission/sections/container/section-container.component.html","webpack:///src/app/submission/edit/themed-submission-edit.component.ts","webpack:///src/app/submission/sections/sections.directive.ts","webpack:///src/app/submission/sections/models/section.model.ts","webpack:///src/app/shared/form/builder/models/form-field-previous-value-object.ts","webpack:///src/app/submission/sections/form/section-form.component.html","webpack:///src/app/submission/sections/form/section-form.component.ts","webpack:///src/app/submission/objects/submission-objects.effects.ts","webpack:///src/app/submission/submission.effects.ts","webpack:///src/app/submission/sections/upload/section-upload.service.ts","webpack:///src/app/core/config/submission-uploads-config.service.ts","webpack:///src/app/submission/sections/upload/section-upload.component.html","webpack:///src/app/submission/sections/upload/section-upload.component.ts","webpack:///src/app/submission/sections/license/section-license.model.ts","webpack:///src/app/submission/sections/license/section-license.component.html","webpack:///src/app/submission/sections/license/section-license.component.ts","webpack:///src/app/submission/sections/upload/file/edit/section-upload-file-edit.model.ts","webpack:///src/app/submission/sections/upload/file/edit/section-upload-file-edit.component.html","webpack:///src/app/submission/sections/upload/file/edit/section-upload-file-edit.component.ts","webpack:///src/app/submission/sections/upload/accessConditions/submission-section-upload-access-conditions.component.html","webpack:///src/app/submission/sections/upload/accessConditions/submission-section-upload-access-conditions.component.ts","webpack:///src/app/submission/sections/upload/file/view/section-upload-file-view.component.html","webpack:///src/app/submission/sections/upload/file/view/section-upload-file-view.component.ts","webpack:///src/app/submission/sections/upload/file/section-upload-file.component.html","webpack:///src/app/submission/sections/upload/file/section-upload-file.component.ts","webpack:///src/app/submission/sections/cc-license/submission-section-cc-licenses.component.html","webpack:///src/app/submission/sections/cc-license/submission-section-cc-licenses.component.ts","webpack:///src/app/submission/sections/accesses/section-accesses.service.ts","webpack:///src/app/core/config/submission-accesses-config.service.ts","webpack:///src/app/submission/sections/accesses/section-accesses.model.ts","webpack:///src/app/submission/sections/accesses/section-accesses.component.html","webpack:///src/app/submission/sections/accesses/section-accesses.component.ts","webpack:///src/app/submission/submission.module.ts","webpack:///src/app/submission/utils/parseSectionErrors.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.ts","webpack:///src/app/shared/form/form.module.ts","webpack:///src/app/submission/form/submission-form.component.ts","webpack:///src/app/submission/form/submission-form.component.html","webpack:///src/app/submission/form/section-add/submission-form-section-add.component.ts","webpack:///src/app/submission/form/section-add/submission-form-section-add.component.html","webpack:///src/app/submission/import-external/themed-submission-import-external.component.ts","webpack:///src/app/submission/form/collection/submission-form-collection.component.ts","webpack:///src/app/submission/form/collection/submission-form-collection.component.html","webpack:///src/app/submission/form/footer/submission-form-footer.component.ts","webpack:///src/app/submission/form/footer/submission-form-footer.component.html"],"names":["JsonPatchOperationPathCombiner","constructor","rootElement","subRootElements","super","_rootElement","this","_subRootElement","join","subRootElement","getPath","fragment","Array","isArray","path","toString","SubmissionImportExternalPreviewComponent","activeModal","submissionService","modalService","router","notificationService","ngOnInit","metadataList","Object","keys","externalSourceEntry","metadata","forEach","key","push","value","first","closeMetadataModal","dismiss","import","modalRef","open","size","componentInstance","entityType","labelPrefix","selectedEvent","pipe","collectionListEntry","createSubmissionFromExternalSource","_links","self","href","collection","id","subscribe","submissionObjects","isValid","length","navigateByUrl","error","close","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","module","exports","SubmissionImportExternalSearchbarComponent","externalService","cdr","windowService","sourceListLoading","externalSourceData","EventEmitter","selectedElement","name","searchString","sourceList","findListOptions","assign","elementsPerPage","currentPage","searchParams","initExternalSourceData","entity","searchBy","pageInfo","paginatedList","b","paginatedListRD","c","externalSource","page","element","sourceId","query","detectChanges","isXsOrSm$","isXsOrSm","makeSourceSelection","source","onScroll","totalPages","payload","search","emit","ngOnDestroy","sub","unsubscribe","SectionsType","Relationships","SubmissionForm","Upload","License","CcLicense","AccessesCondition","ThemedSubmissionSubmitComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","SubmissionImportExternalComponent","searchConfigService","routeService","entriesRD$","isLoading$","reload$","initialPagination","pageSize","subs","listId","context","EntitySearchModalWithNameVariants","repeatable","routeData","importConfig","buttonLabel","label","getQueryParameterValue","next","selectLabel","retrieveExternalSources","getExternalSourceData","event","navigate","queryParams","replaceUrl","entry","modalComp","filter","retrieveExternalSourcesSub","sourceQueryObject","paginatedSearchOptions","searchOptions","getExternalSourceEntries","rdData","SubmissionEditComponent","changeDetectorRef","notificationsService","route","itemDataService","translate","submissionJsonPatchOperationsService","itemLink$","paramMap","params","retrieveSubmission","get","submissionObjectRD","hasSucceeded","info","errors","submissionErrors","submissionId","collectionId","selfUrl","sections","item","submissionDefinition","statusCode","skipLocationChange","itemLink","findByHref","itemRd","deletePendingJsonPatchOperations","SubmissionUploadFilesComponent","operationsService","sectionService","enableDragOverDocument","dropOverDocumentMsg","dropMsg","uploadEnabled","onBeforeUpload","jsonPatchByResourceType","getSubmissionObjectLinkName","ngOnChanges","isSectionTypeAvailable","onCompleteItem","workspaceitem","isUploadEnabled","errorsList","sectionId","sectionData","sectionErrors","isSectionType","isUpload","success","updateSectionData","onUploadError","subscription","SubmissionSubmitComponent","viewContainerRef","collectionParam","createSubmission","submissionObject","clear","markForCheck","regex","regexShort","match","fieldId","fieldIndex","originalPath","submissionSectionsMap","Map","renderSectionFor","sectionType","objectElement","set","rendersSectionType","SectionsService","formService","scrollToService","store","checkSectionErrors","formId","currentErrors","prevErrors","dispatch","isEqual","dispatchedErrors","addError","message","includes","removeError","dispatchRemoveSectionErrors","dispatchSetSectionFormId","getSectionData","select","getShownSectionErrors","getSectionErrors","getSectionState","state","getFormErrors","formErrors","pathCombiner","replace","sectionError","findIndex","errorsToShow","getSectionServerErrors","sectionObj","sectionState","data","isSectionValid","isSectionActive","getActiveSectionId","activeSectionId","isSectionEnabled","enabled","isSectionReadOnly","submissionScope","visibility","other","WorkspaceItem","isSectionAvailable","submissionState","findKey","addSection","scrollTo","target","offset","removeSection","serverValidationErrors","isAvailable$","isEnabled$","available","setSectionError","setSectionStatus","status","computeSectionConfiguredMetadata","formConfig","rawData","JSON","parse","rows","currentRow","fields","field","selectableMetadata","SubmissionSectionContainerComponent","injector","AlertTypeEnum","objectInjector","Injector","create","providers","provide","useFactory","deps","parent","preventDefault","stopPropagation","sectionRef","getSectionContent","ThemedSubmissionEditComponent","SectionsDirective","mandatory","genericSectionErrors","allSectionErrors","active","valid","resetErrors","errorItem","uniq","concat","previousActive","dispatchSave","sectionChange","nextState","isOpen","isMandatory","isEnabled","hasGenericErrors","hasErrors","getErrors","setFocus","setActiveSection","index","splice","SectionModelComponent","injectedCollectionId","injectedSectionData","injectedSubmissionId","onSectionInit","updateSectionStatus","sectionStatusSub","getSectionStatus","sectionStatus","startWith","onSectionDestroy","_path","_value","delete","isPathEqual","SubmissionSectionFormComponent","formBuilderService","formOperationsService","formConfigService","submissionObjectService","objectCache","requestService","isUpdating","isLoading","fieldsOnTheirWayToBeRemoved","formData","previousValue","getUniqueId","config","configData","tap","mergeMap","findById","take","workspaceItem","formModel","initForm","subscriptions","formStatus$","serverValidationStatus$","validationErrors","formValidation","serverSideValidation","hasMetadataEnrichment","sectionDataToCheck","sectionMetadata","diffResult","diffObj","hasOwnProperty","modelFromConfiguration","getSubmissionScope","instant","console","stack","updateForm","checksForErrors","isFormInitialized","find","getFormData","distinctUntilChanged","onChange","dispatchOperationsFromEvent","hasStoredValue","getId","model","getArrayIndexFromEvent","getFieldPathSegmentedFromChangeEvent","getFieldValueFromChangeEvent","environment","submission","autosave","indexOf","hasRelatedCustomError","medatata","validator","form","validatorMap","onFocus","hasMappedGroupValue","getQualdropValueMap","onRemove","has","indexes","isFieldToRemove","onCustomEvent","getForm","forms","currentState","filterErrors","sectionForm","notify","touched","filteredErrors","parseSectionErrorPaths","SubmissionObjectEffects","SectionUploadService","SubmissionUploadsConfigService","submissionEffects","actions$","store$","loadForm$","INIT_SUBMISSION_FORM","action","definition","mappedActions","sectionDefinition","selfLink","substr","lastIndexOf","header","result","resetForm$","RESET_SUBMISSION_FORM","saveSubmission$","SAVE_SUBMISSION_FORM","switchMap","response","isManual","catchError","saveForLaterSubmission$","SAVE_FOR_LATER_SUBMISSION_FORM","saveSubmissionSuccess$","SAVE_SUBMISSION_FORM_SUCCESS","withLatestFrom","parseSaveResponse","objects","actions","saveSubmissionSectionSuccess$","SAVE_SUBMISSION_SECTION_FORM_SUCCESS","saveSection$","SAVE_SUBMISSION_SECTION_FORM","jsonPatchByResourceID","saveError$","SAVE_SUBMISSION_FORM_ERROR","SAVE_SUBMISSION_SECTION_FORM_ERROR","saveAndDeposit$","SAVE_AND_DEPOSIT_SUBMISSION","hasUnsavedModification","canDeposit","depositSubmission$","DEPOSIT_SUBMISSION","depositSubmission","saveForLaterSubmissionSuccess$","SAVE_FOR_LATER_SUBMISSION_FORM_SUCCESS","redirectToMyDSpace","depositSubmissionSuccess$","DEPOSIT_SUBMISSION_SUCCESS","depositSubmissionError$","DEPOSIT_SUBMISSION_ERROR","discardSubmission$","DISCARD_SUBMISSION","discardSubmission","addAllMetadataToSectionData","UPDATE_SECTION_DATA","section","discardSubmissionSuccess$","DISCARD_SUBMISSION_SUCCESS","discardSubmissionError$","DISCARD_SUBMISSION_ERROR","parseSectionErrors","warning","union","files","notifyNewSection","getUploadedFileList","getFileData","fileUUID","fileState","uuid","getDefaultPolicies","addUploadedFile","updateFileData","removeUploadedFile","rdbService","halService","http","comparator","linksToFollow","useCachedVersionIfAvailable","reRequestOnStale","d","SubmissionSectionUploadComponent","bitstreamService","collectionDataService","groupService","resourcePolicyService","uploadsConfigService","fileIndexes","fileList","fileNames","collectionDefaultAccessConditions","required$","BehaviorSubject","config$","configMetadataForm$","remoteData","getSubmissionObject","rd","collectionRemoteData","collectionName","required","availableAccessConditionOptions","accessConditionOptions","collectionPolicyType","configMetadataForm","file","getFileName","fileData","metadataName","display","SECTION_LICENSE_FORM_LAYOUT","granted","container","control","SECTION_LICENSE_FORM_MODEL","validators","errorMessages","notgranted","type","SubmissionSectionLicenseComponent","operationsBuilder","formLayout","displaySubmit","fromJSON","licenseText$","collectionData","license","licenseData","text","isReadOnly","disabled","newErrors","checked","valueChanges","add","remove","BITSTREAM_METADATA_FORM_GROUP_CONFIG","group","BITSTREAM_METADATA_FORM_GROUP_LAYOUT","grid","BITSTREAM_ACCESS_CONDITION_GROUP_CONFIG","BITSTREAM_ACCESS_CONDITION_GROUP_LAYOUT","host","BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG","groupFactory","BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT","BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG","hint","options","BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT","BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG","placeholder","inline","toggleIcon","relations","operator","when","BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT","BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG","BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT","SubmissionSectionUploadFileEditComponent","uploadService","formMetadata","isSaving","initModelData","accessConditions","accessCondition","of","metadataModel","date","Date","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","setOptions","onModalClose","onSubmit","saveBitstreamData","showGroups","hasStartDate","hasEndDate","startDateControl","endDateControl","markAsUntouched","setValue","markAsDirty","startDateModel","min","maxStartDate","max","endDateModel","maxEndDate","buildFileEditForm","unsubscribeAll","retrieveValueFromField","temp","configDescr","configForm","metadataGroupModelConfig","D","accessConditionTypeModelConfig","accessConditionsArrayConfig","accessConditionTypeOptions","hasStart","hasEnd","hasGroups","condition","showStart","showEnd","confStart","confEnd","startDateConfig","endDateConfig","startDate","endDate","accessConditionGroupConfig","initialCount","validateAllFormFields","formRef","formGroup","saveBitstreamDataSubscription","metadataKey","accessConditionsToSave","accessConditionGroup","accessConditionOpt","currentAccessCondition","uploadSection","fileId","SubmissionSectionUploadAccessConditionsComponent","accessConditionsList","isResponsePending","accessConditionEntry","SubmissionSectionUploadFileViewComponent","fileTitleKey","fileDescrKey","all","getAllMetadataValue","$event","SubmissionSectionUploadFileComponent","processingDelete$","readMode","bitstream","fileIndex","loadFormMetadata","confirmDelete","content","deleteFile","getBitstream","editBitstreamData","backdrop","row","metadatum","SubmissionSectionCcLicensesComponent","SectionAccessesService","SubmissionAccessesConfigService","submissionCcLicensesDataService","submissionCcLicenseUrlDataService","storedCcLicenseLink","uri","accepted","selectCcLicense","ccLicense","getSelectedCcLicense","setAccepted","submissionCcLicenses","selectOption","option","isSelectedOption","getSelectedOption","getCcLicenseLink$","some","selectedCcLicense","getCcLicenseLink","openInfoModal","closeInfoModal","link","findAll","list","licenses","getAccessesData","ACCESS_FORM_CHECKBOX_CONFIG","ACCESS_FORM_CHECKBOX_LAYOUT","ACCESS_CONDITION_GROUP_CONFIG","ACCESS_CONDITION_GROUP_LAYOUT","ACCESS_CONDITIONS_FORM_ARRAY_CONFIG","ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT","FORM_ACCESS_CONDITION_TYPE_CONFIG","FORM_ACCESS_CONDITION_TYPE_LAYOUT","FORM_ACCESS_CONDITION_START_DATE_CONFIG","FORM_ACCESS_CONDITION_START_DATE_LAYOUT","FORM_ACCESS_CONDITION_END_DATE_CONFIG","FORM_ACCESS_CONDITION_END_DATE_LAYOUT","SubmissionSectionAccessesComponent","SubmissionModule","accessesConfigService","accessesService","accessesData","accessData$","combineLatest","accessData","canChangeDiscoverable","discoverableCheckboxConfig","discoverable","ENTRY_COMPONENTS","static","ngModule","component","forRoot","forFeature","withEntryComponents","paths","DsDynamicFormComponent","componentService","blur","change","focus","ngbEvent","FormModule","useValue","SubmissionFormComponent","authService","sectionsService","loading","uploadFilesOptions","isActive","changes","submissionSections","getSectionsList","uploadEnabled$","getEndpoint","endpointURL","authToken","buildAuthHeader","url","definitionId","dispatchInit","startAutoSave","stopAutoSave","resetAllSubmissionObjects","onCollectionChange","resetSubmissionObject","getSubmissionSections","SubmissionFormSectionAddComponent","sectionList$","getDisabledSectionsList","hasSections$","ThemedSubmissionImportExternalComponent","SubmissionFormCollectionComponent","collectionChange","processingChange$","currentCollectionId","currentValue","selectedCollectionId","selectedCollectionName$","collectionRD","available$","onSelect","changeSubmissionCollection","onClose","collectionDropdown","reset","toggled","SubmissionFormFooterComponent","restService","submissionIsInvalid","getSubmissionStatus","processingSaveStatus","getSubmissionSaveProcessingStatus","processingDepositStatus","getSubmissionDepositProcessingStatus","showDepositAndDiscard","save","saveLater","dispatchSaveForLater","deposit","dispatchDeposit","confirmDiscard","dispatchDiscard"],"mappings":"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","file":"x","sourcesContent":["import { isNotUndefined } from '../../../shared/empty.util';\nimport { URLCombiner } from '../../url-combiner/url-combiner';\n\n/**\n * Interface used to represent a JSON-PATCH path member\n * in JsonPatchOperationsState\n */\nexport interface JsonPatchOperationPathObject {\n  rootElement: string;\n  subRootElement: string;\n  path: string;\n}\n\n/**\n * Combines a variable number of strings representing parts\n * of a JSON-PATCH path\n */\nexport class JsonPatchOperationPathCombiner extends URLCombiner {\n  private _rootElement: string;\n  private _subRootElement: string;\n\n  constructor(rootElement, ...subRootElements: string[]) {\n    super(rootElement, ...subRootElements);\n    this._rootElement = rootElement;\n    this._subRootElement = subRootElements.join('/');\n  }\n\n  get rootElement(): string {\n    return this._rootElement;\n  }\n\n  get subRootElement(): string {\n    return this._subRootElement;\n  }\n\n  /**\n   * Combines the parts of this JsonPatchOperationPathCombiner in to a JSON-PATCH path member\n   *\n   * e.g.   new JsonPatchOperationPathCombiner('sections', 'basic').getPath(['dc.title', '0'])\n   * returns: {rootElement: 'sections', subRootElement: 'basic', path: '/sections/basic/dc.title/0'}\n   *\n   * @return {JsonPatchOperationPathObject}\n   *      The combined path object\n   */\n  public getPath(fragment?: string|string[]): JsonPatchOperationPathObject {\n    if (isNotUndefined(fragment) && Array.isArray(fragment)) {\n      fragment = fragment.join('/');\n    }\n\n    let path = '/' + this.toString();\n    if (isNotUndefined(fragment)) {\n      path += '/' + fragment;\n    }\n\n    return {rootElement: this._rootElement, subRootElement: this._subRootElement, path: path};\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgbActiveModal, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { ExternalSourceEntry } from '../../../core/shared/external-source-entry.model';\nimport { MetadataValue } from '../../../core/shared/metadata.models';\nimport { Metadata } from '../../../core/shared/metadata.utils';\nimport { CollectionListEntry } from '../../../shared/collection-dropdown/collection-dropdown.component';\nimport { mergeMap } from 'rxjs/operators';\nimport { SubmissionService } from '../../submission.service';\nimport { SubmissionObject } from '../../../core/submission/models/submission-object.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { SubmissionImportExternalCollectionComponent } from '../import-external-collection/submission-import-external-collection.component';\n\n/**\n * This component display a preview of an external source item.\n */\n@Component({\n  selector: 'ds-submission-import-external-preview',\n  styleUrls: ['./submission-import-external-preview.component.scss'],\n  templateUrl: './submission-import-external-preview.component.html'\n})\nexport class SubmissionImportExternalPreviewComponent implements OnInit {\n  /**\n   * The external source entry\n   */\n  @Input() public externalSourceEntry: ExternalSourceEntry;\n  /**\n   * The entry metadata list\n   */\n  public metadataList: { key: string, value: MetadataValue }[];\n  /**\n   * The label prefix to use to generate the translation label\n   */\n  public labelPrefix: string;\n  /**\n   * The modal for the entry preview\n   */\n  modalRef: NgbModalRef;\n\n  /**\n   * Initialize the component variables.\n   * @param {NgbActiveModal} activeModal\n   * @param {SubmissionService} submissionService\n   * @param {NgbModal} modalService\n   * @param {Router} router\n   * @param {NotificationsService} notificationService\n   */\n  constructor(\n    private activeModal: NgbActiveModal,\n    private submissionService: SubmissionService,\n    private modalService: NgbModal,\n    private router: Router,\n    private notificationService: NotificationsService\n  ) { }\n\n  /**\n   * Metadata initialization for HTML display.\n   */\n  ngOnInit(): void {\n    this.metadataList = [];\n    const metadataKeys = Object.keys(this.externalSourceEntry.metadata);\n    metadataKeys.forEach((key) => {\n      this.metadataList.push({\n        key: key,\n        value: Metadata.first(this.externalSourceEntry.metadata, key)\n      });\n    });\n  }\n\n  /**\n   * Closes the modal.\n   */\n  public closeMetadataModal(): void {\n    this.activeModal.dismiss(false);\n  }\n\n  /**\n   * Start the import of an entry by opening up a collection choice modal window.\n   */\n  public import(): void {\n    this.modalRef = this.modalService.open(SubmissionImportExternalCollectionComponent, {\n      size: 'lg',\n    });\n    this.modalRef.componentInstance.entityType = this.labelPrefix;\n    this.closeMetadataModal();\n\n    this.modalRef.componentInstance.selectedEvent.pipe(\n      mergeMap((collectionListEntry: CollectionListEntry) => {\n        return this.submissionService.createSubmissionFromExternalSource(this.externalSourceEntry._links.self.href, collectionListEntry.collection.id);\n      })\n    ).subscribe((submissionObjects: SubmissionObject[]) => {\n      let isValid = false;\n      if (submissionObjects.length === 1) {\n        if (submissionObjects[0] !== null) {\n          isValid = true;\n          this.router.navigateByUrl('/workspaceitems/' + submissionObjects[0].id + '/edit');\n        }\n      }\n      if (!isValid) {\n        this.notificationService.error('submission.import-external.preview.error.import.title', 'submission.import-external.preview.error.import.body');\n      }\n      this.modalRef.close();\n    });\n  }\n}\n","<div class=\"modal-header\">\n  <h2>{{'submission.import-external.preview.title.' + labelPrefix | translate}}</h2>\n  <button type=\"button\" class=\"close\"\n          (click)=\"closeMetadataModal()\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">×</span>\n  </button>\n</div>\n<div class=\"modal-body\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <p>{{'submission.import-external.preview.subtitle' | translate}}</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr>\n      </div>\n    </div>\n    <div *ngFor=\"let metadata of metadataList\" class=\"row\">\n      <div class=\"col-md-12\">\n        <strong>{{'item.preview.' + metadata.key | translate}}</strong>\n        <p>{{metadata.value.value}}</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 text-right\">\n        <button class=\"btn btn-success\" (click)=\"import()\" role=\"button\">\n          <i class=\"fa fa-file-import\" aria-hidden=\"true\"></i> {{'submission.import-external.preview.button.import' | translate}}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","var map = {\n\t\"./custom/app/submission/edit/submission-edit.component\": [\n\t\t\"OutP\",\n\t\t78\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"3aq+\";\nmodule.exports = webpackAsyncContext;","import { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { RequestParam } from '../../../core/cache/models/request-param.model';\nimport { ExternalSourceService } from '../../../core/data/external-source.service';\nimport { ExternalSource } from '../../../core/shared/external-source.model';\nimport { buildPaginatedList, PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PageInfo } from '../../../core/shared/page-info.model';\nimport { createSuccessfulRemoteDataObject } from '../../../shared/remote-data.utils';\nimport { FindListOptions } from '../../../core/data/request.models';\nimport { getFirstSucceededRemoteData, getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { HostWindowService } from '../../../shared/host-window.service';\nimport { hasValue } from '../../../shared/empty.util';\n\n/**\n * Interface for the selected external source element.\n */\nexport interface SourceElement {\n  id: string;\n  name: string;\n}\n\n/**\n * Interface for the external source data to export.\n */\nexport interface ExternalSourceData {\n  entity: string;\n  query: string;\n  sourceId: string;\n}\n\n/**\n * This component builds the searchbar for the submission external import.\n */\n@Component({\n  selector: 'ds-submission-import-external-searchbar',\n  styleUrls: ['./submission-import-external-searchbar.component.scss'],\n  templateUrl: './submission-import-external-searchbar.component.html'\n})\nexport class SubmissionImportExternalSearchbarComponent implements OnInit, OnDestroy {\n  /**\n   * The init external source value.\n   */\n  @Input() public initExternalSourceData: ExternalSourceData;\n  /**\n   * The selected external sources.\n   */\n  public selectedElement: SourceElement;\n  /**\n   * The list of external sources.\n   */\n  public sourceList: SourceElement[];\n  /**\n   * The string used to search items in the external sources.\n   */\n  public searchString: string;\n  /**\n   * The external sources loading status.\n   */\n  public sourceListLoading = false;\n  /**\n   * Emits true if were on a small screen\n   */\n  public isXsOrSm$: Observable<boolean>;\n  /**\n   * The external source data to use to perform the search.\n   */\n  @Output() public externalSourceData: EventEmitter<ExternalSourceData> = new EventEmitter<ExternalSourceData>();\n\n  /**\n   * The external sources pagination data.\n   */\n  protected pageInfo: PageInfo;\n  /**\n   * The options for REST data retireval.\n   */\n  protected findListOptions: FindListOptions;\n\n  /**\n   * The subscription to unsubscribe\n   */\n  protected sub: Subscription;\n\n  /**\n   * Initialize the component variables.\n   * @param {ExternalSourceService} externalService\n   * @param {ChangeDetectorRef} cdr\n   * @param {HostWindowService} windowService\n   */\n  constructor(\n    private externalService: ExternalSourceService,\n    private cdr: ChangeDetectorRef,\n    protected windowService: HostWindowService\n  ) {\n  }\n\n  /**\n   * Component initialization and retrieve first page of external sources.\n   */\n  ngOnInit() {\n    this.selectedElement = {\n      id: '',\n      name: 'loading'\n    };\n    this.searchString = '';\n    this.sourceList = [];\n    this.findListOptions = Object.assign({}, new FindListOptions(), {\n      elementsPerPage: 5,\n      currentPage: 1,\n      searchParams: [\n        new RequestParam('entityType', this.initExternalSourceData.entity)\n      ]\n    });\n    this.externalService.searchBy('findByEntityType', this.findListOptions).pipe(\n      catchError(() => {\n        const pageInfo = new PageInfo();\n        const paginatedList = buildPaginatedList(pageInfo, []);\n        const paginatedListRD = createSuccessfulRemoteDataObject(paginatedList);\n        return observableOf(paginatedListRD);\n      }),\n      getFirstSucceededRemoteDataPayload(),\n    ).subscribe((externalSource: PaginatedList<ExternalSource>) => {\n      externalSource.page.forEach((element) => {\n        this.sourceList.push({ id: element.id, name: element.name });\n        if (this.initExternalSourceData.sourceId === element.id) {\n          this.selectedElement = { id: element.id, name: element.name };\n          this.searchString = this.initExternalSourceData.query;\n        }\n      });\n      if (this.selectedElement.id === '') {\n        this.selectedElement = this.sourceList[0];\n      }\n      this.pageInfo = externalSource.pageInfo;\n      this.cdr.detectChanges();\n    });\n    this.isXsOrSm$ = this.windowService.isXsOrSm();\n  }\n\n  /**\n   * Set the selected external source.\n   */\n  public makeSourceSelection(source): void {\n    this.selectedElement = source;\n  }\n\n  /**\n   * Load the next pages of external sources.\n   */\n  public onScroll(): void {\n    if (!this.sourceListLoading && ((this.pageInfo.currentPage + 1) <= this.pageInfo.totalPages)) {\n      this.sourceListLoading = true;\n      this.findListOptions = Object.assign({}, new FindListOptions(), {\n        elementsPerPage: 5,\n        currentPage: this.findListOptions.currentPage + 1,\n        searchParams: [\n          new RequestParam('entityType', this.initExternalSourceData.entity)\n        ]\n      });\n      this.externalService.searchBy('findByEntityType', this.findListOptions).pipe(\n        catchError(() => {\n          const pageInfo = new PageInfo();\n          const paginatedList = buildPaginatedList(pageInfo, []);\n          const paginatedListRD = createSuccessfulRemoteDataObject(paginatedList);\n          return observableOf(paginatedListRD);\n        }),\n        getFirstSucceededRemoteData(),\n        tap(() => this.sourceListLoading = false)\n      ).subscribe((externalSource: RemoteData<PaginatedList<ExternalSource>>) => {\n        externalSource.payload.page.forEach((element) => {\n          this.sourceList.push({ id: element.id, name: element.name });\n        });\n        this.pageInfo = externalSource.payload.pageInfo;\n        this.cdr.detectChanges();\n      });\n    }\n  }\n\n  /**\n   * Passes the search parameters to the parent component.\n   */\n  public search(): void {\n    this.externalSourceData.emit(\n      {\n        entity: this.initExternalSourceData.entity,\n        sourceId: this.selectedElement.id,\n        query: this.searchString\n      }\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n  }\n\n}\n","<div *ngIf=\"(isXsOrSm$ | async)\" class=\"input-group mb-2\">\n  <input type=\"text\" class=\"form-control\" (keyup.enter)=\"(searchString === '')?null:search()\" [(ngModel)]=\"searchString\" placeholder=\"{{'submission.import-external.search.placeholder' |translate}}\" aria-label=\"\" aria-describedby=\"\">\n</div>\n<div class=\"input-group mb-5\">\n  <input *ngIf=\"!(isXsOrSm$ | async)\" type=\"text\" class=\"form-control\" (keyup.enter)=\"(searchString === '')?null:search()\" [(ngModel)]=\"searchString\" placeholder=\"{{'submission.import-external.search.placeholder' |translate}}\" aria-label=\"\" aria-describedby=\"\">\n  <div [ngClass]=\"{'input-group-append': !(isXsOrSm$ | async)}\" ngbDropdown role=\"group\" aria-label=\"\">\n    <button class=\"btn btn-outline-secondary w-fx\" title=\"{{'submission.import-external.search.source.hint' |translate}}\" ngbDropdownToggle>{{'submission.import-external.source.' + selectedElement?.name | translate}}</button>\n    <div ngbDropdownMenu class=\"dropdown-menu scrollable-dropdown-menu w-100\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"false\"\n      aria-labelledby=\"scrollableDropdownMenuButton\">\n      <div class=\"scrollable-menu\"\n        aria-labelledby=\"scrollableDropdownMenuButton\"\n        infiniteScroll\n        [infiniteScrollDistance]=\"2\"\n        [infiniteScrollThrottle]=\"50\"\n        (scrolled)=\"onScroll()\"\n        [scrollWindow]=\"false\">\n        <button ngbDropdownItem class=\"dropdown-item text-truncate\" title=\"{{'submission.import-external.source.' + source?.name | translate}}\" (click)=\"makeSourceSelection(source)\" *ngFor=\"let source of sourceList\">{{'submission.import-external.source.' + source?.name | translate}}</button>\n        <div ngbDropdownItem class=\"scrollable-dropdown-loading text-center\" *ngIf=\"sourceListLoading\"><p>{{'submission.import-external.source.loading' | translate}}</p></div>\n      </div>\n    </div>\n    <button type=\"button\" class=\"btn btn-primary\" [title]=\"(searchString === '')?('submission.import-external.search.button.hint' | translate):('submission.import-external.search.button' | translate)\" [disabled]=\"searchString === ''\" (click)=\"search()\">{{'submission.import-external.search.button' | translate}}</button>\n  </div>\n</div>\n","export enum SectionsType {\n  Relationships = 'relationships',\n  SubmissionForm = 'submission-form',\n  Upload = 'upload',\n  License = 'license',\n  CcLicense = 'cclicense',\n  collection = 'collection',\n  AccessesCondition = 'accessCondition',\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { SubmissionSubmitComponent } from './submission-submit.component';\n\n/**\n * Themed wrapper for SubmissionSubmitComponent\n */\n@Component({\n  selector: 'ds-themed-submission-submit',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedSubmissionSubmitComponent extends ThemedComponent<SubmissionSubmitComponent> {\n  protected getComponentName(): string {\n    return 'SubmissionSubmitComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/submission/submit/submission-submit.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./submission-submit.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","var map = {\n\t\"./custom/app/submission/import-external/submission-import-external.component\": [\n\t\t\"mVFA\",\n\t\t79\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"JHLN\";\nmodule.exports = webpackAsyncContext;","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport { filter, mergeMap, switchMap, take, tap } from 'rxjs/operators';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ExternalSourceService } from '../../core/data/external-source.service';\nimport { ExternalSourceData } from './import-external-searchbar/submission-import-external-searchbar.component';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { buildPaginatedList, PaginatedList } from '../../core/data/paginated-list.model';\nimport { ExternalSourceEntry } from '../../core/shared/external-source-entry.model';\nimport { SearchConfigurationService } from '../../core/shared/search/search-configuration.service';\nimport { Context } from '../../core/shared/context.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { RouteService } from '../../core/services/route.service';\nimport { createSuccessfulRemoteDataObject } from '../../shared/remote-data.utils';\nimport { SubmissionImportExternalPreviewComponent } from './import-external-preview/submission-import-external-preview.component';\nimport { fadeIn } from '../../shared/animations/fade';\nimport { PageInfo } from '../../core/shared/page-info.model';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { getFinishedRemoteData } from '../../core/shared/operators';\nimport { NONE_ENTITY_TYPE } from '../../core/shared/item-relationships/item-type.resource-type';\n\n/**\n * This component allows to submit a new workspaceitem importing the data from an external source.\n */\n@Component({\n  selector: 'ds-submission-import-external',\n  styleUrls: ['./submission-import-external.component.scss'],\n  templateUrl: './submission-import-external.component.html',\n  animations: [fadeIn]\n})\nexport class SubmissionImportExternalComponent implements OnInit, OnDestroy {\n\n  /**\n   * The external source search data from the routing service.\n   */\n  public routeData: ExternalSourceData;\n  /**\n   * The displayed list of entries\n   */\n  public entriesRD$: BehaviorSubject<RemoteData<PaginatedList<ExternalSourceEntry>>> = new BehaviorSubject<RemoteData<PaginatedList<ExternalSourceEntry>>>(null);\n  /**\n   * TRUE if the REST service is called to retrieve the external source items\n   */\n  public isLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  public reload$: BehaviorSubject<ExternalSourceData> = new BehaviorSubject<ExternalSourceData>({\n    entity: '',\n    query: '',\n    sourceId: ''\n  });\n  /**\n   * Configuration to use for the import buttons\n   */\n  public importConfig: { buttonLabel: string };\n  /**\n   * Suffix for button label\n   */\n  public label: string;\n  /**\n   * The ID of the list to add/remove selected items to/from\n   */\n  public listId: string;\n  /**\n   * TRUE if the selection is repeatable\n   */\n  public repeatable: boolean;\n  /**\n   * The initial pagination options\n   */\n  public initialPagination = Object.assign(new PaginationComponentOptions(), {\n    id: 'spc',\n    pageSize: 10\n  });\n  /**\n   * The context to displaying lists for\n   */\n  public context: Context;\n  /**\n   * The modal for the entry preview\n   */\n  public modalRef: NgbModalRef;\n\n  /**\n   * The subscription to unsubscribe\n   */\n  protected subs: Subscription[] = [];\n\n  private retrieveExternalSourcesSub: Subscription;\n\n  /**\n   * Initialize the component variables.\n   * @param {SearchConfigurationService} searchConfigService\n   * @param {ExternalSourceService} externalService\n   * @param {RouteService} routeService\n   * @param {Router} router\n   * @param {NgbModal} modalService\n   */\n  constructor(\n    public searchConfigService: SearchConfigurationService,\n    private externalService: ExternalSourceService,\n    private routeService: RouteService,\n    private router: Router,\n    private modalService: NgbModal,\n  ) {\n  }\n\n  /**\n   * Get the entries for the selected external source and set initial configuration.\n   */\n  ngOnInit(): void {\n    this.listId = 'list-submission-external-sources';\n    this.context = Context.EntitySearchModalWithNameVariants;\n    this.repeatable = false;\n    this.routeData = {entity: '', sourceId: '', query: ''};\n    this.importConfig = {\n      buttonLabel: 'submission.sections.describe.relationship-lookup.external-source.import-button-title.' + this.label\n    };\n    this.entriesRD$ = new BehaviorSubject(createSuccessfulRemoteDataObject(buildPaginatedList(new PageInfo(), [])));\n    this.isLoading$ = new BehaviorSubject(false);\n    this.subs.push(combineLatest(\n      [\n        this.routeService.getQueryParameterValue('entity'),\n        this.routeService.getQueryParameterValue('sourceId'),\n        this.routeService.getQueryParameterValue('query')\n      ]).pipe(\n      take(1)\n    ).subscribe(([entity, sourceId, query]: [string, string, string]) => {\n      this.reload$.next({entity: entity || NONE_ENTITY_TYPE, query: query, sourceId: sourceId});\n      this.selectLabel(entity);\n      this.retrieveExternalSources();\n    }));\n  }\n\n  /**\n   * Get the data from the searchbar and changes the router data.\n   */\n  public getExternalSourceData(event: ExternalSourceData): void {\n    this.router.navigate(\n      [],\n      {\n        queryParams: event,\n        replaceUrl: true\n      }\n    ).then(() => {\n      this.reload$.next(event);\n      this.retrieveExternalSources();\n    });\n  }\n\n  /**\n   * Display an item preview by opening up an import modal window.\n   * @param entry The entry to import\n   */\n  public import(entry): void {\n    this.modalRef = this.modalService.open(SubmissionImportExternalPreviewComponent, {\n      size: 'lg',\n    });\n    const modalComp = this.modalRef.componentInstance;\n    modalComp.externalSourceEntry = entry;\n    modalComp.labelPrefix = this.label;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n    if (hasValue(this.retrieveExternalSourcesSub)) {\n      this.retrieveExternalSourcesSub.unsubscribe();\n    }\n\n  }\n\n  /**\n   * Retrieve external source entries.\n   */\n  private retrieveExternalSources(): void {\n    if (hasValue(this.retrieveExternalSourcesSub)) {\n      this.retrieveExternalSourcesSub.unsubscribe();\n    }\n    this.retrieveExternalSourcesSub = this.reload$.pipe(\n      filter((sourceQueryObject: ExternalSourceData) => isNotEmpty(sourceQueryObject.sourceId) && isNotEmpty(sourceQueryObject.query)),\n      switchMap((sourceQueryObject: ExternalSourceData) => {\n          const query = sourceQueryObject.query;\n          this.routeData = sourceQueryObject;\n          return this.searchConfigService.paginatedSearchOptions.pipe(\n            tap(() => this.isLoading$.next(true)),\n            filter((searchOptions) => searchOptions.query === query),\n            mergeMap((searchOptions) => this.externalService.getExternalSourceEntries(this.routeData.sourceId, searchOptions).pipe(\n              getFinishedRemoteData(),\n            ))\n          );\n        }\n      ),\n    ).subscribe((rdData) => {\n      this.entriesRD$.next(rdData);\n      this.isLoading$.next(false);\n    });\n  }\n\n  /**\n   * Set the correct button label, depending on the entity.\n   *\n   * @param entity The entity name\n   */\n  private selectLabel(entity: string): void {\n    this.label = entity;\n    this.importConfig = {\n      buttonLabel: 'submission.sections.describe.relationship-lookup.external-source.import-button-title.' + this.label\n    };\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h2 id=\"header\" class=\"pb-2\">{{'submission.import-external.title' + ((label) ? '.' + label : '') | translate}}</h2>\n      <ds-submission-import-external-searchbar\n        [initExternalSourceData]=\"reload$.value\"\n        (externalSourceData) = \"getExternalSourceData($event)\">\n      </ds-submission-import-external-searchbar>\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"reload$.value.entity\">\n    <div *ngIf=\"reload$.value.sourceId !== ''\" class=\"col-md-12\">\n      <ng-container *ngVar=\"(entriesRD$ | async) as entriesRD\">\n        <h3 *ngIf=\"entriesRD && entriesRD?.payload?.page?.length !== 0\">{{ 'submission.sections.describe.relationship-lookup.selection-tab.title' | translate}}</h3>\n        <ds-viewable-collection *ngIf=\"entriesRD?.hasSucceeded && !(isLoading$ | async) && entriesRD?.payload?.page?.length > 0\" @fadeIn\n                                [objects]=\"entriesRD\"\n                                [selectionConfig]=\"{ repeatable: repeatable, listId: listId }\"\n                                [config]=\"initialPagination\"\n                                [hideGear]=\"true\"\n                                [context]=\"context\"\n                                [importable]=\"true\"\n                                [importConfig]=\"importConfig\"\n                                (importObject)=\"import($event)\">\n        </ds-viewable-collection>\n        <ds-loading *ngIf=\"(isLoading$ | async)\"\n                    message=\"{{'loading.search-results' | translate}}\"></ds-loading>\n        <div *ngIf=\"!(isLoading$ | async) && entriesRD?.payload?.page?.length === 0\" id=\"empty-external-entry-list\">\n          <ds-alert [type]=\"'alert-info'\">{{ 'search.results.empty' | translate }}</ds-alert>\n        </div>\n      </ng-container>\n    </div>\n    <div *ngIf=\"reload$.value.sourceId === ''\" class=\"col-md-12\">\n      <ds-alert [type]=\"'alert-info'\">\n        <p class=\"lead mb-0\">{{'submission.import-external.page.hint' | translate}}</p>\n      </ds-alert>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <hr>\n      <a class=\"btn btn-outline-secondary\" [routerLink]=\"['/mydspace']\" role=\"button\">\n        <i class=\"fa fa-chevron-left\" aria-hidden=\"true\"></i> {{'submission.import-external.back-to-my-dspace' | translate}}\n      </a>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { debounceTime, filter, switchMap } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\nimport { hasValue, isEmpty, isNotEmptyOperator, isNotNull } from '../../shared/empty.util';\nimport { SubmissionDefinitionsModel } from '../../core/config/models/config-submission-definitions.model';\nimport { SubmissionService } from '../submission.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { Collection } from '../../core/shared/collection.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { getAllSucceededRemoteData } from '../../core/shared/operators';\nimport { ItemDataService } from '../../core/data/item-data.service';\nimport { SubmissionJsonPatchOperationsService } from '../../core/submission/submission-json-patch-operations.service';\nimport { SubmissionError } from '../objects/submission-objects.reducer';\nimport parseSectionErrors from '../utils/parseSectionErrors';\n\n/**\n * This component allows to edit an existing workspaceitem/workflowitem.\n */\n@Component({\n  selector: 'ds-submission-edit',\n  styleUrls: ['./submission-edit.component.scss'],\n  templateUrl: './submission-edit.component.html'\n})\nexport class SubmissionEditComponent implements OnDestroy, OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  public collectionId: string;\n\n  /**\n   * The list of submission's sections\n   * @type {WorkspaceitemSectionsObject}\n   */\n  public sections: WorkspaceitemSectionsObject;\n\n  /**\n   * The submission self url\n   * @type {string}\n   */\n  public selfUrl: string;\n\n  /**\n   * The configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  public submissionDefinition: SubmissionDefinitionsModel;\n\n  /**\n   * The submission errors present in the submission object\n   * @type {SubmissionError}\n   */\n  public submissionErrors: SubmissionError;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  public submissionId: string;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * BehaviorSubject containing the self link to the item for this submission\n   * @private\n   */\n  private itemLink$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  /**\n   * The item for this submission.\n   */\n  public item: Item;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {NotificationsService} notificationsService\n   * @param {ActivatedRoute} route\n   * @param {Router} router\n   * @param {ItemDataService} itemDataService\n   * @param {SubmissionService} submissionService\n   * @param {TranslateService} translate\n   * @param {SubmissionJsonPatchOperationsService} submissionJsonPatchOperationsService\n   */\n  constructor(private changeDetectorRef: ChangeDetectorRef,\n              private notificationsService: NotificationsService,\n              private route: ActivatedRoute,\n              private router: Router,\n              private itemDataService: ItemDataService,\n              private submissionService: SubmissionService,\n              private translate: TranslateService,\n              private submissionJsonPatchOperationsService: SubmissionJsonPatchOperationsService) {\n  }\n\n  /**\n   * Retrieve workspaceitem/workflowitem from server and initialize all instance variables\n   */\n  ngOnInit() {\n    this.subs.push(\n      this.route.paramMap.pipe(\n        switchMap((params: ParamMap) => this.submissionService.retrieveSubmission(params.get('id'))),\n        // NOTE new submission is retrieved on the browser side only, so get null on server side rendering\n        filter((submissionObjectRD: RemoteData<SubmissionObject>) => isNotNull(submissionObjectRD))\n      ).subscribe((submissionObjectRD: RemoteData<SubmissionObject>) => {\n        if (submissionObjectRD.hasSucceeded) {\n          if (isEmpty(submissionObjectRD.payload)) {\n            this.notificationsService.info(null, this.translate.get('submission.general.cannot_submit'));\n            this.router.navigate(['/mydspace']);\n          } else {\n            const { errors } = submissionObjectRD.payload;\n            this.submissionErrors = parseSectionErrors(errors);\n            this.submissionId = submissionObjectRD.payload.id.toString();\n            this.collectionId = (submissionObjectRD.payload.collection as Collection).id;\n            this.selfUrl = submissionObjectRD.payload._links.self.href;\n            this.sections = submissionObjectRD.payload.sections;\n            this.itemLink$.next(submissionObjectRD.payload._links.item.href);\n            this.item = submissionObjectRD.payload.item;\n            this.submissionDefinition = (submissionObjectRD.payload.submissionDefinition as SubmissionDefinitionsModel);\n          }\n        } else {\n          if (submissionObjectRD.statusCode === 404) {\n            // redirect to not found page\n            this.router.navigate(['/404'], { skipLocationChange: true });\n          }\n          // TODO handle generic error\n        }\n      }),\n      this.itemLink$.pipe(\n        isNotEmptyOperator(),\n        switchMap((itemLink: string) =>\n          this.itemDataService.findByHref(itemLink)\n        ),\n        getAllSucceededRemoteData(),\n        // Multiple sources can update the item in quick succession.\n        // We only want to rerender the form if the item is unchanged for some time\n        debounceTime(300),\n      ).subscribe((itemRd: RemoteData<Item>) => {\n        this.item = itemRd.payload;\n        this.changeDetectorRef.detectChanges();\n      }),\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n\n    this.submissionJsonPatchOperationsService.deletePendingJsonPatchOperations();\n  }\n}\n","<div class=\"submission-submit-container\" >\n  <ds-submission-form [collectionId]=\"collectionId\"\n                      [sections]=\"sections\"\n                      [selfUrl]=\"selfUrl\"\n                      [submissionDefinition]=\"submissionDefinition\"\n                      [submissionErrors]=\"submissionErrors\"\n                      [item]=\"item\"\n                      [submissionId]=\"submissionId\"></ds-submission-form>\n</div>\n","import { Component, Input, OnChanges } from '@angular/core';\n\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { first, take } from 'rxjs/operators';\n\nimport { SectionsService } from '../../sections/sections.service';\nimport { hasValue, isEmpty, isNotEmpty } from '../../../shared/empty.util';\nimport { normalizeSectionData } from '../../../core/submission/submission-response-parsing.service';\nimport { SubmissionService } from '../../submission.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { UploaderOptions } from '../../../shared/uploader/uploader-options.model';\nimport parseSectionErrors from '../../utils/parseSectionErrors';\nimport { SubmissionJsonPatchOperationsService } from '../../../core/submission/submission-json-patch-operations.service';\nimport { WorkspaceItem } from '../../../core/submission/models/workspaceitem.model';\nimport { SectionsType } from '../../sections/sections-type';\n\n/**\n * This component represents the drop zone that provides to add files to the submission.\n */\n@Component({\n  selector: 'ds-submission-upload-files',\n  templateUrl: './submission-upload-files.component.html',\n})\nexport class SubmissionUploadFilesComponent implements OnChanges {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The uploader configuration options\n   * @type {UploaderOptions}\n   */\n  @Input() uploadFilesOptions: UploaderOptions;\n\n  /**\n   * A boolean representing if is possible to active drop zone over the document page\n   * @type {boolean}\n   */\n  public enableDragOverDocument = true;\n\n  /**\n   * i18n message label\n   * @type {string}\n   */\n  public dropOverDocumentMsg = 'submission.sections.upload.drop-message';\n\n  /**\n   * i18n message label\n   * @type {string}\n   */\n  public dropMsg = 'submission.sections.upload.drop-message';\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * A boolean representing if upload functionality is enabled\n   * @type {boolean}\n   */\n  private uploadEnabled: Observable<boolean> = observableOf(false);\n\n  /**\n   * Save submission before to upload a file\n   */\n  public onBeforeUpload = () => {\n    const sub: Subscription = this.operationsService.jsonPatchByResourceType(\n      this.submissionService.getSubmissionObjectLinkName(),\n      this.submissionId,\n      'sections')\n      .subscribe();\n    this.subs.push(sub);\n    return sub;\n  }\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {NotificationsService} notificationsService\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {TranslateService} translate\n   */\n  constructor(private notificationsService: NotificationsService,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private sectionService: SectionsService,\n              private submissionService: SubmissionService,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Check if upload functionality is enabled\n   */\n  ngOnChanges() {\n    this.uploadEnabled = this.sectionService.isSectionTypeAvailable(this.submissionId, SectionsType.Upload);\n  }\n\n  /**\n   * Parse the submission object retrieved from REST after upload\n   *\n   * @param workspaceitem\n   *    The submission object retrieved from REST\n   */\n  public onCompleteItem(workspaceitem: WorkspaceItem) {\n    // Checks if upload section is enabled so do upload\n    this.subs.push(\n      this.uploadEnabled\n        .pipe(first())\n        .subscribe((isUploadEnabled) => {\n          if (isUploadEnabled) {\n\n            const { sections } = workspaceitem;\n            const { errors } = workspaceitem;\n\n            const errorsList = parseSectionErrors(errors);\n            if (sections && isNotEmpty(sections)) {\n              Object.keys(sections)\n                .forEach((sectionId) => {\n                  const sectionData = normalizeSectionData(sections[sectionId]);\n                  const sectionErrors = errorsList[sectionId];\n                  this.sectionService.isSectionType(this.submissionId, sectionId, SectionsType.Upload)\n                      .pipe(take(1))\n                      .subscribe((isUpload) => {\n                        if (isUpload) {\n                          // Look for errors on upload\n                          if ((isEmpty(sectionErrors))) {\n                            this.notificationsService.success(null, this.translate.get('submission.sections.upload.upload-successful'));\n                          } else {\n                            this.notificationsService.error(null, this.translate.get('submission.sections.upload.upload-failed'));\n                          }\n                        }\n                      });\n                  this.sectionService.updateSectionData(this.submissionId, sectionId, sectionData, sectionErrors, sectionErrors);\n                });\n            }\n\n          }\n        })\n    );\n  }\n\n  /**\n   * Show error notification on upload fails\n   */\n  public onUploadError() {\n    this.notificationsService.error(null, this.translate.get('submission.sections.upload.upload-failed'));\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","<ds-uploader *ngIf=\"uploadFilesOptions.url\"\n             [dropMsg]=\"dropMsg\"\n             [dropOverDocumentMsg]=\"dropOverDocumentMsg\"\n             [enableDragOverDocument]=\"enableDragOverDocument\"\n             [onBeforeUpload]=\"onBeforeUpload\"\n             [uploadFilesOptions]=\"uploadFilesOptions\"\n             (onCompleteItem)=\"onCompleteItem($event)\"\n             (onUploadError)=\"onUploadError()\"></ds-uploader>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { hasValue, isEmpty, isNotEmptyOperator, isNotNull } from '../../shared/empty.util';\nimport { SubmissionDefinitionsModel } from '../../core/config/models/config-submission-definitions.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SubmissionService } from '../submission.service';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { Item } from '../../core/shared/item.model';\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\nimport { getAllSucceededRemoteData } from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { ItemDataService } from '../../core/data/item-data.service';\n\n/**\n * This component allows to submit a new workspaceitem.\n */\n@Component({\n  selector: 'ds-submission-submit',\n  styleUrls: ['./submission-submit.component.scss'],\n  templateUrl: './submission-submit.component.html'\n})\nexport class SubmissionSubmitComponent implements OnDestroy, OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  public collectionId: string;\n\n  /**\n   * BehaviorSubject containing the self link to the item for this submission\n   * @private\n   */\n  private itemLink$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  /**\n   * The item for this submission.\n   */\n  public item: Item;\n\n  /**\n   * The collection id input to create a new submission\n   * @type {string}\n   */\n  public collectionParam: string;\n\n  /**\n   * The list of submission's sections\n   * @type {WorkspaceitemSectionsObject}\n   */\n  public sections: WorkspaceitemSectionsObject;\n\n  /**\n   * The submission self url\n   * @type {string}\n   */\n  public selfUrl: string;\n\n  /**\n   * The configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  public submissionDefinition: SubmissionDefinitionsModel;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  public submissionId: string;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {NotificationsService} notificationsService\n   * @param {ItemDataService} itemDataService\n   * @param {SubmissionService} submissionService\n   * @param {Router} router\n   * @param {TranslateService} translate\n   * @param {ViewContainerRef} viewContainerRef\n   * @param {ActivatedRoute} route\n   */\n  constructor(private changeDetectorRef: ChangeDetectorRef,\n              private notificationsService: NotificationsService,\n              private router: Router,\n              private itemDataService: ItemDataService,\n              private submissionService: SubmissionService,\n              private translate: TranslateService,\n              private viewContainerRef: ViewContainerRef,\n              private route: ActivatedRoute) {\n    this.route\n      .queryParams\n      .subscribe((params) => {\n        this.collectionParam = (params.collection);\n      });\n  }\n\n  /**\n   * Create workspaceitem on the server and initialize all instance variables\n   */\n  ngOnInit() {\n    // NOTE execute the code on the browser side only, otherwise it is executed twice\n    this.subs.push(\n      this.submissionService.createSubmission(this.collectionParam)\n        .subscribe((submissionObject: SubmissionObject) => {\n          // NOTE new submission is created on the browser side only\n          if (isNotNull(submissionObject)) {\n            if (isEmpty(submissionObject)) {\n              this.notificationsService.info(null, this.translate.get('submission.general.cannot_submit'));\n              this.router.navigate(['/mydspace']);\n            } else {\n              this.router.navigate(['/workspaceitems', submissionObject.id, 'edit'], { replaceUrl: true});\n            }\n          }\n        }),\n      this.itemLink$.pipe(\n        isNotEmptyOperator(),\n        switchMap((itemLink: string) =>\n          this.itemDataService.findByHref(itemLink)\n        ),\n        getAllSucceededRemoteData(),\n        // Multiple sources can update the item in quick succession.\n        // We only want to rerender the form if the item is unchanged for some time\n        debounceTime(300),\n      ).subscribe((itemRd: RemoteData<Item>) => {\n        this.item = itemRd.payload;\n        this.changeDetectorRef.detectChanges();\n      })\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n\n    this.viewContainerRef.clear();\n    this.changeDetectorRef.markForCheck();\n  }\n\n}\n","import { hasValue } from '../../shared/empty.util';\n\n/**\n * An interface to represent the path of a section error\n */\nexport interface SectionErrorPath {\n\n  /**\n   * The section id\n   */\n  sectionId: string;\n\n  /**\n   * The form field id\n   */\n  fieldId?: string;\n\n  /**\n   * The form field index\n   */\n  fieldIndex?: number;\n\n  /**\n   * The complete path\n   */\n  originalPath: string;\n}\n\nconst regex = /([^\\/]+)/g;\n// const regex = /\\/sections\\/(.*)\\/(.*)\\/(.*)/;\nconst regexShort = /\\/sections\\/(.*)/;\n\n/**\n * The following method accept an array of section path strings and return a path object\n * @param {string | string[]} path\n * @returns {SectionErrorPath[]}\n */\nconst parseSectionErrorPaths = (path: string | string[]): SectionErrorPath[] => {\n  const paths = typeof path === 'string' ? [path] : path;\n\n  return paths.map((item) => {\n      if (item.match(regex) && item.match(regex).length > 2) {\n        return {\n          sectionId: item.match(regex)[1],\n          fieldId: item.match(regex)[2],\n          fieldIndex: hasValue(item.match(regex)[3]) ? +item.match(regex)[3] : 0,\n          originalPath: item,\n        };\n      } else {\n        return {\n          sectionId: item.match(regexShort)[1],\n          originalPath: item,\n        };\n      }\n\n    }\n  );\n};\n\nexport default parseSectionErrorPaths;\n","var map = {\n\t\"./custom/app/submission/submit/submission-submit.component\": [\n\t\t\"cSSl\",\n\t\t80\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"TkMu\";\nmodule.exports = webpackAsyncContext;","\nimport { SectionsType } from './sections-type';\n\nconst submissionSectionsMap = new Map();\nexport function renderSectionFor(sectionType: SectionsType) {\n  return function decorator(objectElement: any) {\n    if (!objectElement) {\n      return;\n    }\n    submissionSectionsMap.set(sectionType, objectElement);\n  };\n}\n\nexport function rendersSectionType(sectionType: SectionsType) {\n  return submissionSectionsMap.get(sectionType);\n}\n","import { Injectable } from '@angular/core';\n\nimport { combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ScrollToConfigOptions, ScrollToService } from '@nicky-lenaers/ngx-scroll-to';\nimport { findIndex, findKey, isEqual } from 'lodash';\n\nimport { SubmissionState } from '../submission.reducers';\nimport { hasValue, isEmpty, isNotEmpty, isNotUndefined } from '../../shared/empty.util';\nimport {\n  DisableSectionAction,\n  EnableSectionAction,\n  InertSectionErrorsAction,\n  RemoveSectionErrorsAction,\n  SectionStatusChangeAction,\n  SetSectionFormId,\n  UpdateSectionDataAction\n} from '../objects/submission-objects.actions';\nimport {\n  SubmissionObjectEntry,\n  SubmissionSectionError,\n  SubmissionSectionObject\n} from '../objects/submission-objects.reducer';\nimport {\n  submissionObjectFromIdSelector,\n  submissionSectionDataFromIdSelector,\n  submissionSectionErrorsFromIdSelector,\n  submissionSectionFromIdSelector,\n  submissionSectionServerErrorsFromIdSelector\n} from '../selectors';\nimport { SubmissionScopeType } from '../../core/submission/submission-scope-type';\nimport parseSectionErrorPaths, { SectionErrorPath } from '../utils/parseSectionErrorPaths';\nimport { FormClearErrorsAction } from '../../shared/form/form.actions';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SubmissionService } from '../submission.service';\nimport { WorkspaceitemSectionDataType } from '../../core/submission/models/workspaceitem-sections.model';\nimport { SectionsType } from './sections-type';\nimport { normalizeSectionData } from '../../core/submission/submission-response-parsing.service';\nimport { SubmissionFormsModel } from '../../core/config/models/config-submission-forms.model';\nimport { parseReviver } from '@ng-dynamic-forms/core';\nimport { FormService } from '../../shared/form/form.service';\nimport { JsonPatchOperationPathCombiner } from '../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { FormError } from '../../shared/form/form.reducer';\n\n/**\n * A service that provides methods used in submission process.\n */\n@Injectable()\nexport class SectionsService {\n\n  /**\n   * Initialize service variables\n   * @param {FormService} formService\n   * @param {NotificationsService} notificationsService\n   * @param {ScrollToService} scrollToService\n   * @param {SubmissionService} submissionService\n   * @param {Store<SubmissionState>} store\n   * @param {TranslateService} translate\n   */\n  constructor(private formService: FormService,\n              private notificationsService: NotificationsService,\n              private scrollToService: ScrollToService,\n              private submissionService: SubmissionService,\n              private store: Store<SubmissionState>,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Compare the list of the current section errors with the previous one,\n   * and dispatch actions to add/remove to/from the section state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The workspaceitem self url\n   * @param formId\n   *    The [SubmissionDefinitionsModel] that define submission configuration\n   * @param currentErrors\n   *    The [SubmissionSectionError] that define submission sections init data\n   * @param prevErrors\n   *    The [SubmissionSectionError] that define submission sections init errors\n   */\n  public checkSectionErrors(\n    submissionId: string,\n    sectionId: string,\n    formId: string,\n    currentErrors: SubmissionSectionError[],\n    prevErrors: SubmissionSectionError[] = []) {\n    // Remove previous error list if the current is empty\n    if (isEmpty(currentErrors)) {\n      this.store.dispatch(new RemoveSectionErrorsAction(submissionId, sectionId));\n      this.store.dispatch(new FormClearErrorsAction(formId));\n    } else if (!isEqual(currentErrors, prevErrors)) { // compare previous error list with the current one\n      const dispatchedErrors = [];\n\n      // Iterate over the current error list\n      currentErrors.forEach((error: SubmissionSectionError) => {\n        const errorPaths: SectionErrorPath[] = parseSectionErrorPaths(error.path);\n\n        errorPaths.forEach((path: SectionErrorPath) => {\n          if (path.fieldId) {\n            // Dispatch action to add form error to the state;\n            this.formService.addError(formId, path.fieldId, path.fieldIndex, error.message);\n            dispatchedErrors.push(path.fieldId);\n          }\n        });\n      });\n\n      // Itereate over the previous error list\n      prevErrors.forEach((error: SubmissionSectionError) => {\n        const errorPaths: SectionErrorPath[] = parseSectionErrorPaths(error.path);\n\n        errorPaths.forEach((path: SectionErrorPath) => {\n          if (path.fieldId) {\n            if (!dispatchedErrors.includes(path.fieldId)) {\n              // Dispatch action to remove form error from the state;\n              this.formService.removeError(formId, path.fieldId, path.fieldIndex);\n            }\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Dispatch a new [RemoveSectionErrorsAction]\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   */\n  public dispatchRemoveSectionErrors(submissionId, sectionId) {\n    this.store.dispatch(new RemoveSectionErrorsAction(submissionId, sectionId));\n  }\n\n  /**\n   * Dispatch a new [SetSectionFormId]\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param formId\n   *    The form id\n   */\n  public dispatchSetSectionFormId(submissionId, sectionId, formId) {\n    this.store.dispatch(new SetSectionFormId(submissionId, sectionId, formId));\n  }\n\n  /**\n   * Return the data object for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param sectionType\n   *    The type of section to retrieve\n   * @return Observable<WorkspaceitemSectionDataType>\n   *    observable of [WorkspaceitemSectionDataType]\n   */\n  public getSectionData(submissionId: string, sectionId: string, sectionType: SectionsType): Observable<WorkspaceitemSectionDataType> {\n    return this.store.select(submissionSectionDataFromIdSelector(submissionId, sectionId)).pipe(\n      map((sectionData: WorkspaceitemSectionDataType) => {\n        if (sectionType === SectionsType.SubmissionForm) {\n          return normalizeSectionData(sectionData);\n        } else {\n          return sectionData;\n        }\n      }),\n      distinctUntilChanged(),\n    );\n  }\n\n  /**\n   * Get the list of validation errors present in the given section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param sectionType\n   *    The type of section for which retrieve errors\n   */\n  getShownSectionErrors(submissionId: string, sectionId: string, sectionType: SectionsType): Observable<SubmissionSectionError[]> {\n    let errorsState$: Observable<SubmissionSectionError[]>;\n    if (sectionType !== SectionsType.SubmissionForm) {\n      errorsState$ = this.getSectionErrors(submissionId, sectionId);\n    } else {\n      errorsState$ = this.getSectionState(submissionId, sectionId, sectionType).pipe(\n        mergeMap((state: SubmissionSectionObject) => this.formService.getFormErrors(state.formId).pipe(\n          map((formErrors: FormError[]) => {\n            const pathCombiner = new JsonPatchOperationPathCombiner('sections', sectionId);\n            const sectionErrors = formErrors\n              .map((error) => ({\n                path: pathCombiner.getPath(error.fieldId.replace(/\\_/g, '.')).path,\n                message: error.message\n              } as SubmissionSectionError))\n              .filter((sectionError: SubmissionSectionError) => findIndex(state.errorsToShow, {path: sectionError.path}) === -1);\n            return [...state.errorsToShow, ...sectionErrors];\n          })\n        ))\n      );\n    }\n\n    return errorsState$;\n  }\n  /**\n   * Return the error list to show for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<SubmissionSectionError>\n   *    observable of array of [SubmissionSectionError]\n   */\n  public getSectionErrors(submissionId: string, sectionId: string): Observable<SubmissionSectionError[]> {\n    return this.store.select(submissionSectionErrorsFromIdSelector(submissionId, sectionId)).pipe(\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return the error list detected by the server for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<SubmissionSectionError>\n   *    observable of array of [SubmissionSectionError]\n   */\n  public getSectionServerErrors(submissionId: string, sectionId: string): Observable<SubmissionSectionError[]> {\n    return this.store.select(submissionSectionServerErrorsFromIdSelector(submissionId, sectionId)).pipe(\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return the state object for the specified section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param sectionType\n   *    The type of section to retrieve\n   * @return Observable<SubmissionSectionObject>\n   *    observable of [SubmissionSectionObject]\n   */\n  public getSectionState(submissionId: string, sectionId: string, sectionType: SectionsType): Observable<SubmissionSectionObject> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj: SubmissionSectionObject) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => sectionObj),\n      map((sectionState: SubmissionSectionObject) => {\n        if (hasValue(sectionState.data) && sectionType === SectionsType.SubmissionForm) {\n          return Object.assign({}, sectionState, {\n            data: normalizeSectionData(sectionState.data)\n          });\n        } else {\n          return sectionState;\n        }\n      }),\n      distinctUntilChanged()\n      );\n  }\n\n  /**\n   * Check if a given section is valid\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be valid\n   */\n  public isSectionValid(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => sectionObj.isValid),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section is active\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be active\n   */\n  public isSectionActive(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.submissionService.getActiveSectionId(submissionId).pipe(\n      map((activeSectionId: string) => sectionId === activeSectionId),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section is enabled\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be enabled\n   */\n  public isSectionEnabled(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => sectionObj.enabled),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section is a read only section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param submissionScope\n   *    The submission scope\n   * @return Observable<boolean>\n   *    Emits true whenever a given section should be read only\n   */\n  public isSectionReadOnly(submissionId: string, sectionId: string, submissionScope: SubmissionScopeType): Observable<boolean> {\n    return this.store.select(submissionSectionFromIdSelector(submissionId, sectionId)).pipe(\n      filter((sectionObj) => hasValue(sectionObj)),\n      map((sectionObj: SubmissionSectionObject) => {\n        return isNotEmpty(sectionObj.visibility)\n          && sectionObj.visibility.other === 'READONLY'\n          && submissionScope !== SubmissionScopeType.WorkspaceItem;\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section id is present in the list of sections\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @return Observable<boolean>\n   *    Emits true whenever a given section id should be available\n   */\n  public isSectionAvailable(submissionId: string, sectionId: string): Observable<boolean> {\n    return this.store.select(submissionObjectFromIdSelector(submissionId)).pipe(\n      filter((submissionState: SubmissionObjectEntry) => isNotUndefined(submissionState)),\n      map((submissionState: SubmissionObjectEntry) => {\n        return isNotUndefined(submissionState.sections) && isNotUndefined(submissionState.sections[sectionId]);\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if a given section type is present in the list of sections\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionType\n   *    The section type\n   * @return Observable<boolean>\n   *    Emits true whenever a given section type should be available\n   */\n  public isSectionTypeAvailable(submissionId: string, sectionType: SectionsType): Observable<boolean> {\n    return this.store.select(submissionObjectFromIdSelector(submissionId)).pipe(\n      filter((submissionState: SubmissionObjectEntry) => isNotUndefined(submissionState)),\n      map((submissionState: SubmissionObjectEntry) => {\n        return isNotUndefined(submissionState.sections) && isNotUndefined(findKey(submissionState.sections, {sectionType: sectionType}));\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Check if given section id is of a given section type\n   * @param submissionId\n   * @param sectionId\n   * @param sectionType\n   */\n  public isSectionType(submissionId: string, sectionId: string, sectionType: SectionsType): Observable<boolean> {\n    return this.store.select(submissionObjectFromIdSelector(submissionId)).pipe(\n      filter((submissionState: SubmissionObjectEntry) => isNotUndefined(submissionState)),\n      map((submissionState: SubmissionObjectEntry) => {\n        return isNotUndefined(submissionState.sections) && isNotUndefined(submissionState.sections[sectionId])\n          && submissionState.sections[sectionId].sectionType === sectionType;\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Dispatch a new [EnableSectionAction] to add a new section and move page target to it\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   */\n  public addSection(submissionId: string, sectionId: string) {\n    this.store.dispatch(new EnableSectionAction(submissionId, sectionId));\n    const config: ScrollToConfigOptions = {\n      target: sectionId,\n      offset: -70\n    };\n\n    this.scrollToService.scrollTo(config);\n  }\n\n  /**\n   * Dispatch a new [DisableSectionAction] to remove section\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   */\n  public removeSection(submissionId: string, sectionId: string) {\n    this.store.dispatch(new DisableSectionAction(submissionId, sectionId));\n  }\n\n  /**\n   * Dispatch a new [UpdateSectionDataAction] to update section state with new data and errors\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param data\n   *    The section data\n   * @param errorsToShow\n   *    The list of the section's errors to show. It contains the error list\n   *    to display when section is not pristine\n   * @param serverValidationErrors\n   *    The list of the section's errors detected by the server.\n   *    They may not be shown yet if section is pristine\n   * @param metadata\n   *    The section metadata\n   */\n  public updateSectionData(\n    submissionId: string,\n    sectionId: string,\n    data: WorkspaceitemSectionDataType,\n    errorsToShow: SubmissionSectionError[] = [],\n    serverValidationErrors: SubmissionSectionError[] = [],\n    metadata?: string[]\n  ) {\n    if (isNotEmpty(data)) {\n      const isAvailable$ = this.isSectionAvailable(submissionId, sectionId);\n      const isEnabled$ = this.isSectionEnabled(submissionId, sectionId);\n\n      combineLatest(isAvailable$, isEnabled$).pipe(\n        take(1),\n        filter(([available, enabled]: [boolean, boolean]) => available))\n        .subscribe(([available, enabled]: [boolean, boolean]) => {\n          this.store.dispatch(new UpdateSectionDataAction(submissionId, sectionId, data, errorsToShow, serverValidationErrors, metadata));\n        });\n    }\n  }\n\n  /**\n   * Dispatch a new [InertSectionErrorsAction] to update section state with new error\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param error\n   *    The section error\n   */\n  public setSectionError(submissionId: string, sectionId: string, error: SubmissionSectionError) {\n    this.store.dispatch(new InertSectionErrorsAction(submissionId, sectionId, error));\n  }\n\n  /**\n   * Dispatch a new [SectionStatusChangeAction] to update section state with new status\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param status\n   *    The section status\n   */\n  public setSectionStatus(submissionId: string, sectionId: string, status: boolean) {\n    this.store.dispatch(new SectionStatusChangeAction(submissionId, sectionId, status));\n  }\n\n  /**\n   * Compute the list of selectable metadata for the section configuration.\n   * @param formConfig\n   */\n  public computeSectionConfiguredMetadata(formConfig: string | SubmissionFormsModel): string[] {\n    const metadata = [];\n    const rawData = typeof formConfig === 'string' ? JSON.parse(formConfig, parseReviver) : formConfig;\n    if (rawData.rows && !isEmpty(rawData.rows)) {\n      rawData.rows.forEach((currentRow) => {\n        if (currentRow.fields && !isEmpty(currentRow.fields)) {\n          currentRow.fields.forEach((field) => {\n            if (field.selectableMetadata && !isEmpty(field.selectableMetadata)) {\n              field.selectableMetadata.forEach((selectableMetadata) => {\n                if (!metadata.includes(selectableMetadata.metadata)) {\n                  metadata.push(selectableMetadata.metadata);\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n    return metadata;\n  }\n\n}\n","import { Component, Injector, Input, OnInit, ViewChild } from '@angular/core';\n\nimport { SectionsDirective } from '../sections.directive';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { rendersSectionType } from '../sections-decorator';\nimport { AlertType } from '../../../shared/alert/aletr-type';\n\n/**\n * This component represents a section that contains the submission license form.\n */\n@Component({\n  selector: 'ds-submission-section-container',\n  templateUrl: './section-container.component.html',\n  styleUrls: ['./section-container.component.scss']\n})\nexport class SubmissionSectionContainerComponent implements OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * The section data\n   * @type {SectionDataObject}\n   */\n  @Input() sectionData: SectionDataObject;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * Injector to inject a section component with the @Input parameters\n   * @type {Injector}\n   */\n  public objectInjector: Injector;\n\n  /**\n   * The SectionsDirective reference\n   */\n  @ViewChild('sectionRef') sectionRef: SectionsDirective;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {Injector} injector\n   */\n  constructor(private injector: Injector) {\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnInit() {\n    this.objectInjector = Injector.create({\n      providers: [\n        { provide: 'collectionIdProvider', useFactory: () => (this.collectionId), deps: [] },\n        { provide: 'sectionDataProvider', useFactory: () => (this.sectionData), deps: [] },\n        { provide: 'submissionIdProvider', useFactory: () => (this.submissionId), deps: [] },\n      ],\n      parent: this.injector\n    });\n  }\n\n  /**\n   * Remove section from submission form\n   *\n   * @param event\n   *    the event emitted\n   */\n  public removeSection(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.sectionRef.removeSection(this.submissionId, this.sectionData.id);\n  }\n\n  /**\n   * Find the correct component based on the section's type\n   */\n  getSectionContent(): string {\n    return rendersSectionType(this.sectionData.sectionType);\n  }\n}\n","<div dsSection #sectionRef=\"sectionRef\"\n     [attr.id]=\"'section_' + sectionData.id\"\n     [ngClass]=\"{ 'section-focus' : sectionRef.isSectionActive() }\"\n     [mandatory]=\"sectionData.mandatory\"\n     [submissionId]=\"submissionId\"\n     [sectionType]=\"sectionData.sectionType\"\n     [sectionId]=\"sectionData.id\">\n  <ngb-accordion #acc=\"ngbAccordion\"\n                 *ngIf=\"(sectionRef.isEnabled() | async)\"\n                 (panelChange)=\"sectionRef.sectionChange($event)\"\n                 activeIds=\"{{ sectionData.id }}\"\n                 [destroyOnHide]=\"false\">\n    <ngb-panel id=\"{{ sectionData.id }}\">\n      <ng-template ngbPanelTitle>\n        <span class=\"float-left section-title\" tabindex=\"0\">{{ 'submission.sections.'+sectionData.header | translate }}</span>\n        <div class=\"d-inline-block float-right\">\n          <i *ngIf=\"!(sectionRef.isValid() | async) && !(sectionRef.hasErrors())\" class=\"fas fa-exclamation-circle text-warning mr-3\"\n             title=\"{{'submission.sections.status.warnings.title' | translate}}\" role=\"img\" [attr.aria-label]=\"'submission.sections.status.warnings.aria' | translate\"></i>\n          <i *ngIf=\"(sectionRef.hasErrors())\" class=\"fas fa-exclamation-circle text-danger mr-3\"\n             title=\"{{'submission.sections.status.errors.title' | translate}}\" role=\"img\" [attr.aria-label]=\"'submission.sections.status.errors.aria' | translate\"></i>\n          <i *ngIf=\"(sectionRef.isValid() | async) && !(sectionRef.hasErrors())\" class=\"fas fa-check-circle text-success mr-3\"\n             title=\"{{'submission.sections.status.valid.title' | translate}}\" role=\"img\" [attr.aria-label]=\"'submission.sections.status.valid.aria' | translate\"></i>\n          <a class=\"close\"\n             tabindex=\"0\"\n             role=\"button\"\n             [attr.aria-label]=\"(sectionRef.isOpen() ? 'submission.sections.toggle.aria.close' : 'submission.sections.toggle.aria.open') | translate: {sectionHeader: ('submission.sections.'+sectionData.header | translate)}\"\n             [title]=\"(sectionRef.isOpen() ? 'submission.sections.toggle.close' : 'submission.sections.toggle.open') | translate\">\n            <span *ngIf=\"sectionRef.isOpen()\" class=\"fas fa-chevron-up fa-fw\"></span>\n            <span *ngIf=\"!sectionRef.isOpen()\" class=\"fas fa-chevron-down fa-fw\"></span>\n          </a>\n          <a href=\"javascript:void(0);\" class=\"close mr-3\" *ngIf=\"!sectionRef.isMandatory()\"\n             (click)=\"removeSection($event)\">\n            <i class=\"fas fa-trash-o\" aria-hidden=\"true\" tabindex=\"0\"></i>\n          </a>\n        </div>\n      </ng-template>\n      <ng-template ngbPanelContent>\n        <div id=\"sectionGenericError_{{sectionData.id}}\" *ngIf=\"sectionRef.hasGenericErrors()\">\n          <ds-alert *ngFor=\"let error of sectionRef.getErrors(); let i = index\"\n                    [content]=\"error\"\n                    [dismissible]=\"true\"\n                    [type]=\"AlertTypeEnum.Error\"\n                    (close)=\"sectionRef.removeError(i)\"></ds-alert>\n        </div>\n        <div id=\"sectionContent_{{sectionData.id}}\"\n             (click)=\"sectionRef.setFocus($event)\">\n          <ng-container *ngComponentOutlet=\"getSectionContent(); injector: objectInjector;\"></ng-container>\n        </div>\n      </ng-template>\n    </ngb-panel>\n  </ngb-accordion>\n</div>\n","/**\n * Themed wrapper for SubmissionEditComponent\n */\nimport { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { SubmissionEditComponent } from './submission-edit.component';\n\n@Component({\n  selector: 'ds-themed-submission-edit',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedSubmissionEditComponent extends ThemedComponent<SubmissionEditComponent> {\n  protected getComponentName(): string {\n    return 'SubmissionEditComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/submission/edit/submission-edit.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./submission-edit.component`);\n  }\n}\n","import { ChangeDetectorRef, Directive, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { uniq } from 'lodash';\n\nimport { SectionsService } from './sections.service';\nimport { hasValue, isNotEmpty, isNotNull } from '../../shared/empty.util';\nimport { SubmissionSectionError } from '../objects/submission-objects.reducer';\nimport parseSectionErrorPaths, { SectionErrorPath } from '../utils/parseSectionErrorPaths';\nimport { SubmissionService } from '../submission.service';\nimport { SectionsType } from './sections-type';\n\n/**\n * Directive for handling generic section functionality\n */\n@Directive({\n  selector: '[dsSection]',\n  exportAs: 'sectionRef'\n})\nexport class SectionsDirective implements OnDestroy, OnInit {\n\n  /**\n   * A boolean representing if section is mandatory\n   * @type {boolean}\n   */\n  @Input() mandatory = true;\n\n  /**\n   * The section id\n   * @type {string}\n   */\n  @Input() sectionId: string;\n\n  /**\n   * The section type\n   * @type {SectionsType}\n   */\n  @Input() sectionType: SectionsType;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The list of generic errors related to the section\n   * @type {Array}\n   */\n  public genericSectionErrors: string[] = [];\n\n  /**\n   * The list of all errors related to the element belonging to this section\n   * @type {Array}\n   */\n  public allSectionErrors: string[] = [];\n\n  /**\n   * A boolean representing if section is active\n   * @type {boolean}\n   */\n  private active = true;\n\n  /**\n   * A boolean representing if section is enabled\n   * @type {boolean}\n   */\n  private enabled: Observable<boolean>;\n\n  /**\n   * A boolean representing the panel collapsible state: opened (true) or closed (false)\n   * @type {boolean}\n   */\n  private sectionState = this.mandatory;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * A boolean representing if section is valid\n   * @type {boolean}\n   */\n  private valid: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {SubmissionService} submissionService\n   * @param {SectionsService} sectionService\n   */\n  constructor(private changeDetectorRef: ChangeDetectorRef,\n              private submissionService: SubmissionService,\n              private sectionService: SectionsService) {\n  }\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    this.valid = this.sectionService.isSectionValid(this.submissionId, this.sectionId).pipe(\n      map((valid: boolean) => {\n        if (valid) {\n          this.resetErrors();\n        }\n        return valid;\n      }));\n\n    this.subs.push(\n      this.sectionService.getShownSectionErrors(this.submissionId, this.sectionId, this.sectionType)\n        .subscribe((errors: SubmissionSectionError[]) => {\n          if (isNotEmpty(errors)) {\n            errors.forEach((errorItem: SubmissionSectionError) => {\n              const parsedErrors: SectionErrorPath[] = parseSectionErrorPaths(errorItem.path);\n\n              parsedErrors.forEach((error: SectionErrorPath) => {\n                if (!error.fieldId) {\n                  this.genericSectionErrors = uniq(this.genericSectionErrors.concat(errorItem.message));\n                } else {\n                  this.allSectionErrors.push(errorItem.message);\n                }\n              });\n            });\n          } else {\n            this.resetErrors();\n          }\n        }),\n      this.submissionService.getActiveSectionId(this.submissionId)\n        .subscribe((activeSectionId) => {\n          const previousActive = this.active;\n          this.active = (activeSectionId === this.sectionId);\n          if (previousActive !== this.active) {\n            this.changeDetectorRef.detectChanges();\n            // If section is no longer active dispatch save action\n            if (!this.active && isNotNull(activeSectionId)) {\n              this.submissionService.dispatchSave(this.submissionId);\n            }\n          }\n        })\n    );\n\n    this.enabled = this.sectionService.isSectionEnabled(this.submissionId, this.sectionId);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Change section state\n   *\n   * @param event\n   *    the event emitted\n   */\n  public sectionChange(event) {\n    this.sectionState = event.nextState;\n  }\n\n  /**\n   * Check if section panel is open\n   *\n   * @returns {boolean}\n   *    Returns true when section panel is open\n   */\n  public isOpen(): boolean {\n    return this.sectionState;\n  }\n\n  /**\n   * Check if section is mandatory\n   *\n   * @returns {boolean}\n   *    Returns true when section is mandatory\n   */\n  public isMandatory(): boolean {\n    return this.mandatory;\n  }\n\n  /**\n   * Check if section panel is active\n   *\n   * @returns {boolean}\n   *    Returns true when section panel is active\n   */\n  public isSectionActive(): boolean {\n    return this.active;\n  }\n\n  /**\n   * Check if section is enabled\n   *\n   * @returns {Observable<boolean>}\n   *    Emits true whenever section is enabled\n   */\n  public isEnabled(): Observable<boolean> {\n    return this.enabled;\n  }\n\n  /**\n   * Check if section is valid\n   *\n   * @returns {Observable<boolean>}\n   *    Emits true whenever section is valid\n   */\n  public isValid(): Observable<boolean> {\n    return this.valid;\n  }\n\n  /**\n   * Remove section panel from submission form\n   *\n   * @param submissionId\n   *    the submission id\n   * @param sectionId\n   *    the section id\n   * @returns {Observable<boolean>}\n   *    Emits true whenever section is valid\n   */\n  public removeSection(submissionId: string, sectionId: string) {\n    this.sectionService.removeSection(submissionId, sectionId);\n  }\n\n  /**\n   * Check if section has only generic errors\n   *\n   * @returns {boolean}\n   *    Returns true when section has only generic errors\n   */\n  public hasGenericErrors(): boolean {\n    return this.genericSectionErrors && this.genericSectionErrors.length > 0;\n  }\n\n  /**\n   * Check if section has errors\n   *\n   * @returns {boolean}\n   *    Returns true when section has errors\n   */\n  public hasErrors(): boolean {\n    return (this.genericSectionErrors && this.genericSectionErrors.length > 0) ||\n      (this.allSectionErrors && this.allSectionErrors.length > 0);\n  }\n\n  /**\n   * Return section errors\n   *\n   * @returns {Array}\n   *    Returns section errors list\n   */\n  public getErrors(): string[] {\n    return this.genericSectionErrors;\n  }\n\n  /**\n   * Set form focus to this section panel\n   *\n   * @param event\n   *    The event emitted\n   */\n  public setFocus(event): void {\n    if (!this.active) {\n      this.submissionService.setActiveSection(this.submissionId, this.sectionId);\n    }\n  }\n\n  /**\n   * Remove error from list\n   *\n   * @param index\n   *    The error array key\n   */\n  public removeError(index): void {\n    this.genericSectionErrors.splice(index);\n  }\n\n  /**\n   * Remove all errors from list\n   */\n  public resetErrors() {\n    if (isNotEmpty(this.genericSectionErrors)) {\n      this.sectionService.dispatchRemoveSectionErrors(this.submissionId, this.sectionId);\n    }\n    this.genericSectionErrors = [];\n    this.allSectionErrors = [];\n\n  }\n}\n","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, startWith } from 'rxjs/operators';\n\nimport { SectionDataObject } from './section-data.model';\nimport { SectionsService } from '../sections.service';\nimport { hasValue, isNotUndefined } from '../../../shared/empty.util';\n\nexport interface SectionDataModel {\n  sectionData: SectionDataObject;\n}\n\n/**\n * An abstract model class for a submission edit form section.\n */\n@Component({\n  selector: 'ds-section-model',\n  template: ''\n})\nexport abstract class SectionModelComponent implements OnDestroy, OnInit, SectionDataModel {\n  protected abstract sectionService: SectionsService;\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  collectionId: string;\n\n  /**\n   * The section data\n   * @type {SectionDataObject}\n   */\n  sectionData: SectionDataObject;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  submissionId: string;\n\n  /**\n   * A boolean representing if this section is valid\n   * @type {boolean}\n   */\n  protected valid: boolean;\n\n  /**\n   * The Subscription to section status observable\n   * @type {Subscription}\n   */\n  private sectionStatusSub: Subscription;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {string} injectedCollectionId\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  public constructor(@Inject('collectionIdProvider') public injectedCollectionId: string,\n    @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n    @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    this.collectionId = injectedCollectionId;\n    this.sectionData = injectedSectionData;\n    this.submissionId = injectedSubmissionId;\n  }\n\n  /**\n   * Call abstract methods on component init\n   */\n  ngOnInit(): void {\n    this.onSectionInit();\n    this.updateSectionStatus();\n  }\n\n  /**\n   * Abstract method to implement to get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected abstract getSectionStatus(): Observable<boolean>;\n\n  /**\n   * Abstract method called on component init.\n   * It must be used instead of ngOnInit on the component that extend this abstract class\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected abstract onSectionInit(): void;\n\n  /**\n   * Abstract method called on component destroy.\n   * It must be used instead of ngOnDestroy on the component that extend this abstract class\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected abstract onSectionDestroy(): void;\n\n  /**\n   * Subscribe to section status\n   */\n  protected updateSectionStatus(): void {\n    this.sectionStatusSub = this.getSectionStatus().pipe(\n      filter((sectionStatus: boolean) => isNotUndefined(sectionStatus)),\n      startWith(true))\n      .subscribe((sectionStatus: boolean) => {\n        this.sectionService.setSectionStatus(this.submissionId, this.sectionData.id, sectionStatus);\n      });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions and Call abstract methods on component destroy\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.sectionStatusSub)) {\n      this.sectionStatusSub.unsubscribe();\n    }\n    this.onSectionDestroy();\n  }\n}\n","import { isEqual } from 'lodash';\n\nexport class FormFieldPreviousValueObject {\n\n  private _path;\n  private _value;\n\n  constructor(path: any[] = null, value: any = null) {\n    this._path = path;\n    this._value = value;\n  }\n\n  get path() {\n    return this._path;\n  }\n\n  set path(path: string | string[]) {\n    this._path = path;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: any) {\n    this._value = value;\n  }\n\n  public delete() {\n    this._value = null;\n    this._path = null;\n  }\n\n  public isPathEqual(path) {\n    return this._path && isEqual(this._path, path);\n  }\n}\n","<ds-loading *ngIf=\"isLoading\" message=\"Loading...\"></ds-loading>\n<ds-form *ngIf=\"!isLoading && formModel\" #formRef=\"formComponent\"\n         [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"\n         (dfFocus)=\"onFocus($event)\"\n         (remove)=\"onRemove($event)\"\n         (ngbEvent)=\"onCustomEvent($event)\"\n         (removeArrayItem)=\"onRemove($event)\"></ds-form>\n","import { ChangeDetectorRef, Component, Inject, ViewChild } from '@angular/core';\nimport { DynamicFormControlEvent, DynamicFormControlModel } from '@ng-dynamic-forms/core';\n\nimport { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, find, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { findIndex, isEqual } from 'lodash';\n\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { FormComponent } from '../../../shared/form/form.component';\nimport { FormService } from '../../../shared/form/form.service';\nimport { SectionModelComponent } from '../models/section.model';\nimport { SubmissionFormsConfigService } from '../../../core/config/submission-forms-config.service';\nimport { hasValue, isEmpty, isNotEmpty, isUndefined } from '../../../shared/empty.util';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { SubmissionFormsModel } from '../../../core/config/models/config-submission-forms.model';\nimport { SubmissionSectionError, SubmissionSectionObject } from '../../objects/submission-objects.reducer';\nimport { FormFieldPreviousValueObject } from '../../../shared/form/builder/models/form-field-previous-value-object';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SubmissionService } from '../../submission.service';\nimport { SectionFormOperationsService } from './section-form-operations.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { SectionsService } from '../sections.service';\nimport { difference } from '../../../shared/object.util';\nimport { WorkspaceitemSectionFormObject } from '../../../core/submission/models/workspaceitem-section-form.model';\nimport { WorkspaceItem } from '../../../core/submission/models/workspaceitem.model';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { SubmissionObjectDataService } from '../../../core/submission/submission-object-data.service';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { environment } from '../../../../environments/environment';\nimport { ConfigObject } from '../../../core/config/models/config.model';\nimport { RemoteData } from '../../../core/data/remote-data';\n\n/**\n * This component represents a section that contains a Form.\n */\n@Component({\n  selector: 'ds-submission-section-form',\n  styleUrls: ['./section-form.component.scss'],\n  templateUrl: './section-form.component.html',\n})\n@renderSectionFor(SectionsType.SubmissionForm)\nexport class SubmissionSectionFormComponent extends SectionModelComponent {\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * A boolean representing if this section is updating\n   * @type {boolean}\n   */\n  public isUpdating = false;\n\n  /**\n   * A boolean representing if this section is loading\n   * @type {boolean}\n   */\n  public isLoading = true;\n\n  /**\n   * A map representing all field on their way to be removed\n   * @type {Map}\n   */\n  protected fieldsOnTheirWayToBeRemoved: Map<string, number[]> = new Map();\n\n  /**\n   * The form config\n   * @type {SubmissionFormsModel}\n   */\n  protected formConfig: SubmissionFormsModel;\n\n  /**\n   * The form data\n   * @type {any}\n   */\n  protected formData: any = Object.create({});\n\n  /**\n   * Store the\n   * @protected\n   */\n  protected sectionMetadata: string[];\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * The [FormFieldPreviousValueObject] object\n   * @type {FormFieldPreviousValueObject}\n   */\n  protected previousValue: FormFieldPreviousValueObject = new FormFieldPreviousValueObject();\n\n  /**\n   * The list of Subscription\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  protected workspaceItem: WorkspaceItem;\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') private formRef: FormComponent;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {FormBuilderService} formBuilderService\n   * @param {SectionFormOperationsService} formOperationsService\n   * @param {FormService} formService\n   * @param {SubmissionFormsConfigService} formConfigService\n   * @param {NotificationsService} notificationsService\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {TranslateService} translate\n   * @param {SubmissionObjectDataService} submissionObjectService\n   * @param {ObjectCacheService} objectCache\n   * @param {RequestService} requestService\n   * @param {string} injectedCollectionId\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  constructor(protected cdr: ChangeDetectorRef,\n              protected formBuilderService: FormBuilderService,\n              protected formOperationsService: SectionFormOperationsService,\n              protected formService: FormService,\n              protected formConfigService: SubmissionFormsConfigService,\n              protected notificationsService: NotificationsService,\n              protected sectionService: SectionsService,\n              protected submissionService: SubmissionService,\n              protected translate: TranslateService,\n              protected submissionObjectService: SubmissionObjectDataService,\n              protected objectCache: ObjectCacheService,\n              protected requestService: RequestService,\n              @Inject('collectionIdProvider') public injectedCollectionId: string,\n              @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n              @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(injectedCollectionId, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize all instance variables and retrieve form configuration\n   */\n  onSectionInit() {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.formId = this.formService.getUniqueId(this.sectionData.id);\n    this.sectionService.dispatchSetSectionFormId(this.submissionId, this.sectionData.id, this.formId);\n    this.formConfigService.findByHref(this.sectionData.config).pipe(\n      map((configData: RemoteData<ConfigObject>) => configData.payload),\n      tap((config: SubmissionFormsModel) => this.formConfig = config),\n      mergeMap(() =>\n        observableCombineLatest([\n          this.sectionService.getSectionData(this.submissionId, this.sectionData.id, this.sectionData.sectionType),\n          this.submissionObjectService.findById(this.submissionId, true, false, followLink('item')).pipe(\n            getFirstSucceededRemoteData(),\n            getRemoteDataPayload())\n        ])),\n      take(1))\n      .subscribe(([sectionData, workspaceItem]: [WorkspaceitemSectionFormObject, WorkspaceItem]) => {\n        if (isUndefined(this.formModel)) {\n          // this.sectionData.errorsToShow = [];\n          this.workspaceItem = workspaceItem;\n          // Is the first loading so init form\n          this.initForm(sectionData);\n          this.sectionData.data = sectionData;\n          this.subscriptions();\n          this.isLoading = false;\n          this.cdr.detectChanges();\n        }\n      });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    const formStatus$ = this.formService.isValid(this.formId);\n    const serverValidationStatus$ = this.sectionService.getSectionServerErrors(this.submissionId, this.sectionData.id).pipe(\n      map((validationErrors) => isEmpty(validationErrors))\n    );\n\n    return observableCombineLatest([formStatus$, serverValidationStatus$]).pipe(\n      map(([formValidation, serverSideValidation]: [boolean, boolean]) => formValidation && serverSideValidation)\n    );\n  }\n\n  /**\n   * Check if the section data has been enriched by the server\n   *\n   * @param sectionData\n   *    the section data retrieved from the server\n   */\n  hasMetadataEnrichment(sectionData: WorkspaceitemSectionFormObject): boolean {\n\n    const sectionDataToCheck = {};\n    Object.keys(sectionData).forEach((key) => {\n      if (this.sectionMetadata && this.sectionMetadata.includes(key)) {\n        sectionDataToCheck[key] = sectionData[key];\n      }\n    });\n\n    const diffResult = [];\n\n    // compare current form data state with section data retrieved from store\n    const diffObj = difference(sectionDataToCheck, this.formData);\n\n    // iterate over differences to check whether they are actually different\n    Object.keys(diffObj)\n      .forEach((key) => {\n        diffObj[key].forEach((value) => {\n          // the findIndex extra check excludes values already present in the form but in different positions\n          if (value.hasOwnProperty('value') && findIndex(this.formData[key], { value: value.value }) < 0) {\n            diffResult.push(value);\n          }\n        });\n      });\n    return isNotEmpty(diffResult);\n  }\n\n  /**\n   * Initialize form model\n   *\n   * @param sectionData\n   *    the section data retrieved from the server\n   */\n  initForm(sectionData: WorkspaceitemSectionFormObject): void {\n    try {\n      this.formModel = this.formBuilderService.modelFromConfiguration(\n        this.submissionId,\n        this.formConfig,\n        this.collectionId,\n        sectionData,\n        this.submissionService.getSubmissionScope()\n      );\n      const sectionMetadata = this.sectionService.computeSectionConfiguredMetadata(this.formConfig);\n      this.sectionService.updateSectionData(this.submissionId, this.sectionData.id, sectionData, this.sectionData.errorsToShow, this.sectionData.serverValidationErrors, sectionMetadata);\n\n    } catch (e) {\n      const msg: string = this.translate.instant('error.submission.sections.init-form-error') + e.toString();\n      const sectionError: SubmissionSectionError = {\n        message: msg,\n        path: '/sections/' + this.sectionData.id\n      };\n      console.error(e.stack);\n      this.sectionService.setSectionError(this.submissionId, this.sectionData.id, sectionError);\n    }\n  }\n\n  /**\n   * Update form model\n   *\n   * @param sectionData\n   *    the section data retrieved from the server\n   * @param errors\n   *    the section errors retrieved from the server\n   */\n  updateForm(sectionData: WorkspaceitemSectionFormObject, errors: SubmissionSectionError[]): void {\n\n    if (isNotEmpty(sectionData) && !isEqual(sectionData, this.sectionData.data)) {\n      this.sectionData.data = sectionData;\n      if (this.hasMetadataEnrichment(sectionData)) {\n        this.isUpdating = true;\n        this.formModel = null;\n        this.cdr.detectChanges();\n        this.initForm(sectionData);\n        this.checksForErrors(errors);\n        this.isUpdating = false;\n        this.cdr.detectChanges();\n      } else if (isNotEmpty(errors) || isNotEmpty(this.sectionData.errorsToShow)) {\n        this.checksForErrors(errors);\n      }\n    } else if (isNotEmpty(errors) || isNotEmpty(this.sectionData.errorsToShow)) {\n      this.checksForErrors(errors);\n    }\n\n  }\n\n  /**\n   * Check if there are form validation error retrieved from server\n   *\n   * @param errors\n   *    the section errors retrieved from the server\n   */\n  checksForErrors(errors: SubmissionSectionError[]): void {\n    this.formService.isFormInitialized(this.formId).pipe(\n      find((status: boolean) => status === true && !this.isUpdating))\n      .subscribe(() => {\n        this.sectionService.checkSectionErrors(this.submissionId, this.sectionData.id, this.formId, errors, this.sectionData.errorsToShow);\n        this.sectionData.errorsToShow = errors;\n        this.cdr.detectChanges();\n      });\n  }\n\n  /**\n   * Initialize all subscriptions\n   */\n  subscriptions(): void {\n    this.subs.push(\n      /**\n       * Subscribe to form's data\n       */\n      this.formService.getFormData(this.formId).pipe(\n        distinctUntilChanged())\n        .subscribe((formData) => {\n          this.formData = formData;\n        }),\n\n      /**\n       * Subscribe to section state\n       */\n      this.sectionService.getSectionState(this.submissionId, this.sectionData.id, this.sectionData.sectionType).pipe(\n        filter((sectionState: SubmissionSectionObject) => {\n          return isNotEmpty(sectionState) && (isNotEmpty(sectionState.data) || isNotEmpty(sectionState.errorsToShow));\n        }),\n        distinctUntilChanged())\n        .subscribe((sectionState: SubmissionSectionObject) => {\n          this.fieldsOnTheirWayToBeRemoved = new Map();\n          this.sectionMetadata = sectionState.metadata;\n          this.updateForm(sectionState.data as WorkspaceitemSectionFormObject, sectionState.errorsToShow);\n        })\n    );\n  }\n\n  /**\n   * Method called when a form dfChange event is fired.\n   * Dispatch form operations based on changes.\n   *\n   * @param event\n   *    the [[DynamicFormControlEvent]] emitted\n   */\n  onChange(event: DynamicFormControlEvent): void {\n    this.formOperationsService.dispatchOperationsFromEvent(\n      this.pathCombiner,\n      event,\n      this.previousValue,\n      this.hasStoredValue(this.formBuilderService.getId(event.model), this.formOperationsService.getArrayIndexFromEvent(event)));\n    const metadata = this.formOperationsService.getFieldPathSegmentedFromChangeEvent(event);\n    const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n\n    if ((environment.submission.autosave.metadata.indexOf(metadata) !== -1 && isNotEmpty(value)) || this.hasRelatedCustomError(metadata)) {\n      this.submissionService.dispatchSave(this.submissionId);\n    }\n  }\n\n  private hasRelatedCustomError(medatata): boolean {\n    const index = findIndex(this.sectionData.errorsToShow, {path: this.pathCombiner.getPath(medatata).path});\n    if (index  !== -1) {\n      const error = this.sectionData.errorsToShow[index];\n      const validator = error.message.replace('error.validation.', '');\n      return !environment.form.validatorMap.hasOwnProperty(validator);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Method called when a form dfFocus event is fired.\n   * Initialize [FormFieldPreviousValueObject] instance.\n   *\n   * @param event\n   *    the [[DynamicFormControlEvent]] emitted\n   */\n  onFocus(event: DynamicFormControlEvent): void {\n    const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n    const path = this.formBuilderService.getPath(event.model);\n    if (this.formBuilderService.hasMappedGroupValue(event.model)) {\n      this.previousValue.path = path;\n      this.previousValue.value = this.formOperationsService.getQualdropValueMap(event);\n    } else if (isNotEmpty(value) && ((typeof value === 'object' && isNotEmpty(value.value)) || (typeof value === 'string'))) {\n      this.previousValue.path = path;\n      this.previousValue.value = value;\n    }\n  }\n\n  /**\n   * Method called when a form remove event is fired.\n   * Dispatch form operations based on changes.\n   *\n   * @param event\n   *    the [[DynamicFormControlEvent]] emitted\n   */\n  onRemove(event: DynamicFormControlEvent): void {\n    const fieldId = this.formBuilderService.getId(event.model);\n    const fieldIndex = this.formOperationsService.getArrayIndexFromEvent(event);\n\n    // Keep track that this field will be removed\n    if (this.fieldsOnTheirWayToBeRemoved.has(fieldId)) {\n      const indexes = this.fieldsOnTheirWayToBeRemoved.get(fieldId);\n      indexes.push(fieldIndex);\n      this.fieldsOnTheirWayToBeRemoved.set(fieldId, indexes);\n    } else {\n      this.fieldsOnTheirWayToBeRemoved.set(fieldId, [fieldIndex]);\n    }\n\n    this.formOperationsService.dispatchOperationsFromEvent(\n      this.pathCombiner,\n      event,\n      this.previousValue,\n      this.hasStoredValue(fieldId, fieldIndex));\n\n  }\n\n  /**\n   * Check if the specified form field has already a value stored\n   *\n   * @param fieldId\n   *    the section data retrieved from the serverù\n   * @param index\n   *    the section data retrieved from the server\n   */\n  hasStoredValue(fieldId, index): boolean {\n    if (isNotEmpty(this.sectionData.data)) {\n      return this.sectionData.data.hasOwnProperty(fieldId) &&\n        isNotEmpty(this.sectionData.data[fieldId][index]) &&\n        !this.isFieldToRemove(fieldId, index);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Check if the specified field is on the way to be removed\n   *\n   * @param fieldId\n   *    the section data retrieved from the serverù\n   * @param index\n   *    the section data retrieved from the server\n   */\n  isFieldToRemove(fieldId, index) {\n    return this.fieldsOnTheirWayToBeRemoved.has(fieldId) && this.fieldsOnTheirWayToBeRemoved.get(fieldId).includes(index);\n  }\n\n  /**\n   * Handle the customEvent (ex. drag-drop move event).\n   * The customEvent is stored inside event.$event\n   * @param $event\n   */\n  onCustomEvent(event: DynamicFormControlEvent) {\n    this.formOperationsService.dispatchOperationsFromEvent(\n      this.pathCombiner,\n      event,\n      this.previousValue,\n      null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEqual, union } from 'lodash';\n\nimport { from as observableFrom, Observable, of as observableOf } from 'rxjs';\nimport { catchError, filter, map, mergeMap, switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { WorkflowItem } from '../../core/submission/models/workflowitem.model';\nimport { WorkspaceitemSectionUploadObject } from '../../core/submission/models/workspaceitem-section-upload.model';\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\nimport { WorkspaceItem } from '../../core/submission/models/workspaceitem.model';\nimport { SubmissionJsonPatchOperationsService } from '../../core/submission/submission-json-patch-operations.service';\nimport { isEmpty, isNotEmpty, isNotUndefined } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { SectionsType } from '../sections/sections-type';\nimport { SectionsService } from '../sections/sections.service';\nimport { SubmissionState } from '../submission.reducers';\nimport { SubmissionService } from '../submission.service';\nimport parseSectionErrors from '../utils/parseSectionErrors';\nimport {\n  CompleteInitSubmissionFormAction,\n  DepositSubmissionAction,\n  DepositSubmissionErrorAction,\n  DepositSubmissionSuccessAction,\n  DiscardSubmissionErrorAction,\n  DiscardSubmissionSuccessAction,\n  InitSectionAction,\n  InitSubmissionFormAction,\n  ResetSubmissionFormAction,\n  SaveAndDepositSubmissionAction,\n  SaveForLaterSubmissionFormAction,\n  SaveForLaterSubmissionFormSuccessAction,\n  SaveSubmissionFormAction,\n  SaveSubmissionFormErrorAction,\n  SaveSubmissionFormSuccessAction,\n  SaveSubmissionSectionFormAction,\n  SaveSubmissionSectionFormErrorAction,\n  SaveSubmissionSectionFormSuccessAction,\n  SubmissionObjectAction,\n  SubmissionObjectActionTypes,\n  UpdateSectionDataAction,\n  UpdateSectionDataSuccessAction\n} from './submission-objects.actions';\nimport { SubmissionObjectEntry, SubmissionSectionError, SubmissionSectionObject } from './submission-objects.reducer';\nimport { Item } from '../../core/shared/item.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { SubmissionObjectDataService } from '../../core/submission/submission-object-data.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport parseSectionErrorPaths, { SectionErrorPath } from '../utils/parseSectionErrorPaths';\nimport { FormState } from '../../shared/form/form.reducer';\n\n@Injectable()\nexport class SubmissionObjectEffects {\n\n  /**\n   * Dispatch a [InitSectionAction] for every submission sections and dispatch a [CompleteInitSubmissionFormAction]\n   */\n  @Effect() loadForm$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.INIT_SUBMISSION_FORM),\n    map((action: InitSubmissionFormAction) => {\n      const definition = action.payload.submissionDefinition;\n      const mappedActions = [];\n      definition.sections.page.forEach((sectionDefinition: any) => {\n        const selfLink = sectionDefinition._links.self.href || sectionDefinition._links.self;\n        const sectionId = selfLink.substr(selfLink.lastIndexOf('/') + 1);\n        const config = sectionDefinition._links.config ? (sectionDefinition._links.config.href || sectionDefinition._links.config) : '';\n        const enabled = (sectionDefinition.mandatory) || (isNotEmpty(action.payload.sections) && action.payload.sections.hasOwnProperty(sectionId));\n        let sectionData;\n        if (sectionDefinition.sectionType !== SectionsType.SubmissionForm) {\n          sectionData = (isNotUndefined(action.payload.sections) && isNotUndefined(action.payload.sections[sectionId])) ? action.payload.sections[sectionId] : Object.create(null);\n        } else {\n          sectionData = action.payload.item.metadata;\n        }\n        const sectionErrors = isNotEmpty(action.payload.errors) ? (action.payload.errors[sectionId] || null) : null;\n        mappedActions.push(\n          new InitSectionAction(\n            action.payload.submissionId,\n            sectionId,\n            sectionDefinition.header,\n            config,\n            sectionDefinition.mandatory,\n            sectionDefinition.sectionType,\n            sectionDefinition.visibility,\n            enabled,\n            sectionData,\n            sectionErrors\n          )\n        );\n      });\n      return { action: action, definition: definition, mappedActions: mappedActions };\n    }),\n    mergeMap((result) => {\n      return observableFrom(\n        result.mappedActions.concat(\n          new CompleteInitSubmissionFormAction(result.action.payload.submissionId)\n        ));\n    }));\n\n  /**\n   * Dispatch a [InitSubmissionFormAction]\n   */\n  @Effect() resetForm$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.RESET_SUBMISSION_FORM),\n    map((action: ResetSubmissionFormAction) =>\n      new InitSubmissionFormAction(\n        action.payload.collectionId,\n        action.payload.submissionId,\n        action.payload.selfUrl,\n        action.payload.submissionDefinition,\n        action.payload.sections,\n        action.payload.item,\n        null\n      )));\n\n  /**\n   * Dispatch a [SaveSubmissionFormSuccessAction] or a [SaveSubmissionFormErrorAction] on error\n   */\n  @Effect() saveSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_FORM),\n    switchMap((action: SaveSubmissionFormAction) => {\n      return this.operationsService.jsonPatchByResourceType(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections').pipe(\n        map((response: SubmissionObject[]) => new SaveSubmissionFormSuccessAction(action.payload.submissionId, response, action.payload.isManual)),\n        catchError(() => observableOf(new SaveSubmissionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Dispatch a [SaveForLaterSubmissionFormSuccessAction] or a [SaveSubmissionFormErrorAction] on error\n   */\n  @Effect() saveForLaterSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_FOR_LATER_SUBMISSION_FORM),\n    switchMap((action: SaveForLaterSubmissionFormAction) => {\n      return this.operationsService.jsonPatchByResourceType(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections').pipe(\n        map((response: SubmissionObject[]) => new SaveForLaterSubmissionFormSuccessAction(action.payload.submissionId, response)),\n        catchError(() => observableOf(new SaveSubmissionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Call parseSaveResponse and dispatch actions\n   */\n  @Effect() saveSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_FORM_SUCCESS),\n    withLatestFrom(this.store$),\n    map(([action, currentState]: [SaveSubmissionFormSuccessAction, any]) => {\n      return this.parseSaveResponse((currentState.submission as SubmissionState).objects[action.payload.submissionId],\n        action.payload.submissionObject, action.payload.submissionId, currentState.forms, action.payload.notify);\n    }),\n    mergeMap((actions) => observableFrom(actions)));\n\n  /**\n   * Call parseSaveResponse and dispatch actions.\n   * Notification system is forced to be disabled.\n   */\n  @Effect() saveSubmissionSectionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_SECTION_FORM_SUCCESS),\n    withLatestFrom(this.store$),\n    map(([action, currentState]: [SaveSubmissionSectionFormSuccessAction, any]) => {\n      return this.parseSaveResponse((currentState.submission as SubmissionState).objects[action.payload.submissionId],\n        action.payload.submissionObject, action.payload.submissionId, currentState.forms, false);\n    }),\n    mergeMap((actions) => observableFrom(actions)));\n\n  /**\n   * Dispatch a [SaveSubmissionSectionFormSuccessAction] or a [SaveSubmissionSectionFormErrorAction] on error\n   */\n  @Effect() saveSection$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_SECTION_FORM),\n    switchMap((action: SaveSubmissionSectionFormAction) => {\n      return this.operationsService.jsonPatchByResourceID(\n        this.submissionService.getSubmissionObjectLinkName(),\n        action.payload.submissionId,\n        'sections',\n        action.payload.sectionId).pipe(\n        map((response: SubmissionObject[]) => new SaveSubmissionSectionFormSuccessAction(action.payload.submissionId, response)),\n        catchError(() => observableOf(new SaveSubmissionSectionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Show a notification on error\n   */\n  @Effect({ dispatch: false }) saveError$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_SUBMISSION_FORM_ERROR, SubmissionObjectActionTypes.SAVE_SUBMISSION_SECTION_FORM_ERROR),\n    withLatestFrom(this.store$),\n    tap(() => this.notificationsService.error(null, this.translate.get('submission.sections.general.save_error_notice'))));\n\n  /**\n   * Call parseSaveResponse and dispatch actions or dispatch [SaveSubmissionFormErrorAction] on error\n   */\n  @Effect() saveAndDeposit$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_AND_DEPOSIT_SUBMISSION),\n    withLatestFrom(this.submissionService.hasUnsavedModification()),\n    switchMap(([action, hasUnsavedModification]: [SaveAndDepositSubmissionAction, boolean]) => {\n      let response$: Observable<SubmissionObject[]>;\n      if (hasUnsavedModification) {\n        response$ = this.operationsService.jsonPatchByResourceType(\n          this.submissionService.getSubmissionObjectLinkName(),\n          action.payload.submissionId,\n          'sections') as Observable<SubmissionObject[]>;\n      } else {\n        response$ = this.submissionObjectService.findById(action.payload.submissionId, false, true).pipe(\n          getFirstSucceededRemoteDataPayload(),\n          map((submissionObject: SubmissionObject) => [submissionObject])\n        );\n      }\n      return response$.pipe(\n        map((response: SubmissionObject[]) => {\n          if (this.canDeposit(response)) {\n            return new DepositSubmissionAction(action.payload.submissionId);\n          } else {\n            return new SaveSubmissionFormSuccessAction(action.payload.submissionId, response);\n          }\n        }),\n        catchError(() => observableOf(new SaveSubmissionFormErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Dispatch a [DepositSubmissionSuccessAction] or a [DepositSubmissionErrorAction] on error\n   */\n  @Effect() depositSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DEPOSIT_SUBMISSION),\n    withLatestFrom(this.store$),\n    switchMap(([action, state]: [DepositSubmissionAction, any]) => {\n      return this.submissionService.depositSubmission(state.submission.objects[action.payload.submissionId].selfUrl).pipe(\n        map(() => new DepositSubmissionSuccessAction(action.payload.submissionId)),\n        catchError((error) => observableOf(new DepositSubmissionErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Show a notification on success and redirect to MyDSpace page\n   */\n  @Effect({ dispatch: false }) saveForLaterSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.SAVE_FOR_LATER_SUBMISSION_FORM_SUCCESS),\n    tap(() => this.notificationsService.success(null, this.translate.get('submission.sections.general.save_success_notice'))),\n    tap(() => this.submissionService.redirectToMyDSpace()));\n\n  /**\n   * Show a notification on success and redirect to MyDSpace page\n   */\n  @Effect({ dispatch: false }) depositSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DEPOSIT_SUBMISSION_SUCCESS),\n    tap(() => this.notificationsService.success(null, this.translate.get('submission.sections.general.deposit_success_notice'))),\n    tap(() => this.submissionService.redirectToMyDSpace()));\n\n  /**\n   * Show a notification on error\n   */\n  @Effect({ dispatch: false }) depositSubmissionError$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DEPOSIT_SUBMISSION_ERROR),\n    tap(() => this.notificationsService.error(null, this.translate.get('submission.sections.general.deposit_error_notice'))));\n\n  /**\n   * Dispatch a [DiscardSubmissionSuccessAction] or a [DiscardSubmissionErrorAction] on error\n   */\n  @Effect() discardSubmission$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DISCARD_SUBMISSION),\n    switchMap((action: DepositSubmissionAction) => {\n      return this.submissionService.discardSubmission(action.payload.submissionId).pipe(\n        map(() => new DiscardSubmissionSuccessAction(action.payload.submissionId)),\n        catchError(() => observableOf(new DiscardSubmissionErrorAction(action.payload.submissionId))));\n    }));\n\n  /**\n   * Adds all metadata an item to the SubmissionForm sections of the submission\n   */\n  @Effect() addAllMetadataToSectionData = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.UPDATE_SECTION_DATA),\n    switchMap((action: UpdateSectionDataAction) => {\n      return this.sectionService.getSectionState(action.payload.submissionId, action.payload.sectionId, SectionsType.Upload)\n        .pipe(map((section: SubmissionSectionObject) => [action, section]), take(1));\n    }),\n    filter(([action, section]: [UpdateSectionDataAction, SubmissionSectionObject]) => section.sectionType === SectionsType.SubmissionForm),\n    switchMap(([action, section]: [UpdateSectionDataAction, SubmissionSectionObject]) => {\n      if (section.sectionType === SectionsType.SubmissionForm) {\n        const submissionObject$ = this.submissionObjectService\n          .findById(action.payload.submissionId, true, false, followLink('item')).pipe(\n            getFirstSucceededRemoteDataPayload()\n          );\n\n        const item$ = submissionObject$.pipe(\n          switchMap((submissionObject: SubmissionObject) => (submissionObject.item as Observable<RemoteData<Item>>).pipe(\n            getFirstSucceededRemoteDataPayload(),\n          )));\n\n        return item$.pipe(\n          map((item: Item) => item.metadata),\n          filter((metadata) => !isEqual(action.payload.data, metadata)),\n          map((metadata: any) => new UpdateSectionDataAction(action.payload.submissionId, action.payload.sectionId, metadata, action.payload.errorsToShow, action.payload.serverValidationErrors, action.payload.metadata))\n        );\n      } else {\n        return observableOf(new UpdateSectionDataSuccessAction());\n      }\n    }),\n  );\n\n  /**\n   * Show a notification on success and redirect to MyDSpace page\n   */\n  @Effect({ dispatch: false })\n  discardSubmissionSuccess$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DISCARD_SUBMISSION_SUCCESS),\n    tap(() => this.notificationsService.success(null, this.translate.get('submission.sections.general.discard_success_notice'))),\n    tap(() => this.submissionService.redirectToMyDSpace()));\n\n  /**\n   * Show a notification on error\n   */\n  @Effect({ dispatch: false }) discardSubmissionError$ = this.actions$.pipe(\n    ofType(SubmissionObjectActionTypes.DISCARD_SUBMISSION_ERROR),\n    tap(() => this.notificationsService.error(null, this.translate.get('submission.sections.general.discard_error_notice'))));\n\n  constructor(private actions$: Actions,\n              private notificationsService: NotificationsService,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private sectionService: SectionsService,\n              private store$: Store<any>,\n              private submissionService: SubmissionService,\n              private submissionObjectService: SubmissionObjectDataService,\n              private translate: TranslateService) {\n  }\n\n  /**\n   * Check if the submission object retrieved from REST haven't section errors\n   *\n   * @param response\n   *    The submission object retrieved from REST\n   */\n  protected canDeposit(response: SubmissionObject[]) {\n    let canDeposit = true;\n\n    if (isNotEmpty(response)) {\n      response.forEach((item: WorkspaceItem | WorkflowItem) => {\n        const { errors } = item;\n\n        if (errors && !isEmpty(errors)) {\n          canDeposit = false;\n        }\n      });\n    }\n    return canDeposit;\n  }\n\n  /**\n   * Parse the submission object retrieved from REST and return actions to dispatch\n   *\n   * @param currentState\n   *    The current SubmissionObjectEntry\n   * @param response\n   *    The submission object retrieved from REST\n   * @param submissionId\n   *    The submission id\n   * @param forms\n   *    The forms state\n   * @param notify\n   *    A boolean that indicate if show notification or not\n   * @return SubmissionObjectAction[]\n   *    List of SubmissionObjectAction to dispatch\n   */\n  protected parseSaveResponse(\n    currentState: SubmissionObjectEntry,\n    response: SubmissionObject[],\n    submissionId: string,\n    forms: FormState,\n    notify: boolean = true): SubmissionObjectAction[] {\n\n    const mappedActions = [];\n\n    if (isNotEmpty(response)) {\n      if (notify) {\n        this.notificationsService.success(null, this.translate.get('submission.sections.general.save_success_notice'));\n      }\n\n      response.forEach((item: WorkspaceItem | WorkflowItem) => {\n\n        let errorsList = Object.create({});\n        const { errors } = item;\n\n        if (errors && !isEmpty(errors)) {\n          // to avoid dispatching an action for every error, create an array of errors per section\n          errorsList = parseSectionErrors(errors);\n          if (notify) {\n            this.notificationsService.warning(null, this.translate.get('submission.sections.general.sections_not_valid'));\n          }\n        }\n\n        const sections: WorkspaceitemSectionsObject = (item.sections && isNotEmpty(item.sections)) ? item.sections : {};\n        const sectionsKeys: string[] = union(Object.keys(sections), Object.keys(errorsList));\n\n        for (const sectionId of sectionsKeys) {\n          const sectionErrors = errorsList[sectionId] || [];\n          const sectionData = sections[sectionId] || {};\n\n          // When Upload section is disabled, add to submission only if there are files\n          if (currentState.sections[sectionId].sectionType === SectionsType.Upload\n            && isEmpty((sectionData as WorkspaceitemSectionUploadObject).files)\n            && !currentState.sections[sectionId].enabled) {\n            continue;\n          }\n\n          if (notify && !currentState.sections[sectionId].enabled) {\n            this.submissionService.notifyNewSection(submissionId, sectionId, currentState.sections[sectionId].sectionType);\n          }\n\n          const sectionForm = getForm(forms, currentState, sectionId);\n          const filteredErrors = filterErrors(sectionForm, sectionErrors, currentState.sections[sectionId].sectionType, notify);\n          mappedActions.push(new UpdateSectionDataAction(submissionId, sectionId, sectionData, filteredErrors, sectionErrors));\n        }\n      });\n    }\n    return mappedActions;\n  }\n}\n\nfunction getForm(forms, currentState, sectionId) {\n  if (!forms) {\n    return null;\n  }\n  const formId = currentState.sections[sectionId].formId;\n  return forms[formId];\n}\n\n/**\n * Filter sectionErrors accordingly to this rules:\n * 1. if notifications are enabled return all errors\n * 2. if sectionType is different from 'submission-form' return all errors\n * 3. otherwise return errors only for those fields marked as touched inside the section form\n * @param sectionForm\n *  The form related to the section\n * @param sectionErrors\n *  The section errors array\n * @param sectionType\n *  The section type\n * @param notify\n *  Whether notifications are enabled\n */\nfunction filterErrors(sectionForm: FormState, sectionErrors: SubmissionSectionError[], sectionType: string, notify: boolean): SubmissionSectionError[] {\n  if (notify || sectionType !== SectionsType.SubmissionForm) {\n    return sectionErrors;\n  }\n  if (!sectionForm || !sectionForm.touched) {\n    return [];\n  }\n  const filteredErrors = [];\n  sectionErrors.forEach((error: SubmissionSectionError) => {\n    const errorPaths: SectionErrorPath[] = parseSectionErrorPaths(error.path);\n    errorPaths.forEach((path: SectionErrorPath) => {\n      if (path.fieldId && sectionForm.touched[path.fieldId]) {\n        filteredErrors.push(error);\n      }\n    });\n  });\n  return filteredErrors;\n}\n","import { SubmissionObjectEffects } from './objects/submission-objects.effects';\n\nexport const submissionEffects = [\n  SubmissionObjectEffects\n];\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { SubmissionState } from '../../submission.reducers';\nimport {\n  DeleteUploadedFileAction,\n  EditFileDataAction,\n  NewUploadedFileAction\n} from '../../objects/submission-objects.actions';\nimport { submissionUploadedFileFromUuidSelector, submissionUploadedFilesFromIdSelector } from '../../selectors';\nimport { isUndefined } from '../../../shared/empty.util';\nimport { WorkspaceitemSectionUploadFileObject } from '../../../core/submission/models/workspaceitem-section-upload-file.model';\n\n/**\n * A service that provides methods to handle submission's bitstream state.\n */\n@Injectable()\nexport class SectionUploadService {\n\n  /**\n   * Initialize service variables\n   *\n   * @param {Store<SubmissionState>} store\n   */\n  constructor(private store: Store<SubmissionState>) {}\n\n  /**\n   * Return submission's bitstream list from state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @returns {Array}\n   *    Returns submission's bitstream list\n   */\n  public getUploadedFileList(submissionId: string, sectionId: string): Observable<any> {\n    return this.store.select(submissionUploadedFilesFromIdSelector(submissionId, sectionId)).pipe(\n      map((state) => state),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return bitstream's metadata\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @returns {Observable}\n   *    Emits bitstream's metadata\n   */\n  public getFileData(submissionId: string, sectionId: string, fileUUID: string): Observable<any> {\n    return this.store.select(submissionUploadedFilesFromIdSelector(submissionId, sectionId)).pipe(\n      filter((state) => !isUndefined(state)),\n      map((state) => {\n        let fileState;\n        Object.keys(state)\n          .filter((key) => state[key].uuid === fileUUID)\n          .forEach((key) => fileState = state[key]);\n        return fileState;\n      }),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Return bitstream's default policies\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @returns {Observable}\n   *    Emits bitstream's default policies\n   */\n  public getDefaultPolicies(submissionId: string, sectionId: string, fileUUID: string): Observable<any> {\n    return this.store.select(submissionUploadedFileFromUuidSelector(submissionId, sectionId, fileUUID)).pipe(\n      map((state) => state),\n      distinctUntilChanged());\n  }\n\n  /**\n   * Add a new bitstream to the state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @param data\n   *    The [[WorkspaceitemSectionUploadFileObject]] object\n   */\n  public addUploadedFile(submissionId: string, sectionId: string, fileUUID: string, data: WorkspaceitemSectionUploadFileObject) {\n    this.store.dispatch(\n      new NewUploadedFileAction(submissionId, sectionId, fileUUID, data)\n    );\n  }\n\n  /**\n   * Update bitstream metadata into the state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   * @param data\n   *    The [[WorkspaceitemSectionUploadFileObject]] object\n   */\n  public updateFileData(submissionId: string, sectionId: string, fileUUID: string, data: WorkspaceitemSectionUploadFileObject) {\n    this.store.dispatch(\n      new EditFileDataAction(submissionId, sectionId, fileUUID, data)\n    );\n  }\n\n  /**\n   * Remove bitstream from the state\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @param fileUUID\n   *    The bitstream UUID\n   */\n  public removeUploadedFile(submissionId: string, sectionId: string, fileUUID: string) {\n    this.store.dispatch(\n      new DeleteUploadedFileAction(submissionId, sectionId, fileUUID)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from './config.service';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { dataService } from '../cache/builders/build-decorators';\nimport { SUBMISSION_UPLOADS_TYPE } from './models/config-type';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../core.reducers';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { HttpClient } from '@angular/common/http';\nimport { DefaultChangeAnalyzer } from '../data/default-change-analyzer.service';\nimport { ConfigObject } from './models/config.model';\nimport { SubmissionUploadsModel } from './models/config-submission-uploads.model';\nimport { RemoteData } from '../data/remote-data';\nimport { Observable } from 'rxjs';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\n\n/**\n * Provides methods to retrieve, from REST server, bitstream access conditions configurations applicable during the submission process.\n */\n@Injectable()\n@dataService(SUBMISSION_UPLOADS_TYPE)\nexport class SubmissionUploadsConfigService extends ConfigService {\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<CoreState>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected http: HttpClient,\n    protected comparator: DefaultChangeAnalyzer<SubmissionUploadsModel>\n  ) {\n    super(requestService, rdbService, null, objectCache, halService, notificationsService, http, comparator, 'submissionuploads');\n  }\n\n  findByHref(href: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow): Observable<RemoteData<SubmissionUploadsModel>> {\n    return super.findByHref(href, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow as FollowLinkConfig<ConfigObject>[]) as Observable<RemoteData<SubmissionUploadsModel>>;\n  }\n}\n","<ds-alert [content]=\"'submission.sections.upload.info'\"\n          [dismissible]=\"true\"\n          [type]=\"AlertTypeEnum.Info\"></ds-alert>\n\n<ng-container *ngIf=\"fileList.length == 0\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3 class=\"text-center\"><span class=\"text-muted\">{{'submission.sections.upload.no-file-uploaded' | translate}}</span></h3>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"fileList.length > 0\">\n\n  <div *ngIf=\"collectionDefaultAccessConditions.length > 0\" class=\"row\">\n    <div class=\"col-sm-12\" >\n      <ds-alert [type]=\"AlertTypeEnum.Warning\">\n        <ng-container *ngIf=\"collectionPolicyType === 1\">\n          {{ 'submission.sections.upload.header.policy.default.nolist' | translate:{ \"collectionName\": collectionName } }}\n        </ng-container>\n        <ng-container *ngIf=\"collectionPolicyType === 2\">\n          {{ 'submission.sections.upload.header.policy.default.withlist' | translate:{ \"collectionName\": collectionName } }}\n        </ng-container>\n        <span class=\"clearfix\"></span>\n        <ds-submission-section-upload-access-conditions [accessConditions]=\"collectionDefaultAccessConditions\"></ds-submission-section-upload-access-conditions>\n      </ds-alert>\n    </div>\n  </div>\n\n  <ng-container *ngFor=\"let fileEntry of fileList\">\n    <ds-submission-upload-section-file\n                                       [availableAccessConditionOptions]=\"availableAccessConditionOptions\"\n                                       [collectionId]=\"collectionId\"\n                                       [collectionPolicyType]=\"collectionPolicyType\"\n                                       [configMetadataForm]=\"(configMetadataForm$ | async)\"\n                                       [fileId]=\"fileIndexes[fileList.indexOf(fileEntry)]\"\n                                       [fileIndex]=\"fileList.indexOf(fileEntry)\"\n                                       [fileName]=\"fileNames[fileList.indexOf(fileEntry)]\"\n                                       [sectionId]=\"sectionData.id\"\n                                       [submissionId]=\"submissionId\"></ds-submission-upload-section-file>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr/>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { ChangeDetectorRef, Component, Inject } from '@angular/core';\n\nimport {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  Observable,\n  Subscription\n} from 'rxjs';\nimport { distinctUntilChanged, filter, map, mergeMap, switchMap, tap } from 'rxjs/operators';\n\nimport { SectionModelComponent } from '../models/section.model';\nimport { hasValue, isNotEmpty, isNotUndefined, isUndefined } from '../../../shared/empty.util';\nimport { SectionUploadService } from './section-upload.service';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { ResourcePolicyService } from '../../../core/resource-policy/resource-policy.service';\nimport { SubmissionUploadsConfigService } from '../../../core/config/submission-uploads-config.service';\nimport { SubmissionUploadsModel } from '../../../core/config/models/config-submission-uploads.model';\nimport { SubmissionFormsModel } from '../../../core/config/models/config-submission-forms.model';\nimport { SectionsType } from '../sections-type';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { SubmissionObjectEntry } from '../../objects/submission-objects.reducer';\nimport { AlertType } from '../../../shared/alert/aletr-type';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Group } from '../../../core/eperson/models/group.model';\nimport { SectionsService } from '../sections.service';\nimport { SubmissionService } from '../../submission.service';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { AccessConditionOption } from '../../../core/config/models/config-access-condition-option.model';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\n\nexport const POLICY_DEFAULT_NO_LIST = 1; // Banner1\nexport const POLICY_DEFAULT_WITH_LIST = 2; // Banner2\n\nexport interface AccessConditionGroupsMapEntry {\n  accessCondition: string;\n  groups: Group[];\n}\n\n/**\n * This component represents a section that contains submission's bitstreams\n */\n@Component({\n  selector: 'ds-submission-section-upload',\n  styleUrls: ['./section-upload.component.scss'],\n  templateUrl: './section-upload.component.html',\n})\n@renderSectionFor(SectionsType.Upload)\nexport class SubmissionSectionUploadComponent extends SectionModelComponent {\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * The array containing the keys of file list array\n   * @type {Array}\n   */\n  public fileIndexes: string[] = [];\n\n  /**\n   * The file list\n   * @type {Array}\n   */\n  public fileList: any[] = [];\n\n  /**\n   * The array containing the name of the files\n   * @type {Array}\n   */\n  public fileNames: string[] = [];\n\n  /**\n   * The collection name this submission belonging to\n   * @type {string}\n   */\n  public collectionName: string;\n\n  /**\n   * Default access conditions of this collection\n   * @type {Array}\n   */\n  public collectionDefaultAccessConditions: any[] = [];\n\n  /**\n   * Define if collection access conditions policy type :\n   * POLICY_DEFAULT_NO_LIST : is not possible to define additional access group/s for the single file\n   * POLICY_DEFAULT_WITH_LIST : is possible to define additional access group/s for the single file\n   * @type {number}\n   */\n  public collectionPolicyType: number;\n\n  /**\n   * The configuration for the bitstream's metadata form\n   */\n  public configMetadataForm$: Observable<SubmissionFormsModel>;\n\n  /**\n   * List of available access conditions that could be set to files\n   */\n  public availableAccessConditionOptions: AccessConditionOption[];  // List of accessConditions that an user can select\n\n  /**\n   * Is the upload required\n   * @type {boolean}\n   */\n  public required$ = new BehaviorSubject<boolean>(true);\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {SectionUploadService} bitstreamService\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {CollectionDataService} collectionDataService\n   * @param {GroupDataService} groupService\n   * @param {ResourcePolicyService} resourcePolicyService\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {SubmissionUploadsConfigService} uploadsConfigService\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  constructor(private bitstreamService: SectionUploadService,\n              private changeDetectorRef: ChangeDetectorRef,\n              private collectionDataService: CollectionDataService,\n              private groupService: GroupDataService,\n              private resourcePolicyService: ResourcePolicyService,\n              protected sectionService: SectionsService,\n              private submissionService: SubmissionService,\n              private uploadsConfigService: SubmissionUploadsConfigService,\n              @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n              @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(undefined, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize all instance variables and retrieve collection default access conditions\n   */\n  onSectionInit() {\n    const config$ = this.uploadsConfigService.findByHref(this.sectionData.config, true, false, followLink('metadata')).pipe(\n      getFirstSucceededRemoteData(),\n      map((config) => config.payload));\n\n    // retrieve configuration for the bitstream's metadata form\n    this.configMetadataForm$ = config$.pipe(\n      switchMap((config: SubmissionUploadsModel) =>\n        config.metadata.pipe(\n          getFirstSucceededRemoteData(),\n          map((remoteData: RemoteData<SubmissionFormsModel>) => remoteData.payload)\n        )\n      ));\n\n    this.subs.push(\n      this.submissionService.getSubmissionObject(this.submissionId).pipe(\n        filter((submissionObject: SubmissionObjectEntry) => isNotUndefined(submissionObject) && !submissionObject.isLoading),\n        filter((submissionObject: SubmissionObjectEntry) => isUndefined(this.collectionId) || this.collectionId !== submissionObject.collection),\n        tap((submissionObject: SubmissionObjectEntry) => this.collectionId = submissionObject.collection),\n        mergeMap((submissionObject: SubmissionObjectEntry) => this.collectionDataService.findById(submissionObject.collection)),\n        filter((rd: RemoteData<Collection>) => isNotUndefined((rd.payload))),\n        tap((collectionRemoteData: RemoteData<Collection>) => this.collectionName = collectionRemoteData.payload.name),\n        // TODO review this part when https://github.com/DSpace/dspace-angular/issues/575 is resolved\n/*        mergeMap((collectionRemoteData: RemoteData<Collection>) => {\n          return this.resourcePolicyService.findByHref(\n            (collectionRemoteData.payload as any)._links.defaultAccessConditions.href\n          );\n        }),\n        filter((defaultAccessConditionsRemoteData: RemoteData<ResourcePolicy>) =>\n          defaultAccessConditionsRemoteData.hasSucceeded),\n        tap((defaultAccessConditionsRemoteData: RemoteData<ResourcePolicy>) => {\n          if (isNotEmpty(defaultAccessConditionsRemoteData.payload)) {\n            this.collectionDefaultAccessConditions = Array.isArray(defaultAccessConditionsRemoteData.payload)\n              ? defaultAccessConditionsRemoteData.payload : [defaultAccessConditionsRemoteData.payload];\n          }\n        }),*/\n        mergeMap(() => config$),\n      ).subscribe((config: SubmissionUploadsModel) => {\n        this.required$.next(config.required);\n        this.availableAccessConditionOptions = isNotEmpty(config.accessConditionOptions) ? config.accessConditionOptions : [];\n        this.collectionPolicyType = this.availableAccessConditionOptions.length > 0\n          ? POLICY_DEFAULT_WITH_LIST\n          : POLICY_DEFAULT_NO_LIST;\n        this.changeDetectorRef.detectChanges();\n      }),\n\n      // retrieve submission's bitstreams from state\n      observableCombineLatest(this.configMetadataForm$,\n        this.bitstreamService.getUploadedFileList(this.submissionId, this.sectionData.id)).pipe(\n        filter(([configMetadataForm, fileList]: [SubmissionFormsModel, any[]]) => {\n          return isNotEmpty(configMetadataForm) && isNotUndefined(fileList);\n        }),\n        distinctUntilChanged())\n        .subscribe(([configMetadataForm, fileList]: [SubmissionFormsModel, any[]]) => {\n            this.fileList = [];\n            this.fileIndexes = [];\n            this.fileNames = [];\n            this.changeDetectorRef.detectChanges();\n            if (isNotUndefined(fileList) && fileList.length > 0) {\n              fileList.forEach((file) => {\n                this.fileList.push(file);\n                this.fileIndexes.push(file.uuid);\n                this.fileNames.push(this.getFileName(configMetadataForm, file));\n              });\n            }\n\n            this.changeDetectorRef.detectChanges();\n          }\n        )\n    );\n  }\n\n  /**\n   * Return file name from metadata\n   *\n   * @param configMetadataForm\n   *    the bitstream's form configuration\n   * @param fileData\n   *    the file metadata\n   */\n  private getFileName(configMetadataForm: SubmissionFormsModel, fileData: any): string {\n    const metadataName: string = configMetadataForm.rows[0].fields[0].selectableMetadata[0].metadata;\n    let title: string;\n    if (isNotEmpty(fileData.metadata) && isNotEmpty(fileData.metadata[metadataName])) {\n      title = fileData.metadata[metadataName][0].display;\n    } else {\n      title = fileData.uuid;\n    }\n\n    return title;\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    // if not mandatory, always true\n    // if mandatory, at least one file is required\n    return observableCombineLatest(this.required$,\n      this.bitstreamService.getUploadedFileList(this.submissionId, this.sectionData.id),\n      (required,fileList: any[]) => {\n        return (!required || (isNotUndefined(fileList) && fileList.length > 0));\n      });\n  }\n\n  /**\n   * Method provided by Angular. Invoked when the instance is destroyed.\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","\nexport const SECTION_LICENSE_FORM_LAYOUT = {\n\n  granted: {\n    element: {\n      container: 'custom-control custom-checkbox pl-1',\n      control: 'custom-control-input',\n      label: 'custom-control-label pt-1'\n    }\n  }\n};\n\nexport const SECTION_LICENSE_FORM_MODEL = [\n  {\n    id: 'granted',\n    label: 'I confirm the license above',\n    required: true,\n    value: false,\n    validators: {\n      required: null\n    },\n    errorMessages: {\n      required: 'You must accept the license',\n      notgranted: 'You must accept the license'\n    },\n    type: 'CHECKBOX',\n  }\n];\n","<span class=\"mb-5\" [innerHTML]=\"licenseText$ | async\"></span>\n<br> <br>\n<ds-form *ngIf=\"formModel\" #formRef=\"formComponent\"\n         [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formLayout]=\"formLayout\"\n         [displaySubmit]=\"displaySubmit\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"></ds-form>\n","import { ChangeDetectorRef, Component, Inject, ViewChild } from '@angular/core';\nimport {\n  DynamicCheckboxModel,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout\n} from '@ng-dynamic-forms/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, find, map, mergeMap, startWith, take } from 'rxjs/operators';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { License } from '../../../core/shared/license.model';\nimport { WorkspaceitemSectionLicenseObject } from '../../../core/submission/models/workspaceitem-section-license.model';\nimport { hasValue, isNotEmpty, isNotNull, isNotUndefined } from '../../../shared/empty.util';\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { FormComponent } from '../../../shared/form/form.component';\nimport { FormService } from '../../../shared/form/form.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { SubmissionService } from '../../submission.service';\nimport { SectionFormOperationsService } from '../form/section-form-operations.service';\nimport { SectionDataObject } from '../models/section-data.model';\n\nimport { SectionModelComponent } from '../models/section.model';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SectionsService } from '../sections.service';\nimport { SECTION_LICENSE_FORM_LAYOUT, SECTION_LICENSE_FORM_MODEL } from './section-license.model';\n\n/**\n * This component represents a section that contains the submission license form.\n */\n@Component({\n  selector: 'ds-submission-section-license',\n  styleUrls: ['./section-license.component.scss'],\n  templateUrl: './section-license.component.html',\n})\n@renderSectionFor(SectionsType.License)\nexport class SubmissionSectionLicenseComponent extends SectionModelComponent {\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * The [[DynamicFormLayout]] object\n   * @type {DynamicFormLayout}\n   */\n  public formLayout: DynamicFormLayout = SECTION_LICENSE_FORM_LAYOUT;\n\n  /**\n   * A boolean representing if to show form submit and cancel buttons\n   * @type {boolean}\n   */\n  public displaySubmit = false;\n\n  /**\n   * The submission license text\n   * @type {Array}\n   */\n  public licenseText$: Observable<string>;\n\n  /**\n   * The [[JsonPatchOperationPathCombiner]] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') private formRef: FormComponent;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {CollectionDataService} collectionDataService\n   * @param {FormBuilderService} formBuilderService\n   * @param {SectionFormOperationsService} formOperationsService\n   * @param {FormService} formService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {string} injectedCollectionId\n   * @param {SectionDataObject} injectedSectionData\n   * @param {string} injectedSubmissionId\n   */\n  constructor(protected changeDetectorRef: ChangeDetectorRef,\n              protected collectionDataService: CollectionDataService,\n              protected formBuilderService: FormBuilderService,\n              protected formOperationsService: SectionFormOperationsService,\n              protected formService: FormService,\n              protected operationsBuilder: JsonPatchOperationsBuilder,\n              protected sectionService: SectionsService,\n              protected submissionService: SubmissionService,\n              @Inject('collectionIdProvider') public injectedCollectionId: string,\n              @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n              @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(injectedCollectionId, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize all instance variables and retrieve submission license\n   */\n  onSectionInit() {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.formId = this.formService.getUniqueId(this.sectionData.id);\n    this.formModel = this.formBuilderService.fromJSON(SECTION_LICENSE_FORM_MODEL);\n    const model = this.formBuilderService.findById('granted', this.formModel);\n\n    // Retrieve license accepted status\n    (model as DynamicCheckboxModel).value = (this.sectionData.data as WorkspaceitemSectionLicenseObject).granted;\n\n    this.licenseText$ = this.collectionDataService.findById(this.collectionId, true, true, followLink('license')).pipe(\n      filter((collectionData: RemoteData<Collection>) => isNotUndefined((collectionData.payload))),\n      mergeMap((collectionData: RemoteData<Collection>) => (collectionData.payload as any).license),\n      find((licenseData: RemoteData<License>) => isNotUndefined((licenseData.payload))),\n      map((licenseData: RemoteData<License>) => licenseData.payload.text),\n      startWith(''));\n\n    this.subs.push(\n      // Disable checkbox whether it's in workflow or item scope\n      this.sectionService.isSectionReadOnly(\n        this.submissionId,\n        this.sectionData.id,\n        this.submissionService.getSubmissionScope()).pipe(\n        take(1),\n        filter((isReadOnly) => isReadOnly))\n        .subscribe(() => {\n          model.disabled = true;\n        }),\n\n      this.sectionService.getSectionErrors(this.submissionId, this.sectionData.id).pipe(\n        filter((errors) => isNotEmpty(errors)),\n        distinctUntilChanged())\n        .subscribe((errors) => {\n          // parse errors\n          const newErrors = errors.map((error) => {\n            // When the error path is only on the section,\n            // replace it with the path to the form field to display error also on the form\n            if (error.path === '/sections/license') {\n              // check whether license is not accepted\n              if (!(model as DynamicCheckboxModel).checked) {\n                return Object.assign({}, error, { path: '/sections/license/granted' });\n              } else {\n                return null;\n              }\n            } else {\n              return error;\n            }\n          }).filter((error) => isNotNull(error));\n\n          if (isNotEmpty(newErrors)) {\n            this.sectionService.checkSectionErrors(this.submissionId, this.sectionData.id, this.formId, newErrors);\n            this.sectionData.errors = errors;\n          } else {\n            // Remove any section's errors\n            this.sectionService.dispatchRemoveSectionErrors(this.submissionId, this.sectionData.id);\n          }\n          this.changeDetectorRef.detectChanges();\n        })\n    );\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    const model = this.formBuilderService.findById('granted', this.formModel);\n    return (model as DynamicCheckboxModel).valueChanges.pipe(\n      map((value) => value === true),\n      startWith((model as DynamicCheckboxModel).value));\n  }\n\n  /**\n   * Method called when a form dfChange event is fired.\n   * Dispatch form operations based on changes.\n   */\n  onChange(event: DynamicFormControlEvent) {\n    const path = this.formOperationsService.getFieldPathSegmentedFromChangeEvent(event);\n    const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n    if (value) {\n      this.operationsBuilder.add(this.pathCombiner.getPath(path), value.value.toString(), false, true);\n      // Remove any section's errors\n      this.sectionService.dispatchRemoveSectionErrors(this.submissionId, this.sectionData.id);\n    } else {\n      this.operationsBuilder.remove(this.pathCombiner.getPath(path));\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","import {\n  DynamicDatePickerModelConfig,\n  DynamicFormArrayModelConfig,\n  DynamicFormControlLayout,\n  DynamicFormGroupModelConfig,\n  DynamicSelectModelConfig,\n  MATCH_ENABLED,\n  OR_OPERATOR,\n} from '@ng-dynamic-forms/core';\n\nexport const BITSTREAM_METADATA_FORM_GROUP_CONFIG: DynamicFormGroupModelConfig = {\n  id: 'metadata',\n  group: []\n};\nexport const BITSTREAM_METADATA_FORM_GROUP_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'form-group',\n    label: 'col-form-label'\n  },\n  grid: {\n    label: 'col-sm-3'\n  }\n};\nexport const BITSTREAM_ACCESS_CONDITION_GROUP_CONFIG: DynamicFormGroupModelConfig = {\n  id: 'accessConditionGroup',\n  group: []\n};\n\nexport const BITSTREAM_ACCESS_CONDITION_GROUP_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    host: 'form-group access-condition-group col',\n    container: 'pl-1 pr-1',\n    control: 'form-row '\n  }\n};\n\nexport const BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG: DynamicFormArrayModelConfig = {\n  id: 'accessConditions',\n  groupFactory: null,\n};\nexport const BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT: DynamicFormControlLayout = {\n  grid: {\n    group: 'form-row pt-4',\n  }\n};\n\nexport const BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG: DynamicSelectModelConfig<any> = {\n  id: 'name',\n  label: 'submission.sections.upload.form.access-condition-label',\n  hint: 'submission.sections.upload.form.access-condition-hint',\n  options: []\n};\nexport const BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    host: 'col-12',\n    label: 'col-form-label name-label'\n  }\n};\n\nexport const BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'startDate',\n  label: 'submission.sections.upload.form.from-label',\n  hint: 'submission.sections.upload.form.from-hint',\n  placeholder: 'submission.sections.upload.form.from-placeholder',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt',\n  relations: [\n    {\n      match: MATCH_ENABLED,\n      operator: OR_OPERATOR,\n      when: []\n    }\n  ],\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'submission.sections.upload.form.date-required-from'\n  }\n};\nexport const BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-6'\n  }\n};\n\nexport const BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'endDate',\n  label: 'submission.sections.upload.form.until-label',\n  hint: 'submission.sections.upload.form.until-hint',\n  placeholder: 'submission.sections.upload.form.until-placeholder',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt',\n  relations: [\n    {\n      match: MATCH_ENABLED,\n      operator: OR_OPERATOR,\n      when: []\n    }\n  ],\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'submission.sections.upload.form.date-required-until'\n  }\n};\nexport const BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-6'\n  }\n};\n","<div>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title\">{{'submission.sections.upload.edit.title' | translate}}</h4>\n    <button type=\"button\" class=\"close\" (click)=\"onModalClose()\" aria-label=\"Close\" [disabled]=\"isSaving\">\n      <span aria-hidden=\"true\">×</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n\n    <ds-form *ngIf=\"formModel\"\n             #formRef=\"formComponent\"\n             [formId]=\"formId\"\n             [formModel]=\"formModel\"\n             [displaySubmit]=\"!isSaving\"\n             [displayCancel]=\"!isSaving\"\n             (submitForm)=\"onSubmit()\"\n             (cancel)=\"onModalClose()\"\n             (dfChange)=\"onChange($event)\"></ds-form>\n\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport {\n  DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n  DynamicDateControlModel,\n  DynamicDatePickerModel,\n  DynamicFormArrayGroupModel,\n  DynamicFormArrayModel,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicSelectModel,\n  MATCH_ENABLED,\n  OR_OPERATOR\n} from '@ng-dynamic-forms/core';\n\nimport { WorkspaceitemSectionUploadFileObject } from '../../../../../core/submission/models/workspaceitem-section-upload-file.model';\nimport { FormBuilderService } from '../../../../../shared/form/builder/form-builder.service';\nimport {\n  BITSTREAM_ACCESS_CONDITION_GROUP_CONFIG,\n  BITSTREAM_ACCESS_CONDITION_GROUP_LAYOUT,\n  BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG,\n  BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT,\n  BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG,\n  BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT,\n  BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG,\n  BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT,\n  BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG,\n  BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT,\n  BITSTREAM_METADATA_FORM_GROUP_CONFIG,\n  BITSTREAM_METADATA_FORM_GROUP_LAYOUT\n} from './section-upload-file-edit.model';\nimport { POLICY_DEFAULT_WITH_LIST } from '../../section-upload.component';\nimport { hasNoValue, hasValue, isNotEmpty, isNotNull } from '../../../../../shared/empty.util';\nimport { SubmissionFormsModel } from '../../../../../core/config/models/config-submission-forms.model';\nimport { FormFieldModel } from '../../../../../shared/form/builder/models/form-field.model';\nimport { AccessConditionOption } from '../../../../../core/config/models/config-access-condition-option.model';\nimport { SubmissionService } from '../../../../submission.service';\nimport { FormService } from '../../../../../shared/form/form.service';\nimport { FormComponent } from '../../../../../shared/form/form.component';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { filter, mergeMap, take } from 'rxjs/operators';\nimport { dateToISOFormat } from '../../../../../shared/date.util';\nimport { SubmissionObject } from '../../../../../core/submission/models/submission-object.model';\nimport { WorkspaceitemSectionUploadObject } from '../../../../../core/submission/models/workspaceitem-section-upload.model';\nimport { JsonPatchOperationsBuilder } from '../../../../../core/json-patch/builder/json-patch-operations-builder';\nimport { SubmissionJsonPatchOperationsService } from '../../../../../core/submission/submission-json-patch-operations.service';\nimport { JsonPatchOperationPathCombiner } from '../../../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { SectionUploadService } from '../../section-upload.service';\nimport { Subscription } from 'rxjs';\n\n/**\n * This component represents the edit form for bitstream\n */\n@Component({\n  selector: 'ds-submission-section-upload-file-edit',\n  styleUrls: ['./section-upload-file-edit.component.scss'],\n  templateUrl: './section-upload-file-edit.component.html',\n})\nexport class SubmissionSectionUploadFileEditComponent implements OnInit {\n\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') public formRef: FormComponent;\n\n  /**\n   * The list of available access condition\n   * @type {Array}\n   */\n  public availableAccessConditionOptions: any[];\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  public collectionId: string;\n\n  /**\n   * Define if collection access conditions policy type :\n   * POLICY_DEFAULT_NO_LIST : is not possible to define additional access group/s for the single file\n   * POLICY_DEFAULT_WITH_LIST : is possible to define additional access group/s for the single file\n   * @type {number}\n   */\n  public collectionPolicyType: number;\n\n  /**\n   * The configuration for the bitstream's metadata form\n   * @type {SubmissionFormsModel}\n   */\n  public configMetadataForm: SubmissionFormsModel;\n\n  /**\n   * The bitstream's metadata data\n   * @type {WorkspaceitemSectionUploadFileObject}\n   */\n  public fileData: WorkspaceitemSectionUploadFileObject;\n\n  /**\n   * The bitstream id\n   * @type {string}\n   */\n  public fileId: string;\n\n  /**\n   * The bitstream array key\n   * @type {string}\n   */\n  public fileIndex: string;\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The section id\n   * @type {string}\n   */\n  public sectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  public submissionId: string;\n\n  /**\n   * The list of all available metadata\n   */\n  formMetadata: string[] = [];\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * When `true` form controls are deactivated\n   */\n  isSaving = false;\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  protected subscriptions: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param activeModal\n   * @param {ChangeDetectorRef} cdr\n   * @param {FormBuilderService} formBuilderService\n   * @param {FormService} formService\n   * @param {SubmissionService} submissionService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SectionUploadService} uploadService\n   */\n  constructor(\n    protected activeModal: NgbActiveModal,\n    private cdr: ChangeDetectorRef,\n    private formBuilderService: FormBuilderService,\n    private formService: FormService,\n    private submissionService: SubmissionService,\n    private operationsBuilder: JsonPatchOperationsBuilder,\n    private operationsService: SubmissionJsonPatchOperationsService,\n    private uploadService: SectionUploadService,\n  ) {\n  }\n\n  /**\n   * Initialize form model values\n   *\n   * @param formModel\n   *    The form model\n   */\n  public initModelData(formModel: DynamicFormControlModel[]) {\n    this.fileData.accessConditions.forEach((accessCondition, index) => {\n      Array.of('name', 'startDate', 'endDate')\n        .filter((key) => accessCondition.hasOwnProperty(key) && isNotEmpty(accessCondition[key]))\n        .forEach((key) => {\n          const metadataModel: any = this.formBuilderService.findById(key, formModel, index);\n          if (metadataModel) {\n            if (metadataModel.type === DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER) {\n              const date = new Date(accessCondition[key]);\n              metadataModel.value = {\n                year: date.getUTCFullYear(),\n                month: date.getUTCMonth() + 1,\n                day: date.getUTCDate()\n              };\n            } else {\n              metadataModel.value = accessCondition[key];\n            }\n          }\n        });\n    });\n  }\n\n  /**\n   * Dispatch form model update when changing an access condition\n   *\n   * @param event\n   *    The event emitted\n   */\n  onChange(event: DynamicFormControlEvent) {\n    if (event.model.id === 'name') {\n      this.setOptions(event.model, event.control);\n    }\n  }\n\n  onModalClose() {\n    this.activeModal.dismiss();\n  }\n\n  onSubmit() {\n    this.isSaving = true;\n    this.saveBitstreamData();\n  }\n\n  /**\n   * Update `startDate`, 'groupUUID' and 'endDate' model\n   *\n   * @param model\n   *    The [[DynamicFormControlModel]] object\n   * @param control\n   *    The [[FormControl]] object\n   */\n  public setOptions(model: DynamicFormControlModel, control: FormControl) {\n    let accessCondition: AccessConditionOption = null;\n    this.availableAccessConditionOptions.filter((element) => element.name === control.value)\n      .forEach((element) => accessCondition = element );\n    if (isNotEmpty(accessCondition)) {\n      const showGroups: boolean = accessCondition.hasStartDate === true || accessCondition.hasEndDate === true;\n\n      const startDateControl: FormControl = control.parent.get('startDate') as FormControl;\n      const endDateControl: FormControl = control.parent.get('endDate') as FormControl;\n\n      // Clear previous state\n      startDateControl?.markAsUntouched();\n      endDateControl?.markAsUntouched();\n\n      startDateControl?.setValue(null);\n      control.parent.markAsDirty();\n      endDateControl?.setValue(null);\n\n      if (showGroups) {\n        if (accessCondition.hasStartDate) {\n          const startDateModel = this.formBuilderService.findById(\n            'startDate',\n            (model.parent as DynamicFormArrayGroupModel).group) as DynamicDateControlModel;\n\n          const min = new Date(accessCondition.maxStartDate);\n          startDateModel.max = {\n            year: min.getUTCFullYear(),\n            month: min.getUTCMonth() + 1,\n            day: min.getUTCDate()\n          };\n        }\n        if (accessCondition.hasEndDate) {\n          const endDateModel = this.formBuilderService.findById(\n            'endDate',\n            (model.parent as DynamicFormArrayGroupModel).group) as DynamicDateControlModel;\n\n          const max = new Date(accessCondition.maxEndDate);\n          endDateModel.max = {\n            year: max.getUTCFullYear(),\n            month: max.getUTCMonth() + 1,\n            day: max.getUTCDate()\n          };\n        }\n      }\n    }\n  }\n\n  /**\n   * Dispatch form model init\n   */\n  ngOnInit() {\n    if (this.fileData && this.formId) {\n      this.formModel = this.buildFileEditForm();\n      this.cdr.detectChanges();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeAll();\n  }\n\n  protected retrieveValueFromField(field: any) {\n    const temp = Array.isArray(field) ? field[0] : field;\n    return (temp) ? temp.value : undefined;\n  }\n\n  /**\n   * Initialize form model\n   */\n  protected buildFileEditForm() {\n    const configDescr: FormFieldModel = Object.assign({}, this.configMetadataForm.rows[0].fields[0]);\n    configDescr.repeatable = false;\n    const configForm = Object.assign({}, this.configMetadataForm, {\n      fields: Object.assign([], this.configMetadataForm.rows[0].fields[0], [\n        this.configMetadataForm.rows[0].fields[0],\n        configDescr\n      ])\n    });\n    const formModel: DynamicFormControlModel[] = [];\n    const metadataGroupModelConfig = Object.assign({}, BITSTREAM_METADATA_FORM_GROUP_CONFIG);\n    metadataGroupModelConfig.group = this.formBuilderService.modelFromConfiguration(\n      this.submissionId,\n      configForm,\n      this.collectionId,\n      this.fileData.metadata,\n      this.submissionService.getSubmissionScope()\n    );\n    formModel.push(new DynamicFormGroupModel(metadataGroupModelConfig, BITSTREAM_METADATA_FORM_GROUP_LAYOUT));\n    const accessConditionTypeModelConfig = Object.assign({}, BITSTREAM_FORM_ACCESS_CONDITION_TYPE_CONFIG);\n    const accessConditionsArrayConfig = Object.assign({}, BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_CONFIG);\n    const accessConditionTypeOptions = [];\n\n    if (this.collectionPolicyType === POLICY_DEFAULT_WITH_LIST) {\n      for (const accessCondition of this.availableAccessConditionOptions) {\n        accessConditionTypeOptions.push(\n          {\n            label: accessCondition.name,\n            value: accessCondition.name\n          }\n        );\n      }\n      accessConditionTypeModelConfig.options = accessConditionTypeOptions;\n\n      // Dynamically assign of relation in config. For startdate, endDate, groups.\n      const hasStart = [];\n      const hasEnd = [];\n      const hasGroups = [];\n      this.availableAccessConditionOptions.forEach((condition) => {\n        const showStart: boolean = condition.hasStartDate === true;\n        const showEnd: boolean = condition.hasEndDate === true;\n        const showGroups: boolean = showStart || showEnd;\n        if (showStart) {\n          hasStart.push({id: 'name', value: condition.name});\n        }\n        if (showEnd) {\n          hasEnd.push({id: 'name', value: condition.name});\n        }\n        if (showGroups) {\n          hasGroups.push({id: 'name', value: condition.name});\n        }\n      });\n      const confStart = {relations: [{match: MATCH_ENABLED, operator: OR_OPERATOR, when: hasStart}]};\n      const confEnd = {relations: [{match: MATCH_ENABLED, operator: OR_OPERATOR, when: hasEnd}]};\n\n      accessConditionsArrayConfig.groupFactory = () => {\n        const type = new DynamicSelectModel(accessConditionTypeModelConfig, BITSTREAM_FORM_ACCESS_CONDITION_TYPE_LAYOUT);\n        const startDateConfig = Object.assign({}, BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_CONFIG, confStart);\n        const endDateConfig = Object.assign({}, BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_CONFIG, confEnd);\n\n        const startDate = new DynamicDatePickerModel(startDateConfig, BITSTREAM_FORM_ACCESS_CONDITION_START_DATE_LAYOUT);\n        const endDate = new DynamicDatePickerModel(endDateConfig, BITSTREAM_FORM_ACCESS_CONDITION_END_DATE_LAYOUT);\n        const accessConditionGroupConfig = Object.assign({}, BITSTREAM_ACCESS_CONDITION_GROUP_CONFIG);\n        accessConditionGroupConfig.group = [type];\n        if (hasStart.length > 0) { accessConditionGroupConfig.group.push(startDate); }\n        if (hasEnd.length > 0) { accessConditionGroupConfig.group.push(endDate); }\n        return [new DynamicFormGroupModel(accessConditionGroupConfig, BITSTREAM_ACCESS_CONDITION_GROUP_LAYOUT)];\n      };\n\n      // Number of access conditions blocks in form\n      accessConditionsArrayConfig.initialCount = isNotEmpty(this.fileData.accessConditions) ? this.fileData.accessConditions.length : 1;\n      formModel.push(\n        new DynamicFormArrayModel(accessConditionsArrayConfig, BITSTREAM_ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT)\n      );\n\n    }\n    this.initModelData(formModel);\n    return formModel;\n  }\n\n  /**\n   * Save bitstream metadata\n   */\n  saveBitstreamData() {\n    // validate form\n    this.formService.validateAllFormFields(this.formRef.formGroup);\n    const saveBitstreamDataSubscription = this.formService.isValid(this.formId).pipe(\n      take(1),\n      filter((isValid) => isValid),\n      mergeMap(() => this.formService.getFormData(this.formId)),\n      take(1),\n      mergeMap((formData: any) => {\n        // collect bitstream metadata\n        Object.keys((formData.metadata))\n          .filter((key) => isNotEmpty(formData.metadata[key]))\n          .forEach((key) => {\n            const metadataKey = key.replace(/_/g, '.');\n            const path = `metadata/${metadataKey}`;\n            this.operationsBuilder.add(this.pathCombiner.getPath(path), formData.metadata[key], true);\n          });\n        Object.keys((this.fileData.metadata))\n          .filter((key) => isNotEmpty(this.fileData.metadata[key]))\n          .filter((key) => hasNoValue(formData.metadata[key]))\n          .filter((key) => this.formMetadata.includes(key))\n          .forEach((key) => {\n            const metadataKey = key.replace(/_/g, '.');\n            const path = `metadata/${metadataKey}`;\n            this.operationsBuilder.remove(this.pathCombiner.getPath(path));\n          });\n        const accessConditionsToSave = [];\n        formData.accessConditions\n          .map((accessConditions) => accessConditions.accessConditionGroup)\n          .filter((accessCondition) => isNotEmpty(accessCondition))\n          .forEach((accessCondition) => {\n            let accessConditionOpt;\n\n            this.availableAccessConditionOptions\n              .filter((element) => isNotNull(accessCondition.name) && element.name === accessCondition.name[0].value)\n              .forEach((element) => accessConditionOpt = element);\n\n            if (accessConditionOpt) {\n              const currentAccessCondition = Object.assign({}, accessCondition);\n              currentAccessCondition.name = this.retrieveValueFromField(accessCondition.name);\n\n              /* When start and end date fields are deactivated, their values may be still present in formData,\n              therefore it is necessary to delete them if they're not allowed by the current access condition option. */\n              if (!accessConditionOpt.hasStartDate) {\n                delete currentAccessCondition.startDate;\n              } else if (accessCondition.startDate) {\n                const startDate = this.retrieveValueFromField(accessCondition.startDate);\n                currentAccessCondition.startDate = dateToISOFormat(startDate);\n              }\n              if (!accessConditionOpt.hasEndDate) {\n                delete currentAccessCondition.endDate;\n              } else if (accessCondition.endDate) {\n                const endDate = this.retrieveValueFromField(accessCondition.endDate);\n                currentAccessCondition.endDate = dateToISOFormat(endDate);\n              }\n              accessConditionsToSave.push(currentAccessCondition);\n            }\n          });\n\n        if (isNotEmpty(accessConditionsToSave)) {\n          this.operationsBuilder.add(this.pathCombiner.getPath('accessConditions'), accessConditionsToSave, true);\n        }\n\n        // dispatch a PATCH request to save metadata\n        return this.operationsService.jsonPatchByResourceID(\n          this.submissionService.getSubmissionObjectLinkName(),\n          this.submissionId,\n          this.pathCombiner.rootElement,\n          this.pathCombiner.subRootElement);\n      })\n    ).subscribe((result: SubmissionObject[]) => {\n      if (result[0].sections[this.sectionId]) {\n        const uploadSection = (result[0].sections[this.sectionId] as WorkspaceitemSectionUploadObject);\n        Object.keys(uploadSection.files)\n          .filter((key) => uploadSection.files[key].uuid === this.fileId)\n          .forEach((key) => this.uploadService.updateFileData(\n            this.submissionId, this.sectionId, this.fileId, uploadSection.files[key])\n          );\n      }\n      this.isSaving = false;\n      this.activeModal.close();\n    });\n    this.subscriptions.push(saveBitstreamDataSubscription);\n  }\n\n  private unsubscribeAll() {\n    this.subscriptions.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n}\n","<ng-container *ngFor=\"let accessCondition of accessConditionsList\">\n  <span *ngIf=\"accessCondition.action == 'DEFAULT_BITSTREAM_READ'\" class=\"badge badge-primary mt-3 mr-2\">\n    {{accessCondition.name}} {{accessCondition.startDate}} {{accessCondition.endDate}}\n  </span>\n  <span *ngIf=\"accessCondition.name == 'lease'\" class=\"badge badge-primary mt-3 mr-2\">{{accessCondition.name}} from {{accessCondition.endDate}}</span>\n  <span *ngIf=\"accessCondition.name == 'embargo'\" class=\"badge badge-dark mt-3 mr-2\">{{accessCondition.name}} until {{accessCondition.startDate}}</span>\n  <br>\n</ng-container>\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { find } from 'rxjs/operators';\n\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { ResourcePolicy } from '../../../../core/resource-policy/models/resource-policy.model';\nimport { isEmpty } from '../../../../shared/empty.util';\nimport { Group } from '../../../../core/eperson/models/group.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\n\n/**\n * This component represents a badge that describe an access condition\n */\n@Component({\n  selector: 'ds-submission-section-upload-access-conditions',\n  templateUrl: './submission-section-upload-access-conditions.component.html',\n})\nexport class SubmissionSectionUploadAccessConditionsComponent implements OnInit {\n\n  /**\n   * The list of resource policy\n   * @type {Array}\n   */\n  @Input() accessConditions: ResourcePolicy[];\n\n  /**\n   * The list of access conditions\n   * @type {Array}\n   */\n  public accessConditionsList = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {GroupDataService} groupService\n   */\n  constructor(private groupService: GroupDataService) {}\n\n  /**\n   * Retrieve access conditions list\n   */\n  ngOnInit() {\n    this.accessConditions.forEach((accessCondition: ResourcePolicy) => {\n      if (isEmpty(accessCondition.name)) {\n        this.groupService.findByHref(accessCondition._links.group.href).pipe(\n          find((rd: RemoteData<Group>) => !rd.isResponsePending && rd.hasSucceeded))\n          .subscribe((rd: RemoteData<Group>) => {\n            const group: Group = rd.payload;\n            const accessConditionEntry = Object.assign({}, accessCondition);\n            accessConditionEntry.name = group.name;\n            this.accessConditionsList.push(accessConditionEntry);\n          });\n      } else {\n        this.accessConditionsList.push(accessCondition);\n      }\n    });\n  }\n}\n","<div>\n  <ng-container *ngIf=\"metadata\">\n    <ng-container *ngFor=\"let entry of getAllMetadataValue(fileTitleKey)\">\n      <ng-container *ngIf=\"entry.value !== ''\">\n        <h5>\n          {{entry.value}}\n        </h5>\n      </ng-container>\n      <ng-container *ngIf=\"entry.value === ''\">\n        <h5 *ngIf=\"metadata[fileTitleKey].indexOf(entry) === 0\">\n          <span class=\"text-muted\">{{'submission.sections.upload.no-entry' | translate}} {{fileTitleKey}}</span>\n        </h5>\n      </ng-container>\n      <span class=\"clearfix\"></span>\n    </ng-container>\n    <ng-container *ngFor=\"let entry of getAllMetadataValue(fileDescrKey)\">\n      <ng-container *ngIf=\"entry.value !== ''\">\n          {{entry.value | dsTruncate:['150']}}\n      </ng-container>\n      <ng-container *ngIf=\"entry.value === ''\">\n        <span *ngIf=\"metadata[fileDescrKey].indexOf(entry) === 0\" class=\"text-muted\">{{'submission.sections.upload.no-entry' | translate}} {{fileDescrKey}}</span>\n      </ng-container>\n      <span class=\"clearfix\"></span>\n    </ng-container>\n  </ng-container>\n\n  <span class=\"clearfix\"></span>\n  <ds-submission-section-upload-access-conditions [accessConditions]=\"fileData.accessConditions\"></ds-submission-section-upload-access-conditions>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { WorkspaceitemSectionUploadFileObject } from '../../../../../core/submission/models/workspaceitem-section-upload-file.model';\nimport { isNotEmpty } from '../../../../../shared/empty.util';\nimport { Metadata } from '../../../../../core/shared/metadata.utils';\nimport { MetadataMap, MetadataValue } from '../../../../../core/shared/metadata.models';\n\n/**\n * This component allow to show bitstream's metadata\n */\n@Component({\n  selector: 'ds-submission-section-upload-file-view',\n  templateUrl: './section-upload-file-view.component.html',\n})\nexport class SubmissionSectionUploadFileViewComponent implements OnInit {\n\n  /**\n   * The bitstream's metadata data\n   * @type {WorkspaceitemSectionUploadFileObject}\n   */\n  @Input() fileData: WorkspaceitemSectionUploadFileObject;\n\n  /**\n   * The [[MetadataMap]] object\n   * @type {MetadataMap}\n   */\n  public metadata: MetadataMap = Object.create({});\n\n  /**\n   * The bitstream's title key\n   * @type {string}\n   */\n  public fileTitleKey = 'Title';\n\n  /**\n   * The bitstream's description key\n   * @type {string}\n   */\n  public fileDescrKey = 'Description';\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    if (isNotEmpty(this.fileData.metadata)) {\n      this.metadata[this.fileTitleKey] = Metadata.all(this.fileData.metadata, 'dc.title');\n      this.metadata[this.fileDescrKey] = Metadata.all(this.fileData.metadata, 'dc.description');\n    }\n  }\n\n  /**\n   * Gets all matching metadata in the map(s)\n   *\n   * @param metadataKey\n   *    The metadata key(s) in scope\n   * @returns {MetadataValue[]}\n   *    The matching values\n   */\n  getAllMetadataValue(metadataKey: string): MetadataValue[] {\n    return Metadata.all(this.metadata, metadataKey);\n  }\n}\n","<ng-container *ngIf=\"fileData\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n      <!--ds-thumbnail [thumbnail]=\"bitstreamsList[bitstreamKey].url | async\"></ds-thumbnail-->\n      <ds-thumbnail [thumbnail]=\"fileData?.thumbnail\"></ds-thumbnail>\n    </div>\n    <div class=\"col-md-10\">\n      <div class=\"float-left w-75\">\n        <h3>{{fileName}} <span class=\"text-muted\">({{fileData?.sizeBytes | dsFileSize}})</span></h3>\n      </div>\n      <div class=\"float-right w-15\">\n        <ng-container>\n          <ds-file-download-link [cssClasses]=\"'btn btn-link-focus'\" [isBlank]=\"true\" [bitstream]=\"getBitstream()\" [enableRequestACopy]=\"false\">\n            <i class=\"fa fa-download fa-2x text-normal\" aria-hidden=\"true\"></i>\n          </ds-file-download-link>\n          <button class=\"btn btn-link-focus\"\n                  [attr.aria-label]=\"'submission.sections.upload.edit.title' | translate\"\n                  title=\"{{ 'submission.sections.upload.edit.title' | translate }}\"\n                  (click)=\"$event.preventDefault();editBitstreamData();\">\n            <i class=\"fa fa-edit fa-2x text-normal\"></i>\n          </button>\n          <button class=\"btn btn-link-focus\"\n                  [attr.aria-label]=\"'submission.sections.upload.delete.confirm.title' | translate\"\n                  title=\"{{ 'submission.sections.upload.delete.confirm.title' | translate }}\"\n                  [disabled]=\"(processingDelete$ | async)\"\n                  (click)=\"$event.preventDefault();confirmDelete(content);\">\n            <i *ngIf=\"(processingDelete$ | async)\" class=\"fas fa-circle-notch fa-spin fa-2x text-danger\"></i>\n            <i *ngIf=\"!(processingDelete$ | async)\" class=\"fa fa-trash fa-2x text-danger\"></i>\n          </button>\n        </ng-container>\n      </div>\n      <div class=\"clearfix\"></div>\n      <ds-submission-section-upload-file-view [fileData]=\"fileData\"></ds-submission-section-upload-file-view>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #content let-c=\"close\" let-d=\"dismiss\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title text-danger\">{{ 'submission.sections.upload.delete.confirm.title' | translate }}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('cancel')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{ 'submission.sections.upload.delete.confirm.info' | translate }}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"c('cancel')\">{{ 'submission.sections.upload.delete.confirm.cancel' | translate }}</button>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"c('ok')\">{{ 'submission.sections.upload.delete.confirm.submit' | translate }}</button>\n  </div>\n</ng-template>\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, ViewChild } from '@angular/core';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { DynamicFormControlModel, } from '@ng-dynamic-forms/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SectionUploadService } from '../section-upload.service';\nimport { hasValue, isNotUndefined } from '../../../../shared/empty.util';\nimport { FormService } from '../../../../shared/form/form.service';\nimport { JsonPatchOperationsBuilder } from '../../../../core/json-patch/builder/json-patch-operations-builder';\nimport { JsonPatchOperationPathCombiner } from '../../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { WorkspaceitemSectionUploadFileObject } from '../../../../core/submission/models/workspaceitem-section-upload-file.model';\nimport { SubmissionFormsModel } from '../../../../core/config/models/config-submission-forms.model';\nimport { SubmissionService } from '../../../submission.service';\nimport { HALEndpointService } from '../../../../core/shared/hal-endpoint.service';\nimport { SubmissionJsonPatchOperationsService } from '../../../../core/submission/submission-json-patch-operations.service';\nimport { SubmissionSectionUploadFileEditComponent } from './edit/section-upload-file-edit.component';\nimport { Bitstream } from '../../../../core/shared/bitstream.model';\nimport { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap/modal/modal-config';\n\n/**\n * This component represents a single bitstream contained in the submission\n */\n@Component({\n  selector: 'ds-submission-upload-section-file',\n  styleUrls: ['./section-upload-file.component.scss'],\n  templateUrl: './section-upload-file.component.html',\n})\nexport class SubmissionSectionUploadFileComponent implements OnChanges, OnInit {\n\n  /**\n   * The list of available access condition\n   * @type {Array}\n   */\n  @Input() availableAccessConditionOptions: any[];\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * Define if collection access conditions policy type :\n   * POLICY_DEFAULT_NO_LIST : is not possible to define additional access group/s for the single file\n   * POLICY_DEFAULT_WITH_LIST : is possible to define additional access group/s for the single file\n   * @type {number}\n   */\n  @Input() collectionPolicyType: number;\n\n  /**\n   * The configuration for the bitstream's metadata form\n   * @type {SubmissionFormsModel}\n   */\n  @Input() configMetadataForm: SubmissionFormsModel;\n\n  /**\n   * The bitstream id\n   * @type {string}\n   */\n  @Input() fileId: string;\n\n  /**\n   * The bitstream array key\n   * @type {string}\n   */\n  @Input() fileIndex: string;\n\n  /**\n   * The bitstream id\n   * @type {string}\n   */\n  @Input() fileName: string;\n\n  /**\n   * The section id\n   * @type {string}\n   */\n  @Input() sectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The [[SubmissionSectionUploadFileEditComponent]] reference\n   * @type {SubmissionSectionUploadFileEditComponent}\n   */\n  @ViewChild(SubmissionSectionUploadFileEditComponent) fileEditComp: SubmissionSectionUploadFileEditComponent;\n\n\n  /**\n   * The bitstream's metadata data\n   * @type {WorkspaceitemSectionUploadFileObject}\n   */\n  public fileData: WorkspaceitemSectionUploadFileObject;\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * A boolean representing if to show bitstream edit form\n   * @type {boolean}\n   */\n  public readMode: boolean;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * A boolean representing if a submission delete operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  public processingDelete$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subscriptions: Subscription[] = [];\n\n  /**\n   * Array containing all the form metadata defined in configMetadataForm\n   * @type {Array}\n   */\n  protected formMetadata: string[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {FormService} formService\n   * @param {HALEndpointService} halService\n   * @param {NgbModal} modalService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SubmissionService} submissionService\n   * @param {SectionUploadService} uploadService\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private formService: FormService,\n    private halService: HALEndpointService,\n    private modalService: NgbModal,\n    private operationsBuilder: JsonPatchOperationsBuilder,\n    private operationsService: SubmissionJsonPatchOperationsService,\n    private submissionService: SubmissionService,\n    private uploadService: SectionUploadService,\n  ) {\n    this.readMode = true;\n  }\n\n  /**\n   * Retrieve bitstream's metadata\n   */\n  ngOnChanges() {\n    if (this.availableAccessConditionOptions) {\n      // Retrieve file state\n      this.subscriptions.push(\n        this.uploadService\n          .getFileData(this.submissionId, this.sectionId, this.fileId).pipe(\n            filter((bitstream) => isNotUndefined(bitstream)))\n          .subscribe((bitstream) => {\n              this.fileData = bitstream;\n            }\n          )\n      );\n    }\n  }\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    this.formId = this.formService.getUniqueId(this.fileId);\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionId, 'files', this.fileIndex);\n    this.loadFormMetadata();\n  }\n\n  /**\n   * Show confirmation dialog for delete\n   */\n  public confirmDelete(content) {\n    this.modalService.open(content).result.then(\n      (result) => {\n        if (result === 'ok') {\n          this.processingDelete$.next(true);\n          this.deleteFile();\n        }\n      }\n    );\n  }\n\n  /**\n   * Build a Bitstream object by the current file uuid\n   *\n   * @return Bitstream object\n   */\n  public getBitstream(): Bitstream {\n    return Object.assign(new Bitstream(), {\n      uuid: this.fileData.uuid\n    });\n  }\n\n  editBitstreamData() {\n\n    const options: NgbModalOptions = {\n      size: 'xl',\n      backdrop: 'static',\n    };\n\n    const activeModal = this.modalService.open(SubmissionSectionUploadFileEditComponent, options);\n\n    activeModal.componentInstance.availableAccessConditionOptions = this.availableAccessConditionOptions;\n    activeModal.componentInstance.collectionId = this.collectionId;\n    activeModal.componentInstance.collectionPolicyType = this.collectionPolicyType;\n    activeModal.componentInstance.configMetadataForm = this.configMetadataForm;\n    activeModal.componentInstance.fileData = this.fileData;\n    activeModal.componentInstance.fileId = this.fileId;\n    activeModal.componentInstance.fileIndex = this.fileIndex;\n    activeModal.componentInstance.formId = this.formId;\n    activeModal.componentInstance.sectionId = this.sectionId;\n    activeModal.componentInstance.formMetadata = this.formMetadata;\n    activeModal.componentInstance.pathCombiner = this.pathCombiner;\n    activeModal.componentInstance.submissionId = this.submissionId;\n\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeAll();\n  }\n\n  unsubscribeAll() {\n    this.subscriptions.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n  protected loadFormMetadata() {\n    this.configMetadataForm.rows.forEach((row) => {\n      row.fields.forEach((field) => {\n        field.selectableMetadata.forEach((metadatum) => {\n          this.formMetadata.push(metadatum.metadata);\n        });\n      });\n    }\n    );\n  }\n\n  /**\n   * Delete bitstream from submission\n   */\n  protected deleteFile() {\n    this.operationsBuilder.remove(this.pathCombiner.getPath());\n    this.subscriptions.push(this.operationsService.jsonPatchByResourceID(\n      this.submissionService.getSubmissionObjectLinkName(),\n      this.submissionId,\n      this.pathCombiner.rootElement,\n      this.pathCombiner.subRootElement)\n      .subscribe(() => {\n        this.uploadService.removeUploadedFile(this.submissionId, this.sectionId, this.fileId);\n        this.processingDelete$.next(false);\n      }));\n  }\n\n}\n","<div class=\"mb-4 ccLicense-select\">\n  <ds-select\n    [disabled]=\"!submissionCcLicenses\">\n\n    <ng-container class=\"selection\">\n      <span *ngIf=\"!submissionCcLicenses\">\n        <ds-loading></ds-loading>\n      </span>\n      <span *ngIf=\"getSelectedCcLicense()\">\n        {{ getSelectedCcLicense().name }}\n      </span>\n      <span *ngIf=\"submissionCcLicenses && !getSelectedCcLicense()\">\n        <ng-container *ngIf=\"storedCcLicenseLink\">\n          {{ 'submission.sections.ccLicense.change' | translate }}\n        </ng-container>\n        <ng-container *ngIf=\"!storedCcLicenseLink\">\n          {{ 'submission.sections.ccLicense.select' | translate }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <ng-container class=\"menu\">\n      <button *ngIf=\"submissionCcLicenses?.length == 0\"\n              class=\"dropdown-item disabled\">\n        {{ 'submission.sections.ccLicense.none' | translate }}\n      </button>\n      <button *ngFor=\"let license of submissionCcLicenses\"\n              class=\"dropdown-item\"\n              (click)=\"selectCcLicense(license)\">\n        {{ license.name }}\n      </button>\n    </ng-container>\n\n  </ds-select>\n</div>\n\n<ng-container *ngIf=\"getSelectedCcLicense()\">\n\n  <div *ngFor=\"let field of getSelectedCcLicense().fields\"\n       class=\"mb-4\">\n\n    <div class=\"d-flex flex-row\">\n      <div class=\"font-weight-bold {{ field.id }}\">\n        {{ field.label }}\n      </div>\n      <button\n        class=\"btn btn-outline-info btn-sm ml-2\"\n        (click)=\"openInfoModal(infoModal)\">\n        <i class=\"fas fa-question\"></i>\n      </button>\n    </div>\n\n    <ng-template #infoModal>\n\n      <div>\n\n        <div class=\"modal-header mb-4 \">\n          <div>\n            <h4>\n              {{ field.label }}\n            </h4>\n            <div [innerHTML]=\"field.description\"></div>\n          </div>\n          <button type=\"button\" class=\"close\"\n                  (click)=\"closeInfoModal()\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">×</span>\n          </button>\n        </div>\n\n        <div class=\"modal-body\">\n          <div *ngFor=\"let value of field.enums\"\n               class=\"mb-4\">\n            <h5>\n              {{ value.label }}\n            </h5>\n            <div [innerHTML]=\"value.description\" class=\"font-weight-light\"></div>\n          </div>\n        </div>\n\n      </div>\n\n    </ng-template>\n\n    <ds-select *ngIf=\"field.enums?.length > 5\">\n      <ng-container class=\"selection\" *ngVar=\"getSelectedOption(getSelectedCcLicense(), field) as option\">\n        <span *ngIf=\"option\">\n          {{ option.label }}\n        </span>\n        <span *ngIf=\"!option\">\n          {{ 'submission.sections.ccLicense.option.select' | translate }}\n        </span>\n      </ng-container>\n      <ng-container class=\"menu\">\n        <div class=\"options-select-menu overflow-auto\">\n          <button *ngFor=\"let option of field.enums\"\n                  class=\"dropdown-item\"\n                  (click)=\"selectOption(getSelectedCcLicense(), field, option)\">\n            {{ option.label }}\n          </button>\n        </div>\n      </ng-container>\n    </ds-select>\n\n    <ng-container *ngIf=\"field.enums?.length <= 5\">\n      <div *ngFor=\"let option of field.enums\"\n           class=\"d-flex flex-row m-1\">\n        <div (click)=\"selectOption(getSelectedCcLicense(), field, option)\">\n          <input type=\"radio\"\n                 title=\"{{ option.label }}\"\n                 class=\"mr-1\"\n                 [checked]=\"isSelectedOption(getSelectedCcLicense(), field, option)\">\n          <span>{{ option.label }}</span>\n        </div>\n      </div>\n    </ng-container>\n\n  </div>\n\n</ng-container>\n\n<ng-container *ngIf=\"getCcLicenseLink$()\">\n  <ng-container *ngVar=\"getCcLicenseLink$() | async as licenseLink\">\n    <div *ngIf=\"!licenseLink\">\n      <ds-loading></ds-loading>\n    </div>\n    <div *ngIf=\"licenseLink\"\n         class=\"mt-2 p-4 bg-light text-dark\">\n      <div>\n        {{ 'submission.sections.ccLicense.link' | translate }}\n      </div>\n      <a class=\"license-link\" href=\"{{ licenseLink }}\" target=\"_blank\" rel=\"noopener noreferrer\">\n        {{ licenseLink }}\n      </a>\n      <div class=\"m-2\">\n        <div (click)=\"setAccepted(!accepted)\">\n          <input type=\"checkbox\"\n                 title=\"accepted\"\n                 [checked]=\"accepted\">\n          <span>{{ 'submission.sections.ccLicense.confirmation' | translate }}</span>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { Component, Inject } from '@angular/core';\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { Field, Option, SubmissionCcLicence } from '../../../core/submission/models/submission-cc-license.model';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { distinctUntilChanged, filter, map, take } from 'rxjs/operators';\nimport { SubmissionCcLicenseDataService } from '../../../core/submission/submission-cc-license-data.service';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SectionModelComponent } from '../models/section.model';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { SectionsService } from '../sections.service';\nimport { WorkspaceitemSectionCcLicenseObject } from '../../../core/submission/models/workspaceitem-section-cc-license.model';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { isNotEmpty } from '../../../shared/empty.util';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { SubmissionCcLicenseUrlDataService } from '../../../core/submission/submission-cc-license-url-data.service';\n\n/**\n * This component represents the submission section to select the Creative Commons license.\n */\n@Component({\n  selector: 'ds-submission-section-cc-licenses',\n  templateUrl: './submission-section-cc-licenses.component.html',\n  styleUrls: ['./submission-section-cc-licenses.component.scss']\n})\n@renderSectionFor(SectionsType.CcLicense)\nexport class SubmissionSectionCcLicensesComponent extends SectionModelComponent {\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * A boolean representing if this section is loading\n   * @type {boolean}\n   */\n  public isLoading = true;\n\n  /**\n   * The [JsonPatchOperationPathCombiner] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * The list of Subscriptions this component subscribes to.\n   */\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Cache of the available Creative Commons licenses.\n   */\n  submissionCcLicenses: SubmissionCcLicence[];\n\n  /**\n   * Reference to NgbModal\n   */\n  protected modalRef: NgbModalRef;\n\n  /**\n   * The Creative Commons link saved in the workspace item.\n   */\n  get storedCcLicenseLink(): string {\n    return this.data.uri;\n  }\n\n  /**\n   * The accepted state for the selected Creative Commons license.\n   */\n  get accepted(): boolean {\n    if (this.data.accepted === undefined) {\n      return !!this.data.uri;\n    }\n    return this.data.accepted;\n  }\n\n  constructor(\n    protected modalService: NgbModal,\n    protected sectionService: SectionsService,\n    protected submissionCcLicensesDataService: SubmissionCcLicenseDataService,\n    protected submissionCcLicenseUrlDataService: SubmissionCcLicenseUrlDataService,\n    protected operationsBuilder: JsonPatchOperationsBuilder,\n    @Inject('collectionIdProvider') public injectedCollectionId: string,\n    @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n    @Inject('submissionIdProvider') public injectedSubmissionId: string\n  ) {\n    super(\n      injectedCollectionId,\n      injectedSectionData,\n      injectedSubmissionId,\n    );\n  }\n\n  /**\n   * The data of this section.\n   */\n  get data(): WorkspaceitemSectionCcLicenseObject {\n    return this.sectionData.data as WorkspaceitemSectionCcLicenseObject;\n  }\n\n  /**\n   * Select a given Creative Commons license.\n   * @param ccLicense the Creative Commons license to select.\n   */\n  selectCcLicense(ccLicense: SubmissionCcLicence) {\n    if (!!this.getSelectedCcLicense() && this.getSelectedCcLicense().id === ccLicense.id) {\n      return;\n    }\n    this.setAccepted(false);\n    this.updateSectionData({\n      ccLicense: {\n        id: ccLicense.id,\n        fields: {},\n      },\n      uri: undefined,\n    });\n  }\n\n  /**\n   * Get the selected Creative Commons license.\n   */\n  getSelectedCcLicense(): SubmissionCcLicence {\n    if (!this.submissionCcLicenses || !this.data.ccLicense) {\n      return null;\n    }\n    return this.submissionCcLicenses.filter((ccLicense) => ccLicense.id === this.data.ccLicense.id)[0];\n  }\n\n  /**\n   * Select an option for a given license field.\n   * @param ccLicense   the related Creative Commons license.\n   * @param field       the field for which to select an option.\n   * @param option      the option to select.\n   */\n  selectOption(ccLicense: SubmissionCcLicence, field: Field, option: Option) {\n    if (this.isSelectedOption(ccLicense, field, option)) {\n      return;\n    }\n    this.updateSectionData({\n      ccLicense: {\n        id: ccLicense.id,\n        fields: Object.assign({}, this.data.ccLicense.fields, {\n          [field.id]: option\n        }),\n      },\n      accepted: false,\n    });\n  }\n\n  /**\n   * Get the selected option for a given license field.\n   * @param ccLicense   the related Creative Commons license.\n   * @param field       the field for which to get the selected option value.\n   */\n  getSelectedOption(ccLicense: SubmissionCcLicence, field: Field): Option {\n    return this.data.ccLicense.fields[field.id];\n  }\n\n  /**\n   * Whether a given option is selected for a given Creative Commons license field.\n   * @param ccLicense   the related Creative Commons license.\n   * @param field       the field for which to check whether the option is selected.\n   * @param option      the option for which to check whether it is selected.\n   */\n  isSelectedOption(ccLicense: SubmissionCcLicence, field: Field, option: Option): boolean {\n    return this.getSelectedOption(ccLicense, field) && this.getSelectedOption(ccLicense, field).id === option.id;\n  }\n\n  /**\n   * Get the link to the Creative Commons license corresponding with the selected options.\n   */\n  getCcLicenseLink$(): Observable<string> {\n\n    if (!!this.storedCcLicenseLink) {\n      return observableOf(this.storedCcLicenseLink);\n    }\n    if (!this.getSelectedCcLicense() || this.getSelectedCcLicense().fields.some(\n      (field) => !this.getSelectedOption(this.getSelectedCcLicense(), field))) {\n      return undefined;\n    }\n    const selectedCcLicense = this.getSelectedCcLicense();\n    return this.submissionCcLicenseUrlDataService.getCcLicenseLink(\n      selectedCcLicense,\n      new Map(selectedCcLicense.fields.map(\n        (field) => [field, this.getSelectedOption(selectedCcLicense, field)]\n      )),\n    );\n  }\n\n  /**\n   * Open a given info modal.\n   * @param content   the modal content.\n   */\n  openInfoModal(content) {\n    this.modalRef = this.modalService.open(content);\n  }\n\n  /**\n   * Close the info modal.\n   */\n  closeInfoModal() {\n    this.modalRef.close();\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  getSectionStatus(): Observable<boolean> {\n    return observableOf(this.accepted);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Initialize the section.\n   */\n  onSectionInit(): void {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.subscriptions.push(\n      this.sectionService.getSectionState(this.submissionId, this.sectionData.id, SectionsType.CcLicense).pipe(\n        filter((sectionState) => {\n          return isNotEmpty(sectionState) && (isNotEmpty(sectionState.data) || isNotEmpty(sectionState.errorsToShow));\n        }),\n        distinctUntilChanged(),\n        map((sectionState) => sectionState.data as WorkspaceitemSectionCcLicenseObject),\n      ).subscribe((data) => {\n        if (this.data.accepted !== data.accepted) {\n          const path = this.pathCombiner.getPath('uri');\n          if (data.accepted) {\n            this.getCcLicenseLink$().pipe(\n              take(1),\n            ).subscribe((link) => {\n              this.operationsBuilder.add(path, link.toString(), false, true);\n            });\n          } else if (!!this.data.uri) {\n            this.operationsBuilder.remove(path);\n          }\n        }\n        this.sectionData.data = data;\n      }),\n      this.submissionCcLicensesDataService.findAll({ elementsPerPage: 9999 }).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((list) => list.page),\n      ).subscribe(\n        (licenses) => this.submissionCcLicenses = licenses\n      ),\n    );\n  }\n\n  /**\n   * Set the accepted state for the Creative Commons license.\n   * @param accepted  the accepted state for the cc license.\n   */\n  setAccepted(accepted: boolean) {\n    this.updateSectionData({\n      accepted\n    });\n    this.updateSectionStatus();\n  }\n\n  /**\n   * Update the section data for this section.\n   */\n  updateSectionData(data: WorkspaceitemSectionCcLicenseObject) {\n    this.sectionService.updateSectionData(this.submissionId, this.sectionData.id, Object.assign({}, this.data, data));\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { SubmissionState } from '../../submission.reducers';\nimport { isNotUndefined } from '../../../shared/empty.util';\nimport { submissionSectionDataFromIdSelector } from '../../selectors';\nimport { WorkspaceitemSectionAccessesObject } from '../../../core/submission/models/workspaceitem-section-accesses.model';\n\n/**\n * A service that provides methods to handle submission item's accesses condition state.\n */\n@Injectable()\nexport class SectionAccessesService {\n\n  /**\n   * Initialize service variables\n   *\n   * @param {Store<SubmissionState>} store\n   */\n  constructor(private store: Store<SubmissionState>) { }\n\n\n  /**\n   * Return item's accesses condition state.\n   *\n   * @param submissionId\n   *    The submission id\n   * @param sectionId\n   *    The section id\n   * @returns {Observable}\n   *    Emits bitstream's metadata\n   */\n  public getAccessesData(submissionId: string, sectionId: string): Observable<WorkspaceitemSectionAccessesObject> {\n\n    return this.store.select(submissionSectionDataFromIdSelector(submissionId, sectionId)).pipe(\n      filter((state) => isNotUndefined(state)),\n      distinctUntilChanged());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService } from './config.service';\nimport { RequestService } from '../data/request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { ObjectCacheService } from '../cache/object-cache.service';\nimport { dataService } from '../cache/builders/build-decorators';\nimport { SUBMISSION_ACCESSES_TYPE } from './models/config-type';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../core.reducers';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { HttpClient } from '@angular/common/http';\nimport { DefaultChangeAnalyzer } from '../data/default-change-analyzer.service';\nimport { ConfigObject } from './models/config.model';\nimport { SubmissionAccessesModel } from './models/config-submission-accesses.model';\nimport { RemoteData } from '../data/remote-data';\nimport { Observable } from 'rxjs';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\n\n/**\n * Provides methods to retrieve, from REST server, bitstream access conditions configurations applicable during the submission process.\n */\n@Injectable()\n@dataService(SUBMISSION_ACCESSES_TYPE)\nexport class SubmissionAccessesConfigService extends ConfigService {\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected store: Store<CoreState>,\n    protected objectCache: ObjectCacheService,\n    protected halService: HALEndpointService,\n    protected notificationsService: NotificationsService,\n    protected http: HttpClient,\n    protected comparator: DefaultChangeAnalyzer<SubmissionAccessesModel>\n  ) {\n    super(requestService, rdbService, null, objectCache, halService, notificationsService, http, comparator, 'submissionaccessoptions');\n  }\n\n  findByHref(href: string, useCachedVersionIfAvailable = true, reRequestOnStale = true, ...linksToFollow): Observable<RemoteData<SubmissionAccessesModel>> {\n    return super.findByHref(href, useCachedVersionIfAvailable, reRequestOnStale, ...linksToFollow as FollowLinkConfig<ConfigObject>[]) as Observable<RemoteData<SubmissionAccessesModel>>;\n  }\n}\n","import {\n  DynamicDatePickerModelConfig,\n  DynamicFormArrayModelConfig,\n  DynamicFormControlLayout,\n  DynamicFormGroupModelConfig,\n  DynamicSelectModelConfig,\n  MATCH_ENABLED,\n  OR_OPERATOR,\n} from '@ng-dynamic-forms/core';\nimport { DynamicCheckboxModelConfig } from '@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox.model';\n\n\nexport const ACCESS_FORM_CHECKBOX_CONFIG: DynamicCheckboxModelConfig = {\n  id: 'discoverable',\n  name: 'discoverable'\n};\n\nexport const ACCESS_FORM_CHECKBOX_LAYOUT = {\n\n  element: {\n    container: 'custom-control custom-checkbox pl-1',\n    control: 'custom-control-input',\n    label: 'custom-control-label pt-1'\n  }\n};\n\nexport const ACCESS_CONDITION_GROUP_CONFIG: DynamicFormGroupModelConfig = {\n  id: 'accessConditionGroup',\n  group: []\n};\n\nexport const ACCESS_CONDITION_GROUP_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    host: 'form-group access-condition-group col',\n    container: 'pl-1 pr-1',\n    control: 'form-row '\n  }\n};\n\nexport const ACCESS_CONDITIONS_FORM_ARRAY_CONFIG: DynamicFormArrayModelConfig = {\n  id: 'accessCondition',\n  groupFactory: null,\n};\nexport const ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT: DynamicFormControlLayout = {\n  grid: {\n    group: 'form-row pt-4',\n  }\n};\n\nexport const FORM_ACCESS_CONDITION_TYPE_CONFIG: DynamicSelectModelConfig<any> = {\n  id: 'name',\n  label: 'submission.sections.accesses.form.access-condition-label',\n  hint: 'submission.sections.accesses.form.access-condition-hint',\n  options: []\n};\nexport const FORM_ACCESS_CONDITION_TYPE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    host: 'col-12',\n    label: 'col-form-label name-label'\n  }\n};\n\nexport const FORM_ACCESS_CONDITION_START_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'startDate',\n  label: 'submission.sections.accesses.form.from-label',\n  hint: 'submission.sections.accesses.form.from-hint',\n  placeholder: 'submission.sections.accesses.form.from-placeholder',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt',\n  relations: [\n    {\n      match: MATCH_ENABLED,\n      operator: OR_OPERATOR,\n      when: []\n    }\n  ],\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'submission.sections.accesses.form.date-required-from'\n  }\n};\nexport const FORM_ACCESS_CONDITION_START_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-6'\n  }\n};\n\nexport const FORM_ACCESS_CONDITION_END_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'endDate',\n  label: 'submission.sections.accesses.form.until-label',\n  hint: 'submission.sections.accesses.form.until-hint',\n  placeholder: 'submission.sections.accesses.form.until-placeholder',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt',\n  relations: [\n    {\n      match: MATCH_ENABLED,\n      operator: OR_OPERATOR,\n      when: []\n    }\n  ],\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'submission.sections.accesses.form.date-required-until'\n  }\n};\nexport const FORM_ACCESS_CONDITION_END_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-6'\n  }\n};\n","<ds-form *ngIf=\"!!formModel\" #formRef=\"formComponent\"\n         [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\"\n         (dfChange)=\"onChange($event)\"\n         (removeArrayItem)=\"onRemove($event)\"></ds-form>\n","import { SectionAccessesService } from './section-accesses.service';\nimport { Component, Inject, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { filter, map, mergeMap, take } from 'rxjs/operators';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { renderSectionFor } from '../sections-decorator';\nimport { SectionsType } from '../sections-type';\nimport { SectionDataObject } from '../models/section-data.model';\nimport { SectionsService } from '../sections.service';\nimport { SectionModelComponent } from '../models/section.model';\nimport {\n  DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX,\n  DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n  DynamicCheckboxModel,\n  DynamicDatePickerModel,\n  DynamicFormArrayModel,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicSelectModel,\n  MATCH_ENABLED,\n  OR_OPERATOR\n} from '@ng-dynamic-forms/core';\n\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport {\n  ACCESS_CONDITION_GROUP_CONFIG,\n  ACCESS_CONDITION_GROUP_LAYOUT,\n  ACCESS_CONDITIONS_FORM_ARRAY_CONFIG,\n  ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT,\n  ACCESS_FORM_CHECKBOX_CONFIG,\n  ACCESS_FORM_CHECKBOX_LAYOUT,\n  FORM_ACCESS_CONDITION_END_DATE_CONFIG,\n  FORM_ACCESS_CONDITION_END_DATE_LAYOUT,\n  FORM_ACCESS_CONDITION_START_DATE_CONFIG,\n  FORM_ACCESS_CONDITION_START_DATE_LAYOUT,\n  FORM_ACCESS_CONDITION_TYPE_CONFIG,\n  FORM_ACCESS_CONDITION_TYPE_LAYOUT\n} from './section-accesses.model';\nimport { hasValue, isNotEmpty, isNotNull } from '../../../shared/empty.util';\nimport { WorkspaceitemSectionAccessesObject } from '../../../core/submission/models/workspaceitem-section-accesses.model';\nimport { SubmissionAccessesConfigService } from '../../../core/config/submission-accesses-config.service';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { FormComponent } from '../../../shared/form/form.component';\nimport { FormService } from '../../../shared/form/form.service';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { SectionFormOperationsService } from '../form/section-form-operations.service';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { AccessesConditionOption } from '../../../core/config/models/config-accesses-conditions-options.model';\nimport { SubmissionJsonPatchOperationsService } from '../../../core/submission/submission-json-patch-operations.service';\nimport { dateToISOFormat } from '../../../shared/date.util';\n\n/**\n * This component represents a section for managing item's access conditions.\n */\n@Component({\n  selector: 'ds-section-accesses',\n  templateUrl: './section-accesses.component.html',\n  styleUrls: ['./section-accesses.component.scss']\n})\n@renderSectionFor(SectionsType.AccessesCondition)\nexport class SubmissionSectionAccessesComponent extends SectionModelComponent {\n\n  /**\n   * The FormComponent reference\n   */\n  @ViewChild('formRef') public formRef: FormComponent;\n\n  /**\n   * List of available access conditions that could be set to item\n   */\n  public availableAccessConditionOptions: AccessesConditionOption[];  // List of accessConditions that an user can select\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The accesses section data\n   * @type {WorkspaceitemSectionAccessesObject}\n   */\n  public accessesData: WorkspaceitemSectionAccessesObject;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * The [[JsonPatchOperationPathCombiner]] object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Defines if the access discoverable property can be managed\n   */\n  public canChangeDiscoverable: boolean;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {SectionsService} sectionService\n   * @param {SectionDataObject} injectedSectionData\n   * @param {FormService} formService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SectionFormOperationsService} formOperationsService\n   * @param {FormBuilderService} formBuilderService\n   * @param {TranslateService} translate\n   * @param {SubmissionAccessesConfigService} accessesConfigService\n   * @param {SectionAccessesService} accessesService\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {string} injectedSubmissionId\n   */\n  constructor(\n    protected sectionService: SectionsService,\n    private formBuilderService: FormBuilderService,\n    private accessesConfigService: SubmissionAccessesConfigService,\n    private accessesService: SectionAccessesService,\n    protected formOperationsService: SectionFormOperationsService,\n    protected operationsBuilder: JsonPatchOperationsBuilder,\n    private formService: FormService,\n    private translate: TranslateService,\n    private operationsService: SubmissionJsonPatchOperationsService,\n    @Inject('sectionDataProvider') public injectedSectionData: SectionDataObject,\n    @Inject('submissionIdProvider') public injectedSubmissionId: string) {\n    super(undefined, injectedSectionData, injectedSubmissionId);\n  }\n\n  /**\n   * Initialize form model values\n   *\n   * @param formModel\n   *    The form model\n   */\n  public initModelData(formModel: DynamicFormControlModel[]) {\n    this.accessesData.accessConditions.forEach((accessCondition, index) => {\n      Array.of('name', 'startDate', 'endDate')\n        .filter((key) => accessCondition.hasOwnProperty(key) && isNotEmpty(accessCondition[key]))\n        .forEach((key) => {\n          const metadataModel: any = this.formBuilderService.findById(key, formModel, index);\n          if (metadataModel) {\n            if (metadataModel.type === DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER) {\n              const date = new Date(accessCondition[key]);\n              metadataModel.value = {\n                year: date.getUTCFullYear(),\n                month: date.getUTCMonth() + 1,\n                day: date.getUTCDate()\n              };\n            } else {\n              metadataModel.value = accessCondition[key];\n            }\n          }\n        });\n    });\n  }\n\n  /**\n   * Method called when a form dfChange event is fired.\n   * Dispatch form operations based on changes.\n   */\n  onChange(event: DynamicFormControlEvent) {\n    if (event.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX) {\n      const path = this.formOperationsService.getFieldPathSegmentedFromChangeEvent(event);\n      const value = this.formOperationsService.getFieldValueFromChangeEvent(event);\n      this.operationsBuilder.replace(this.pathCombiner.getPath(path), value.value, true);\n    } else {\n      if (event.model.id === FORM_ACCESS_CONDITION_TYPE_CONFIG.id) {\n        // Clear previous state when switching through different access conditions\n\n        const startDateControl: FormControl = event.control.parent.get('startDate') as FormControl;\n        const endDateControl: FormControl = event.control.parent.get('endDate') as FormControl;\n\n        startDateControl?.markAsUntouched();\n        endDateControl?.markAsUntouched();\n\n        startDateControl?.setValue(null);\n        endDateControl?.setValue(null);\n        event.control.parent.markAsDirty();\n      }\n\n      // validate form\n      this.formService.validateAllFormFields(this.formRef.formGroup);\n      this.formService.isValid(this.formId).pipe(\n        take(1),\n        filter((isValid) => isValid),\n        mergeMap(() => this.formService.getFormData(this.formId)),\n        take(1)\n      ).subscribe((formData: any) => {\n        const accessConditionsToSave = [];\n        formData.accessCondition\n          .map((accessConditions) => accessConditions.accessConditionGroup)\n          .filter((accessCondition) => isNotEmpty(accessCondition))\n          .forEach((accessCondition) => {\n            let accessConditionOpt;\n\n            this.availableAccessConditionOptions\n              .filter((element) => isNotNull(accessCondition.name) && element.name === accessCondition.name[0].value)\n              .forEach((element) => accessConditionOpt = element);\n\n            if (accessConditionOpt) {\n              const currentAccessCondition = Object.assign({}, accessCondition);\n              currentAccessCondition.name = this.retrieveValueFromField(accessCondition.name);\n\n              /* When start and end date fields are deactivated, their values may be still present in formData,\n              therefore it is necessary to delete them if they're not allowed by the current access condition option. */\n              if (!accessConditionOpt.hasStartDate) {\n                delete currentAccessCondition.startDate;\n              } else if (accessCondition.startDate) {\n                const startDate = this.retrieveValueFromField(accessCondition.startDate);\n                currentAccessCondition.startDate = dateToISOFormat(startDate);\n              }\n              if (!accessConditionOpt.hasEndDate) {\n                delete currentAccessCondition.endDate;\n              } else if (accessCondition.endDate) {\n                const endDate = this.retrieveValueFromField(accessCondition.endDate);\n                currentAccessCondition.endDate = dateToISOFormat(endDate);\n              }\n              accessConditionsToSave.push(currentAccessCondition);\n            }\n          });\n\n        this.operationsBuilder.add(this.pathCombiner.getPath('accessConditions'), accessConditionsToSave, true);\n      });\n    }\n  }\n\n  /**\n   * Method called when a form removeArrayItem event is fired.\n   * Dispatch remove form operations based on changes.\n   */\n  onRemove(event: DynamicFormControlEvent) {\n    const fieldIndex = this.formOperationsService.getArrayIndexFromEvent(event);\n    const fieldPath = 'accessConditions/' + fieldIndex;\n\n    this.operationsBuilder.remove(this.pathCombiner.getPath(fieldPath));\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  onSectionDestroy() {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * Initialize all instance variables and retrieve collection default access conditions\n   */\n  protected onSectionInit(): void {\n\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', this.sectionData.id);\n    this.formId = this.formService.getUniqueId(this.sectionData.id);\n    const config$ = this.accessesConfigService.findByHref(this.sectionData.config, true, false).pipe(\n      getFirstSucceededRemoteData(),\n      map((config) => config.payload),\n    );\n\n    const accessData$ = this.accessesService.getAccessesData(this.submissionId, this.sectionData.id);\n\n    combineLatest([config$, accessData$]).subscribe(([config, accessData]) => {\n      this.availableAccessConditionOptions = isNotEmpty(config.accessConditionOptions) ? config.accessConditionOptions : [];\n      this.canChangeDiscoverable = !!config.canChangeDiscoverable;\n      this.accessesData = accessData;\n      this.formModel = this.buildFileEditForm();\n    });\n\n\n  }\n\n  /**\n   * Get section status\n   *\n   * @return Observable<boolean>\n   *     the section status\n   */\n  protected getSectionStatus(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Initialize form model\n   */\n  protected buildFileEditForm() {\n\n    const formModel: DynamicFormControlModel[] = [];\n    if (this.canChangeDiscoverable) {\n      const discoverableCheckboxConfig = Object.assign({}, ACCESS_FORM_CHECKBOX_CONFIG, {\n        label: this.translate.instant('submission.sections.accesses.form.discoverable-label'),\n        hint: this.translate.instant('submission.sections.accesses.form.discoverable-description'),\n        value: this.accessesData.discoverable\n      });\n      formModel.push(\n        new DynamicCheckboxModel(discoverableCheckboxConfig, ACCESS_FORM_CHECKBOX_LAYOUT)\n      );\n    }\n\n    const accessConditionTypeModelConfig = Object.assign({}, FORM_ACCESS_CONDITION_TYPE_CONFIG);\n    const accessConditionsArrayConfig = Object.assign({}, ACCESS_CONDITIONS_FORM_ARRAY_CONFIG);\n    const accessConditionTypeOptions = [];\n\n    for (const accessCondition of this.availableAccessConditionOptions) {\n      accessConditionTypeOptions.push(\n        {\n          label: accessCondition.name,\n          value: accessCondition.name\n        }\n      );\n    }\n    accessConditionTypeModelConfig.options = accessConditionTypeOptions;\n\n    // Dynamically assign of relation in config. For startdate, endDate, groups.\n    const hasStart = [];\n    const hasEnd = [];\n    const hasGroups = [];\n    this.availableAccessConditionOptions.forEach((condition) => {\n      const showStart: boolean = condition.hasStartDate === true;\n      const showEnd: boolean = condition.hasEndDate === true;\n      const showGroups: boolean = showStart || showEnd;\n      if (showStart) {\n        hasStart.push({ id: 'name', value: condition.name });\n      }\n      if (showEnd) {\n        hasEnd.push({ id: 'name', value: condition.name });\n      }\n      if (showGroups) {\n        hasGroups.push({ id: 'name', value: condition.name });\n      }\n    });\n    const confStart = { relations: [{ match: MATCH_ENABLED, operator: OR_OPERATOR, when: hasStart }] };\n    const confEnd = { relations: [{ match: MATCH_ENABLED, operator: OR_OPERATOR, when: hasEnd }] };\n\n    accessConditionsArrayConfig.groupFactory = () => {\n      const type = new DynamicSelectModel(accessConditionTypeModelConfig, FORM_ACCESS_CONDITION_TYPE_LAYOUT);\n      const startDateConfig = Object.assign({}, FORM_ACCESS_CONDITION_START_DATE_CONFIG, confStart);\n      const endDateConfig = Object.assign({}, FORM_ACCESS_CONDITION_END_DATE_CONFIG, confEnd);\n\n      const startDate = new DynamicDatePickerModel(startDateConfig, FORM_ACCESS_CONDITION_START_DATE_LAYOUT);\n      const endDate = new DynamicDatePickerModel(endDateConfig, FORM_ACCESS_CONDITION_END_DATE_LAYOUT);\n      const accessConditionGroupConfig = Object.assign({}, ACCESS_CONDITION_GROUP_CONFIG);\n      accessConditionGroupConfig.group = [type];\n      if (hasStart.length > 0) {\n        accessConditionGroupConfig.group.push(startDate);\n      }\n      if (hasEnd.length > 0) {\n        accessConditionGroupConfig.group.push(endDate);\n      }\n      return [new DynamicFormGroupModel(accessConditionGroupConfig, ACCESS_CONDITION_GROUP_LAYOUT)];\n    };\n\n    // Number of access conditions blocks in form\n    accessConditionsArrayConfig.initialCount = isNotEmpty(this.accessesData.accessConditions) ? this.accessesData.accessConditions.length : 1;\n    formModel.push(\n      new DynamicFormArrayModel(accessConditionsArrayConfig, ACCESS_CONDITIONS_FORM_ARRAY_LAYOUT)\n    );\n\n    this.initModelData(formModel);\n    return formModel;\n  }\n\n  protected retrieveValueFromField(field: any) {\n    const temp = Array.isArray(field) ? field[0] : field;\n    return (temp) ? temp.value : undefined;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CoreModule } from '../core/core.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { SubmissionSectionFormComponent } from './sections/form/section-form.component';\nimport { SectionsDirective } from './sections/sections.directive';\nimport { SectionsService } from './sections/sections.service';\nimport { SubmissionFormCollectionComponent } from './form/collection/submission-form-collection.component';\nimport { SubmissionFormFooterComponent } from './form/footer/submission-form-footer.component';\nimport { SubmissionFormComponent } from './form/submission-form.component';\nimport { SubmissionFormSectionAddComponent } from './form/section-add/submission-form-section-add.component';\nimport { SubmissionSectionContainerComponent } from './sections/container/section-container.component';\nimport { CommonModule } from '@angular/common';\nimport { Action, StoreConfig, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { submissionReducers, SubmissionState } from './submission.reducers';\nimport { submissionEffects } from './submission.effects';\nimport { SubmissionSectionUploadComponent } from './sections/upload/section-upload.component';\nimport { SectionUploadService } from './sections/upload/section-upload.service';\nimport { SubmissionUploadFilesComponent } from './form/submission-upload-files/submission-upload-files.component';\nimport { SubmissionSectionLicenseComponent } from './sections/license/section-license.component';\nimport { SubmissionUploadsConfigService } from '../core/config/submission-uploads-config.service';\nimport { SubmissionEditComponent } from './edit/submission-edit.component';\nimport { SubmissionSectionUploadFileComponent } from './sections/upload/file/section-upload-file.component';\nimport { SubmissionSectionUploadFileEditComponent } from './sections/upload/file/edit/section-upload-file-edit.component';\nimport { SubmissionSectionUploadFileViewComponent } from './sections/upload/file/view/section-upload-file-view.component';\nimport { SubmissionSectionUploadAccessConditionsComponent } from './sections/upload/accessConditions/submission-section-upload-access-conditions.component';\nimport { SubmissionSubmitComponent } from './submit/submission-submit.component';\nimport { storeModuleConfig } from '../app.reducer';\nimport { SubmissionImportExternalComponent } from './import-external/submission-import-external.component';\nimport { SubmissionImportExternalSearchbarComponent } from './import-external/import-external-searchbar/submission-import-external-searchbar.component';\nimport { SubmissionImportExternalPreviewComponent } from './import-external/import-external-preview/submission-import-external-preview.component';\nimport { SubmissionImportExternalCollectionComponent } from './import-external/import-external-collection/submission-import-external-collection.component';\nimport { SubmissionSectionCcLicensesComponent } from './sections/cc-license/submission-section-cc-licenses.component';\nimport { JournalEntitiesModule } from '../entity-groups/journal-entities/journal-entities.module';\nimport { ResearchEntitiesModule } from '../entity-groups/research-entities/research-entities.module';\nimport { ThemedSubmissionEditComponent } from './edit/themed-submission-edit.component';\nimport { ThemedSubmissionSubmitComponent } from './submit/themed-submission-submit.component';\nimport { ThemedSubmissionImportExternalComponent } from './import-external/themed-submission-import-external.component';\nimport { FormModule } from '../shared/form/form.module';\nimport { NgbAccordionModule, NgbModalModule } from '@ng-bootstrap/ng-bootstrap';\nimport { SubmissionSectionAccessesComponent } from './sections/accesses/section-accesses.component';\nimport { SubmissionAccessesConfigService } from '../core/config/submission-accesses-config.service';\nimport { SectionAccessesService } from './sections/accesses/section-accesses.service';\n\nconst ENTRY_COMPONENTS = [\n  // put only entry components that use custom decorator\n  SubmissionSectionUploadComponent,\n  SubmissionSectionFormComponent,\n  SubmissionSectionLicenseComponent,\n  SubmissionSectionCcLicensesComponent,\n  SubmissionSectionAccessesComponent,\n  SubmissionSectionUploadFileEditComponent\n];\n\nconst DECLARATIONS = [\n  ...ENTRY_COMPONENTS,\n  SectionsDirective,\n  SubmissionEditComponent,\n  ThemedSubmissionEditComponent,\n  SubmissionFormSectionAddComponent,\n  SubmissionFormCollectionComponent,\n  SubmissionFormComponent,\n  SubmissionFormFooterComponent,\n  SubmissionSubmitComponent,\n  ThemedSubmissionSubmitComponent,\n  SubmissionUploadFilesComponent,\n  SubmissionSectionContainerComponent,\n  SubmissionSectionUploadAccessConditionsComponent,\n  SubmissionSectionUploadFileComponent,\n  SubmissionSectionUploadFileEditComponent,\n  SubmissionSectionUploadFileViewComponent,\n  SubmissionImportExternalComponent,\n  ThemedSubmissionImportExternalComponent,\n  SubmissionImportExternalSearchbarComponent,\n  SubmissionImportExternalPreviewComponent,\n  SubmissionImportExternalCollectionComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule.forRoot(),\n    SharedModule,\n    StoreModule.forFeature('submission', submissionReducers, storeModuleConfig as StoreConfig<SubmissionState, Action>),\n    EffectsModule.forFeature(submissionEffects),\n    JournalEntitiesModule.withEntryComponents(),\n    ResearchEntitiesModule.withEntryComponents(),\n    FormModule,\n    NgbAccordionModule,\n    NgbModalModule\n  ],\n  declarations: DECLARATIONS,\n  exports: DECLARATIONS,\n  providers: [\n    SectionUploadService,\n    SectionsService,\n    SubmissionUploadsConfigService,\n    SubmissionAccessesConfigService,\n    SectionAccessesService\n  ]\n})\n\n/**\n * This module handles all components that are necessary for the submission process\n */\nexport class SubmissionModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during SSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: SubmissionModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({ provide: component }))\n    };\n  }\n}\n","import { SubmissionObjectError } from '../../core/submission/models/submission-object.model';\nimport { default as parseSectionErrorPaths, SectionErrorPath } from './parseSectionErrorPaths';\n\n/**\n * the following method accept an array of SubmissionObjectError and return a section errors object\n * @param {errors: SubmissionObjectError[]} errors\n * @returns {any}\n */\nconst parseSectionErrors = (errors: SubmissionObjectError[] = []): any => {\n  const errorsList = Object.create({});\n\n  errors.forEach((error: SubmissionObjectError) => {\n    const paths: SectionErrorPath[] = parseSectionErrorPaths(error.paths);\n\n    paths.forEach((path: SectionErrorPath) => {\n      const sectionError = {path: path.originalPath, message: error.message};\n      if (!errorsList[path.sectionId]) {\n        errorsList[path.sectionId] = [];\n      }\n      errorsList[path.sectionId].push(sectionError);\n    });\n  });\n\n  return errorsList;\n};\n\nexport default parseSectionErrors;\n","<ds-dynamic-form-control-container *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                                   [formId]=\"formId\"\n                                   [group]=\"formGroup\"\n                                   [hasErrorMessaging]=\"model.hasErrorMessages\"\n                                   [hidden]=\"model.hidden\"\n                                   [layout]=\"formLayout\"\n                                   [model]=\"model\"\n                                   [templates]=\"templates\"\n                                   [asBootstrapFormGroup]=\"true\"\n                                   (dfBlur)=\"onCustomEvent($event, blur)\"\n                                   (dfChange)=\"onCustomEvent($event, change)\"\n                                   (dfFocus)=\"onCustomEvent($event, focus)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></ds-dynamic-form-control-container>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormComponent,\n  DynamicFormControlContainerComponent,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicFormComponentService,\n  DynamicTemplateDirective,\n} from '@ng-dynamic-forms/core';\nimport { DsDynamicFormControlContainerComponent } from './ds-dynamic-form-control-container.component';\n\n@Component({\n  selector: 'ds-dynamic-form',\n  templateUrl: './ds-dynamic-form.component.html'\n})\nexport class DsDynamicFormComponent extends DynamicFormComponent {\n\n  @Input() formId: string;\n  @Input() formGroup: FormGroup;\n  @Input() formModel: DynamicFormControlModel[];\n  @Input() formLayout: DynamicFormLayout;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n\n  @Output() ngbEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n  @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n  @ViewChildren(DsDynamicFormControlContainerComponent) components: QueryList<DynamicFormControlContainerComponent>;\n\n  constructor(changeDetectorRef: ChangeDetectorRef, componentService: DynamicFormComponentService) {\n    super(changeDetectorRef, componentService);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormComponent } from './form.component';\nimport { DsDynamicFormComponent } from './builder/ds-dynamic-form-ui/ds-dynamic-form.component';\nimport {\n  DsDynamicFormControlContainerComponent,\n  dsDynamicFormControlMapFn\n} from './builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component';\nimport { DsDynamicListComponent } from './builder/ds-dynamic-form-ui/models/list/dynamic-list.component';\nimport { DsDynamicLookupComponent } from './builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component';\nimport { DsDynamicDisabledComponent } from './builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component';\nimport { DsDynamicLookupRelationModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { DsDynamicScrollableDropdownComponent } from './builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component';\nimport { DsDynamicTagComponent } from './builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component';\nimport { DsDynamicOneboxComponent } from './builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component';\nimport { DsDynamicRelationGroupComponent } from './builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.components';\nimport { DsDatePickerComponent } from './builder/ds-dynamic-form-ui/models/date-picker/date-picker.component';\nimport { DsDynamicFormGroupComponent } from './builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component';\nimport { DsDynamicFormArrayComponent } from './builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component';\nimport { DsDatePickerInlineComponent } from './builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component';\nimport { DsDynamicLookupRelationSearchTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component';\nimport { DsDynamicLookupRelationSelectionTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component';\nimport { DsDynamicLookupRelationExternalSourceTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component';\nimport { SharedModule } from '../shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SearchModule } from '../search/search.module';\nimport { DYNAMIC_FORM_CONTROL_MAP_FN, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport { ExistingMetadataListElementComponent } from './builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component';\nimport { ExistingRelationListElementComponent } from './builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component';\nimport { ExternalSourceEntryImportModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component';\nimport { CustomSwitchComponent } from './builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component';\nimport { DynamicFormsNGBootstrapUIModule } from '@ng-dynamic-forms/ui-ng-bootstrap';\n\nconst COMPONENTS = [\n  CustomSwitchComponent,\n  DsDynamicFormComponent,\n  DsDynamicFormControlContainerComponent,\n  DsDynamicListComponent,\n  DsDynamicLookupComponent,\n  DsDynamicLookupRelationSearchTabComponent,\n  DsDynamicLookupRelationSelectionTabComponent,\n  DsDynamicLookupRelationExternalSourceTabComponent,\n  DsDynamicDisabledComponent,\n  DsDynamicLookupRelationModalComponent,\n  DsDynamicScrollableDropdownComponent,\n  DsDynamicTagComponent,\n  DsDynamicOneboxComponent,\n  DsDynamicRelationGroupComponent,\n  DsDatePickerComponent,\n  DsDynamicFormGroupComponent,\n  DsDynamicFormArrayComponent,\n  DsDatePickerInlineComponent,\n  ExistingMetadataListElementComponent,\n  ExistingRelationListElementComponent,\n  ExternalSourceEntryImportModalComponent,\n  FormComponent\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    DynamicFormsCoreModule,\n    DynamicFormsNGBootstrapUIModule,\n    SearchModule,\n    SharedModule,\n    TranslateModule\n  ],\n  exports: [\n    ...COMPONENTS\n  ],\n  providers: [\n    {\n      provide: DYNAMIC_FORM_CONTROL_MAP_FN,\n      useValue: dsDynamicFormControlMapFn\n    }\n  ]\n})\nexport class FormModule {\n}\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\n\nimport { Observable, of as observableOf, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { SubmissionDefinitionsModel } from '../../core/config/models/config-submission-definitions.model';\nimport { Collection } from '../../core/shared/collection.model';\nimport { HALEndpointService } from '../../core/shared/hal-endpoint.service';\nimport { SubmissionObject } from '../../core/submission/models/submission-object.model';\nimport { WorkspaceitemSectionsObject } from '../../core/submission/models/workspaceitem-sections.model';\n\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { UploaderOptions } from '../../shared/uploader/uploader-options.model';\nimport { SubmissionError, SubmissionObjectEntry } from '../objects/submission-objects.reducer';\nimport { SectionDataObject } from '../sections/models/section-data.model';\nimport { SubmissionService } from '../submission.service';\nimport { Item } from '../../core/shared/item.model';\nimport { SectionsType } from '../sections/sections-type';\nimport { SectionsService } from '../sections/sections.service';\n\n/**\n * This component represents the submission form.\n */\n@Component({\n  selector: 'ds-submission-form',\n  styleUrls: ['./submission-form.component.scss'],\n  templateUrl: './submission-form.component.html',\n})\nexport class SubmissionFormComponent implements OnChanges, OnDestroy {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n  @Input() item: Item;\n\n  /**\n   * The list of submission's sections\n   * @type {WorkspaceitemSectionsObject}\n   */\n  @Input() sections: WorkspaceitemSectionsObject;\n\n  /**\n   * The submission errors present in the submission object\n   * @type {SubmissionError}\n   */\n  @Input() submissionErrors: SubmissionError;\n\n  /**\n   * The submission self url\n   * @type {string}\n   */\n  @Input() selfUrl: string;\n\n  /**\n   * The configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  @Input() submissionDefinition: SubmissionDefinitionsModel;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The configuration id that define this submission\n   * @type {string}\n   */\n  public definitionId: string;\n\n  /**\n   * A boolean representing if a submission form is pending\n   * @type {Observable<boolean>}\n   */\n  public loading: Observable<boolean> = observableOf(true);\n\n  /**\n   * Emits true when the submission config has bitstream uploading enabled in submission\n   */\n  public uploadEnabled$: Observable<boolean>;\n\n  /**\n   * Observable of the list of submission's sections\n   * @type {Observable<WorkspaceitemSectionsObject>}\n   */\n  public submissionSections: Observable<WorkspaceitemSectionsObject>;\n\n  /**\n   * The uploader configuration options\n   * @type {UploaderOptions}\n   */\n  public uploadFilesOptions: UploaderOptions = new UploaderOptions();\n\n  /**\n   * A boolean representing if component is active\n   * @type {boolean}\n   */\n  protected isActive: boolean;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  protected subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {AuthService} authService\n   * @param {ChangeDetectorRef} changeDetectorRef\n   * @param {HALEndpointService} halService\n   * @param {SubmissionService} submissionService\n   * @param {SectionsService} sectionsService\n   */\n  constructor(\n    private authService: AuthService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private halService: HALEndpointService,\n    private submissionService: SubmissionService,\n    private sectionsService: SectionsService) {\n    this.isActive = true;\n  }\n\n  /**\n   * Initialize all instance variables and retrieve form configuration\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if ((changes.collectionId && this.collectionId) && (changes.submissionId && this.submissionId)) {\n      this.isActive = true;\n\n      // retrieve submission's section list\n      this.submissionSections = this.submissionService.getSubmissionObject(this.submissionId).pipe(\n        filter(() => this.isActive),\n        map((submission: SubmissionObjectEntry) => submission.isLoading),\n        map((isLoading: boolean) => isLoading),\n        distinctUntilChanged(),\n        switchMap((isLoading: boolean) => {\n          if (!isLoading) {\n            return this.getSectionsList();\n          } else {\n            return observableOf([]);\n          }\n        }));\n      this.uploadEnabled$ = this.sectionsService.isSectionTypeAvailable(this.submissionId, SectionsType.Upload);\n\n      // check if is submission loading\n      this.loading = this.submissionService.getSubmissionObject(this.submissionId).pipe(\n        filter(() => this.isActive),\n        map((submission: SubmissionObjectEntry) => submission.isLoading),\n        map((isLoading: boolean) => isLoading),\n        distinctUntilChanged());\n\n      // init submission state\n      this.subs.push(\n        this.halService.getEndpoint(this.submissionService.getSubmissionObjectLinkName()).pipe(\n          filter((href: string) => isNotEmpty(href)),\n          distinctUntilChanged())\n          .subscribe((endpointURL) => {\n            this.uploadFilesOptions.authToken = this.authService.buildAuthHeader();\n            this.uploadFilesOptions.url = endpointURL.concat(`/${this.submissionId}`);\n            this.definitionId = this.submissionDefinition.name;\n            this.submissionService.dispatchInit(\n              this.collectionId,\n              this.submissionId,\n              this.selfUrl,\n              this.submissionDefinition,\n              this.sections,\n              this.item,\n              this.submissionErrors);\n            this.changeDetectorRef.detectChanges();\n          })\n      );\n\n      // start auto save\n      this.submissionService.startAutoSave(this.submissionId);\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions, destroy instance variables\n   * and reset submission state\n   */\n  ngOnDestroy() {\n    this.isActive = false;\n    this.submissionService.stopAutoSave();\n    this.submissionService.resetAllSubmissionObjects();\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /**\n   * On collection change reset submission state in case of it has a different\n   * submission definition\n   *\n   * @param submissionObject\n   *    new submission object\n   */\n  onCollectionChange(submissionObject: SubmissionObject) {\n    this.collectionId = (submissionObject.collection as Collection).id;\n    if (this.definitionId !== (submissionObject.submissionDefinition as SubmissionDefinitionsModel).name) {\n      this.sections = submissionObject.sections;\n      this.submissionDefinition = (submissionObject.submissionDefinition as SubmissionDefinitionsModel);\n      this.definitionId = this.submissionDefinition.name;\n      this.submissionService.resetSubmissionObject(\n        this.collectionId,\n        this.submissionId,\n        submissionObject._links.self.href,\n        this.submissionDefinition,\n        this.sections,\n        this.item);\n    } else {\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Check if submission form is loading\n   */\n  isLoading(): Observable<boolean> {\n    return this.loading;\n  }\n\n  /**\n   * Check if submission form is loading\n   */\n  protected getSectionsList(): Observable<any> {\n    return this.submissionService.getSubmissionSections(this.submissionId).pipe(\n      filter((sections: SectionDataObject[]) => isNotEmpty(sections)),\n      map((sections: SectionDataObject[]) => sections));\n  }\n}\n","<div class=\"container-fluid\">\n    <div *ngIf=\"!(isLoading() | async)\" class=\"submission-form-header mb-3 d-flex flex-wrap position-sticky\">\n        <div *ngIf=\"(uploadEnabled$ | async)\" class=\"w-100\">\n            <ds-submission-upload-files [submissionId]=\"submissionId\"\n                                        [collectionId]=\"collectionId\"\n                                        [uploadFilesOptions]=\"uploadFilesOptions\"></ds-submission-upload-files>\n            <div class=\"clearfix\"></div>\n        </div>\n\n        <div class=\"submission-form-header-item mb-3 mb-sm-0 flex-sm-grow-1 flex-md-grow-0\">\n            <ds-submission-form-collection [currentCollectionId]=\"collectionId\"\n                                           [currentDefinition]=\"definitionId\"\n                                           [submissionId]=\"submissionId\"\n                                           (collectionChange)=\"onCollectionChange($event)\">\n            </ds-submission-form-collection>\n        </div>\n        <div class=\"submission-form-header-item text-right\">\n            <ds-submission-form-section-add [collectionId]=\"collectionId\"\n                                            [submissionId]=\"submissionId\">\n            </ds-submission-form-section-add>\n        </div>\n    </div>\n\n    <div class=\"submission-form-content\">\n        <ds-loading *ngIf=\"(isLoading() | async)\" message=\"Loading...\"></ds-loading>\n        <ng-container *ngFor=\"let object of (submissionSections | async)\">\n            <ds-submission-section-container [collectionId]=\"collectionId\"\n                                             [submissionId]=\"submissionId\"\n                                             [sectionData]=\"object\"></ds-submission-section-container>\n        </ng-container>\n    </div>\n    <div *ngIf=\"!(isLoading() | async)\" class=\"submission-form-footer mt-3 mb-3 position-sticky\">\n        <ds-submission-form-footer [submissionId]=\"submissionId\"></ds-submission-form-footer>\n    </div>\n</div>\n","import { Component, Input, OnInit, } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SectionsService } from '../../sections/sections.service';\nimport { HostWindowService } from '../../../shared/host-window.service';\nimport { SubmissionService } from '../../submission.service';\nimport { SectionDataObject } from '../../sections/models/section-data.model';\n\n/**\n * This component allow to add any new section to submission form\n */\n@Component({\n  selector: 'ds-submission-form-section-add',\n  styleUrls: [ './submission-form-section-add.component.scss' ],\n  templateUrl: './submission-form-section-add.component.html'\n})\nexport class SubmissionFormSectionAddComponent implements OnInit {\n\n  /**\n   * The collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() collectionId: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * The possible section list to add\n   * @type {Observable<SectionDataObject[]>}\n   */\n  public sectionList$: Observable<SectionDataObject[]>;\n\n  /**\n   * A boolean representing if there are available sections to add\n   * @type {Observable<boolean>}\n   */\n  public hasSections$: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {SectionsService} sectionService\n   * @param {SubmissionService} submissionService\n   * @param {HostWindowService} windowService\n   */\n  constructor(private sectionService: SectionsService,\n              private submissionService: SubmissionService,\n              public windowService: HostWindowService) {\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnInit() {\n    this.sectionList$ = this.submissionService.getDisabledSectionsList(this.submissionId);\n    this.hasSections$ = this.sectionList$.pipe(\n      map((list: SectionDataObject[]) => list.length > 0)\n    );\n  }\n\n  /**\n   * Dispatch an action to add a new section\n   */\n  addSection(sectionId) {\n    this.sectionService.addSection(this.submissionId, sectionId);\n  }\n}\n","<div ngbDropdown\n     #sectionAdd=\"ngbDropdown\"\n     placement=\"bottom-right\"\n     class=\"d-inline-block\"\n     [ngClass]=\"{'w-100': windowService.isXs()}\">\n  <button class=\"btn btn-outline-primary dropdown-toggle\"\n          id=\"sectionControls\"\n          [disabled]=\"!(hasSections$ | async)\"\n          [ngClass]=\"{'w-100': (windowService.isXs() | async)}\"\n          ngbDropdownToggle>\n          {{ 'submission.sections.general.add-more' | translate }} <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n  </button>\n  <div ngbDropdownMenu\n       class=\"sections-dropdown-menu\"\n       aria-labelledby=\"sectionControls\"\n       [ngClass]=\"{'w-100': (windowService.isXs() | async)}\">\n    <button class=\"dropdown-item disabled\" *ngIf=\"!(hasSections$ | async)\">\n      {{ 'submission.sections.general.no-sections' | translate }}\n    </button>\n    <button class=\"dropdown-item\" *ngFor=\"let listItem of (sectionList$ | async)\" (click)=\"addSection(listItem.id)\">\n      {{'submission.sections.'+listItem.header | translate }}\n    </button>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { SubmissionImportExternalComponent } from './submission-import-external.component';\n\n/**\n * Themed wrapper for SubmissionImportExternalComponent\n */\n@Component({\n  selector: 'ds-themed-submission-import-external',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedSubmissionImportExternalComponent extends ThemedComponent<SubmissionImportExternalComponent> {\n  protected getComponentName(): string {\n    return 'SubmissionImportExternalComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/submission/import-external/submission-import-external.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./submission-import-external.component`);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\n\nimport { BehaviorSubject, Observable, of as observableOf, Subscription } from 'rxjs';\nimport {\n  find,\n  map, mergeMap\n} from 'rxjs/operators';\n\nimport { Collection } from '../../../core/shared/collection.model';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { JsonPatchOperationPathCombiner } from '../../../core/json-patch/builder/json-patch-operation-path-combiner';\nimport { JsonPatchOperationsBuilder } from '../../../core/json-patch/builder/json-patch-operations-builder';\nimport { SubmissionService } from '../../submission.service';\nimport { SubmissionObject } from '../../../core/submission/models/submission-object.model';\nimport { SubmissionJsonPatchOperationsService } from '../../../core/submission/submission-json-patch-operations.service';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { CollectionDropdownComponent } from '../../../shared/collection-dropdown/collection-dropdown.component';\nimport { SectionsService } from '../../sections/sections.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { SectionsType } from '../../sections/sections-type';\n\n/**\n * This component allows to show the current collection the submission belonging to and to change it.\n */\n@Component({\n  selector: 'ds-submission-form-collection',\n  styleUrls: ['./submission-form-collection.component.scss'],\n  templateUrl: './submission-form-collection.component.html'\n})\nexport class SubmissionFormCollectionComponent implements OnChanges, OnInit {\n\n  /**\n   * The current collection id this submission belonging to\n   * @type {string}\n   */\n  @Input() currentCollectionId: string;\n\n  /**\n   * The current configuration object that define this submission\n   * @type {SubmissionDefinitionsModel}\n   */\n  @Input() currentDefinition: string;\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId;\n\n  /**\n   * An event fired when a different collection is selected.\n   * Event's payload equals to new SubmissionObject.\n   */\n  @Output() collectionChange: EventEmitter<SubmissionObject> = new EventEmitter<SubmissionObject>();\n\n  /**\n   * A boolean representing if a collection change operation is processing\n   * @type {BehaviorSubject<boolean>}\n   */\n  public processingChange$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The selected collection id\n   * @type {string}\n   */\n  public selectedCollectionId: string;\n\n  /**\n   * The selected collection name\n   * @type {Observable<string>}\n   */\n  public selectedCollectionName$: Observable<string>;\n\n  /**\n   * The JsonPatchOperationPathCombiner object\n   * @type {JsonPatchOperationPathCombiner}\n   */\n  protected pathCombiner: JsonPatchOperationPathCombiner;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * The html child that contains the collections list\n   */\n  @ViewChild(CollectionDropdownComponent) collectionDropdown: CollectionDropdownComponent;\n\n  /**\n   * A boolean representing if the collection section is available\n   * @type {BehaviorSubject<boolean>}\n   */\n  available$: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {CollectionDataService} collectionDataService\n   * @param {JsonPatchOperationsBuilder} operationsBuilder\n   * @param {SubmissionJsonPatchOperationsService} operationsService\n   * @param {SubmissionService} submissionService\n   * @param {SectionsService} sectionsService\n   */\n  constructor(protected cdr: ChangeDetectorRef,\n              private collectionDataService: CollectionDataService,\n              private operationsBuilder: JsonPatchOperationsBuilder,\n              private operationsService: SubmissionJsonPatchOperationsService,\n              private submissionService: SubmissionService,\n              private sectionsService: SectionsService) {\n  }\n\n  /**\n   * Initialize collection list\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (hasValue(changes.currentCollectionId)\n      && hasValue(changes.currentCollectionId.currentValue)) {\n      this.selectedCollectionId = this.currentCollectionId;\n\n      this.selectedCollectionName$ = this.collectionDataService.findById(this.currentCollectionId).pipe(\n        find((collectionRD: RemoteData<Collection>) => isNotEmpty(collectionRD.payload)),\n        map((collectionRD: RemoteData<Collection>) => collectionRD.payload.name)\n      );\n    }\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnInit() {\n    this.pathCombiner = new JsonPatchOperationPathCombiner('sections', 'collection');\n    this.available$ = this.sectionsService.isSectionTypeAvailable(this.submissionId, SectionsType.collection);\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Emit a [collectionChange] event when a new collection is selected from list\n   *\n   * @param event\n   *    the selected [CollectionListEntryItem]\n   */\n  onSelect(event) {\n    this.processingChange$.next(true);\n    this.operationsBuilder.replace(this.pathCombiner.getPath(), event.collection.id, true);\n    this.subs.push(this.operationsService.jsonPatchByResourceID(\n      this.submissionService.getSubmissionObjectLinkName(),\n      this.submissionId,\n      'sections',\n      'collection').pipe(\n        mergeMap((submissionObject: SubmissionObject[]) => {\n          // retrieve the full submission object with embeds\n          return this.submissionService.retrieveSubmission(submissionObject[0].id).pipe(\n            getFirstSucceededRemoteDataPayload()\n          );\n        })\n      ).subscribe((submissionObject: SubmissionObject) => {\n        this.selectedCollectionId = event.collection.id;\n        this.selectedCollectionName$ = observableOf(event.collection.name);\n        this.collectionChange.emit(submissionObject);\n        this.submissionService.changeSubmissionCollection(this.submissionId, event.collection.id);\n        this.processingChange$.next(false);\n        this.cdr.detectChanges();\n      })\n    );\n  }\n\n  /**\n   * Reset search form control on dropdown menu close\n   */\n  onClose() {\n    this.collectionDropdown.reset();\n  }\n\n  /**\n   * Reset search form control when dropdown menu is closed\n   *\n   * @param isOpen\n   *    Representing if the dropdown menu is open or not.\n   */\n  toggled(isOpen: boolean) {\n    if (!isOpen) {\n      this.collectionDropdown.reset();\n    }\n  }\n}\n","<div>\n  <div\n    *ngIf=\"!(available$ | async)\"\n    class=\"input-group mb-3\">\n    <div class=\"input-group-prepend\">\n      <span class=\"input-group-text\">{{ 'submission.sections.general.collection' | translate }}</span>\n    </div>\n    <div class=\"input-group-append\">\n      <span class=\"input-group-text\">{{ selectedCollectionName$ | async }}</span>\n    </div>\n  </div>\n  <div\n    ngbDropdown\n    #collectionControls=\"ngbDropdown\"\n    *ngIf=\"(available$ | async)\"\n    class=\"btn-group input-group\"\n    (openChange)=\"toggled($event)\">\n    <div class=\"input-group-prepend\">\n      <span id=\"collectionControlsMenuLabel\" class=\"input-group-text\">\n        {{ 'submission.sections.general.collection' | translate }}\n      </span>\n    </div>\n    <button aria-describedby=\"collectionControlsMenuLabel\"\n            id=\"collectionControlsMenuButton\"\n            class=\"btn btn-outline-primary\"\n            (blur)=\"onClose()\"\n            (click)=\"onClose()\"\n            [disabled]=\"(processingChange$ | async)\"\n            ngbDropdownToggle>\n      <span *ngIf=\"(processingChange$ | async)\"><i class='fas fa-circle-notch fa-spin'></i></span>\n      <span *ngIf=\"!(processingChange$ | async)\">{{ selectedCollectionName$ | async }}</span>\n    </button>\n\n    <div ngbDropdownMenu\n         class=\"dropdown-menu\"\n         id=\"collectionControlsDropdownMenu\"\n         aria-labelledby=\"collectionControlsMenuButton\">\n      <ds-collection-dropdown\n        (selectionChange)=\"onSelect($event)\">\n      </ds-collection-dropdown>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SubmissionRestService } from '../../../core/submission/submission-rest.service';\nimport { SubmissionService } from '../../submission.service';\nimport { SubmissionScopeType } from '../../../core/submission/submission-scope-type';\nimport { isNotEmpty } from '../../../shared/empty.util';\n\n/**\n * This component represents submission form footer bar.\n */\n@Component({\n  selector: 'ds-submission-form-footer',\n  styleUrls: ['./submission-form-footer.component.scss'],\n  templateUrl: './submission-form-footer.component.html'\n})\nexport class SubmissionFormFooterComponent implements OnChanges {\n\n  /**\n   * The submission id\n   * @type {string}\n   */\n  @Input() submissionId: string;\n\n  /**\n   * A boolean representing if a submission deposit operation is pending\n   * @type {Observable<boolean>}\n   */\n  public processingDepositStatus: Observable<boolean>;\n\n  /**\n   * A boolean representing if a submission save operation is pending\n   * @type {Observable<boolean>}\n   */\n  public processingSaveStatus: Observable<boolean>;\n\n  /**\n   * A boolean representing if showing deposit and discard buttons\n   * @type {Observable<boolean>}\n   */\n  public showDepositAndDiscard: Observable<boolean>;\n\n  /**\n   * A boolean representing if submission form is valid or not\n   * @type {Observable<boolean>}\n   */\n  public submissionIsInvalid: Observable<boolean> = observableOf(true);\n\n  /**\n   * A boolean representing if submission form has unsaved modifications\n   */\n  public hasUnsavedModification: Observable<boolean>;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {NgbModal} modalService\n   * @param {SubmissionRestService} restService\n   * @param {SubmissionService} submissionService\n   */\n  constructor(private modalService: NgbModal,\n              private restService: SubmissionRestService,\n              private submissionService: SubmissionService) {\n  }\n\n  /**\n   * Initialize all instance variables\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (isNotEmpty(this.submissionId)) {\n      this.submissionIsInvalid = this.submissionService.getSubmissionStatus(this.submissionId).pipe(\n        map((isValid: boolean) => isValid === false)\n      );\n\n      this.processingSaveStatus = this.submissionService.getSubmissionSaveProcessingStatus(this.submissionId);\n      this.processingDepositStatus = this.submissionService.getSubmissionDepositProcessingStatus(this.submissionId);\n      this.showDepositAndDiscard = observableOf(this.submissionService.getSubmissionScope() === SubmissionScopeType.WorkspaceItem);\n      this.hasUnsavedModification = this.submissionService.hasUnsavedModification();\n    }\n  }\n\n  /**\n   * Dispatch a submission save action\n   */\n  save(event) {\n    this.submissionService.dispatchSave(this.submissionId, true);\n  }\n\n  /**\n   * Dispatch a submission save for later action\n   */\n  saveLater(event) {\n    this.submissionService.dispatchSaveForLater(this.submissionId);\n  }\n\n  /**\n   * Dispatch a submission deposit action\n   */\n  public deposit(event) {\n    this.submissionService.dispatchDeposit(this.submissionId);\n  }\n\n  /**\n   * Dispatch a submission discard action\n   */\n  public confirmDiscard(content) {\n    this.modalService.open(content).result.then(\n      (result) => {\n        if (result === 'ok') {\n          this.submissionService.dispatchDiscard(this.submissionId);\n        }\n      }\n    );\n  }\n}\n","<div class=\"row\" *ngIf=\"!!submissionId\">\n  <div class=\"col\">\n    <button *ngIf=\"(showDepositAndDiscard | async)\"\n            type=\"button\"\n            class=\"btn btn-danger\"\n            [disabled]=\"(processingSaveStatus | async) || (processingDepositStatus | async)\"\n            (click)=\"$event.preventDefault();confirmDiscard(content)\">\n      <i class=\"fas fa-trash\"></i> {{'submission.general.discard.submit' | translate}}\n    </button>\n  </div>\n  <div class=\"col text-right d-flex justify-content-end align-items-center\">\n    <span *ngIf=\"!(hasUnsavedModification | async) && !(processingSaveStatus | async) && !(processingDepositStatus | async)\">\n      <i class=\"fas fa-check-circle\"></i> {{'submission.general.info.saved' | translate}}\n    </span>\n    <span *ngIf=\"(hasUnsavedModification | async) && !(processingSaveStatus | async) && !(processingDepositStatus | async)\">\n      <i class=\"fas fa-exclamation-circle\"></i> {{'submission.general.info.pending-changes' | translate}}\n    </span>\n    <div *ngIf=\"(processingSaveStatus | async) || (processingDepositStatus | async)\" class=\"col d-flex justify-content-end align-items-center\">\n      <div class=\"progress w-75\">\n        <div *ngIf=\"(processingSaveStatus | async)\" class=\"progress-bar progress-bar-striped progress-bar-animated bg-info\" [style.width]=\"'100%'\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\">Saving...</div>\n        <div *ngIf=\"(processingDepositStatus | async)\" class=\"progress-bar progress-bar-striped progress-bar-animated bg-info\" [style.width]=\"'100%'\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\">Depositing...</div>\n      </div>\n    </div>\n    <div class=\"ml-2\">\n      <button type=\"button\"\n              class=\"btn btn-secondary\"\n              id=\"save\"\n              [disabled]=\"(processingSaveStatus | async) || !(hasUnsavedModification | async)\"\n              (click)=\"save($event)\">\n        <span><i class=\"fas fa-save\"></i> {{'submission.general.save' | translate}}</span>\n      </button>\n      <button type=\"button\"\n              [class.btn-primary]=\"!(showDepositAndDiscard | async)\"\n              [class.btn-secondary]=\"(showDepositAndDiscard | async)\"\n              class=\"btn\"\n              id=\"saveForLater\"\n              [disabled]=\"(processingSaveStatus | async) || (processingDepositStatus | async)\"\n              (click)=\"saveLater($event)\">\n        <span><i class=\"fas fa-save\"></i> {{'submission.general.save-later' | translate}}</span>\n      </button>\n      <button *ngIf=\"(showDepositAndDiscard | async)\"\n              type=\"button\"\n              class=\"btn btn-success\"\n              [disabled]=\"(processingSaveStatus | async) || (processingDepositStatus | async)\"\n              (click)=\"deposit($event)\">\n        <span><i class=\"fas fa-plus\"></i> {{'submission.general.deposit' | translate}}</span>\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #content let-c=\"close\" let-d=\"dismiss\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title text-danger\">{{'submission.general.discard.confirm.title' | translate}}</h4>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"d('cancel')\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <p>{{'submission.general.discard.confirm.info' | translate}}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"c('cancel')\">{{'submission.general.discard.confirm.cancel' | translate}}</button>\n    <button type=\"button\" class=\"btn btn-danger\" (click)=\"c('ok')\">{{'submission.general.discard.confirm.submit' | translate}}</button>\n  </div>\n</ng-template>\n"]}