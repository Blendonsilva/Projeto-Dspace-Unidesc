{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/profile-page/themed-profile-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/profile-page/profile-page-routing.module.ts","webpack:///src/app/profile-page/profile-page.module.ts","webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.ts","webpack:///src/app/profile-page/profile-page-security-form/profile-page-security-form.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/profile\\-page\\/profile\\-page\\.component$ namespace object","webpack:///src/app/profile-page/profile-page-metadata-form/profile-page-metadata-form.component.ts","webpack:///src/app/profile-page/profile-page-metadata-form/profile-page-metadata-form.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.ts","webpack:///src/app/shared/form/form.module.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/profile-page/profile-page.component.ts","webpack:///src/app/profile-page/profile-page.component.html","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","constructor","breadcrumbService","resolve","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","ThemedProfilePageComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","ProfilePageRoutingModule","forChild","path","pathMatch","component","breadcrumb","title","ProfilePageModule","ProfilePageSecurityFormComponent","formService","translate","epersonService","notificationsService","isInvalid","EventEmitter","passwordValue","formModel","id","name","inputType","passwordCanBeEmpty","subs","ngOnInit","formGroup","createFormGroup","validators","checkPasswordsEqual","checkPasswordLength","checkPasswordEmpty","updateFieldTranslations","onLangChange","subscribe","push","statusChanges","pipe","status","emit","valueChanges","valueChange","password","forEach","fieldModel","label","instant","FORM_PREFIX","group","get","value","notSame","pass","length","notLongEnough","emptyPassword","ngOnDestroy","filter","sub","unsubscribe","map","webpackAsyncContext","req","__webpack_require__","o","Promise","then","e","code","ids","keys","Object","module","exports","ProfilePageMetadataFormComponent","formBuilderService","readOnly","required","errorMessages","LABEL_PREFIX","ERROR_PREFIX","NOTIFICATION_PREFIX","activeLangs","languages","MyLangConfig","active","setFormValues","user","email","firstMetadataValue","options","langConfig","assign","updateProfile","valid","newMetadata","cloneDeep","metadata","changed","hasOwnProperty","language","update","success","DsDynamicFormComponent","changeDetectorRef","componentService","super","blur","change","focus","ngbEvent","FormModule","provide","useValue","I18nBreadcrumbsService","getBreadcrumbs","ProfilePageComponent","authService","authorizationService","NOTIFICATIONS_PREFIX","PASSWORD_NOTIFICATIONS_PREFIX","user$","getAuthenticatedUserFromStore","findById","currentUser","groupsRD$","groups","canChangePassword$","isAuthorized","CanChangePassword","_links","self","href","metadataChanged","metadataForm","securityChanged","updateSecurity","warning","setInvalid","$event","invalidSecurity","passEntered","error","patch","op","g","response","hasSucceeded","errorMessage","setPasswordValue","submit","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { ProfilePageComponent } from './profile-page.component';\n\n/**\n * Themed wrapper for ProfilePageComponent\n */\n@Component({\n  selector: 'ds-themed-profile-page',\n  styleUrls: [],\n  templateUrl: './../shared/theme-support/themed.component.html'\n})\nexport class ThemedProfilePageComponent extends ThemedComponent<ProfilePageComponent> {\n  protected getComponentName(): string {\n    return 'ProfilePageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/profile-page/profile-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./profile-page.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ThemedProfilePageComponent } from './themed-profile-page.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      { path: '', pathMatch: 'full', component: ThemedProfilePageComponent, resolve: { breadcrumb: I18nBreadcrumbResolver }, data: { breadcrumbKey: 'profile', title: 'profile.title' } }\n    ])\n  ]\n})\nexport class ProfilePageRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { ProfilePageRoutingModule } from './profile-page-routing.module';\nimport { ProfilePageComponent } from './profile-page.component';\nimport { ProfilePageMetadataFormComponent } from './profile-page-metadata-form/profile-page-metadata-form.component';\nimport { ProfilePageSecurityFormComponent } from './profile-page-security-form/profile-page-security-form.component';\nimport { ThemedProfilePageComponent } from './themed-profile-page.component';\nimport { FormModule } from '../shared/form/form.module';\n\n@NgModule({\n  imports: [\n    ProfilePageRoutingModule,\n    CommonModule,\n    SharedModule,\n    FormModule\n  ],\n  exports: [\n    ProfilePageSecurityFormComponent,\n    ProfilePageMetadataFormComponent\n  ],\n  declarations: [\n    ProfilePageComponent,\n    ThemedProfilePageComponent,\n    ProfilePageMetadataFormComponent,\n    ProfilePageSecurityFormComponent\n  ]\n})\nexport class ProfilePageModule {\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DynamicFormControlModel, DynamicFormService, DynamicInputModel } from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormGroup } from '@angular/forms';\nimport { hasValue, isEmpty } from '../../shared/empty.util';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ds-profile-page-security-form',\n  templateUrl: './profile-page-security-form.component.html'\n})\n/**\n * Component for a user to edit their security information\n * Displays a form containing a password field and a confirmation of the password\n */\nexport class ProfilePageSecurityFormComponent implements OnInit {\n\n  /**\n   * Emits the validity of the password\n   */\n  @Output() isInvalid = new EventEmitter<boolean>();\n  /**\n   * Emits the value of the password\n   */\n  @Output() passwordValue = new EventEmitter<string>();\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'password',\n      name: 'password',\n      inputType: 'password'\n    }),\n    new DynamicInputModel({\n      id: 'passwordrepeat',\n      name: 'passwordrepeat',\n      inputType: 'password'\n    })\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Indicates whether the \"checkPasswordEmpty\" needs to be added or not\n   */\n  @Input()\n  passwordCanBeEmpty = true;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  @Input()\n  FORM_PREFIX: string;\n  private subs: Subscription[] = [];\n\n  constructor(protected formService: DynamicFormService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    if (this.passwordCanBeEmpty) {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength]});\n    } else {\n      this.formGroup = this.formService.createFormGroup(this.formModel,\n        {validators: [this.checkPasswordsEqual, this.checkPasswordLength, this.checkPasswordEmpty]});\n    }\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n\n    this.subs.push(this.formGroup.statusChanges.pipe(\n      debounceTime(300),\n      map((status: string) => {\n        if (status !== 'VALID') {\n          return true;\n        } else {\n          return false;\n        }\n      })).subscribe((status) => this.isInvalid.emit(status))\n    );\n\n    this.subs.push(this.formGroup.valueChanges.pipe(\n      debounceTime(300),\n    ).subscribe((valueChange) => {\n      this.passwordValue.emit(valueChange.password);\n    }));\n  }\n\n  /**\n   * Update the translations of the field labels\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.FORM_PREFIX + 'label.' + fieldModel.id);\n      }\n    );\n  }\n\n  /**\n   * Check if both password fields are filled in and equal\n   * @param group The FormGroup to validate\n   */\n  checkPasswordsEqual(group: FormGroup) {\n    const pass = group.get('password').value;\n    const repeatPass = group.get('passwordrepeat').value;\n\n    return pass === repeatPass ? null : {notSame: true};\n  }\n\n  /**\n   * Check if the password is at least 6 characters long\n   * @param group The FormGroup to validate\n   */\n  checkPasswordLength(group: FormGroup) {\n    const pass = group.get('password').value;\n\n    return isEmpty(pass) || pass.length >= 6 ? null : {notLongEnough: true};\n  }\n\n  /**\n   * Checks if the password is empty\n   * @param group The FormGroup to validate\n   */\n  checkPasswordEmpty(group: FormGroup) {\n    const pass = group.get('password').value;\n    return isEmpty(pass) ? {emptyPassword: true} : null;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n}\n","<div class=\"container-fluid mb-4\">{{FORM_PREFIX + 'info' | translate}}</div>\n<ds-form *ngIf=\"formModel\"\n         [formId]=\"FORM_PREFIX\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n<div id=\"notLongEnough\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notLongEnough')\">{{FORM_PREFIX + 'error.password-length' | translate}}</div>\n<div id=\"notSame\" class=\"container-fluid text-danger\" *ngIf=\"formGroup.hasError('notSame')\">{{FORM_PREFIX + 'error.matching-passwords' | translate}}</div>\n<div id=\"emptyPassword\" class=\"container-fluid text-danger\" *ngIf=\"(formGroup.dirty || formGroup.touched) && formGroup.hasError('emptyPassword')\">{{FORM_PREFIX + 'error.empty-password' | translate}}</div>\n","var map = {\n\t\"./custom/app/profile-page/profile-page.component\": [\n\t\t\"qgOg\",\n\t\t69\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"gG8J\";\nmodule.exports = webpackAsyncContext;","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  DynamicFormControlModel,\n  DynamicFormValueControlModel,\n  DynamicInputModel,\n  DynamicSelectModel\n} from '@ng-dynamic-forms/core';\nimport { FormGroup } from '@angular/forms';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { TranslateService } from '@ngx-translate/core';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { LangConfig } from '../../../config/lang-config.interface';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { cloneDeep } from 'lodash';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../core/shared/operators';\nimport { FormBuilderService } from '../../shared/form/builder/form-builder.service';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'ds-profile-page-metadata-form',\n  templateUrl: './profile-page-metadata-form.component.html'\n})\n/**\n * Component for a user to edit their metadata\n * Displays a form containing:\n * - readonly email field,\n * - required first name text field\n * - required last name text field\n * - phone text field\n * - language dropdown\n */\nexport class ProfilePageMetadataFormComponent implements OnInit {\n  /**\n   * The user to display the form for\n   */\n  @Input() user: EPerson;\n\n  /**\n   * The form's input models\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'email',\n      name: 'email',\n      readOnly: true\n    }),\n    new DynamicInputModel({\n      id: 'firstname',\n      name: 'eperson.firstname',\n      required: true,\n      validators: {\n        required: null\n      },\n      errorMessages: {\n        required: 'This field is required'\n      },\n    }),\n    new DynamicInputModel({\n      id: 'lastname',\n      name: 'eperson.lastname',\n      required: true,\n      validators: {\n        required: null\n      },\n      errorMessages: {\n        required: 'This field is required'\n      },\n    }),\n    new DynamicInputModel({\n      id: 'phone',\n      name: 'eperson.phone'\n    }),\n    new DynamicSelectModel<string>({\n      id: 'language',\n      name: 'eperson.language'\n    })\n  ];\n\n  /**\n   * The form group of this form\n   */\n  formGroup: FormGroup;\n\n  /**\n   * Prefix for the form's label messages of this component\n   */\n  LABEL_PREFIX = 'profile.metadata.form.label.';\n\n  /**\n   * Prefix for the form's error messages of this component\n   */\n  ERROR_PREFIX = 'profile.metadata.form.error.';\n\n  /**\n   * Prefix for the notification messages of this component\n   */\n  NOTIFICATION_PREFIX = 'profile.metadata.form.notifications.';\n\n  /**\n   * All of the configured active languages\n   * Used to populate the language dropdown\n   */\n  activeLangs: LangConfig[];\n\n  constructor(protected formBuilderService: FormBuilderService,\n              protected translate: TranslateService,\n              protected epersonService: EPersonDataService,\n              protected notificationsService: NotificationsService) {\n  }\n\n  ngOnInit(): void {\n    this.activeLangs = environment.languages.filter((MyLangConfig) => MyLangConfig.active === true);\n    this.setFormValues();\n    this.updateFieldTranslations();\n    this.translate.onLangChange\n      .subscribe(() => {\n        this.updateFieldTranslations();\n      });\n  }\n\n  /**\n   * Loop over all the form's input models and set their values depending on the user's metadata\n   * Create the FormGroup\n   */\n  setFormValues() {\n    this.formModel.forEach(\n      (fieldModel: any) => {\n        if (fieldModel.name === 'email') {\n          fieldModel.value = this.user.email;\n        } else {\n          fieldModel.value = this.user.firstMetadataValue(fieldModel.name);\n        }\n        if (fieldModel.id === 'language') {\n          (fieldModel as DynamicSelectModel<string>).options =\n            this.activeLangs.map((langConfig) => Object.assign({ value: langConfig.code, label: langConfig.label }));\n        }\n      }\n    );\n    this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n  }\n\n  /**\n   * Update the translations of the field labels and error messages\n   */\n  updateFieldTranslations() {\n    this.formModel.forEach(\n      (fieldModel: DynamicInputModel) => {\n        fieldModel.label = this.translate.instant(this.LABEL_PREFIX + fieldModel.id);\n        if (isNotEmpty(fieldModel.validators)) {\n          fieldModel.errorMessages = {};\n          Object.keys(fieldModel.validators).forEach((key) => {\n            fieldModel.errorMessages[key] = this.translate.instant(this.ERROR_PREFIX + fieldModel.id + '.' + key);\n          });\n        }\n      }\n    );\n  }\n\n  /**\n   * Update the user's metadata\n   *\n   * Sends a patch request for updating the user's metadata when at least one value changed or got added/removed and the\n   * form is valid.\n   * Nothing happens when the form is invalid or no metadata changed.\n   *\n   * Returns false when nothing happened.\n   */\n  updateProfile(): boolean {\n    if (!this.formGroup.valid) {\n      return false;\n    }\n\n    const newMetadata = cloneDeep(this.user.metadata);\n    let changed = false;\n    this.formModel.filter((fieldModel) => fieldModel.id !== 'email').forEach((fieldModel: DynamicFormValueControlModel<string>) => {\n      if (newMetadata.hasOwnProperty(fieldModel.name) && newMetadata[fieldModel.name].length > 0) {\n        if (hasValue(fieldModel.value)) {\n          if (newMetadata[fieldModel.name][0].value !== fieldModel.value) {\n            newMetadata[fieldModel.name][0].value = fieldModel.value;\n            changed = true;\n          }\n        } else {\n          newMetadata[fieldModel.name] = [];\n          changed = true;\n        }\n      } else if (hasValue(fieldModel.value)) {\n        newMetadata[fieldModel.name] = [{\n          value: fieldModel.value,\n          language: null\n        } as any];\n        changed = true;\n      }\n    });\n\n    if (changed) {\n      this.epersonService.update(Object.assign(cloneDeep(this.user), {metadata: newMetadata})).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload()\n      ).subscribe((user) => {\n        this.user = user;\n        this.setFormValues();\n        this.notificationsService.success(\n          this.translate.instant(this.NOTIFICATION_PREFIX + 'success.title'),\n          this.translate.instant(this.NOTIFICATION_PREFIX + 'success.content')\n        );\n      });\n    }\n\n    return changed;\n  }\n}\n","<ds-form *ngIf=\"formModel\"\n         [formId]=\"'profile-page-metadata-form-id'\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [displaySubmit]=\"false\"\n         [displayCancel]=\"false\">\n</ds-form>\n","<ds-dynamic-form-control-container *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                                   [formId]=\"formId\"\n                                   [group]=\"formGroup\"\n                                   [hasErrorMessaging]=\"model.hasErrorMessages\"\n                                   [hidden]=\"model.hidden\"\n                                   [layout]=\"formLayout\"\n                                   [model]=\"model\"\n                                   [templates]=\"templates\"\n                                   [asBootstrapFormGroup]=\"true\"\n                                   (dfBlur)=\"onCustomEvent($event, blur)\"\n                                   (dfChange)=\"onCustomEvent($event, change)\"\n                                   (dfFocus)=\"onCustomEvent($event, focus)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></ds-dynamic-form-control-container>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormComponent,\n  DynamicFormControlContainerComponent,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicFormComponentService,\n  DynamicTemplateDirective,\n} from '@ng-dynamic-forms/core';\nimport { DsDynamicFormControlContainerComponent } from './ds-dynamic-form-control-container.component';\n\n@Component({\n  selector: 'ds-dynamic-form',\n  templateUrl: './ds-dynamic-form.component.html'\n})\nexport class DsDynamicFormComponent extends DynamicFormComponent {\n\n  @Input() formId: string;\n  @Input() formGroup: FormGroup;\n  @Input() formModel: DynamicFormControlModel[];\n  @Input() formLayout: DynamicFormLayout;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n\n  @Output() ngbEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n  @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n  @ViewChildren(DsDynamicFormControlContainerComponent) components: QueryList<DynamicFormControlContainerComponent>;\n\n  constructor(changeDetectorRef: ChangeDetectorRef, componentService: DynamicFormComponentService) {\n    super(changeDetectorRef, componentService);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormComponent } from './form.component';\nimport { DsDynamicFormComponent } from './builder/ds-dynamic-form-ui/ds-dynamic-form.component';\nimport {\n  DsDynamicFormControlContainerComponent,\n  dsDynamicFormControlMapFn\n} from './builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component';\nimport { DsDynamicListComponent } from './builder/ds-dynamic-form-ui/models/list/dynamic-list.component';\nimport { DsDynamicLookupComponent } from './builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component';\nimport { DsDynamicDisabledComponent } from './builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component';\nimport { DsDynamicLookupRelationModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { DsDynamicScrollableDropdownComponent } from './builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component';\nimport { DsDynamicTagComponent } from './builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component';\nimport { DsDynamicOneboxComponent } from './builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component';\nimport { DsDynamicRelationGroupComponent } from './builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.components';\nimport { DsDatePickerComponent } from './builder/ds-dynamic-form-ui/models/date-picker/date-picker.component';\nimport { DsDynamicFormGroupComponent } from './builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component';\nimport { DsDynamicFormArrayComponent } from './builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component';\nimport { DsDatePickerInlineComponent } from './builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component';\nimport { DsDynamicLookupRelationSearchTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component';\nimport { DsDynamicLookupRelationSelectionTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component';\nimport { DsDynamicLookupRelationExternalSourceTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component';\nimport { SharedModule } from '../shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SearchModule } from '../search/search.module';\nimport { DYNAMIC_FORM_CONTROL_MAP_FN, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport { ExistingMetadataListElementComponent } from './builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component';\nimport { ExistingRelationListElementComponent } from './builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component';\nimport { ExternalSourceEntryImportModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component';\nimport { CustomSwitchComponent } from './builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component';\nimport { DynamicFormsNGBootstrapUIModule } from '@ng-dynamic-forms/ui-ng-bootstrap';\n\nconst COMPONENTS = [\n  CustomSwitchComponent,\n  DsDynamicFormComponent,\n  DsDynamicFormControlContainerComponent,\n  DsDynamicListComponent,\n  DsDynamicLookupComponent,\n  DsDynamicLookupRelationSearchTabComponent,\n  DsDynamicLookupRelationSelectionTabComponent,\n  DsDynamicLookupRelationExternalSourceTabComponent,\n  DsDynamicDisabledComponent,\n  DsDynamicLookupRelationModalComponent,\n  DsDynamicScrollableDropdownComponent,\n  DsDynamicTagComponent,\n  DsDynamicOneboxComponent,\n  DsDynamicRelationGroupComponent,\n  DsDatePickerComponent,\n  DsDynamicFormGroupComponent,\n  DsDynamicFormArrayComponent,\n  DsDatePickerInlineComponent,\n  ExistingMetadataListElementComponent,\n  ExistingRelationListElementComponent,\n  ExternalSourceEntryImportModalComponent,\n  FormComponent\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    DynamicFormsCoreModule,\n    DynamicFormsNGBootstrapUIModule,\n    SearchModule,\n    SharedModule,\n    TranslateModule\n  ],\n  exports: [\n    ...COMPONENTS\n  ],\n  providers: [\n    {\n      provide: DYNAMIC_FORM_CONTROL_MAP_FN,\n      useValue: dsDynamicFormControlMapFn\n    }\n  ]\n})\nexport class FormModule {\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { EPerson } from '../core/eperson/models/eperson.model';\nimport { ProfilePageMetadataFormComponent } from './profile-page-metadata-form/profile-page-metadata-form.component';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Group } from '../core/eperson/models/group.model';\nimport { RemoteData } from '../core/data/remote-data';\nimport { PaginatedList } from '../core/data/paginated-list.model';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { EPersonDataService } from '../core/eperson/eperson-data.service';\nimport {\n  getAllSucceededRemoteData,\n  getRemoteDataPayload,\n  getFirstCompletedRemoteData\n} from '../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { followLink } from '../shared/utils/follow-link-config.model';\nimport { AuthService } from '../core/auth/auth.service';\nimport { Operation } from 'fast-json-patch';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\n\n@Component({\n  selector: 'ds-profile-page',\n  styleUrls: ['./profile-page.component.scss'],\n  templateUrl: './profile-page.component.html'\n})\n/**\n * Component for a user to edit their profile information\n */\nexport class ProfilePageComponent implements OnInit {\n  /**\n   * A reference to the metadata form component\n   */\n  @ViewChild(ProfilePageMetadataFormComponent) metadataForm: ProfilePageMetadataFormComponent;\n\n  /**\n   * The authenticated user as observable\n   */\n  user$: Observable<EPerson>;\n\n  /**\n   * The groups the user belongs to\n   */\n  groupsRD$: Observable<RemoteData<PaginatedList<Group>>>;\n\n  /**\n   * Prefix for the notification messages of this component\n   */\n  NOTIFICATIONS_PREFIX = 'profile.notifications.';\n\n  /**\n   * Prefix for the notification messages of this security form\n   */\n  PASSWORD_NOTIFICATIONS_PREFIX = 'profile.security.form.notifications.';\n\n  /**\n   * The validity of the password filled in, in the security form\n   */\n  private invalidSecurity: boolean;\n\n  /**\n   * The password filled in, in the security form\n   */\n  private password: string;\n\n  /**\n   * The authenticated user\n   */\n  private currentUser: EPerson;\n  canChangePassword$: Observable<boolean>;\n\n  constructor(private authService: AuthService,\n              private notificationsService: NotificationsService,\n              private translate: TranslateService,\n              private epersonService: EPersonDataService,\n              private authorizationService: AuthorizationDataService) {\n  }\n\n  ngOnInit(): void {\n    this.user$ = this.authService.getAuthenticatedUserFromStore().pipe(\n      filter((user: EPerson) => hasValue(user.id)),\n      switchMap((user: EPerson) => this.epersonService.findById(user.id, true, true, followLink('groups'))),\n      getAllSucceededRemoteData(),\n      getRemoteDataPayload(),\n      tap((user: EPerson) => this.currentUser = user)\n    );\n    this.groupsRD$ = this.user$.pipe(switchMap((user: EPerson) => user.groups));\n    this.canChangePassword$ = this.user$.pipe(switchMap((user: EPerson) => this.authorizationService.isAuthorized(FeatureID.CanChangePassword, user._links.self.href)));\n  }\n\n  /**\n   * Fire an update on both the metadata and security forms\n   * Show a warning notification when no changes were made in both forms\n   */\n  updateProfile() {\n    const metadataChanged = this.metadataForm.updateProfile();\n    const securityChanged = this.updateSecurity();\n    if (!metadataChanged && !securityChanged) {\n      this.notificationsService.warning(\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'warning.no-changes.title'),\n        this.translate.instant(this.NOTIFICATIONS_PREFIX + 'warning.no-changes.content')\n      );\n    }\n  }\n\n  /**\n   * Sets the validity of the password based on an emitted of the form\n   * @param $event\n   */\n  setInvalid($event: boolean) {\n    this.invalidSecurity = $event;\n  }\n\n  /**\n   * Update the user's security details\n   *\n   * Sends a patch request for changing the user's password when a new password is present and the password confirmation\n   * matches the new password.\n   * Nothing happens when no passwords are filled in.\n   * An error notification is displayed when the password confirmation does not match the new password.\n   *\n   * Returns false when the password was empty\n   */\n  updateSecurity() {\n    const passEntered = isNotEmpty(this.password);\n\n    if (this.invalidSecurity) {\n      this.notificationsService.error(this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'error.general'));\n    }\n    if (!this.invalidSecurity && passEntered) {\n      const operation = {op: 'add', path: '/password', value: this.password} as Operation;\n      this.epersonService.patch(this.currentUser, [operation]).pipe(\n        getFirstCompletedRemoteData()\n      ).subscribe((response: RemoteData<EPerson>) => {\n        if (response.hasSucceeded) {\n          this.notificationsService.success(\n            this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'success.title'),\n            this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'success.content')\n          );\n        } else {\n          this.notificationsService.error(\n            this.translate.instant(this.PASSWORD_NOTIFICATIONS_PREFIX + 'error.title'), response.errorMessage\n          );\n        }\n      });\n    }\n    return passEntered;\n  }\n\n  /**\n   * Set the password value based on the value emitted from the security form\n   * @param $event\n   */\n  setPasswordValue($event: string) {\n    this.password = $event;\n  }\n\n  /**\n   * Submit of the security form that triggers the updateProfile method\n   */\n  submit() {\n    this.updateProfile();\n  }\n}\n","<ng-container *ngVar=\"(user$ | async) as user\">\n  <div class=\"container\" *ngIf=\"user\">\n    <h3 class=\"mb-4\">{{'profile.head' | translate}}</h3>\n    <div class=\"card mb-4\">\n      <div class=\"card-header\">{{'profile.card.identify' | translate}}</div>\n      <div class=\"card-body\">\n        <ds-profile-page-metadata-form [user]=\"user\"></ds-profile-page-metadata-form>\n      </div>\n    </div>\n    <div *ngIf=\"canChangePassword$ | async\" class=\"card mb-4 security-section\">\n      <div class=\"card-header\">{{'profile.card.security' | translate}}</div>\n      <div class=\"card-body\">\n        <ds-profile-page-security-form\n                [FORM_PREFIX]=\"'profile.security.form.'\"\n                (isInvalid)=\"setInvalid($event)\"\n                (passwordValue)=\"setPasswordValue($event)\"\n        ></ds-profile-page-security-form>\n      </div>\n    </div>\n    <div class=\"col-12 text-right pr-0\">\n      <button class=\"btn btn-primary\" (click)=\"updateProfile()\"><i class=\"fas fa-edit\"></i> {{'profile.form.submit' | translate}}</button>\n    </div>\n\n    <ng-container *ngVar=\"(groupsRD$ | async)?.payload?.page as groups\">\n      <div *ngIf=\"groups\">\n        <h3 class=\"mt-4\">{{'profile.groups.head' | translate}}</h3>\n        <ul class=\"list-group list-group-flush\">\n          <li *ngFor=\"let group of groups\" class=\"list-group-item\">{{group.name}}</li>\n        </ul>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}