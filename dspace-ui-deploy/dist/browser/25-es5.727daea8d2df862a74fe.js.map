{"version":3,"sources":["webpack:///src/app/admin/admin-registries/bitstream-formats/bitstream-formats.component.html","webpack:///src/app/admin/admin-registries/bitstream-formats/bitstream-formats.component.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/format-form/format-form.component.html","webpack:///src/app/admin/admin-registries/bitstream-formats/format-form/format-form.component.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/add-bitstream-format/add-bitstream-format.component.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/bitstream-formats.resolver.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/edit-bitstream-format/edit-bitstream-format.component.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/bitstream-formats-routing.module.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/bitstream-formats.module.ts","webpack:///src/app/admin/admin-registries/bitstream-formats/edit-bitstream-format/edit-bitstream-format.component.html","webpack:///src/app/admin/admin-registries/bitstream-formats/add-bitstream-format/add-bitstream-format.component.html","webpack:///src/app/admin/admin-routing-paths.ts","webpack:///src/app/shared/pagination/pagination.utils.ts","webpack:///src/app/admin/admin-registries/metadata-registry/metadata-schema-form/metadata-schema-form.component.html","webpack:///src/app/admin/admin-registries/metadata-registry/metadata-schema-form/metadata-schema-form.component.ts","webpack:///src/app/admin/admin-registries/metadata-registry/metadata-registry.component.html","webpack:///src/app/admin/admin-registries/metadata-registry/metadata-registry.component.ts","webpack:///src/app/admin/admin-registries/metadata-schema/metadata-field-form/metadata-field-form.component.html","webpack:///src/app/admin/admin-registries/metadata-schema/metadata-field-form/metadata-field-form.component.ts","webpack:///src/app/admin/admin-registries/metadata-schema/metadata-schema.component.html","webpack:///src/app/admin/admin-registries/metadata-schema/metadata-schema.component.ts","webpack:///src/app/admin/admin-registries/admin-registries-routing.module.ts","webpack:///src/app/admin/admin-registries/admin-registries.module.ts","webpack:///src/app/admin/admin-import-metadata-page/metadata-import-page.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-page.component.ts","webpack:///src/app/admin/admin-workflow-page/admin-workflow-page.component.ts","webpack:///src/app/admin/admin-curation-tasks/admin-curation-tasks.component.ts","webpack:///src/app/admin/admin-routing.module.ts","webpack:///src/app/admin/admin-import-metadata-page/metadata-import-page.component.html","webpack:///src/app/admin/admin-search-page/admin-search-page.component.html","webpack:///src/app/admin/admin-workflow-page/admin-workflow-page.component.html","webpack:///src/app/admin/admin-curation-tasks/admin-curation-tasks.component.html","webpack:///src/app/admin/admin-workflow-page/admin-workflow-search-results/workflow-item-admin-workflow-actions.component.html","webpack:///src/app/admin/admin-workflow-page/admin-workflow-search-results/workflow-item-admin-workflow-actions.component.ts","webpack:///src/app/admin/admin-workflow-page/admin-workflow-search-results/admin-workflow-search-result-grid-element/workflow-item/workflow-item-search-result-admin-workflow-grid-element.component.html","webpack:///src/app/admin/admin-workflow-page/admin-workflow-search-results/admin-workflow-search-result-grid-element/workflow-item/workflow-item-search-result-admin-workflow-grid-element.component.ts","webpack:///src/app/admin/admin-workflow-page/admin-workflow-search-results/admin-workflow-search-result-list-element/workflow-item/workflow-item-search-result-admin-workflow-list-element.component.html","webpack:///src/app/admin/admin-workflow-page/admin-workflow-search-results/admin-workflow-search-result-list-element/workflow-item/workflow-item-search-result-admin-workflow-list-element.component.ts","webpack:///src/app/admin/admin-workflow-page/admin-workflow.module.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/item-admin-search-result-actions.component.html","webpack:///src/app/admin/admin-search-page/admin-search-results/item-admin-search-result-actions.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-list-element/item-search-result/item-admin-search-result-list-element.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-list-element/community-search-result/community-admin-search-result-list-element.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-list-element/collection-search-result/collection-admin-search-result-list-element.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-list-element/item-search-result/item-admin-search-result-list-element.component.html","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-list-element/community-search-result/community-admin-search-result-list-element.component.html","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-list-element/collection-search-result/collection-admin-search-result-list-element.component.html","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-grid-element/item-search-result/item-admin-search-result-grid-element.component.html","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-grid-element/item-search-result/item-admin-search-result-grid-element.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-grid-element/community-search-result/community-admin-search-result-grid-element.component.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-grid-element/collection-search-result/collection-admin-search-result-grid-element.component.ts","webpack:///src/app/admin/admin-search-page/admin-search.module.ts","webpack:///src/app/admin/admin.module.ts","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-grid-element/community-search-result/community-admin-search-result-grid-element.component.html","webpack:///src/app/admin/admin-search-page/admin-search-results/admin-search-result-grid-element/collection-search-result/collection-admin-search-result-grid-element.component.html","webpack:///src/app/item-page/edit-item-page/edit-item-page.routing-paths.ts","webpack:///src/app/admin/admin-registries/admin-registries-routing-paths.ts"],"names":["BitstreamFormatsComponent","constructor","notificationsService","router","translateService","bitstreamFormatService","paginationService","config","Object","assign","elementsPerPage","pageConfig","id","pageSize","deleteFormats","this","clearBitStreamFormatRequests","subscribe","getSelectedBitstreamFormats","pipe","take","formats","tasks$","format","push","map","response","hasSucceeded","zip","results","successResponses","filter","result","failedResponses","length","showNotification","deselectAll","resetPage","deselectAllBitstreamFormats","isSelected","bitstreamFormat","bitstreamFormats","find","selectedFormat","selectBitStreamFormat","event","target","checked","selectBitstreamFormat","deselectBitstreamFormat","success","amount","prefix","suffix","get","content","head","error","ngOnInit","getFindListOptions","switchMap","findListOptions","findAll","ngOnDestroy","clearPagination","FormatFormComponent","AddBitstreamFormatComponent","BitstreamFormatsResolver","EditBitstreamFormatComponent","BitstreamFormatsRoutingModule","BitstreamFormatsModule","dynamicFormService","updatedFormat","EventEmitter","supportLevelOptions","label","Known","value","Unknown","Supported","arrayElementLayout","grid","group","arrayInputElementLayout","host","formModel","name","hint","required","validators","errorMessages","options","groupFactory","placeholder","initValues","forEach","fieldModel","extensions","extenstions","formArray","i","insertGroup","onSubmit","updatedBitstreamFormat","groups","emit","onCancel","navigate","route","notificationService","bitstreamFormatDataService","bitstreamFormatRD$","data","updateFormat","updateBitstreamFormat","g","resolve","state","findById","params","createBitstreamFormat","forChild","path","component","breadcrumb","breadcrumbKey","REGISTRIES_MODULE_PATH","getRegistriesModuleRoute","toString","toFindListOptions","pagination","original","currentPage","MetadataSchemaFormComponent","registryService","formBuilderService","formId","messagePrefix","formLayout","namespace","submitForm","combineLatest","pattern","D","formGroup","createFormGroup","getActiveMetadataSchema","schema","patchValue","metadatadataschemagroup","cancelEditMetadataSchema","clearMetadataSchemaRequests","values","createOrUpdateMetadataSchema","newSchema","updatedSchema","clearFields","MetadataRegistryComponent","needsUpdate$","BehaviorSubject","updateSchemas","metadataSchemas","update","getCurrentPagination","currentPagination","getMetadataSchemas","forceUpdateSchemas","next","editSchema","getActiveSchema","activeSchema","editMetadataSchema","isActive","selectMetadataSchema","deselectMetadataSchema","getSelectedMetadataSchemas","schemas","selectedSchema","deleteSchemas","deleteMetadataSchema","responses","hasFailed","deselectAllMetadataSchema","MetadataFieldFormComponent","element","qualifier","scopeNote","scopenote","getActiveMetadataField","field","metadatadatafieldgroup","cancelEditMetadataField","createMetadataField","metadataSchema","newField","updateMetadataField","updatedField","MetadataSchemaComponent","AdminRegistriesRoutingModule","AdminRegistriesModule","pageSizeOptions","initialize","metadataSchema$","getMetadataSchemaByPrefix","schemaName","updateFields","metadataFields$","getMetadataFieldsBySchema","forceUpdateFields","clearMetadataFieldRequests","editField","getActiveField","activeField","editMetadataField","selectMetadataField","deselectMetadataField","getSelectedMetadataFields","fields","selectedField","deleteFields","deleteMetadataField","deselectAllMetadataField","title","children","loadChildren","then","m","MetadataImportPageComponent","AdminSearchPageComponent","AdminWorkflowPageComponent","AdminCurationTasksComponent","AdminRoutingModule","location","translate","scriptDataService","setFile","file","fileObject","onReturn","back","importMetadata","parameterValues","invoke","rd","payload","navigateByUrl","processId","context","AdminSearch","AdminWorkflowSearch","WorkflowItemAdminWorkflowActionsComponent","getDeleteRoute","wfi","getSendBackRoute","WorkflowItemSearchResultAdminWorkflowGridElementComponent","componentFactoryResolver","linkService","truncatableService","themeService","bitstreamDataService","super","dso","resolveLink","item$","item","componentFactory","resolveComponentFactory","getComponent","viewContainerRef","listableObjectDirective","clear","componentRef","createComponent","badges","nativeElement","buttons","instance","object","index","linkType","listID","changeDetectorRef","detectChanges","getRenderTypes","GridElement","getThemeName","WorkflowItemSearchResultAdminWorkflowListElementComponent","AdminWorkflowModuleModule","dsoNameService","ListElement","ENTRY_COMPONENTS","static","ngModule","providers","provide","withEntryComponents","ItemAdminSearchResultListElementComponent","ItemAdminSearchResultActionsComponent","CommunityAdminSearchResultListElementComponent","CollectionAdminSearchResultListElementComponent","getEditRoute","getMoveRoute","getWithdrawRoute","getReinstateRoute","getPrivateRoute","getPublicRoute","editPath","uuid","ItemAdminSearchResultGridElementComponent","CommunityAdminSearchResultGridElementComponent","CollectionAdminSearchResultGridElementComponent","AdminSearchModule","AdminModule","AccessControlModule","ITEM_EDIT_WITHDRAW_PATH","ITEM_EDIT_REINSTATE_PATH","ITEM_EDIT_PRIVATE_PATH","ITEM_EDIT_PUBLIC_PATH","ITEM_EDIT_DELETE_PATH","ITEM_EDIT_MOVE_PATH","ITEM_EDIT_AUTHORIZATIONS_PATH","BITSTREAMFORMATS_MODULE_PATH","getBitstreamFormatsModuleRoute"],"mappings":"guHAsCuI,wCAAuC,yB,qCAAqE,+B,MAArE,4J,0IAVhK,sCACE,oFACE,yFACE,8FAEO,uK,iCAFP,8BAIF,8EACF,4EACA,sFAAI,yCAAsF,0BAAoC,8BAAI,8BAClI,sFAAI,yCAAsF,0BAA6B,8CAAmH,8BAAI,8BAC9O,sFAAI,yCAAsF,0B,sCAAqG,8BAAI,8BACrM,2E,4DARa,iHAKJ,8GAAmF,iFACnF,8GAAmF,iFAAoC,yEACvH,8GAAmF,yK,yBA7BpG,oD,kEAOE,gFACE,oFACE,mFACE,mFACE,oFACA,yFAAgB,0B,sCAA+D,8BAC/E,yFAAgB,0B,sCAAmE,8BACnF,yFAAgB,0B,sCAA4E,8BAC9F,2EACF,yEACA,qFACE,2F,kCAaF,yEACF,uEACF,qEACF,oE,gDAhCE,4DAAgC,4FAAhC,CAAgC,6HAAhC,CAAgC,cAAhC,CAAgC,8BAUR,iJACA,oJACA,6JAIc,sK,sBAiBxC,0CACE,yB,qCACF,+B,MADE,sK,gEAIA,6CAAuG,qIAAwB,yB,qCAAuE,8B,MAAvE,uJ,gEAC/H,6CAAuH,uIAA0B,yB,qCAAiE,8B,MAAjE,iJC5BlJ,IAAMA,EAAN,IAAMA,EAAN,WAwBLC,WAAoBC,EACAC,EACAC,EACAC,EACAC,aAJA,KAAAJ,uBACA,KAAAC,SACA,KAAAC,mBACA,KAAAC,yBACA,KAAAC,oBAjBpB,KAAAC,OAA0BC,OAAOC,OAAO,IAAI,IAAmB,CAC7DC,gBAAiB,KAOnB,KAAAC,WAAyCH,OAAOC,OAAO,IAAI,IAA8B,CACvFG,GAAI,MACJC,SAAU,KArBP,uCAoCLC,WAAeA,WACbC,KAAKV,uBAAuBW,+BAA+BC,YAC3DF,KAAKV,uBAAuBa,8BAA8BC,KAAK,OAAAC,EAAA,GAAK,IAAIH,WACrEI,YACC,IADDA,EACOC,EAAS,GADhBD,IAEsBA,GAFtBA,IAEC,gCAAWE,EAAX,QACM,YAASA,EAAOX,KAClBU,EAAOE,KAAKT,EAAKV,uBAALU,OAAmCQ,EAAOX,IAAIO,KAAK,OAAAM,EAAA,IAAKC,YAAQA,OAA4BA,EAASC,mBAJtHN,8BAOC,OAAAO,EAAA,gBAAON,GAAQL,WAAWY,YACxB,IAAMC,EAAmBD,EAAQE,QAAQC,YAAMA,OAAcA,KACvDC,EAAkBJ,EAAQE,QAAQC,YAAMA,OAAeA,KACzDF,EAAiBI,OAAS,GAC5BnB,EAAKoB,kBAAiBA,EAAML,EAAiBI,QAE3CD,EAAgBC,OAAS,GAC3BnB,EAAKoB,kBAAiBA,EAAOF,EAAgBC,QAG/CnB,EAAKqB,cAELrB,EAAKT,kBAAkB+B,UAAUtB,EAAKJ,WAAWC,YA1DpD,yBAmELwB,WACErB,KAAKV,uBAAuBiC,gCApEzB,wBA2ELC,SAAWC,GACT,OAAOzB,KAAKV,uBAAuBa,8BAA8BC,KAC/D,OAAAM,EAAA,IAAKgB,YAAgBA,OAC2E,MAAvFA,EAAiBC,MAAMC,YAAcA,OAAKA,EAAe/B,KAAO4B,EAAgB5B,YA9ExF,mCAwFLgC,SAAsBJ,EAAkCK,GACtDA,EAAMC,OAAOC,QACXhC,KAAKV,uBAAuB2C,sBAAsBR,GAClDzB,KAAKV,uBAAuB4C,wBAAwBT,KA3FnD,8BAmGGL,SAAiBe,EAAkBC,cACnCC,EAAS,4CACTC,EAASH,EAAU,UAAY,UAEpB,YACfnC,KAAKX,iBAAiBkD,IAAtBvC,UAA6BqC,EAA7BrC,YAAuCsC,EAAvCtC,UACAA,KAAKX,iBAAiBkD,IAAtBvC,UAA6BqC,EAA7BrC,YAAuCsC,EAAvCtC,WAAwD,CAACoC,OAAQA,KAE1DlC,WAAU,YAAQsC,aAANC,EAAMD,YAErBL,EACFnC,EAAKb,qBAAqBgD,QAAQM,EAAMD,GAExCxC,EAAKb,qBAAqBuD,MAAMD,EAAMD,QAhHvC,sBAqHLG,WAAUA,WAER3C,KAAK0B,iBAAmB1B,KAAKT,kBAAkBqD,mBAAmB5C,KAAKJ,WAAWC,GAAIG,KAAKR,QAAQY,KACjG,OAAAyC,EAAA,IAAWC,YAAeA,OACjB9C,EAAKV,uBAAuByD,QAAQD,SAzH5C,yBA+HLE,WACEhD,KAAKT,kBAAkB0D,gBAAgBjD,KAAKJ,WAAWC,QAhIpD,M,oCAAMZ,GAAyB,gM,mDAAzBA,EAAyB,89B,aAAA,MDvBtC,yCACE,yEACE,2EAEE,8EAA4C,yB,qCAAyD,8BAErG,8EAAoB,0B,sCAAgE,8BACpF,6EAAgC,wCAAgD,0B,sCAA+D,8BAAI,8BAGnJ,iG,kCAmCA,iF,kCAIA,+EACE,sF,kCACA,uF,kCACF,mEACF,iEACF,+DACF,6DACA,gC,OApDkD,wIAExB,iJACe,0EAA6C,gJAI7E,+KAkCG,gLAKK,mMACA,qM,0MEnDjB,6CAEiC,uIAAyB,yGAAuB,8B,6CADxE,qDAA2B,0BCwB7B,IAAMiE,ECRAC,ECLAC,ECQAC,ECmBAC,ECbAC,ELDN,IAAML,EAAN,WAiGLhE,WAAoBsE,EACAnE,EACAD,wBAFA,KAAAoE,qBACA,KAAAnE,mBACA,KAAAD,SA7FX,KAAAqC,gBAAmC,IAAI,IAKtC,KAAAgC,cAA+C,IAAI,EAAAC,aAK7D,KAAAC,oBAAsB,CAAC,CAACC,MAAO,IAA4BC,MAAOC,MAAO,IAA4BD,OACnG,CAACD,MAAO,IAA4BG,QAASD,MAAO,IAA4BC,SAChF,CAACH,MAAO,IAA4BI,UAAWF,MAAO,IAA4BE,YAKpF,KAAAC,mBAA+C,CAC7CC,KAAM,CACJC,MAAO,aAOX,KAAAC,wBAAoD,CAClDF,KAAM,CACJG,KAAM,QAOV,KAAAC,UAAuC,CACrC,IAAI,IAAkB,CACpBzE,GAAI,mBACJ0E,KAAM,mBACNX,MAAO,iEACPY,KAAM,gEACNC,UAASA,EACTC,WAAY,CACVD,SAAU,MAEZE,cAAe,CACbF,SAAU,mDAGd,IAAI,IAAkB,CACpB5E,GAAI,WACJ0E,KAAM,WACNX,MAAO,yDACPY,KAAM,0DAGR,IAAI,IAAqB,CACvB3E,GAAI,cACJ0E,KAAM,cACNX,MAAO,4DACPY,KAAM,6DAGR,IAAI,IAAmB,CACrB3E,GAAI,eACJ0E,KAAM,eACNK,QAAS5E,KAAK2D,oBACdC,MAAO,6DACPY,KAAM,4DACNV,MAAO9D,KAAK2D,oBAAoB,GAAGG,QAGrC,IAAI,IAAqB,CACvBjE,GAAI,WACJ0E,KAAM,WACNX,MAAO,WACPY,KAAM,0DAER,IAAI,IAAsB,CACxB3E,GAAI,aACJ0E,KAAM,aACNX,MAAO,2DACPiB,aAAc,iBAAM,CAClB,IAAI,IAAkB,CACpBhF,GAAI,YACJiF,YAAa,kEACZ9E,EAAKoE,4BAETpE,KAAKiE,qBA9FL,kCAuGLtB,WAEE3C,KAAK+E,eAzGF,wBA+GLA,WAAYA,WACV/E,KAAKsE,UAAUU,SACZC,YACC,GAAwB,eAApBA,EAAWV,MACb,GAAI,YAASvE,EAAKyB,gBAAgByD,YAGhC,IAFA,IAAMC,EAAcnF,EAAKyB,gBAAgByD,WACnCE,EAAaH,EACVI,EAAI,EAAGA,EAAIF,EAAYhE,OAAQkE,IACtCD,EAAUE,YAAYD,GAAGlB,MAAM,GAAK,IAAI,IAAkB,CACxDtE,GAAGA,aAADA,OAAewF,GACjBvB,MAAOqB,EAAYE,IAClBrF,EAAKoE,8BAIR,YAASpE,EAAKyB,gBAAgBwD,EAAWV,SAC1CU,EAAiCnB,MAAQ9D,EAAKyB,gBAAgBwD,EAAWV,YA/H/E,sBAyILgB,WACE,IAAMC,EAAyB/F,OAAOC,OAAO,IAAI,IAC/C,CACEG,GAAIG,KAAKyB,gBAAgB5B,KAG7BG,KAAKsE,UAAUU,SACZC,YACC,GAAwB,eAApBA,EAAWV,KAAuB,CAGpC,IAFA,IAAMa,EAAaH,EACbC,EAAa,GACVG,EAAI,EAAGA,EAAID,EAAUK,OAAOtE,OAAQkE,IAAK,CAChD,IAAMvB,EAASsB,EAAU7C,IAAI8C,GAAG9C,IAAI,GAAyBuB,MACxD,YAAQA,IACXoB,EAAWzE,KAAM2E,EAAU7C,IAAI8C,GAAG9C,IAAI,GAAyBuB,OAGnE0B,EAAuBN,WAAaA,OAEpCM,EAAuBP,EAAWV,MAASU,EAAiCnB,SAGlF9D,KAAKyD,cAAciC,KAAKF,KA/JrB,sBAqKLG,WACE3F,KAAKZ,OAAOwG,SAAS,CAAC,oBAtKnB,M,oCAAM1C,GAAmB,oH,mDAAnBA,EAAmB,uRDzBhC,+C,KAAU,+C,sFIoBH,IAAMG,EAAN,WAOLnE,WACU2G,EACAzG,EACA0G,EACAzG,EACA0G,aAJA,KAAAF,QACA,KAAAzG,SACA,KAAA0G,sBACA,KAAAzG,mBACA,KAAA0G,6BAZL,kCAgBLpD,WACE3C,KAAKgG,mBAAqBhG,KAAK6F,MAAMI,KAAK7F,KACxC,OAAAM,EAAA,IAAKuF,YAAIA,OAAKA,EAAKxE,sBAlBlB,0BA2BLyE,SAAazE,cACXzB,KAAK+F,2BAA2BI,sBAAsB1E,GAAiBrB,KACrE,SAAAgG,EAAA,IACAlG,WAAWS,YACLA,EAASC,cACXZ,EAAK8F,oBAAoB3D,QAAQnC,EAAKX,iBAAiBkD,IAAI,wDACzDvC,EAAKX,iBAAiBkD,IAAI,4DAC5BvC,EAAKZ,OAAOwG,SAAS,CAAC,iBAEtB5F,EAAK8F,oBAAoBpD,MAAM,uDAC7B,iEArCL,M,oCAAMW,GAA4B,gM,mDAA5BA,EAA4B,2N,SAAA,MGpBzC,yCACI,2EACI,+EACI,kFAC+B,yB,sEAAgI,8BAE9J,6GAAoF,8DAAiB,EAAA6C,aAAA,M,kCAAsB,8BAEhI,uEACJ,iEACJ,8D,OAN2C,gRAEJ,0J,oDJMhC,IAAM9C,EAAN,WACLlE,WAAoB6G,aAAA,KAAAA,6BADf,iCAWLM,SAAQR,EAA+BS,GACrC,OAAOtG,KAAK+F,2BAA2BQ,SAASV,EAAMW,OAAO3G,IAC1DO,KACC,SAAAgG,EAAA,QAdD,M,oCAAMhD,GAAwB,+B,sDAAxBA,EAAwB,QAAxBA,EAAwB,Y,GDK9B,IAAMD,EAAN,WAELjE,WACUE,EACA0G,EACAzG,EACA0G,aAHA,KAAA3G,SACA,KAAA0G,sBACA,KAAAzG,mBACA,KAAA0G,6BANL,+CAgBLU,SAAsBhF,cACpBzB,KAAK+F,2BAA2BU,sBAAsBhF,GAAiBrB,KACrE,SAAAgG,EAAA,IACAlG,WAAWS,YACLA,EAASC,cACXZ,EAAK8F,oBAAoB3D,QAAQnC,EAAKX,iBAAiBkD,IAAI,0DACzDvC,EAAKX,iBAAiBkD,IAAI,8DAC5BvC,EAAKZ,OAAOwG,SAAS,CAAC,gBACtB5F,EAAK+F,2BAA2B9F,+BAA+BC,aAE/DF,EAAK8F,oBAAoBpD,MAAM1C,EAAKX,iBAAiBkD,IAAI,0DACvDvC,EAAKX,iBAAiBkD,IAAI,qEA3B/B,M,oCAAMY,GAA2B,0J,mDAA3BA,EAA2B,6MMjBxC,yCACI,2EACI,+EACI,kFAC+B,yB,qCAAiE,8BAEhG,2GAA0B,8DAAiB,EAAAsD,sBAAA,MAA+B,8BAE9E,uEACJ,iEACJ,8D,MAN2C,gJ,4DHmCpC,IAAMnD,EAAN,yB,oCAAMA,I,kDAAAA,I,uDAJA,CACT,GACD,SAzBQ,CACP,IAAaoD,SAAS,CACpB,CACEC,KAAM,GACNC,UAAW,GAEb,CACED,KAVyB,MAWzBN,QAAS,CAAEQ,WAAY,KACvBD,UAAW,EACXX,KAAM,CAACa,cAAe,8CAExB,CACEH,KAjB0B,WAkB1BC,UAAW,EACXP,QAAS,CACP5E,gBAAiB,EACjBoF,WAAY,KAEdZ,KAAM,CAACa,cAAe,kD,eCLvB,KAAMvD,EAAN,yB,oCAAMA,I,kDAAAA,I,sDAdF,CACP,IACA,IACA,IACA,EACA,Q,sCGjBJ,gGAGawD,EAAyB,aAE/B,SAASC,IACd,OAAO,IAAI,IAAY,cAAuBD,GAAwBE,a,wOCEjE,SAASC,EAAkBC,EAAwCC,GACxE,OAAO3H,OAAOC,OAAO,IAAI,IAAmB0H,EAAU,CACpDC,YAAaF,EAAWE,YACxB1H,gBAAiBwH,EAAWrH,W,yKCXhC,kC,yBAGI,wEAAI,yB,qCAAyC,8BACjD,+B,0CADQ,yH,yBAIJ,wEAAI,yB,qCAAuC,8BAC/C,+B,0CADQ,uHCeD,IAAMwH,EAAN,IAAMA,EAAN,WAqDLpI,WAAmBqI,EAA0CC,EAAgDnI,aAA1F,KAAAkI,kBAA0C,KAAAC,qBAAgD,KAAAnI,mBAhD7G,KAAAoI,OAAS,uBAKT,KAAAC,cAAgB,iCAoBhB,KAAAC,WAAgC,CAC9BpD,KAAM,CACJL,KAAM,CACJG,KAAM,gCAGVuD,UAAW,CACT1D,KAAM,CACJG,KAAM,iCAaF,KAAAwD,WAAgC,IAAI,EAAAnE,aAnDzC,kCAwDLf,WAAUA,WACR,OAAAmF,EAAA,GACE9H,KAAKX,iBAAiBkD,IAAtBvC,UAA6BA,KAAK0H,cAAlC1H,UACAA,KAAKX,iBAAiBkD,IAAtBvC,UAA6BA,KAAK0H,cAAlC1H,gBACAE,WAAU,YAAQ0H,aAANrD,EAAMqD,YAClB5H,EAAKuE,KAAO,IAAI,IAAkB,CAC9B1E,GAAI,OACJ+D,MAAOW,EACPA,KAAM,OACNG,WAAY,CACVD,SAAU,KACVsD,QAAS,kBAEXtD,UAASA,IAEbzE,EAAK4H,UAAY,IAAI,IAAkB,CACnC/H,GAAI,YACJ+D,MAAOgE,EACPrD,KAAM,YACNG,WAAY,CACVD,SAAU,MAEZA,UAASA,IAEbzE,EAAKsE,UAAY,CACf,IAAI,EAAA0D,EACF,CACEnI,GAAI,0BACJsE,MAAM,CAACnE,EAAK4H,UAAW5H,EAAKuE,SAGlCvE,EAAKiI,UAAYjI,EAAKwH,mBAAmBU,gBAAgBlI,EAAKsE,WAC9DtE,EAAKuH,gBAAgBY,0BAA0BjI,WAAWkI,YACxDpI,EAAKiI,UAAUI,WAAW,CACxBC,wBAAwB,CACtB/D,KAAgB,MAAV6D,EAAiBA,EAAO/F,OAAS,GACvCuF,UAAqB,MAAVQ,EAAiBA,EAAOR,UAAY,cA5FpD,sBAsGLjC,WACE3F,KAAKuH,gBAAgBgB,6BAvGlB,sBAgHLhD,WAAUA,WACRvF,KAAKuH,gBAAgBiB,8BAA8BtI,YACnDF,KAAKuH,gBAAgBY,0BAA0B/H,KAAK,OAAAC,EAAA,GAAK,IAAIH,WAC1DkI,YACC,IAAMK,EAAS,CACbpG,OAAQrC,EAAKuE,KAAKT,MAClB8D,UAAW5H,EAAK4H,UAAU9D,OAEd,MAAVsE,EACFpI,EAAKuH,gBAAgBmB,6BAA6BjJ,OAAOC,OAAO,IAAI,IAAkB+I,IAASvI,WAAWyI,YACxG3I,EAAK6H,WAAWnC,KAAKiD,MAGvB3I,EAAKuH,gBAAgBmB,6BAA6BjJ,OAAOC,OAAO,IAAI,IAAkB0I,EAAQ,CAC5FvI,GAAIuI,EAAOvI,GACXwC,OAASoG,EAAOpG,OAASoG,EAAOpG,OAAS+F,EAAO/F,OAChDuF,UAAYa,EAAOb,UAAYa,EAAOb,UAAYQ,EAAOR,aACvD1H,WAAW0I,YACb5I,EAAK6H,WAAWnC,KAAKkD,MAGzB5I,EAAK6I,cACL7I,EAAKuH,gBAAgBgB,gCAtItB,yBA8ILM,WACE7I,KAAKiI,UAAUI,WAAW,CACxBC,wBAAwB,CACtBjG,OAAQ,GACRuF,UAAW,QAlJZ,yBA0JL5E,WACEhD,KAAK2F,eA3JF,M,oCAAM2B,GAA2B,oH,mDAA3BA,EAA2B,yQ,GAAA,MDtBxC,2C,iCAEA,8HAIA,8HAIA,6EAIS,sDAAU,EAAA3B,aAAV,CAAqB,gCACP,EAAAJ,cAEvB,+DACA,gC,yEAlBM,8GAAyD,aAAzD,CAAyD,cAUtD,yEAAiB,wBAAjB,CAAiB,wBAAjB,CAAiB,6B,oPEkBF,yC,iCAEI,gGACI,uGACI,8GAEO,sK,iCAFP,8BAIJ,4FACJ,yFACA,qGAA2B,wJAA6B,yCAAkC,0BAAa,8BAAI,8BAC3G,qGAA2B,wJAA6B,yCAAkC,0BAAoB,8BAAI,8BAClH,qGAA2B,wJAA6B,yCAAkC,0BAAiB,8BAAI,8BACnH,qF,4DAZI,wHAIe,kHAK4C,kHAA+B,mEAC/B,kHAA+B,0EAC/B,kHAA+B,wE,yBA9B1G,mD,iCAOI,0FACI,8FACI,+FACA,4FACI,gGACA,qGAAgB,0B,sCAA4D,8BAC5E,qGAAgB,0B,sCAAmE,8BACnF,qGAAgB,0B,sCAA8D,8BAClF,qFACA,qFACA,iGACA,qG,kCAcA,qFACJ,iFACJ,6EAEJ,4E,8CAlCQ,wDAA4B,2HAA5B,CAA4B,cAA5B,CAA4B,8BAUJ,8IACA,oJACA,+IAIG,qK,sBAoBnC,0CACE,yB,qCACF,+B,MADE,iL,gEAIA,6CAAsH,uIAA0B,yB,qCAAgE,8B,MAAhE,gJC3BvJ,IAAMuD,EAAN,IAAMA,EAAN,WAoBL5J,WAAoBqI,EACApI,EACAC,EACAG,EACAF,aAJA,KAAAkI,kBACA,KAAApI,uBACA,KAAAC,SACA,KAAAG,oBACA,KAAAF,mBAdpB,KAAAG,OAAqCC,OAAOC,OAAO,IAAI,IAA8B,CACnFG,GAAI,KACJC,SAAU,KAMZ,KAAAiJ,aAAyC,IAAIC,EAAA,MAO3ChJ,KAAKiJ,gBAzBF,uCA+BGA,WAAeA,WAErBjJ,KAAKkJ,gBAAkBlJ,KAAK+I,aAAa3I,KACvC,OAAAY,EAAA,IAAQmI,YAAMA,OAANA,IAAWA,KACnB,OAAAtG,EAAA,IAAU,kBAAM7C,EAAKT,kBAAkB6J,qBAAqBpJ,EAAKR,OAAOK,GAAIG,EAAKR,WACjF,OAAAqD,EAAA,IAAWwG,YAAiBA,OAAKrJ,EAAKuH,gBAAgB+B,mBAAmBpC,EAAkBmC,UApC1F,gCA4CEE,WACLvJ,KAAK+I,aAAaS,MAAKA,KA7CpB,wBAoDLC,SAAWrB,cACTpI,KAAK0J,kBAAkBtJ,KAAK,OAAAC,EAAA,GAAK,IAAIH,WAAWyJ,YAC1CvB,IAAWuB,EACb3J,EAAKuH,gBAAgBgB,2BAErBvI,EAAKuH,gBAAgBqC,mBAAmBxB,QAzDzC,sBAkELyB,SAASzB,GACP,OAAOpI,KAAK0J,kBAAkBtJ,KAC5B,OAAAM,EAAA,IAAKiJ,YAAYA,OAAKvB,IAAWuB,QApEhC,6BA2ELD,WACE,OAAO1J,KAAKuH,gBAAgBY,4BA5EzB,kCAoFL2B,SAAqB1B,EAAwBtG,GAC3CA,EAAMC,OAAOC,QACXhC,KAAKuH,gBAAgBuC,qBAAqB1B,GAC1CpI,KAAKuH,gBAAgBwC,uBAAuB3B,KAvF3C,wBA8FL5G,SAAW4G,GACT,OAAOpI,KAAKuH,gBAAgByC,6BAA6B5J,KACvD,OAAAM,EAAA,IAAKuJ,YAAOA,OAAoE,MAA/DA,EAAQtI,MAAMuI,YAAcA,OAAKA,IAAmB9B,WAhGpE,2BAuGL+B,WAAeA,WACbnK,KAAKuH,gBAAgBiB,8BAA8BtI,YACnDF,KAAKuH,gBAAgByC,6BAA6B5J,KAAK,OAAAC,EAAA,GAAK,IAAIH,WAC7D+J,YACC,IADDA,EACO1J,EAAS,GADhB0J,IAEsBA,GAFtBA,IAEC,gCAAW7B,EAAX,QACM,YAASA,EAAOvI,KAClBU,EAAOE,KAAKT,EAAKuH,gBAAgB6C,qBAAqBhC,EAAOvI,IAAIO,KAAK,SAAAgG,EAAA,MAJ3E6D,8BAOC,OAAApJ,EAAA,gBAAON,GAAQL,WAAWmK,YACxB,IAAMtJ,EAAmBsJ,EAAUrJ,QAAQL,YAAQA,OAA4BA,EAASC,gBAClFM,EAAkBmJ,EAAUrJ,QAAQL,YAAQA,OAA4BA,EAAS2J,aACnFvJ,EAAiBI,OAAS,GAC5BnB,EAAKoB,kBAAiBA,EAAML,EAAiBI,QAE3CD,EAAgBC,OAAS,GAC3BnB,EAAKoB,kBAAiBA,EAAOF,EAAgBC,QAE/CnB,EAAKuH,gBAAgBgD,4BACrBvK,EAAKuH,gBAAgBgB,2BACrBvI,EAAKuJ,6BA5HR,8BAuILnI,SAAiBe,EAAkBC,cAC3BC,EAAS,uCACTC,EAASH,EAAU,UAAY,UACpB,YACfnC,KAAKX,iBAAiBkD,IAAtBvC,UAAuCqC,EAAvCrC,YAAiDsC,IACjDtC,KAAKX,iBAAiBkD,IAAtBvC,UAA6BqC,EAA7BrC,oBAA+CsC,GAAU,CAACF,OAAQA,KAE3DlC,WAAU,YAAQsC,aAANC,EAAMD,YACrBL,EACFnC,EAAKb,qBAAqBgD,QAAQM,EAAMD,GAExCxC,EAAKb,qBAAqBuD,MAAMD,EAAMD,QAlJvC,yBAsJLQ,WACEhD,KAAKT,kBAAkB0D,gBAAgBjD,KAAKR,OAAOK,QAvJhD,M,oCAAMiJ,GAAyB,gM,mDAAzBA,EAAyB,g4B,WAAA,MD1BtC,yCACI,2EACI,+EAEI,oFAA2C,yB,qCAAgD,8BAE3F,oFAAiC,0B,sCAAuD,8BAExF,2GAAyB,0DAAc,EAAAS,wBAAsB,8BAE7D,qG,kCAsCA,yF,kCAIA,qFACE,4F,kCACF,yEAEJ,uEACJ,iEACJ,6DACA,gC,OAvDuD,+HAEV,uIAKxB,6KAqCH,+KAKK,oM,qLErDvB,kC,yBAGI,wEAAI,yB,qCAAyC,8BACjD,+B,0CADQ,yH,yBAIJ,wEAAI,yB,qCAAuC,8BAC/C,+B,0CADQ,uHCgBD,IAAMiB,EAAN,IAAMA,EAAN,WAoELtL,WAAmBqI,EACCC,EACAnI,aAFD,KAAAkI,kBACC,KAAAC,qBACA,KAAAnI,mBAjEpB,KAAAoI,OAAS,sBAKT,KAAAC,cAAgB,+BA8BhB,KAAAC,WAAgC,CAC9B8C,QAAS,CACPvG,KAAM,CACJG,KAAM,gCAGVqG,UAAW,CACTxG,KAAM,CACJG,KAAM,gCAGVsG,UAAW,CACTzG,KAAM,CACJG,KAAM,kCAaF,KAAAwD,WAAgC,IAAI,EAAAnE,aAlEzC,kCA4ELf,WAAUA,WACR,OAAAmF,EAAA,GACE9H,KAAKX,iBAAiBkD,IAAtBvC,UAA6BA,KAAK0H,cAAlC1H,aACAA,KAAKX,iBAAiBkD,IAAtBvC,UAA6BA,KAAK0H,cAAlC1H,eACAA,KAAKX,iBAAiBkD,IAAtBvC,UAA6BA,KAAK0H,cAAlC1H,gBACAE,WAAU,YAAsB0K,aAApBH,EAAoBG,KAAXF,EAAWE,YAChC5K,EAAKyK,QAAU,IAAI,IAAkB,CACnC5K,GAAI,UACJ+D,MAAO6G,EACPlG,KAAM,UACNG,WAAY,CACVD,SAAU,MAEZA,UAASA,IAEXzE,EAAK0K,UAAY,IAAI,IAAkB,CACrC7K,GAAI,YACJ+D,MAAO8G,EACPnG,KAAM,YACNE,UAASA,IAEXzE,EAAK2K,UAAY,IAAI,IAAkB,CACrC9K,GAAI,YACJ+D,MAAOgH,EACPrG,KAAM,YACNE,UAASA,IAEXzE,EAAKsE,UAAY,CACf,IAAI,EAAA0D,EACJ,CACEnI,GAAI,yBACJsE,MAAM,CAACnE,EAAKyK,QAASzK,EAAK0K,UAAW1K,EAAK2K,cAG9C3K,EAAKiI,UAAYjI,EAAKwH,mBAAmBU,gBAAgBlI,EAAKsE,WAC9DtE,EAAKuH,gBAAgBsD,yBAAyB3K,WAAW4K,YACvD9K,EAAKiI,UAAUI,WAAW,CACxB0C,uBAAwB,CACtBN,QAAkB,MAATK,EAAgBA,EAAML,QAAU,GACzCC,UAAoB,MAATI,EAAgBA,EAAMJ,UAAY,GAC7CC,UAAoB,MAATG,EAAgBA,EAAMH,UAAY,cApHlD,sBA8HLhF,WACE3F,KAAKuH,gBAAgByD,4BA/HlB,sBAwILzF,WAAUA,WACRvF,KAAKuH,gBAAgBsD,yBAAyBzK,KAAK,OAAAC,EAAA,GAAK,IAAIH,WACzD4K,YACC,IAAMrC,EAAS,CACbgC,QAASzK,EAAKyK,QAAQ3G,MACtB4G,UAAW1K,EAAK0K,UAAU5G,MAC1B6G,UAAW3K,EAAK2K,UAAU7G,OAEf,MAATgH,EACF9K,EAAKuH,gBAAgB0D,oBAAoBxL,OAAOC,OAAO,IAAI,IAAiB+I,GAASzI,EAAKkL,gBAAgBhL,WAAWiL,YACnHnL,EAAK6H,WAAWnC,KAAKyF,MAGvBnL,EAAKuH,gBAAgB6D,oBAAoB3L,OAAOC,OAAO,IAAI,IAAiBoL,EAAO,CACjFjL,GAAIiL,EAAMjL,GACV4K,QAAUhC,EAAOgC,QAAUhC,EAAOgC,QAAUK,EAAML,QAClDC,UAAYjC,EAAOiC,UAAYjC,EAAOiC,UAAYI,EAAMJ,UACxDC,UAAYlC,EAAOkC,UAAYlC,EAAOkC,UAAYG,EAAMH,aACtDzK,WAAWmL,YACbrL,EAAK6H,WAAWnC,KAAK2F,MAGzBrL,EAAK6I,cACL7I,EAAKuH,gBAAgByD,+BA/JtB,yBAuKLnC,WACE7I,KAAKiI,UAAUI,WAAW,CACxB0C,uBAAwB,CACtBN,QAAS,GACTC,UAAW,GACXC,UAAW,QA5KZ,yBAoLL3H,WACEhD,KAAK2F,eArLF,M,oCAAM6E,GAA0B,oH,mDAA1BA,EAA0B,6S,GAAA,MDvBvC,2C,iCAEA,8HAIA,8HAIA,6EAIS,sDAAU,EAAA7E,aAAV,CAAqB,4BACX,EAAAJ,cAEnB,+DACA,gC,yEAlBM,6GAAwD,aAAxD,CAAwD,cAUrD,yEAAiB,wBAAjB,CAAiB,0BAAjB,CAAiB,2B,4HE+BgF,yCAA+B,6BAAC,+B,+GAT5H,yC,iCAEE,oFACE,yFACE,8FAEO,qK,iCAFP,8BAGF,8EACF,6EACA,yFAA2B,uJAA2B,0BAAoC,+CAAwC,0BAAmB,8BACrJ,yFAA2B,uJAA2B,0BAAmB,8BAC3E,2E,mGAVI,yHAIS,iHAI2C,yGAA4C,0EAAgC,0EAC5E,2E,0BA3B9D,oDAOE,kFACE,sFACE,qFACA,kFACE,gFACA,yFAAgB,0B,sCAA4D,8BAC5E,yFAAgB,0B,sCAAgE,8BAClF,2EACA,2EACA,uFACA,4FAYA,2EACF,yEACF,uEACF,sE,kFA9BE,wDAA4B,kBAA5B,CAA4B,8CAA5B,CAA4B,cAA5B,CAA4B,8BAUN,6IACA,iJAII,sF,uBAiB5B,0CACE,yB,qCACF,+B,MADE,sK,iEAKA,6CAA0F,uIAAyB,yB,qCAA6D,8B,MAA7D,6I,kFAzCvH,0CACE,8FAkCA,oFAIA,+EACE,qFAA8E,yB,sCAAgD,8BAC9H,0FACF,qEACF,6E,mBAzCK,+FAiCG,gGAKI,yGAAsE,gIACrE,4G,yGArDf,yCAEE,8EAA2C,yB,qCAAoE,8BAE/G,6EAAiC,yB,qCAAuF,8BAExH,mGAEE,gJAAmC,8BAErC,8EAAI,0B,sCAAqD,8BAEzD,8F,kCA6CF,mE,yDAvD6C,iKAEV,mMAG/B,0EAGE,sIAEW,6ICoBd,IAAM+F,GCGAC,GCTAC,GFMN,KAAMF,GAAN,WAyBLpM,WAAoBqI,EACA1B,EACA1G,EACAC,EACAG,EACAF,aALA,KAAAkI,kBACA,KAAA1B,QACA,KAAA1G,uBACA,KAAAC,SACA,KAAAG,oBACA,KAAAF,mBAhBpB,KAAAG,OAAqCC,OAAOC,OAAO,IAAI,IAA8B,CACnFG,GAAI,KACJC,SAAU,GACV2L,gBAAiB,CAAC,GAAI,GAAI,IAAK,OAMjC,KAAA1C,aAAyC,IAAIC,EAAA,MAvBxC,kCAkCLrG,WAAUA,WACR3C,KAAK6F,MAAMW,OAAOtG,WAAWsG,YAC3BxG,EAAK0L,WAAWlF,QApCf,wBA4CLkF,SAAWlF,GACTxG,KAAK2L,gBAAkB3L,KAAKuH,gBAAgBqE,0BAA0BpF,EAAOqF,YAAYzL,KAAK,eAC9FJ,KAAK8L,iBA9CF,0BAoDGA,WAAcA,WACpB9L,KAAK+L,gBAAkB/L,KAAKT,kBAAkB6J,qBAAqBpJ,KAAKR,OAAOK,GAAIG,KAAKR,QAAQY,KAC9F,OAAAyC,EAAA,IAAWwG,YAAiBA,OAAK,OAAAvB,EAAA,GAAc9H,EAAK2L,gBAAiB3L,EAAK+I,aAAc,YAAaM,OACrG,OAAAxG,EAAA,IAAU,yBAAEuF,EAAF,KAAUe,EAAV,KAAkBE,EAAlB,YACJF,GACFnJ,EAAK+I,aAAaS,MAAKA,GAElBxJ,EAAKuH,gBAAgByE,0BAA0B5D,EAAQlB,EAAkBmC,IAAqBF,GAAOA,SA3D7G,+BAoEE8C,WACLjM,KAAKuH,gBAAgB2E,6BACrBlM,KAAK+I,aAAaS,MAAKA,KAtEpB,uBA6EL2C,SAAUrB,cACR9K,KAAKoM,iBAAiBhM,KAAK,OAAAC,EAAA,GAAK,IAAIH,WAAWmM,YACzCvB,IAAUuB,EACZrM,EAAKuH,gBAAgByD,0BAErBhL,EAAKuH,gBAAgB+E,kBAAkBxB,QAlFxC,sBA2FLjB,SAASiB,GACP,OAAO9K,KAAKoM,iBAAiBhM,KAC3B,OAAAM,EAAA,IAAK2L,YAAWA,OAAKvB,IAAUuB,QA7F9B,4BAoGLD,WACE,OAAOpM,KAAKuH,gBAAgBsD,2BArGzB,iCA6GL0B,SAAoBzB,EAAsBhJ,GACxCA,EAAMC,OAAOC,QACXhC,KAAKuH,gBAAgBgF,oBAAoBzB,GACzC9K,KAAKuH,gBAAgBiF,sBAAsB1B,KAhH1C,wBAuHLtJ,SAAWsJ,GACT,OAAO9K,KAAKuH,gBAAgBkF,4BAA4BrM,KACtD,OAAAM,EAAA,IAAKgM,YAAMA,OAAgE,MAA3DA,EAAO/K,MAAMgL,YAAaA,OAAKA,IAAkB7B,WAzHhE,0BAgIL8B,WAAcA,WACZ5M,KAAKuH,gBAAgBkF,4BAA4BrM,KAAK,OAAAC,EAAA,GAAK,IAAIH,WAC5DwM,YACC,IADDA,EACOnM,EAAS,GADhBmM,IAEqBA,GAFrBA,IAEC,gCAAW5B,EAAX,QACM,YAASA,EAAMjL,KACjBU,EAAOE,KAAKT,EAAKuH,gBAAgBsF,oBAAoB/B,EAAMjL,IAAIO,KAAK,SAAAgG,EAAA,MAJzEsG,8BAOC,OAAA7L,EAAA,gBAAON,GAAQL,WAAWmK,YACxB,IAAMtJ,EAAmBsJ,EAAUrJ,QAAQL,YAAQA,OAA4BA,EAASC,gBAClFM,EAAkBmJ,EAAUrJ,QAAQL,YAAQA,OAA4BA,EAAS2J,aACnFvJ,EAAiBI,OAAS,IAC5BnB,EAAKoB,kBAAiBA,EAAML,EAAiBI,QAC7CnB,EAAKuH,gBAAgB2E,8BAGnBhL,EAAgBC,OAAS,GAC3BnB,EAAKoB,kBAAiBA,EAAOF,EAAgBC,QAE/CnB,EAAKuH,gBAAgBuF,2BACrB9M,EAAKuH,gBAAgByD,0BACrBhL,EAAKiM,4BAtJR,8BAiKL7K,SAAiBe,EAAkBC,cAC3BC,EAAS,uCACTC,EAASH,EAAU,UAAY,UACpB,YACfnC,KAAKX,iBAAiBkD,IAAtBvC,UAAuCqC,EAAvCrC,YAAiDsC,IACjDtC,KAAKX,iBAAiBkD,IAAtBvC,UAA6BqC,EAA7BrC,0BAAqDsC,GAAU,CAAEF,OAAQA,KAElElC,WAAU,YAAQsC,aAANC,EAAMD,YACrBL,EACFnC,EAAKb,qBAAqBgD,QAAQM,EAAMD,GAExCxC,EAAKb,qBAAqBuD,MAAMD,EAAMD,QA5KvC,yBAgLLQ,WACEhD,KAAKT,kBAAkB0D,gBAAgBjD,KAAKR,OAAOK,QAjLhD,M,oCAAMyL,IAAuB,sO,oDAAvBA,GAAuB,0/BDlCpC,yCACE,yEACE,gF,iCA0DF,8DACF,4DACA,+B,MA5DyB,mH,2JEmClB,KAAMC,GAAN,yB,oCAAMA,K,mDAAAA,K,uDA7BF,CACP,IAAa7E,SAAS,CACpB,CACEC,KAAM,WACNN,QAAS,CAAEQ,WAAY,MACvBZ,KAAM,CAAC8G,MAAO,kCAAmCjG,cAAe,6BAChEkG,SAAU,CACR,CACErG,KAAM,GACNC,UAAW,GAEb,CACED,KAAM,cACNN,QAAS,CAAEQ,WAAY,MACvBD,UAAW,GACXX,KAAM,CAAC8G,MAAO,gCAAiCjG,cAAe,8BAIpE,CACEH,KAAM,KACNN,QAAS,CAAEQ,WAAY,MACvBoG,aAAc,kBAAM,4CACjBC,MAAMC,YAACA,OAAKA,EAAE5J,2BACjB0C,KAAM,CAAC8G,MAAO,2CAA4CjG,cAAe,6C,2CCJ1E,KAAM0E,GAAN,yB,oCAAMA,K,mDAAAA,K,uDAfF,CACP,IACA,KACA,IACA,GAAAjI,uBACA,GACA,S,+FCMS6J,ECbAC,ECAAC,ECHAC,ECwCAC,E,4JJxBN,IAAMJ,EAAN,WAOL,WAA2BK,EACEC,EACAvO,EACFwO,EACAvO,aAJA,KAAAqO,WACE,KAAAC,YACA,KAAAvO,uBACF,KAAAwO,oBACA,KAAAvO,SAXtB,iCAkBLwO,SAAQC,GACN7N,KAAK8N,WAAaD,IAnBf,sBAyBEE,WACL/N,KAAKyN,SAASO,SA1BX,4BAgCEC,WAAgBA,WACrB,GAAuB,MAAnBjO,KAAK8N,WACP9N,KAAKb,qBAAqBuD,MAAM1C,KAAK0N,UAAUnL,IAAI,iDAC9C,CACL,IAAM2L,EAAsC,CAC1CzO,OAAOC,OAAO,IAAI,IAAoB,CAAE6E,KAAM,KAAMT,MAAO9D,KAAK8N,WAAWvJ,QAG7EvE,KAAK2N,kBAAkBQ,OAAO,IAA6BD,EAAiB,CAAClO,KAAK8N,aAAa1N,KAC7F,SAAAgG,EAAA,IACAlG,WAAWkO,YACX,GAAIA,EAAGxN,aAAc,CACnB,IAAMmM,EAAQ/M,EAAK0N,UAAUnL,IAAI,0CAC3BC,EAAUxC,EAAK0N,UAAUnL,IAAI,4CACnCvC,EAAKb,qBAAqBgD,QAAQ4K,EAAOvK,GACrC,YAAW4L,EAAGC,UAChBrO,EAAKZ,OAAOkP,cAAc,YAAsBF,EAAGC,QAAQE,gBAExD,CACL,IAAMxB,EAAQ/M,EAAK0N,UAAUnL,IAAI,wCAC3BC,EAAUxC,EAAK0N,UAAUnL,IAAI,0CACnCvC,EAAKb,qBAAqBuD,MAAMqK,EAAOvK,YArD1C,M,oCAAM4K,GAA2B,gM,mDAA3BA,EAA2B,+SKzBxC,yCACE,wEAAgB,yB,qCAAmD,8BACnE,qEAAG,yB,qCAAiD,8BAEpD,qGACE,4DAAe,EAAAQ,QAAA,MAGjB,+DAEA,gFACQ,qDAAS,gBAAkB,0B,sCAA0D,8BAC7F,8EACQ,qDAAS,sBAAwB,0B,sCAA2D,8BACtG,6DACA,gC,MAdkB,kIACb,gIAID,+GAAyD,2EAKxB,2IAEM,8I,sFJDpC,IAAMP,EATb,uBAaE,KAAAmB,QAAmB,IAAQC,c,oCAJhBpB,I,mDAAAA,EAAwB,6IKZrC,6DACA,+B,KADiE,gD,6EJY1D,IAAMC,EATb,uBAaE,KAAAkB,QAAmB,IAAQE,sB,oCAJhBpB,I,mDAAAA,EAA0B,0IKZvC,6DACA,+B,KAD4D,gD,yFJSrD,IAAMC,EAAN,yB,oCAAMA,I,mDAAAA,EAA2B,4GKTxC,yCACI,wEAAI,yB,qCAA6C,8BACjD,iFACJ,4DACA,+B,MAHQ,8H,8DJgDD,IAAMC,EAAN,yB,oCAAMA,I,kDAAAA,I,uDALA,CACT,IACA,KACD,SApCQ,CACP,IAAa9G,SAAS,CACpB,CACEC,KAAM,IACNsG,aAAc,kBAAM,4CACjBC,MAAMC,YAACA,OAAKA,EAAE3B,2BAEnB,CACE7E,KAAM,SACNN,QAAS,CAAEQ,WAAY,KACvBD,UAAW,EACXX,KAAM,CAAE8G,MAAO,qBAAsBjG,cAAe,iBAEtD,CACEH,KAAM,WACNN,QAAS,CAAEQ,WAAY,KACvBD,UAAW,EACXX,KAAM,CAAE8G,MAAO,uBAAwBjG,cAAe,mBAExD,CACEH,KAAM,iBACNN,QAAS,CAAEQ,WAAY,KACvBD,UAAW,EACXX,KAAM,CAAE8G,MAAO,6BAA8BjG,cAAe,yBAE9D,CACEH,KAAM,kBACNN,QAAS,CAAEQ,WAAY,KACvBD,UAAW,EACXX,KAAM,CAAE8G,MAAO,8BAA+BjG,cAAe,gC,qLKvCtC,0CAAiD,yB,qCAA4C,+B,MAA5C,oI,sBAIvC,0CAAiD,yB,qCAA+C,+B,MAA/C,uI,ICU7E6H,G,6DAAN,KAAMA,GAAN,0EAeLC,WAEE,OAAO,YAA2B5O,KAAK6O,IAAIhP,MAjBxC,8BAuBLiP,WACE,OAAO,YAA6B9O,KAAK6O,IAAIhP,QAxB1C,M,oCAAM8O,K,oDAAAA,GAAyC,waDftD,uC,qCACI,oEAA2B,4CAC/B,4DAEA,uE,qCACI,qEAAqC,6CACzC,6DACA,gC,MAPG,mFAA6B,sEAA7B,CAA6B,sEACM,uEAGnC,+GAA6B,wEAA7B,CAA6B,0EACgB,yE,0GEJhD,8B,yBAQQ,gF,0CAAuG,uCAAW,a,IC0B7GI,G,KAAAA,GAAyDA,8BAqBpE7P,WACU8P,EACAC,EACEC,EACFC,EACEC,2BAEVC,cAAMH,EAAoBE,IANlBJ,2BACA,EAAAC,cACE,EAAAC,qBACF,EAAAC,eACE,EAAAC,yBA1BwDL,kCAmCpEpM,WAAUA,WACR0M,6CACArP,KAAKsP,IAAMtP,KAAKiP,YAAYM,YAAYvP,KAAKsP,IAAK,YAAW,SAC7DtP,KAAKwP,MAASxP,KAAKsP,IAAIG,KAAsCrP,KAAK,cAA6B,eAC/FJ,KAAKwP,MAAMpP,KAAK,OAAAC,EAAA,GAAK,IAAIH,WAAWuP,YAChC,IAAMC,EAAmB1P,EAAKgP,yBAAyBW,wBAAwB3P,EAAK4P,aAAaH,IAE3FI,EAAmB7P,EAAK8P,wBAAwBD,iBACtDA,EAAiBE,QAEjB,IAAMC,EAAeH,EAAiBI,gBACpCP,EACA,OAAE,EAEF,CACE,CAAC1P,EAAKkQ,OAAOC,eACb,CAACnQ,EAAKoQ,QAAQD,iBAEjBH,EAAaK,SAAiBC,OAASb,EACvCO,EAAaK,SAAiBE,MAAQvQ,EAAKuQ,MAC3CP,EAAaK,SAAiBG,SAAWxQ,EAAKwQ,SAC9CR,EAAaK,SAAiBI,OAASzQ,EAAKyQ,OAC7CT,EAAaU,kBAAkBC,qBAzD+B5B,0BAkE5Da,SAAaH,GACnB,OAAO,YAA2BA,EAAKmB,iBAAkB,IAASC,iBAAYA,EAAY7Q,KAAKmP,aAAa2B,oBAnE1C/B,GAAS,M,oCAAlEA,IAAyD,uN,oDAAzDA,GAAyD,mG,MAAA,M,2BAIzD,IAAyB,G,qvBDvCtC,oDAEA,yEACI,2EACI,gFAA+B,yB,qCAAgD,8BACnF,iEACJ,6DACA,0EACI,4EACI,gIACJ,iEACJ,6DACA,gC,MARuC,6HAKmB,0E,kDC0B7CA,GAAyD,aATrE,YAAwB,IAA0B,IAAS8B,YAAa,IAAQnC,sBASpEK,K,iEChCb,oE,4EACqC,4EAAwB,mCAAxB,CAAwB,gBAAxB,CAAwB,sBAAxB,CAAwB,oB,ICqBhDgC,GCIAC,G,KDJAD,GAAyDA,8BAOpE7R,WAAoB+P,EACEC,EACA+B,2BAEpB5B,cAAMH,EAAoB+B,IAJRhC,cACE,EAAAC,qBACA,EAAA+B,mBAT8CF,kCAiBpEpO,WACE0M,6CACArP,KAAKsP,IAAMtP,KAAKiP,YAAYM,YAAYvP,KAAKsP,IAAK,YAAW,SAC7DtP,KAAKwP,MAASxP,KAAKsP,IAAIG,KAAsCrP,KAAK,cAA6B,mBApB7B2Q,GAAS,O,oCAAlEA,IAAyD,qH,oDAAzDA,GAAyD,uWDzBtE,yCACI,4EAA+B,yB,qCAAgD,8BACnF,4DACA,0G,iCAMA,+GACA,gC,MATmC,6HAEG,sGAMW,mEAAW,c,uDCgB/CA,GAAyD,aATrE,YAAwB,IAA0B,IAASG,YAAa,IAAQxC,sBASpEqC,K,aChBPI,GAAmB,CAEvB,GACA,IAiBK,KAAMH,GAAN,oFAKLI,WACE,MAAO,CACLC,SAAU,IACVC,UAAWH,GAAiBzQ,KAAKkG,YAASA,MAAK,CAAE2K,QAAS3K,WARzD,M,oCAAMoK,K,mDAAAA,K,uDAbF,CACP,KACA,IAAaQ,0B,+ECjByB,2CAAiD,yB,qCAAwC,+B,MAAxC,gI,uBAIxD,2CAAiD,yB,qCAAgD,+B,MAAhD,wI,2FADpF,wC,qCACI,qEAA+B,6CACnC,6D,0CAFG,kFAA6B,sEAA7B,CAA6B,0EACU,wE,uBAIb,2CAAiD,yB,qCAA+C,+B,MAA/C,uI,0BAD9E,wC,qCACI,qEAAyB,6CAC7B,6D,0CAFG,kFAA6B,qEAA7B,CAA6B,yEACI,wE,uBAIR,2CAAiD,yB,qCAAwC,+B,MAAxC,gI,uBAIlD,2CAAiD,yB,qCAA4C,+B,MAA5C,oI,0BAD5E,wC,qCACE,mEAAyB,6CAC3B,6D,0CAFG,kFAA6B,uEAA7B,CAA6B,sEACE,wE,uBAIN,2CAAiD,yB,qCAA6C,+B,MAA7C,qI,0BAD7E,wC,qCACE,mEAA0B,6CAC5B,6D,0CAFG,kFAA6B,wEAA7B,CAA6B,uEACG,wE,uBAIJ,2CAAiD,yB,qCAA0C,+B,MAA1C,kICJzE,ICJMC,GDIAC,GEHAC,GCAAC,GHGN,KAAMF,GAAN,wEAcLG,WACE,OAAO,aAAiB7R,KAAKyP,QAf1B,0BAqBLqC,WACE,OAAO,IAAI,KAAY9R,KAAK6R,eAAgB,MAAqB5K,aAtB9D,4BA4BL2H,WACE,OAAO,IAAI,KAAY5O,KAAK6R,eAAgB,MAAuB5K,aA7BhE,8BAmCL8K,WACE,OAAO,IAAI,KAAY/R,KAAK6R,eAAgB,MAAyB5K,aApClE,+BA0CL+K,WACE,OAAO,IAAI,KAAYhS,KAAK6R,eAAgB,MAA0B5K,aA3CnE,6BAiDLgL,WACE,OAAO,IAAI,KAAYjS,KAAK6R,eAAgB,MAAwB5K,aAlDjE,4BAwDLiL,WACE,OAAO,IAAI,KAAYlS,KAAK6R,eAAgB,MAAuB5K,eAzDhE,M,oCAAMyK,K,oDAAAA,GAAqC,uwCDrBlD,uC,qCACE,kEAAwC,6CAC1C,4DAEA,2EAIA,2EAIA,yE,sCACE,oEAA0B,8CAC5B,6DAEA,6EAIA,6EAIA,yE,sCACI,uEAA2B,8CAC/B,6DAEA,kC,MA5BG,mFAA6B,oEAA7B,CAA6B,mEACiB,uEAGf,4FAIA,6FAI/B,+GAA6B,oEAA7B,CAA6B,oEACG,uEAGD,0FAIA,yFAI/B,+GAA6B,sEAA7B,CAA6B,sEACM,yE,4DERzBD,GAAyCA,8FAAS,O,mCAAlDA,K,oDAAAA,GAAyC,uPGjBtD,oEAMA,0GACA,+B,MAPqC,6CAAiB,mCAAjB,CAAiB,gBAAjB,CAAiB,sBAAjB,CAAiB,kBAAjB,CAAiB,iBAMT,oEAAY,c,mCHW5CA,GAAyC,aATrD,YAAwB,KAAkB,IAASP,YAAa,IAAQzC,cAS5DgD,K,wCAAA,I,sECCAE,GAA8CA,sHAGzDhP,WACE0M,6CACArP,KAAKmS,SAAW,UAAA/L,EAAA,CAAsBpG,KAAKsP,IAAI8C,UALQT,GAAS,O,mCAAvDA,K,oDAAAA,GAA8C,kRGlB3D,wEAIA,qEACI,yEACI,wEAA2B,yB,qCAC/B,8BACJ,4DACA,gC,MATyC,6CAAiB,gBAAjB,CAAiB,sBAAjB,CAAiB,mBAKxB,oHACC,4I,gDHYtBA,GAA8C,aAT1D,YAAwB,KAAuB,IAAST,YAAa,IAAQzC,cASjEkD,K,wCAAA,I,sECAAC,GAA+CA,sHAG1DjP,WACE0M,6CACArP,KAAKmS,SAAW,aAAuBnS,KAAKsP,IAAI8C,UALQR,GAAS,O,mCAAxDA,K,oDAAAA,GAA+C,mRGlB5D,yEAIA,qEACI,yEACI,wEAA2B,yB,qCAC/B,8BACJ,4DACA,gC,MAT0C,6CAAiB,gBAAjB,CAAiB,sBAAjB,CAAiB,mBAKzB,oHACC,6I,gDHYtBA,GAA+C,aAT3D,YAAwB,KAAwB,IAASV,YAAa,IAAQzC,cASlEmD,K,wCAAA,I,mDIjBb,8B,ICwBaS,GCPAC,GCAAC,GCmBAC,GCJAC,G,cJRAJ,GAAyCA,8BAKpDnT,WAAsBgQ,EACAE,EACFD,EACAH,2BAElBK,cAAMH,EAAoBE,IALNF,qBACA,EAAAE,uBACF,EAAAD,eACA,EAAAH,6BARgCqD,kCAgBpD1P,WACE0M,6CACA,IAAMK,EAAmB1P,KAAKgP,yBAAyBW,wBAAwB3P,KAAK4P,gBAE9EC,EAAmB7P,KAAK8P,wBAAwBD,iBACtDA,EAAiBE,QAEjB,IAAMC,EAAeH,EAAiBI,gBACpCP,EACA,OAAE,EAEF,CACE,CAAC1P,KAAKkQ,OAAOC,eACb,CAACnQ,KAAKoQ,QAAQD,iBAEjBH,EAAaK,SAAiBC,OAAStQ,KAAKsQ,OAC5CN,EAAaK,SAAiBE,MAAQvQ,KAAKuQ,MAC3CP,EAAaK,SAAiBG,SAAWxQ,KAAKwQ,SAC9CR,EAAaK,SAAiBI,OAASzQ,KAAKyQ,SAlCK4B,0BAyC5CzC,WACN,OAAO,YAA2B5P,KAAKsQ,OAAOM,iBAAkB,IAASC,iBAAYA,EAAY7Q,KAAKmP,aAAa2B,oBA1CjEuB,GAAS,M,oCAAlDA,IAAyC,iL,oDAAzCA,GAAyC,iF,MAAA,M,2BACzC,IAAyB,G,4pBD1BtC,oDAEA,4EACE,+DACF,4DACA,wEACE,0EACI,kHACJ,+DACF,6DACA,gC,MAH0F,qEAAY,c,kCCkBzFA,GAAyC,aATrD,YAAwB,KAAkB,IAASxB,YAAa,IAAQpC,cAS5D4D,K,4CCPAC,GAA8CA,sHAGzD3P,WACE0M,6CACArP,KAAKmS,SAAW,UAAA/L,EAAA,CAAsBpG,KAAKsP,IAAI8C,UALQE,GAAS,M,mCAAvDA,K,oDAAAA,GAA8C,yXIlB3D,6EAIE,wEACE,0EACE,2EACE,wEACF,kEACF,iEACF,+DACF,6DAEA,kC,MAbyC,6CAAiB,gBAAjB,CAAiB,sBAAjB,CAAiB,mBAMI,sH,oCJYjDA,GAA8C,aAT1D,YAAwB,KAAuB,IAASzB,YAAa,IAAQpC,cASjE6D,K,wCAAA,I,4CCAAC,GAA+CA,sHAG1D5P,WACE0M,6CACArP,KAAKmS,SAAW,aAAuBnS,KAAKsP,IAAI8C,UALQG,GAAS,M,mCAAxDA,K,oDAAAA,GAA+C,0XIlB5D,8EAIE,wEACE,0EACE,2EACE,wEACF,kEACF,iEACF,+DACF,6DAEA,kC,MAb0C,6CAAiB,gBAAjB,CAAiB,sBAAjB,CAAiB,mBAMG,sH,oCJYjDA,GAA+C,aAT3D,YAAwB,KAAwB,IAAS1B,YAAa,IAAQpC,cASlE8D,K,wCAAA,I,0BCJP,GAAmB,CAEvB,GACA,GACA,GACA,GACA,GACA,GACA,IAeK,KAAMC,GAAN,oFAKLpB,WACE,MAAO,CACLC,SAAU,IACVC,UAAW,GAAiB5Q,KAAKkG,YAASA,MAAK,CAAE2K,QAAS3K,WARzD,M,oCAAM4L,K,mDAAAA,K,uDAXF,CACP,KACA,IAAahB,sBACb,KAAsBA,sBACtB,KAAuBA,0B,8BClBrB,GAAmB,CAEvB,KACA,MAkBK,KAAMiB,GAAN,oFAKLrB,WACE,MAAO,CACLC,SAAUoB,EACVnB,UAAW,GAAiB5Q,KAAKkG,YAASA,MAAK,CAAE2K,QAAS3K,WARzD,M,oCAAM6L,K,mDAAAA,K,uDAbF,CACP,EACA,EAAAjH,sBACA,EAAAkH,oBACA,GAAkBlB,sBAClB,GAA0BA,sBAC1B,Q,uCG1BJ,8OAAO,IAAMmB,EAA0B,WAC1BC,EAA2B,YAC3BC,EAAyB,UACzBC,EAAwB,SACxBC,EAAwB,SACxBC,EAAsB,OACtBC,EAAgC,kB,kCCN7C,gGAGaC,EAA+B,oBAErC,SAASC,IACd,OAAO,IAAI,IAAY,cAA4BD,GAA8BjM,gB","file":"x","sourcesContent":["<div class=\"container\">\n  <div class=\"bitstream-formats row\">\n    <div class=\"col-12\">\n\n      <h2 id=\"header\" class=\"border-bottom pb-2 \">{{'admin.registries.bitstream-formats.head' | translate}}</h2>\n\n      <p id=\"description\">{{'admin.registries.bitstream-formats.description' | translate}}</p>\n      <p id=\"create-new\" class=\"mb-2\"><a [routerLink]=\"'add'\" class=\"btn btn-success\">{{'admin.registries.bitstream-formats.create.new' | translate}}</a></p>\n\n\n      <ds-pagination\n        *ngIf=\"(bitstreamFormats | async)?.payload?.totalElements > 0\"\n        [paginationOptions]=\"pageConfig\"\n        [pageInfoState]=\"(bitstreamFormats | async)?.payload\"\n        [collectionSize]=\"(bitstreamFormats | async)?.payload?.totalElements\"\n        [hideGear]=\"true\"\n        [hidePagerWhenSinglePage]=\"true\">\n        <div class=\"table-responsive\">\n          <table id=\"formats\" class=\"table table-striped table-hover\">\n            <thead>\n              <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\">{{'admin.registries.bitstream-formats.table.name' | translate}}</th>\n                <th scope=\"col\">{{'admin.registries.bitstream-formats.table.mimetype' | translate}}</th>\n                <th scope=\"col\">{{'admin.registries.bitstream-formats.table.supportLevel.head' | translate}}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let bitstreamFormat of (bitstreamFormats | async)?.payload?.page\">\n                <td>\n                  <label>\n                    <input type=\"checkbox\"\n                           [checked]=\"isSelected(bitstreamFormat) | async\"\n                           (change)=\"selectBitStreamFormat(bitstreamFormat, $event)\"\n                    >\n                  </label>\n                </td>\n                <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{bitstreamFormat.shortDescription}}</a></td>\n                <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{bitstreamFormat.mimetype}} <span *ngIf=\"bitstreamFormat.internal\">({{'admin.registries.bitstream-formats.table.internal' | translate}})</span></a></td>\n                <td><a [routerLink]=\"['/admin/registries/bitstream-formats', bitstreamFormat.id, 'edit']\">{{'admin.registries.bitstream-formats.table.supportLevel.'+bitstreamFormat.supportLevel | translate}}</a></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </ds-pagination>\n      <div *ngIf=\"(bitstreamFormats | async)?.payload?.totalElements == 0\" class=\"alert alert-info\" role=\"alert\">\n        {{'admin.registries.bitstream-formats.no-items' | translate}}\n      </div>\n\n      <div>\n        <button *ngIf=\"(bitstreamFormats | async)?.payload?.page?.length > 0\" class=\"btn btn-primary deselect\" (click)=\"deselectAll()\">{{'admin.registries.bitstream-formats.table.deselect-all' | translate}}</button>\n        <button *ngIf=\"(bitstreamFormats | async)?.payload?.page?.length > 0\" type=\"submit\" class=\"btn btn-danger float-right\" (click)=\"deleteFormats()\">{{'admin.registries.bitstream-formats.table.delete' | translate}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { combineLatest as observableCombineLatest, Observable, zip } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { BitstreamFormat } from '../../../core/shared/bitstream-format.model';\nimport { BitstreamFormatDataService } from '../../../core/data/bitstream-format-data.service';\nimport { FindListOptions } from '../../../core/data/request.models';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\n\n/**\n * This component renders a list of bitstream formats\n */\n@Component({\n  selector: 'ds-bitstream-formats',\n  templateUrl: './bitstream-formats.component.html'\n})\nexport class BitstreamFormatsComponent implements OnInit, OnDestroy {\n\n  /**\n   * A paginated list of bitstream formats to be shown on the page\n   */\n  bitstreamFormats: Observable<RemoteData<PaginatedList<BitstreamFormat>>>;\n\n  /**\n   * The current pagination configuration for the page used by the FindAll method\n   * Currently simply renders all bitstream formats\n   */\n  config: FindListOptions = Object.assign(new FindListOptions(), {\n    elementsPerPage: 20\n  });\n\n  /**\n   * The current pagination configuration for the page\n   * Currently simply renders all bitstream formats\n   */\n  pageConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'rbp',\n    pageSize: 20\n  });\n\n  constructor(private notificationsService: NotificationsService,\n              private router: Router,\n              private translateService: TranslateService,\n              private bitstreamFormatService: BitstreamFormatDataService,\n              private paginationService: PaginationService,\n              ) {\n  }\n\n\n  /**\n   * Deletes the currently selected formats from the registry and updates the presented list\n   */\n  deleteFormats() {\n    this.bitstreamFormatService.clearBitStreamFormatRequests().subscribe();\n    this.bitstreamFormatService.getSelectedBitstreamFormats().pipe(take(1)).subscribe(\n      (formats) => {\n        const tasks$ = [];\n        for (const format of formats) {\n          if (hasValue(format.id)) {\n            tasks$.push(this.bitstreamFormatService.delete(format.id).pipe(map((response: RemoteData<NoContent>) => response.hasSucceeded)));\n          }\n        }\n        zip(...tasks$).subscribe((results: boolean[]) => {\n          const successResponses = results.filter((result: boolean) => result);\n          const failedResponses = results.filter((result: boolean) => !result);\n          if (successResponses.length > 0) {\n            this.showNotification(true, successResponses.length);\n          }\n          if (failedResponses.length > 0) {\n            this.showNotification(false, failedResponses.length);\n          }\n\n          this.deselectAll();\n\n          this.paginationService.resetPage(this.pageConfig.id);\n        });\n      }\n    );\n  }\n\n  /**\n   * Deselects all selecetd bitstream formats\n   */\n  deselectAll() {\n    this.bitstreamFormatService.deselectAllBitstreamFormats();\n  }\n\n  /**\n   * Checks whether a given bitstream format is selected in the list (checkbox)\n   * @param bitstreamFormat\n   */\n  isSelected(bitstreamFormat: BitstreamFormat): Observable<boolean> {\n    return this.bitstreamFormatService.getSelectedBitstreamFormats().pipe(\n      map((bitstreamFormats: BitstreamFormat[]) => {\n        return bitstreamFormats.find((selectedFormat) => selectedFormat.id === bitstreamFormat.id) != null;\n      })\n    );\n  }\n\n  /**\n   * Selects or deselects a bitstream format based on the checkbox state\n   * @param bitstreamFormat\n   * @param event\n   */\n  selectBitStreamFormat(bitstreamFormat: BitstreamFormat, event) {\n    event.target.checked ?\n      this.bitstreamFormatService.selectBitstreamFormat(bitstreamFormat) :\n      this.bitstreamFormatService.deselectBitstreamFormat(bitstreamFormat);\n  }\n\n  /**\n   * Show notifications for an amount of deleted bitstream formats\n   * @param success   Whether or not the notification should be a success message (error message when false)\n   * @param amount    The amount of deleted bitstream formats\n   */\n  private showNotification(success: boolean, amount: number) {\n    const prefix = 'admin.registries.bitstream-formats.delete';\n    const suffix = success ? 'success' : 'failure';\n\n    const messages = observableCombineLatest(\n      this.translateService.get(`${prefix}.${suffix}.head`),\n      this.translateService.get(`${prefix}.${suffix}.amount`, {amount: amount})\n    );\n    messages.subscribe(([head, content]) => {\n\n      if (success) {\n        this.notificationsService.success(head, content);\n      } else {\n        this.notificationsService.error(head, content);\n      }\n    });\n  }\n\n  ngOnInit(): void {\n\n    this.bitstreamFormats = this.paginationService.getFindListOptions(this.pageConfig.id, this.config).pipe(\n      switchMap((findListOptions: FindListOptions) => {\n        return this.bitstreamFormatService.findAll(findListOptions);\n      })\n    );\n  }\n\n\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.pageConfig.id);\n  }\n}\n","<ds-form *ngIf=\"formModel\"\n         [formId]=\"'comcol-form-id'\"\n         [formModel]=\"formModel\" (submitForm)=\"onSubmit()\" (cancel)=\"onCancel()\"></ds-form>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { BitstreamFormatSupportLevel } from '../../../../core/shared/bitstream-format-support-level';\nimport {\n  DynamicCheckboxModel,\n  DynamicFormArrayModel,\n  DynamicFormControlLayout,\n  DynamicFormControlModel,\n  DynamicFormService,\n  DynamicInputModel,\n  DynamicSelectModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { Router } from '@angular/router';\nimport { hasValue, isEmpty } from '../../../../shared/empty.util';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getBitstreamFormatsModuleRoute } from '../../admin-registries-routing-paths';\n\n/**\n * The component responsible for rendering the form to create/edit a bitstream format\n */\n@Component({\n  selector: 'ds-bitstream-format-form',\n  templateUrl: './format-form.component.html'\n})\nexport class FormatFormComponent implements OnInit {\n\n  /**\n   * The current bitstream format\n   * This can either be and existing one or a new one\n   */\n  @Input() bitstreamFormat: BitstreamFormat = new BitstreamFormat();\n\n  /**\n   * EventEmitter that will emit the updated bitstream format\n   */\n  @Output() updatedFormat: EventEmitter<BitstreamFormat> = new EventEmitter<BitstreamFormat>();\n\n  /**\n   * The different supported support level of the bitstream format\n   */\n  supportLevelOptions = [{label: BitstreamFormatSupportLevel.Known, value: BitstreamFormatSupportLevel.Known},\n    {label: BitstreamFormatSupportLevel.Unknown, value: BitstreamFormatSupportLevel.Unknown},\n    {label: BitstreamFormatSupportLevel.Supported, value: BitstreamFormatSupportLevel.Supported}];\n\n  /**\n   * Styling element for repeatable field\n   */\n  arrayElementLayout: DynamicFormControlLayout = {\n    grid: {\n      group: 'form-row',\n    },\n  };\n\n  /**\n   * Styling element for element of repeatable field\n   */\n  arrayInputElementLayout: DynamicFormControlLayout = {\n    grid: {\n      host: 'col'\n    }\n  };\n\n  /**\n   * The form model representing the bitstream format\n   */\n  formModel: DynamicFormControlModel[] = [\n    new DynamicInputModel({\n      id: 'shortDescription',\n      name: 'shortDescription',\n      label: 'admin.registries.bitstream-formats.edit.shortDescription.label',\n      hint: 'admin.registries.bitstream-formats.edit.shortDescription.hint',\n      required: true,\n      validators: {\n        required: null\n      },\n      errorMessages: {\n        required: 'Please enter a name for this bitstream format'\n      },\n    }),\n    new DynamicInputModel({\n      id: 'mimetype',\n      name: 'mimetype',\n      label: 'admin.registries.bitstream-formats.edit.mimetype.label',\n      hint: 'admin.registries.bitstream-formats.edit.mimetype.hint',\n\n    }),\n    new DynamicTextAreaModel({\n      id: 'description',\n      name: 'description',\n      label: 'admin.registries.bitstream-formats.edit.description.label',\n      hint: 'admin.registries.bitstream-formats.edit.description.hint',\n\n    }),\n    new DynamicSelectModel({\n      id: 'supportLevel',\n      name: 'supportLevel',\n      options: this.supportLevelOptions,\n      label: 'admin.registries.bitstream-formats.edit.supportLevel.label',\n      hint: 'admin.registries.bitstream-formats.edit.supportLevel.hint',\n      value: this.supportLevelOptions[0].value\n\n    }),\n    new DynamicCheckboxModel({\n      id: 'internal',\n      name: 'internal',\n      label: 'Internal',\n      hint: 'admin.registries.bitstream-formats.edit.internal.hint',\n    }),\n    new DynamicFormArrayModel({\n      id: 'extensions',\n      name: 'extensions',\n      label: 'admin.registries.bitstream-formats.edit.extensions.label',\n      groupFactory: () => [\n        new DynamicInputModel({\n          id: 'extension',\n          placeholder: 'admin.registries.bitstream-formats.edit.extensions.placeholder',\n        }, this.arrayInputElementLayout)\n      ]\n    }, this.arrayElementLayout),\n  ];\n\n  constructor(private dynamicFormService: DynamicFormService,\n              private translateService: TranslateService,\n              private router: Router) {\n\n  }\n\n  ngOnInit(): void {\n\n    this.initValues();\n  }\n\n  /**\n   * Initializes the form based on the provided bitstream format\n   */\n  initValues() {\n    this.formModel.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        if (fieldModel.name === 'extensions') {\n          if (hasValue(this.bitstreamFormat.extensions)) {\n            const extenstions = this.bitstreamFormat.extensions;\n            const formArray = (fieldModel as DynamicFormArrayModel);\n            for (let i = 0; i < extenstions.length; i++) {\n              formArray.insertGroup(i).group[0] = new DynamicInputModel({\n                id: `extension-${i}`,\n                value: extenstions[i]\n              }, this.arrayInputElementLayout);\n            }\n          }\n        } else {\n          if (hasValue(this.bitstreamFormat[fieldModel.name])) {\n            (fieldModel as DynamicInputModel).value = this.bitstreamFormat[fieldModel.name];\n          }\n        }\n      });\n  }\n\n  /**\n   * Creates an updated bistream format based on the current values in the form\n   * Emits the updated bitstream format trouhg the updatedFormat emitter\n   */\n  onSubmit() {\n    const updatedBitstreamFormat = Object.assign(new BitstreamFormat(),\n      {\n        id: this.bitstreamFormat.id\n      });\n\n    this.formModel.forEach(\n      (fieldModel: DynamicFormControlModel) => {\n        if (fieldModel.name === 'extensions') {\n          const formArray = (fieldModel as DynamicFormArrayModel);\n          const extensions = [];\n          for (let i = 0; i < formArray.groups.length; i++) {\n            const value = (formArray.get(i).get(0) as DynamicInputModel).value;\n            if (!isEmpty(value)) {\n              extensions.push((formArray.get(i).get(0) as DynamicInputModel).value);\n            }\n          }\n          updatedBitstreamFormat.extensions = extensions;\n        } else {\n          updatedBitstreamFormat[fieldModel.name] = (fieldModel as DynamicInputModel).value;\n        }\n      });\n    this.updatedFormat.emit(updatedBitstreamFormat);\n  }\n\n  /**\n   * Cancels the edit/create action of the bitstream format and navigates back to the bitstream format registry\n   */\n  onCancel() {\n    this.router.navigate([getBitstreamFormatsModuleRoute()]);\n  }\n}\n","import { Router } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { BitstreamFormatDataService } from '../../../../core/data/bitstream-format-data.service';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getBitstreamFormatsModuleRoute } from '../../admin-registries-routing-paths';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\n\n/**\n * This component renders the page to create a new bitstream format.\n */\n@Component({\n  selector: 'ds-add-bitstream-format',\n  templateUrl: './add-bitstream-format.component.html',\n})\nexport class AddBitstreamFormatComponent {\n\n  constructor(\n    private router: Router,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private bitstreamFormatDataService: BitstreamFormatDataService,\n  ) {\n  }\n\n  /**\n   * Creates a new bitstream format based on the provided bitstream format emitted by the form.\n   * When successful, a success notification will be shown and the user will be navigated back to the overview page.\n   * When failed, an error  notification will be shown.\n   * @param bitstreamFormat\n   */\n  createBitstreamFormat(bitstreamFormat: BitstreamFormat) {\n    this.bitstreamFormatDataService.createBitstreamFormat(bitstreamFormat).pipe(\n      getFirstCompletedRemoteData(),\n    ).subscribe((response: RemoteData<BitstreamFormat>) => {\n        if (response.hasSucceeded) {\n          this.notificationService.success(this.translateService.get('admin.registries.bitstream-formats.create.success.head'),\n            this.translateService.get('admin.registries.bitstream-formats.create.success.content'));\n          this.router.navigate([getBitstreamFormatsModuleRoute()]);\n          this.bitstreamFormatDataService.clearBitStreamFormatRequests().subscribe();\n        } else {\n          this.notificationService.error(this.translateService.get('admin.registries.bitstream-formats.create.failure.head'),\n            this.translateService.get('admin.registries.bitstream-formats.create.failure.content'));\n        }\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { BitstreamFormat } from '../../../core/shared/bitstream-format.model';\nimport { BitstreamFormatDataService } from '../../../core/data/bitstream-format-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific bitstreamFormat before the route is activated\n */\n@Injectable()\nexport class BitstreamFormatsResolver implements Resolve<RemoteData<BitstreamFormat>> {\n  constructor(private bitstreamFormatDataService: BitstreamFormatDataService) {\n  }\n\n  /**\n   * Method for resolving an bitstreamFormat based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<BitstreamFormat>> Emits the found bitstreamFormat based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<BitstreamFormat>> {\n    return this.bitstreamFormatDataService.findById(route.params.id)\n      .pipe(\n        getFirstCompletedRemoteData()\n      );\n  }\n}\n","import { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { BitstreamFormatDataService } from '../../../../core/data/bitstream-format-data.service';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { getBitstreamFormatsModuleRoute } from '../../admin-registries-routing-paths';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\n\n/**\n * This component renders the edit page of a bitstream format.\n * The route parameter 'id' is used to request the bitstream format.\n */\n@Component({\n  selector: 'ds-edit-bitstream-format',\n  templateUrl: './edit-bitstream-format.component.html',\n})\nexport class EditBitstreamFormatComponent implements OnInit {\n\n  /**\n   * The bitstream format wrapped in a remote-data object\n   */\n  bitstreamFormatRD$: Observable<RemoteData<BitstreamFormat>>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private bitstreamFormatDataService: BitstreamFormatDataService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.bitstreamFormatRD$ = this.route.data.pipe(\n      map((data) => data.bitstreamFormat as RemoteData<BitstreamFormat>)\n    );\n  }\n\n  /**\n   * Updates the bitstream format based on the provided bitstream format emitted by the form.\n   * When successful, a success notification will be shown and the user will be navigated back to the overview page.\n   * When failed, an error  notification will be shown.\n   */\n  updateFormat(bitstreamFormat: BitstreamFormat) {\n    this.bitstreamFormatDataService.updateBitstreamFormat(bitstreamFormat).pipe(\n      getFirstCompletedRemoteData(),\n    ).subscribe((response: RemoteData<BitstreamFormat>) => {\n        if (response.hasSucceeded) {\n          this.notificationService.success(this.translateService.get('admin.registries.bitstream-formats.edit.success.head'),\n            this.translateService.get('admin.registries.bitstream-formats.edit.success.content'));\n          this.router.navigate([getBitstreamFormatsModuleRoute()]);\n        } else {\n          this.notificationService.error('admin.registries.bitstream-formats.edit.failure.head',\n            'admin.registries.bitstream-formats.create.edit.content');\n        }\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BitstreamFormatsResolver } from './bitstream-formats.resolver';\nimport { EditBitstreamFormatComponent } from './edit-bitstream-format/edit-bitstream-format.component';\nimport { BitstreamFormatsComponent } from './bitstream-formats.component';\nimport { AddBitstreamFormatComponent } from './add-bitstream-format/add-bitstream-format.component';\nimport { I18nBreadcrumbResolver } from '../../../core/breadcrumbs/i18n-breadcrumb.resolver';\n\nconst BITSTREAMFORMAT_EDIT_PATH = ':id/edit';\nconst BITSTREAMFORMAT_ADD_PATH = 'add';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: BitstreamFormatsComponent\n      },\n      {\n        path: BITSTREAMFORMAT_ADD_PATH,\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        component: AddBitstreamFormatComponent,\n        data: {breadcrumbKey: 'admin.registries.bitstream-formats.create'}\n      },\n      {\n        path: BITSTREAMFORMAT_EDIT_PATH,\n        component: EditBitstreamFormatComponent,\n        resolve: {\n          bitstreamFormat: BitstreamFormatsResolver,\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: {breadcrumbKey: 'admin.registries.bitstream-formats.edit'}\n      },\n    ])\n  ],\n  providers: [\n    BitstreamFormatsResolver,\n  ]\n})\nexport class BitstreamFormatsRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { BitstreamFormatsComponent } from './bitstream-formats.component';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { FormatFormComponent } from './format-form/format-form.component';\nimport { EditBitstreamFormatComponent } from './edit-bitstream-format/edit-bitstream-format.component';\nimport { BitstreamFormatsRoutingModule } from './bitstream-formats-routing.module';\nimport { AddBitstreamFormatComponent } from './add-bitstream-format/add-bitstream-format.component';\nimport { FormModule } from '../../../shared/form/form.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    BitstreamFormatsRoutingModule,\n    FormModule\n  ],\n  declarations: [\n    BitstreamFormatsComponent,\n    EditBitstreamFormatComponent,\n    AddBitstreamFormatComponent,\n    FormatFormComponent\n  ]\n})\nexport class BitstreamFormatsModule {\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12 mb-4\">\n            <h2 id=\"sub-header\"\n                class=\"border-bottom mb-2\">{{'admin.registries.bitstream-formats.edit.head' | translate:{format: (bitstreamFormatRD$ | async)?.payload.shortDescription} }}</h2>\n\n             <ds-bitstream-format-form [bitstreamFormat]=\"(bitstreamFormatRD$ | async)?.payload\" (updatedFormat)=\"updateFormat($event)\"></ds-bitstream-format-form>\n\n        </div>\n    </div>\n</div>","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12 mb-4\">\n            <h2 id=\"sub-header\"\n                class=\"border-bottom mb-2\">{{ 'admin.registries.bitstream-formats.create.new' | translate }}</h2>\n\n            <ds-bitstream-format-form (updatedFormat)=\"createBitstreamFormat($event)\"></ds-bitstream-format-form>\n\n        </div>\n    </div>\n</div>","import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getAdminModuleRoute } from '../app-routing-paths';\n\nexport const REGISTRIES_MODULE_PATH = 'registries';\n\nexport function getRegistriesModuleRoute() {\n  return new URLCombiner(getAdminModuleRoute(), REGISTRIES_MODULE_PATH).toString();\n}\n","import { PaginationComponentOptions } from './pagination-component-options.model';\nimport { FindListOptions } from '../../core/data/request.models';\n\n/**\n * Transform a PaginationComponentOptions object into a FindListOptions object\n * @param pagination  The PaginationComponentOptions to transform\n * @param original    An original FindListOptions object to start from\n */\nexport function toFindListOptions(pagination: PaginationComponentOptions, original?: FindListOptions): FindListOptions {\n  return Object.assign(new FindListOptions(), original, {\n    currentPage: pagination.currentPage,\n    elementsPerPage: pagination.pageSize\n  });\n}\n","<div *ngIf=\"registryService.getActiveMetadataSchema() | async; then editheader; else createHeader\"></div>\n\n<ng-template #createHeader>\n    <h4>{{messagePrefix + '.create' | translate}}</h4>\n</ng-template>\n\n<ng-template #editheader>\n    <h4>{{messagePrefix + '.edit' | translate}}</h4>\n</ng-template>\n\n<ds-form [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [formLayout]=\"formLayout\"\n         (cancel)=\"onCancel()\"\n         (submitForm)=\"onSubmit()\">\n\n</ds-form>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicInputModel\n} from '@ng-dynamic-forms/core';\nimport { FormGroup } from '@angular/forms';\nimport { RegistryService } from '../../../../core/registry/registry.service';\nimport { FormBuilderService } from '../../../../shared/form/builder/form-builder.service';\nimport { take } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest } from 'rxjs';\nimport { MetadataSchema } from '../../../../core/metadata/metadata-schema.model';\n\n@Component({\n  selector: 'ds-metadata-schema-form',\n  templateUrl: './metadata-schema-form.component.html'\n})\n/**\n * A form used for creating and editing metadata schemas\n */\nexport class MetadataSchemaFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'metadata-schema-form';\n\n  /**\n   * The prefix for all messages related to this form\n   */\n  messagePrefix = 'admin.registries.metadata.form';\n\n  /**\n   * A dynamic input model for the name field\n   */\n  name: DynamicInputModel;\n\n  /**\n   * A dynamic input model for the namespace field\n   */\n  namespace: DynamicInputModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    name: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    namespace: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    }\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: FormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  constructor(public registryService: RegistryService, private formBuilderService: FormBuilderService, private translateService: TranslateService) {\n  }\n\n  ngOnInit() {\n    combineLatest(\n      this.translateService.get(`${this.messagePrefix}.name`),\n      this.translateService.get(`${this.messagePrefix}.namespace`)\n    ).subscribe(([name, namespace]) => {\n      this.name = new DynamicInputModel({\n          id: 'name',\n          label: name,\n          name: 'name',\n          validators: {\n            required: null,\n            pattern: '^[^ ,_]{1,32}$'\n          },\n          required: true,\n        });\n      this.namespace = new DynamicInputModel({\n          id: 'namespace',\n          label: namespace,\n          name: 'namespace',\n          validators: {\n            required: null,\n          },\n          required: true,\n        });\n      this.formModel = [\n        new DynamicFormGroupModel(\n          {\n            id: 'metadatadataschemagroup',\n            group:[this.namespace, this.name]\n          })\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n      this.registryService.getActiveMetadataSchema().subscribe((schema) => {\n        this.formGroup.patchValue({\n          metadatadataschemagroup:{\n            name: schema != null ? schema.prefix : '',\n            namespace: schema != null ? schema.namespace : ''\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Stop editing the currently selected metadata schema\n   */\n  onCancel() {\n    this.registryService.cancelEditMetadataSchema();\n  }\n\n  /**\n   * Submit the form\n   * When the schema has an id attached -> Edit the schema\n   * When the schema has no id attached -> Create new schema\n   * Emit the updated/created schema using the EventEmitter submitForm\n   */\n  onSubmit() {\n    this.registryService.clearMetadataSchemaRequests().subscribe();\n    this.registryService.getActiveMetadataSchema().pipe(take(1)).subscribe(\n      (schema) => {\n        const values = {\n          prefix: this.name.value,\n          namespace: this.namespace.value\n        };\n        if (schema == null) {\n          this.registryService.createOrUpdateMetadataSchema(Object.assign(new MetadataSchema(), values)).subscribe((newSchema) => {\n            this.submitForm.emit(newSchema);\n          });\n        } else {\n          this.registryService.createOrUpdateMetadataSchema(Object.assign(new MetadataSchema(), schema, {\n            id: schema.id,\n            prefix: (values.prefix ? values.prefix : schema.prefix),\n            namespace: (values.namespace ? values.namespace : schema.namespace)\n          })).subscribe((updatedSchema) => {\n            this.submitForm.emit(updatedSchema);\n          });\n        }\n        this.clearFields();\n        this.registryService.cancelEditMetadataSchema();\n      }\n    );\n  }\n\n  /**\n   * Reset all input-fields to be empty\n   */\n  clearFields() {\n    this.formGroup.patchValue({\n      metadatadataschemagroup:{\n        prefix: '',\n        namespace: ''\n      }\n    });\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.onCancel();\n  }\n}\n","<div class=\"container\">\n    <div class=\"metadata-registry row\">\n        <div class=\"col-12\">\n\n            <h2 id=\"header\" class=\"border-bottom pb-2\">{{'admin.registries.metadata.head' | translate}}</h2>\n\n            <p id=\"description\" class=\"pb-2\">{{'admin.registries.metadata.description' | translate}}</p>\n\n            <ds-metadata-schema-form (submitForm)=\"forceUpdateSchemas()\"></ds-metadata-schema-form>\n\n            <ds-pagination\n                    *ngIf=\"(metadataSchemas | async)?.payload?.totalElements > 0\"\n                    [paginationOptions]=\"config\"\n                    [collectionSize]=\"(metadataSchemas | async)?.payload?.totalElements\"\n                    [hideGear]=\"true\"\n                    [hidePagerWhenSinglePage]=\"true\">\n\n                <div class=\"table-responsive\">\n                    <table id=\"metadata-schemas\" class=\"table table-striped table-hover\">\n                        <thead>\n                        <tr>\n                            <th scope=\"col\"></th>\n                            <th scope=\"col\">{{'admin.registries.metadata.schemas.table.id' | translate}}</th>\n                            <th scope=\"col\">{{'admin.registries.metadata.schemas.table.namespace' | translate}}</th>\n                            <th scope=\"col\">{{'admin.registries.metadata.schemas.table.name' | translate}}</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let schema of (metadataSchemas | async)?.payload?.page\"\n                            [ngClass]=\"{'table-primary' : isActive(schema) | async}\">\n                            <td>\n                                <label>\n                                    <input type=\"checkbox\"\n                                           [checked]=\"isSelected(schema) | async\"\n                                           (change)=\"selectMetadataSchema(schema, $event)\"\n                                    >\n                                </label>\n                            </td>\n                            <td class=\"selectable-row\" (click)=\"editSchema(schema)\"><a [routerLink]=\"[schema.prefix]\">{{schema.id}}</a></td>\n                            <td class=\"selectable-row\" (click)=\"editSchema(schema)\"><a [routerLink]=\"[schema.prefix]\">{{schema.namespace}}</a></td>\n                            <td class=\"selectable-row\" (click)=\"editSchema(schema)\"><a [routerLink]=\"[schema.prefix]\">{{schema.prefix}}</a></td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n            </ds-pagination>\n\n            <div *ngIf=\"(metadataSchemas | async)?.payload?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n              {{'admin.registries.metadata.schemas.no-items' | translate}}\n            </div>\n\n            <div>\n              <button *ngIf=\"(metadataSchemas | async)?.payload?.page?.length > 0\" type=\"submit\" class=\"btn btn-danger float-right\" (click)=\"deleteSchemas()\">{{'admin.registries.metadata.schemas.table.delete' | translate}}</button>\n            </div>\n\n        </div>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { RegistryService } from '../../../core/registry/registry.service';\nimport { BehaviorSubject, combineLatest as observableCombineLatest, Observable, zip } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MetadataSchema } from '../../../core/metadata/metadata-schema.model';\nimport { toFindListOptions } from '../../../shared/pagination/pagination.utils';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-metadata-registry',\n  templateUrl: './metadata-registry.component.html',\n  styleUrls: ['./metadata-registry.component.scss']\n})\n/**\n * A component used for managing all existing metadata schemas within the repository.\n * The admin can create, edit or delete metadata schemas here.\n */\nexport class MetadataRegistryComponent {\n\n  /**\n   * A list of all the current metadata schemas within the repository\n   */\n  metadataSchemas: Observable<RemoteData<PaginatedList<MetadataSchema>>>;\n\n  /**\n   * Pagination config used to display the list of metadata schemas\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'rm',\n    pageSize: 25\n  });\n\n  /**\n   * Whether or not the list of MetadataSchemas needs an update\n   */\n  needsUpdate$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  constructor(private registryService: RegistryService,\n              private notificationsService: NotificationsService,\n              private router: Router,\n              private paginationService: PaginationService,\n              private translateService: TranslateService) {\n    this.updateSchemas();\n  }\n\n  /**\n   * Update the list of schemas by fetching it from the rest api or cache\n   */\n  private updateSchemas() {\n\n    this.metadataSchemas = this.needsUpdate$.pipe(\n      filter((update) => update === true),\n      switchMap(() => this.paginationService.getCurrentPagination(this.config.id, this.config)),\n      switchMap((currentPagination) => this.registryService.getMetadataSchemas(toFindListOptions(currentPagination)))\n    );\n  }\n\n  /**\n   * Force-update the list of schemas by first clearing the cache related to metadata schemas, then performing\n   * a new REST call\n   */\n  public forceUpdateSchemas() {\n    this.needsUpdate$.next(true);\n  }\n\n  /**\n   * Start editing the selected metadata schema\n   * @param schema\n   */\n  editSchema(schema: MetadataSchema) {\n    this.getActiveSchema().pipe(take(1)).subscribe((activeSchema) => {\n      if (schema === activeSchema) {\n        this.registryService.cancelEditMetadataSchema();\n      } else {\n        this.registryService.editMetadataSchema(schema);\n      }\n    });\n  }\n\n  /**\n   * Checks whether the given metadata schema is active (being edited)\n   * @param schema\n   */\n  isActive(schema: MetadataSchema): Observable<boolean> {\n    return this.getActiveSchema().pipe(\n      map((activeSchema) => schema === activeSchema)\n    );\n  }\n\n  /**\n   * Gets the active metadata schema (being edited)\n   */\n  getActiveSchema(): Observable<MetadataSchema> {\n    return this.registryService.getActiveMetadataSchema();\n  }\n\n  /**\n   * Select a metadata schema within the list (checkbox)\n   * @param schema\n   * @param event\n   */\n  selectMetadataSchema(schema: MetadataSchema, event) {\n    event.target.checked ?\n      this.registryService.selectMetadataSchema(schema) :\n      this.registryService.deselectMetadataSchema(schema);\n  }\n\n  /**\n   * Checks whether a given metadata schema is selected in the list (checkbox)\n   * @param schema\n   */\n  isSelected(schema: MetadataSchema): Observable<boolean> {\n    return this.registryService.getSelectedMetadataSchemas().pipe(\n      map((schemas) => schemas.find((selectedSchema) => selectedSchema === schema) != null)\n    );\n  }\n\n  /**\n   * Delete all the selected metadata schemas\n   */\n  deleteSchemas() {\n    this.registryService.clearMetadataSchemaRequests().subscribe();\n    this.registryService.getSelectedMetadataSchemas().pipe(take(1)).subscribe(\n      (schemas) => {\n        const tasks$ = [];\n        for (const schema of schemas) {\n          if (hasValue(schema.id)) {\n            tasks$.push(this.registryService.deleteMetadataSchema(schema.id).pipe(getFirstCompletedRemoteData()));\n          }\n        }\n        zip(...tasks$).subscribe((responses: RemoteData<NoContent>[]) => {\n          const successResponses = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n          const failedResponses = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n          if (successResponses.length > 0) {\n            this.showNotification(true, successResponses.length);\n          }\n          if (failedResponses.length > 0) {\n            this.showNotification(false, failedResponses.length);\n          }\n          this.registryService.deselectAllMetadataSchema();\n          this.registryService.cancelEditMetadataSchema();\n          this.forceUpdateSchemas();\n        });\n      }\n    );\n  }\n\n  /**\n   * Show notifications for an amount of deleted metadata schemas\n   * @param success   Whether or not the notification should be a success message (error message when false)\n   * @param amount    The amount of deleted metadata schemas\n   */\n  showNotification(success: boolean, amount: number) {\n    const prefix = 'admin.registries.schema.notification';\n    const suffix = success ? 'success' : 'failure';\n    const messages = observableCombineLatest(\n      this.translateService.get(success ? `${prefix}.${suffix}` : `${prefix}.${suffix}`),\n      this.translateService.get(`${prefix}.deleted.${suffix}`, {amount: amount})\n    );\n    messages.subscribe(([head, content]) => {\n      if (success) {\n        this.notificationsService.success(head, content);\n      } else {\n        this.notificationsService.error(head, content);\n      }\n    });\n  }\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n}\n","<div *ngIf=\"registryService.getActiveMetadataField() | async; then editheader; else createHeader\"></div>\n\n<ng-template #createHeader>\n    <h4>{{messagePrefix + '.create' | translate}}</h4>\n</ng-template>\n\n<ng-template #editheader>\n    <h4>{{messagePrefix + '.edit' | translate}}</h4>\n</ng-template>\n\n<ds-form [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formLayout]=\"formLayout\"\n         [formGroup]=\"formGroup\"\n         (cancel)=\"onCancel()\"\n         (submit)=\"onSubmit()\">\n\n</ds-form>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport {\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n  DynamicInputModel\n} from '@ng-dynamic-forms/core';\nimport { FormGroup } from '@angular/forms';\nimport { RegistryService } from '../../../../core/registry/registry.service';\nimport { FormBuilderService } from '../../../../shared/form/builder/form-builder.service';\nimport { take } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest } from 'rxjs';\nimport { MetadataSchema } from '../../../../core/metadata/metadata-schema.model';\nimport { MetadataField } from '../../../../core/metadata/metadata-field.model';\n\n@Component({\n  selector: 'ds-metadata-field-form',\n  templateUrl: './metadata-field-form.component.html'\n})\n/**\n * A form used for creating and editing metadata fields\n */\nexport class MetadataFieldFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'metadata-field-form';\n\n  /**\n   * The prefix for all messages related to this form\n   */\n  messagePrefix = 'admin.registries.schema.form';\n\n  /**\n   * The metadata schema this field is attached to\n   */\n  @Input() metadataSchema: MetadataSchema;\n\n  /**\n   * A dynamic input model for the element field\n   */\n  element: DynamicInputModel;\n\n  /**\n   * A dynamic input model for the qualifier field\n   */\n  qualifier: DynamicInputModel;\n\n  /**\n   * A dynamic input model for the scopeNote field\n   */\n  scopeNote: DynamicInputModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    element: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    qualifier: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    scopeNote: {\n      grid: {\n        host: 'col col-sm-12 d-inline-block'\n      }\n    }\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: FormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  constructor(public registryService: RegistryService,\n              private formBuilderService: FormBuilderService,\n              private translateService: TranslateService) {\n  }\n\n  /**\n   * Initialize the component, setting up the necessary Models for the dynamic form\n   */\n  ngOnInit() {\n    combineLatest(\n      this.translateService.get(`${this.messagePrefix}.element`),\n      this.translateService.get(`${this.messagePrefix}.qualifier`),\n      this.translateService.get(`${this.messagePrefix}.scopenote`)\n    ).subscribe(([element, qualifier, scopenote]) => {\n      this.element = new DynamicInputModel({\n        id: 'element',\n        label: element,\n        name: 'element',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.qualifier = new DynamicInputModel({\n        id: 'qualifier',\n        label: qualifier,\n        name: 'qualifier',\n        required: false,\n      });\n      this.scopeNote = new DynamicInputModel({\n        id: 'scopeNote',\n        label: scopenote,\n        name: 'scopeNote',\n        required: false,\n      });\n      this.formModel = [\n        new DynamicFormGroupModel(\n        {\n          id: 'metadatadatafieldgroup',\n          group:[this.element, this.qualifier, this.scopeNote]\n        })\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n      this.registryService.getActiveMetadataField().subscribe((field) => {\n        this.formGroup.patchValue({\n          metadatadatafieldgroup: {\n            element: field != null ? field.element : '',\n            qualifier: field != null ? field.qualifier : '',\n            scopeNote: field != null ? field.scopeNote : ''\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Stop editing the currently selected metadata field\n   */\n  onCancel() {\n    this.registryService.cancelEditMetadataField();\n  }\n\n  /**\n   * Submit the form\n   * When the field has an id attached -> Edit the field\n   * When the field has no id attached -> Create new field\n   * Emit the updated/created field using the EventEmitter submitForm\n   */\n  onSubmit() {\n    this.registryService.getActiveMetadataField().pipe(take(1)).subscribe(\n      (field) => {\n        const values = {\n          element: this.element.value,\n          qualifier: this.qualifier.value,\n          scopeNote: this.scopeNote.value\n        };\n        if (field == null) {\n          this.registryService.createMetadataField(Object.assign(new MetadataField(), values), this.metadataSchema).subscribe((newField) => {\n            this.submitForm.emit(newField);\n          });\n        } else {\n          this.registryService.updateMetadataField(Object.assign(new MetadataField(), field, {\n            id: field.id,\n            element: (values.element ? values.element : field.element),\n            qualifier: (values.qualifier ? values.qualifier : field.qualifier),\n            scopeNote: (values.scopeNote ? values.scopeNote : field.scopeNote)\n          })).subscribe((updatedField) => {\n            this.submitForm.emit(updatedField);\n          });\n        }\n        this.clearFields();\n        this.registryService.cancelEditMetadataField();\n      }\n    );\n  }\n\n  /**\n   * Reset all input-fields to be empty\n   */\n  clearFields() {\n    this.formGroup.patchValue({\n      metadatadatafieldgroup: {\n        element: '',\n        qualifier: '',\n        scopeNote: ''\n      }\n    });\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed\n   */\n  ngOnDestroy(): void {\n    this.onCancel();\n  }\n}\n","<div class=\"container\">\n  <div class=\"metadata-schema row\">\n    <div class=\"col-12\" *ngVar=\"(metadataSchema$ | async) as schema\">\n\n      <h2 id=\"header\" class=\"border-bottom pb-2\">{{'admin.registries.schema.head' | translate}}: \"{{schema?.prefix}}\"</h2>\n\n      <p id=\"description\" class=\"pb-2\">{{'admin.registries.schema.description' | translate:{ namespace: schema?.namespace } }}</p>\n\n      <ds-metadata-field-form\n        [metadataSchema]=\"schema\"\n        (submitForm)=\"forceUpdateFields()\"></ds-metadata-field-form>\n\n      <h3>{{'admin.registries.schema.fields.head' | translate}}</h3>\n\n      <ng-container *ngVar=\"(metadataFields$ | async)?.payload as fields\">\n        <ds-pagination\n          *ngIf=\"fields?.totalElements > 0\"\n          [paginationOptions]=\"config\"\n          [pageInfoState]=\"fields\"\n          [collectionSize]=\"fields?.totalElements\"\n          [hideGear]=\"false\"\n          [hidePagerWhenSinglePage]=\"true\">\n          <div class=\"table-responsive\">\n            <table id=\"metadata-fields\" class=\"table table-striped table-hover\">\n              <thead>\n              <tr>\n                <th></th>\n                <th scope=\"col\">{{'admin.registries.schema.fields.table.field' | translate}}</th>\n                <th scope=\"col\">{{'admin.registries.schema.fields.table.scopenote' | translate}}</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr *ngFor=\"let field of fields?.page\"\n                  [ngClass]=\"{'table-primary' : isActive(field) | async}\">\n                <td>\n                  <label>\n                    <input type=\"checkbox\"\n                           [checked]=\"isSelected(field) | async\"\n                           (change)=\"selectMetadataField(field, $event)\">\n                  </label>\n                </td>\n                <td class=\"selectable-row\" (click)=\"editField(field)\">{{schema?.prefix}}.{{field.element}}<label *ngIf=\"field.qualifier\">.</label>{{field.qualifier}}</td>\n                <td class=\"selectable-row\" (click)=\"editField(field)\">{{field.scopeNote}}</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </ds-pagination>\n\n        <div *ngIf=\"fields?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n          {{'admin.registries.schema.fields.no-items' | translate}}\n        </div>\n\n        <div>\n          <button [routerLink]=\"['/admin/registries/metadata']\" class=\"btn btn-primary\">{{'admin.registries.schema.return' | translate}}</button>\n          <button *ngIf=\"fields?.page?.length > 0\" type=\"submit\" class=\"btn btn-danger float-right\" (click)=\"deleteFields()\">{{'admin.registries.schema.fields.table.delete' | translate}}</button>\n        </div>\n      </ng-container>\n\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { RegistryService } from '../../../core/registry/registry.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  combineLatest,\n  Observable,\n  of as observableOf,\n  zip\n} from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MetadataField } from '../../../core/metadata/metadata-field.model';\nimport { MetadataSchema } from '../../../core/metadata/metadata-schema.model';\nimport { getFirstCompletedRemoteData, getFirstSucceededRemoteDataPayload } from '../../../core/shared/operators';\nimport { toFindListOptions } from '../../../shared/pagination/pagination.utils';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-metadata-schema',\n  templateUrl: './metadata-schema.component.html',\n  styleUrls: ['./metadata-schema.component.scss']\n})\n/**\n * A component used for managing all existing metadata fields within the current metadata schema.\n * The admin can create, edit or delete metadata fields here.\n */\nexport class MetadataSchemaComponent implements OnInit {\n  /**\n   * The metadata schema\n   */\n  metadataSchema$: Observable<MetadataSchema>;\n\n  /**\n   * A list of all the fields attached to this metadata schema\n   */\n  metadataFields$: Observable<RemoteData<PaginatedList<MetadataField>>>;\n\n  /**\n   * Pagination config used to display the list of metadata fields\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'rm',\n    pageSize: 25,\n    pageSizeOptions: [25, 50, 100, 200]\n  });\n\n  /**\n   * Whether or not the list of MetadataFields needs an update\n   */\n  needsUpdate$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  constructor(private registryService: RegistryService,\n              private route: ActivatedRoute,\n              private notificationsService: NotificationsService,\n              private router: Router,\n              private paginationService: PaginationService,\n              private translateService: TranslateService) {\n\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      this.initialize(params);\n    });\n  }\n\n  /**\n   * Initialize the component using the params within the url (schemaName)\n   * @param params\n   */\n  initialize(params) {\n    this.metadataSchema$ = this.registryService.getMetadataSchemaByPrefix(params.schemaName).pipe(getFirstSucceededRemoteDataPayload());\n    this.updateFields();\n  }\n\n  /**\n   * Update the list of fields by fetching it from the rest api or cache\n   */\n  private updateFields() {\n    this.metadataFields$ = this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n      switchMap((currentPagination) => combineLatest(this.metadataSchema$, this.needsUpdate$, observableOf(currentPagination))),\n      switchMap(([schema, update, currentPagination]: [MetadataSchema, boolean, PaginationComponentOptions]) => {\n        if (update) {\n          this.needsUpdate$.next(false);\n        }\n        return this.registryService.getMetadataFieldsBySchema(schema, toFindListOptions(currentPagination), !update, true);\n      })\n    );\n  }\n\n  /**\n   * Force-update the list of fields by first clearing the cache related to metadata fields, then performing\n   * a new REST call\n   */\n  public forceUpdateFields() {\n    this.registryService.clearMetadataFieldRequests();\n    this.needsUpdate$.next(true);\n  }\n\n  /**\n   * Start editing the selected metadata field\n   * @param field\n   */\n  editField(field: MetadataField) {\n    this.getActiveField().pipe(take(1)).subscribe((activeField) => {\n      if (field === activeField) {\n        this.registryService.cancelEditMetadataField();\n      } else {\n        this.registryService.editMetadataField(field);\n      }\n    });\n  }\n\n  /**\n   * Checks whether the given metadata field is active (being edited)\n   * @param field\n   */\n  isActive(field: MetadataField): Observable<boolean> {\n    return this.getActiveField().pipe(\n      map((activeField) => field === activeField)\n    );\n  }\n\n  /**\n   * Gets the active metadata field (being edited)\n   */\n  getActiveField(): Observable<MetadataField> {\n    return this.registryService.getActiveMetadataField();\n  }\n\n  /**\n   * Select a metadata field within the list (checkbox)\n   * @param field\n   * @param event\n   */\n  selectMetadataField(field: MetadataField, event) {\n    event.target.checked ?\n      this.registryService.selectMetadataField(field) :\n      this.registryService.deselectMetadataField(field);\n  }\n\n  /**\n   * Checks whether a given metadata field is selected in the list (checkbox)\n   * @param field\n   */\n  isSelected(field: MetadataField): Observable<boolean> {\n    return this.registryService.getSelectedMetadataFields().pipe(\n      map((fields) => fields.find((selectedField) => selectedField === field) != null)\n    );\n  }\n\n  /**\n   * Delete all the selected metadata fields\n   */\n  deleteFields() {\n    this.registryService.getSelectedMetadataFields().pipe(take(1)).subscribe(\n      (fields) => {\n        const tasks$ = [];\n        for (const field of fields) {\n          if (hasValue(field.id)) {\n            tasks$.push(this.registryService.deleteMetadataField(field.id).pipe(getFirstCompletedRemoteData()));\n          }\n        }\n        zip(...tasks$).subscribe((responses: RemoteData<NoContent>[]) => {\n          const successResponses = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n          const failedResponses = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n          if (successResponses.length > 0) {\n            this.showNotification(true, successResponses.length);\n            this.registryService.clearMetadataFieldRequests();\n\n          }\n          if (failedResponses.length > 0) {\n            this.showNotification(false, failedResponses.length);\n          }\n          this.registryService.deselectAllMetadataField();\n          this.registryService.cancelEditMetadataField();\n          this.forceUpdateFields();\n        });\n      }\n    );\n  }\n\n  /**\n   * Show notifications for an amount of deleted metadata fields\n   * @param success   Whether or not the notification should be a success message (error message when false)\n   * @param amount    The amount of deleted metadata fields\n   */\n  showNotification(success: boolean, amount: number) {\n    const prefix = 'admin.registries.schema.notification';\n    const suffix = success ? 'success' : 'failure';\n    const messages = observableCombineLatest(\n      this.translateService.get(success ? `${prefix}.${suffix}` : `${prefix}.${suffix}`),\n      this.translateService.get(`${prefix}.field.deleted.${suffix}`, { amount: amount })\n    );\n    messages.subscribe(([head, content]) => {\n      if (success) {\n        this.notificationsService.success(head, content);\n      } else {\n        this.notificationsService.error(head, content);\n      }\n    });\n  }\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n}\n","import { MetadataRegistryComponent } from './metadata-registry/metadata-registry.component';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { MetadataSchemaComponent } from './metadata-schema/metadata-schema.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { BITSTREAMFORMATS_MODULE_PATH } from './admin-registries-routing-paths';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: 'metadata',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        data: {title: 'admin.registries.metadata.title', breadcrumbKey: 'admin.registries.metadata'},\n        children: [\n          {\n            path: '',\n            component: MetadataRegistryComponent\n          },\n          {\n            path: ':schemaName',\n            resolve: { breadcrumb: I18nBreadcrumbResolver },\n            component: MetadataSchemaComponent,\n            data: {title: 'admin.registries.schema.title', breadcrumbKey: 'admin.registries.schema'}\n          }\n        ]\n      },\n      {\n        path: BITSTREAMFORMATS_MODULE_PATH,\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        loadChildren: () => import('./bitstream-formats/bitstream-formats.module')\n          .then((m) => m.BitstreamFormatsModule),\n        data: {title: 'admin.registries.bitstream-formats.title', breadcrumbKey: 'admin.registries.bitstream-formats'}\n      },\n    ])\n  ]\n})\nexport class AdminRegistriesRoutingModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { MetadataRegistryComponent } from './metadata-registry/metadata-registry.component';\nimport { AdminRegistriesRoutingModule } from './admin-registries-routing.module';\nimport { CommonModule } from '@angular/common';\nimport { MetadataSchemaComponent } from './metadata-schema/metadata-schema.component';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '../../shared/shared.module';\nimport { MetadataSchemaFormComponent } from './metadata-registry/metadata-schema-form/metadata-schema-form.component';\nimport { MetadataFieldFormComponent } from './metadata-schema/metadata-field-form/metadata-field-form.component';\nimport { BitstreamFormatsModule } from './bitstream-formats/bitstream-formats.module';\nimport { FormModule } from '../../shared/form/form.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    BitstreamFormatsModule,\n    AdminRegistriesRoutingModule,\n    FormModule\n  ],\n  declarations: [\n    MetadataRegistryComponent,\n    MetadataSchemaComponent,\n    MetadataSchemaFormComponent,\n    MetadataFieldFormComponent\n  ]\n})\nexport class AdminRegistriesModule {\n\n}\n","import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { METADATA_IMPORT_SCRIPT_NAME, ScriptDataService } from '../../core/data/processes/script-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { ProcessParameter } from '../../process-page/processes/process-parameter.model';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Process } from '../../process-page/processes/process.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport { getProcessDetailRoute } from '../../process-page/process-page-routing.paths';\n\n@Component({\n  selector: 'ds-metadata-import-page',\n  templateUrl: './metadata-import-page.component.html'\n})\n\n/**\n * Component that represents a metadata import page for administrators\n */\nexport class MetadataImportPageComponent {\n\n  /**\n   * The current value of the file\n   */\n  fileObject: File;\n\n  public constructor(private location: Location,\n                     protected translate: TranslateService,\n                     protected notificationsService: NotificationsService,\n                     private scriptDataService: ScriptDataService,\n                     private router: Router) {\n  }\n\n  /**\n   * Set file\n   * @param file\n   */\n  setFile(file) {\n    this.fileObject = file;\n  }\n\n  /**\n   * When return button is pressed go to previous location\n   */\n  public onReturn() {\n    this.location.back();\n  }\n\n  /**\n   * Starts import-metadata script with -f fileName (and the selected file)\n   */\n  public importMetadata() {\n    if (this.fileObject == null) {\n      this.notificationsService.error(this.translate.get('admin.metadata-import.page.error.addFile'));\n    } else {\n      const parameterValues: ProcessParameter[] = [\n        Object.assign(new ProcessParameter(), { name: '-f', value: this.fileObject.name }),\n      ];\n\n      this.scriptDataService.invoke(METADATA_IMPORT_SCRIPT_NAME, parameterValues, [this.fileObject]).pipe(\n        getFirstCompletedRemoteData(),\n      ).subscribe((rd: RemoteData<Process>) => {\n        if (rd.hasSucceeded) {\n          const title = this.translate.get('process.new.notification.success.title');\n          const content = this.translate.get('process.new.notification.success.content');\n          this.notificationsService.success(title, content);\n          if (isNotEmpty(rd.payload)) {\n            this.router.navigateByUrl(getProcessDetailRoute(rd.payload.processId));\n          }\n        } else {\n          const title = this.translate.get('process.new.notification.error.title');\n          const content = this.translate.get('process.new.notification.error.content');\n          this.notificationsService.error(title, content);\n        }\n      });\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { Context } from '../../core/shared/context.model';\n\n@Component({\n  selector: 'ds-admin-search-page',\n  templateUrl: './admin-search-page.component.html',\n  styleUrls: ['./admin-search-page.component.scss']\n})\n\n/**\n * Component that represents a search page for administrators\n */\nexport class AdminSearchPageComponent {\n  /**\n   * The context of this page\n   */\n  context: Context = Context.AdminSearch;\n}\n","import { Component } from '@angular/core';\nimport { Context } from '../../core/shared/context.model';\n\n@Component({\n  selector: 'ds-admin-workflow-page',\n  templateUrl: './admin-workflow-page.component.html',\n  styleUrls: ['./admin-workflow-page.component.scss']\n})\n\n/**\n * Component that represents a workflow item search page for administrators\n */\nexport class AdminWorkflowPageComponent {\n  /**\n   * The context of this page\n   */\n  context: Context = Context.AdminWorkflowSearch;\n}\n","import { Component } from '@angular/core';\n\n/**\n * Component responsible for rendering the system wide Curation Task UI\n */\n@Component({\n  selector: 'ds-admin-curation-task',\n  templateUrl: './admin-curation-tasks.component.html',\n})\nexport class AdminCurationTasksComponent {\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MetadataImportPageComponent } from './admin-import-metadata-page/metadata-import-page.component';\nimport { AdminSearchPageComponent } from './admin-search-page/admin-search-page.component';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { AdminWorkflowPageComponent } from './admin-workflow-page/admin-workflow-page.component';\nimport { I18nBreadcrumbsService } from '../core/breadcrumbs/i18n-breadcrumbs.service';\nimport { AdminCurationTasksComponent } from './admin-curation-tasks/admin-curation-tasks.component';\nimport { REGISTRIES_MODULE_PATH } from './admin-routing-paths';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: REGISTRIES_MODULE_PATH,\n        loadChildren: () => import('./admin-registries/admin-registries.module')\n          .then((m) => m.AdminRegistriesModule),\n      },\n      {\n        path: 'search',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        component: AdminSearchPageComponent,\n        data: { title: 'admin.search.title', breadcrumbKey: 'admin.search' }\n      },\n      {\n        path: 'workflow',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        component: AdminWorkflowPageComponent,\n        data: { title: 'admin.workflow.title', breadcrumbKey: 'admin.workflow' }\n      },\n      {\n        path: 'curation-tasks',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        component: AdminCurationTasksComponent,\n        data: { title: 'admin.curation-tasks.title', breadcrumbKey: 'admin.curation-tasks' }\n      },\n      {\n        path: 'metadata-import',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        component: MetadataImportPageComponent,\n        data: { title: 'admin.metadata-import.title', breadcrumbKey: 'admin.metadata-import' }\n      },\n    ])\n  ],\n  providers: [\n    I18nBreadcrumbResolver,\n    I18nBreadcrumbsService\n  ]\n})\nexport class AdminRoutingModule {\n\n}\n","<div class=\"container\">\n  <h2 id=\"header\">{{'admin.metadata-import.page.header' | translate}}</h2>\n  <p>{{'admin.metadata-import.page.help' | translate}}</p>\n\n  <ds-file-dropzone-no-uploader\n    (onFileAdded)=\"setFile($event)\"\n    [dropMessageLabel]=\"'admin.metadata-import.page.dropMsg'\"\n    [dropMessageLabelReplacement]=\"'admin.metadata-import.page.dropMsgReplace'\">\n  </ds-file-dropzone-no-uploader>\n\n  <button class=\"btn btn-secondary\" id=\"backButton\"\n          (click)=\"this.onReturn();\">{{'admin.metadata-import.page.button.return' | translate}}</button>\n  <button class=\"btn btn-primary\" id=\"proceedButton\"\n          (click)=\"this.importMetadata();\">{{'admin.metadata-import.page.button.proceed' | translate}}</button>\n</div>\n","<ds-configuration-search-page configuration=\"administrativeView\" [context]=\"context\"></ds-configuration-search-page>\n","<ds-configuration-search-page configuration=\"workflowAdmin\" [context]=\"context\"></ds-configuration-search-page>\n","<div class=\"container\">\n    <h2>{{'admin.curation-tasks.header' |translate }}</h2>\n    <ds-curation-form></ds-curation-form>\n</div>\n","<a [ngClass]=\"{'btn-sm': small}\" class=\"btn btn-light my-1 delete-link\" [routerLink]=\"[getDeleteRoute()]\" [title]=\"'admin.workflow.item.delete' | translate\">\n    <i class=\"fa fa-trash\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.workflow.item.delete\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" class=\"btn btn-light my-1 send-back-link\" [routerLink]=\"[getSendBackRoute()]\" [title]=\"'admin.workflow.item.send-back' | translate\">\n    <i class=\"fa fa-hand-point-left\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.workflow.item.send-back\" | translate}}</span>\n</a>\n","import { Component, Input } from '@angular/core';\nimport { WorkflowItem } from '../../../core/submission/models/workflowitem.model';\nimport {\n    getWorkflowItemSendBackRoute,\n    getWorkflowItemDeleteRoute\n} from '../../../workflowitems-edit-page/workflowitems-edit-page-routing-paths';\n\n@Component({\n  selector: 'ds-workflow-item-admin-workflow-actions-element',\n  styleUrls: ['./workflow-item-admin-workflow-actions.component.scss'],\n  templateUrl: './workflow-item-admin-workflow-actions.component.html'\n})\n/**\n * The component for displaying the actions for a list element for an item on the admin workflow search page\n */\nexport class WorkflowItemAdminWorkflowActionsComponent {\n\n  /**\n   * The workflow item to perform the actions on\n   */\n  @Input() public wfi: WorkflowItem;\n\n  /**\n   * Whether or not to use small buttons\n   */\n  @Input() public small: boolean;\n\n  /**\n   * Returns the path to the delete page of this workflow item\n   */\n  getDeleteRoute(): string {\n\n    return getWorkflowItemDeleteRoute(this.wfi.id);\n  }\n\n  /**\n   * Returns the path to the send back page of this workflow item\n   */\n  getSendBackRoute(): string {\n    return getWorkflowItemSendBackRoute(this.wfi.id);\n  }\n}\n","<ng-template dsListableObject>\n</ng-template>\n<div #badges class=\"position-absolute ml-1\">\n    <div class=\"workflow-badge\">\n        <span class=\"badge badge-info\">{{ \"admin.workflow.item.workflow\" | translate }}</span>\n    </div>\n</div>\n<ul #buttons class=\"list-group list-group-flush\">\n    <li class=\"list-group-item\">\n        <ds-workflow-item-admin-workflow-actions-element *ngIf=\"object\" class=\"d-flex justify-content-between\" [wfi]=\"dso\" [small]=\"true\"></ds-workflow-item-admin-workflow-actions-element>\n    </li>\n</ul>\n","import { Component, ComponentFactoryResolver, ElementRef, ViewChild } from '@angular/core';\nimport { Item } from '../../../../../core/shared/item.model';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport {\n  getListableObjectComponent,\n  listableObjectComponent\n} from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { SearchResultGridElementComponent } from '../../../../../shared/object-grid/search-result-grid-element/search-result-grid-element.component';\nimport { TruncatableService } from '../../../../../shared/truncatable/truncatable.service';\nimport { BitstreamDataService } from '../../../../../core/data/bitstream-data.service';\nimport { GenericConstructor } from '../../../../../core/shared/generic-constructor';\nimport { ListableObjectDirective } from '../../../../../shared/object-collection/shared/listable-object/listable-object.directive';\nimport { WorkflowItem } from '../../../../../core/submission/models/workflowitem.model';\nimport { Observable } from 'rxjs';\nimport { LinkService } from '../../../../../core/cache/builders/link.service';\nimport { followLink } from '../../../../../shared/utils/follow-link-config.model';\nimport { RemoteData } from '../../../../../core/data/remote-data';\nimport {\n  getAllSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../../../../core/shared/operators';\nimport { take } from 'rxjs/operators';\nimport { WorkflowItemSearchResult } from '../../../../../shared/object-collection/shared/workflow-item-search-result.model';\nimport { ThemeService } from '../../../../../shared/theme-support/theme.service';\n\n@listableObjectComponent(WorkflowItemSearchResult, ViewMode.GridElement, Context.AdminWorkflowSearch)\n@Component({\n  selector: 'ds-workflow-item-search-result-admin-workflow-grid-element',\n  styleUrls: ['./workflow-item-search-result-admin-workflow-grid-element.component.scss'],\n  templateUrl: './workflow-item-search-result-admin-workflow-grid-element.component.html'\n})\n/**\n * The component for displaying a grid element for an workflow item on the admin workflow search page\n */\nexport class WorkflowItemSearchResultAdminWorkflowGridElementComponent extends SearchResultGridElementComponent<WorkflowItemSearchResult, WorkflowItem> {\n  /**\n   * Directive used to render the dynamic component in\n   */\n  @ViewChild(ListableObjectDirective, { static: true }) listableObjectDirective: ListableObjectDirective;\n\n  /**\n   * The html child that contains the badges html\n   */\n  @ViewChild('badges', { static: true }) badges: ElementRef;\n\n  /**\n   * The html child that contains the button html\n   */\n  @ViewChild('buttons', { static: true }) buttons: ElementRef;\n\n  /**\n   * The item linked to the workflow item\n   */\n  public item$: Observable<Item>;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private linkService: LinkService,\n    protected truncatableService: TruncatableService,\n    private themeService: ThemeService,\n    protected bitstreamDataService: BitstreamDataService\n  ) {\n    super(truncatableService, bitstreamDataService);\n  }\n\n  /**\n   * Setup the dynamic child component\n   * Initialize the item object from the workflow item\n   */\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.dso = this.linkService.resolveLink(this.dso, followLink('item'));\n    this.item$ = (this.dso.item as Observable<RemoteData<Item>>).pipe(getAllSucceededRemoteData(), getRemoteDataPayload());\n    this.item$.pipe(take(1)).subscribe((item: Item) => {\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.getComponent(item));\n\n        const viewContainerRef = this.listableObjectDirective.viewContainerRef;\n        viewContainerRef.clear();\n\n        const componentRef = viewContainerRef.createComponent(\n          componentFactory,\n          0,\n          undefined,\n          [\n            [this.badges.nativeElement],\n            [this.buttons.nativeElement]\n          ]);\n        (componentRef.instance as any).object = item;\n        (componentRef.instance as any).index = this.index;\n        (componentRef.instance as any).linkType = this.linkType;\n        (componentRef.instance as any).listID = this.listID;\n        componentRef.changeDetectorRef.detectChanges();\n      }\n    );\n  }\n\n  /**\n   * Fetch the component depending on the item's entity type, view mode and context\n   * @returns {GenericConstructor<Component>}\n   */\n  private getComponent(item: Item): GenericConstructor<Component> {\n    return getListableObjectComponent(item.getRenderTypes(), ViewMode.GridElement, undefined, this.themeService.getThemeName());\n  }\n\n}\n","<div class=\"workflow-badge\">\n    <span class=\"badge badge-info\">{{ \"admin.workflow.item.workflow\" | translate }}</span>\n</div>\n<ds-listable-object-component-loader *ngIf=\"item$ | async\"\n                                     [object]=\"item$ | async\"\n                                     [viewMode]=\"viewModes.ListElement\"\n                                     [index]=\"index\"\n                                     [linkType]=\"linkType\"\n                                     [listID]=\"listID\"></ds-listable-object-component-loader>\n<ds-workflow-item-admin-workflow-actions-element [wfi]=\"dso\" [small]=\"false\"></ds-workflow-item-admin-workflow-actions-element>\n","import { Component, OnInit } from '@angular/core';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { listableObjectComponent } from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { WorkflowItem } from '../../../../../core/submission/models/workflowitem.model';\nimport { Observable } from 'rxjs';\nimport { LinkService } from '../../../../../core/cache/builders/link.service';\nimport { followLink } from '../../../../../shared/utils/follow-link-config.model';\nimport { RemoteData } from '../../../../../core/data/remote-data';\nimport { getAllSucceededRemoteData, getRemoteDataPayload } from '../../../../../core/shared/operators';\nimport { Item } from '../../../../../core/shared/item.model';\nimport { SearchResultListElementComponent } from '../../../../../shared/object-list/search-result-list-element/search-result-list-element.component';\nimport { TruncatableService } from '../../../../../shared/truncatable/truncatable.service';\nimport { WorkflowItemSearchResult } from '../../../../../shared/object-collection/shared/workflow-item-search-result.model';\nimport { DSONameService } from '../../../../../core/breadcrumbs/dso-name.service';\n\n@listableObjectComponent(WorkflowItemSearchResult, ViewMode.ListElement, Context.AdminWorkflowSearch)\n@Component({\n  selector: 'ds-workflow-item-search-result-admin-workflow-list-element',\n  styleUrls: ['./workflow-item-search-result-admin-workflow-list-element.component.scss'],\n  templateUrl: './workflow-item-search-result-admin-workflow-list-element.component.html'\n})\n/**\n * The component for displaying a list element for an workflow item on the admin workflow search page\n */\nexport class WorkflowItemSearchResultAdminWorkflowListElementComponent extends SearchResultListElementComponent<WorkflowItemSearchResult, WorkflowItem> implements OnInit {\n\n  /**\n   * The item linked to the workflow item\n   */\n  public item$: Observable<Item>;\n\n  constructor(private linkService: LinkService,\n              protected truncatableService: TruncatableService,\n              protected dsoNameService: DSONameService\n  ) {\n    super(truncatableService, dsoNameService);\n  }\n\n  /**\n   * Initialize the item object from the workflow item\n   */\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.dso = this.linkService.resolveLink(this.dso, followLink('item'));\n    this.item$ = (this.dso.item as Observable<RemoteData<Item>>).pipe(getAllSucceededRemoteData(), getRemoteDataPayload());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { WorkflowItemSearchResultAdminWorkflowGridElementComponent } from './admin-workflow-search-results/admin-workflow-search-result-grid-element/workflow-item/workflow-item-search-result-admin-workflow-grid-element.component';\nimport { WorkflowItemAdminWorkflowActionsComponent } from './admin-workflow-search-results/workflow-item-admin-workflow-actions.component';\nimport { WorkflowItemSearchResultAdminWorkflowListElementComponent } from './admin-workflow-search-results/admin-workflow-search-result-list-element/workflow-item/workflow-item-search-result-admin-workflow-list-element.component';\nimport { AdminWorkflowPageComponent } from './admin-workflow-page.component';\nimport { SearchModule } from '../../shared/search/search.module';\n\nconst ENTRY_COMPONENTS = [\n  // put only entry components that use custom decorator\n  WorkflowItemSearchResultAdminWorkflowListElementComponent,\n  WorkflowItemSearchResultAdminWorkflowGridElementComponent,\n];\n\n@NgModule({\n  imports: [\n    SearchModule,\n    SharedModule.withEntryComponents()\n  ],\n  declarations: [\n    AdminWorkflowPageComponent,\n    WorkflowItemAdminWorkflowActionsComponent,\n    ...ENTRY_COMPONENTS\n  ],\n  exports: [\n    AdminWorkflowPageComponent\n  ]\n})\nexport class AdminWorkflowModuleModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during SSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: SharedModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({provide: component}))\n    };\n  }\n}\n","<a [ngClass]=\"{'btn-sm': small}\" class=\"btn btn-secondary my-1 move-link\" [routerLink]=\"[getMoveRoute()]\" [title]=\"'admin.search.item.move' | translate\">\n  <i class=\"fa fa-arrow-circle-right\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.move\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" *ngIf=\"item && item.isDiscoverable\" class=\"btn btn-secondary my-1 private-link\" [routerLink]=\"[getPrivateRoute()]\" [title]=\"'admin.search.item.make-private' | translate\">\n    <i class=\"fa fa-eye-slash\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.make-private\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" *ngIf=\"item && !item.isDiscoverable\" class=\"btn btn-secondary my-1 public-link\" [routerLink]=\"[getPublicRoute()]\" [title]=\"'admin.search.item.make-public' | translate\">\n    <i class=\"fa fa-eye\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.make-public\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" class=\"btn btn-secondary my-1 edit-link\" [routerLink]=\"[getEditRoute()]\" [title]=\"'admin.search.item.edit' | translate\">\n  <i class=\"fa fa-edit\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.edit\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" *ngIf=\"item && !item.isWithdrawn\" class=\"btn btn-warning t my-1 withdraw-link\" [routerLink]=\"[getWithdrawRoute()]\" [title]=\"'admin.search.item.withdraw' | translate\">\n  <i class=\"fa fa-ban\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.withdraw\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" *ngIf=\"item && item.isWithdrawn\" class=\"btn btn-warning my-1 reinstate-link\" [routerLink]=\"[getReinstateRoute()]\" [title]=\"'admin.search.item.reinstate' | translate\">\n  <i class=\"fa fa-undo\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.reinstate\" | translate}}</span>\n</a>\n\n<a [ngClass]=\"{'btn-sm': small}\" class=\"btn btn-danger my-1 delete-link\" [routerLink]=\"[getDeleteRoute()]\" [title]=\"'admin.search.item.delete' | translate\">\n    <i class=\"fa fa-trash\"></i><span *ngIf=\"!small\" class=\"d-none d-sm-inline\"> {{\"admin.search.item.delete\" | translate}}</span>\n</a>\n\n","import { Component, Input } from '@angular/core';\nimport { Item } from '../../../core/shared/item.model';\nimport { URLCombiner } from '../../../core/url-combiner/url-combiner';\nimport { getItemEditRoute } from '../../../item-page/item-page-routing-paths';\nimport {\n  ITEM_EDIT_MOVE_PATH,\n  ITEM_EDIT_DELETE_PATH,\n  ITEM_EDIT_PUBLIC_PATH,\n  ITEM_EDIT_PRIVATE_PATH,\n  ITEM_EDIT_REINSTATE_PATH,\n  ITEM_EDIT_WITHDRAW_PATH\n} from '../../../item-page/edit-item-page/edit-item-page.routing-paths';\n\n@Component({\n  selector: 'ds-item-admin-search-result-actions-element',\n  styleUrls: ['./item-admin-search-result-actions.component.scss'],\n  templateUrl: './item-admin-search-result-actions.component.html'\n})\n/**\n * The component for displaying the actions for a list element for an item search result on the admin search page\n */\nexport class ItemAdminSearchResultActionsComponent {\n  /**\n   * The item to perform the actions on\n   */\n  @Input() public item: Item;\n\n  /**\n   * Whether or not to use small buttons\n   */\n  @Input() public small: boolean;\n\n  /**\n   * Returns the path to the edit page of this item\n   */\n  getEditRoute(): string {\n    return getItemEditRoute(this.item);\n  }\n\n  /**\n   * Returns the path to the move page of this item\n   */\n  getMoveRoute(): string {\n    return new URLCombiner(this.getEditRoute(), ITEM_EDIT_MOVE_PATH).toString();\n  }\n\n  /**\n   * Returns the path to the delete page of this item\n   */\n  getDeleteRoute(): string {\n    return new URLCombiner(this.getEditRoute(), ITEM_EDIT_DELETE_PATH).toString();\n  }\n\n  /**\n   * Returns the path to the withdraw page of this item\n   */\n  getWithdrawRoute(): string {\n    return new URLCombiner(this.getEditRoute(), ITEM_EDIT_WITHDRAW_PATH).toString();\n  }\n\n  /**\n   * Returns the path to the reinstate page of this item\n   */\n  getReinstateRoute(): string {\n    return new URLCombiner(this.getEditRoute(), ITEM_EDIT_REINSTATE_PATH).toString();\n  }\n\n  /**\n   * Returns the path to the page where the user can make this item private\n   */\n  getPrivateRoute(): string {\n    return new URLCombiner(this.getEditRoute(), ITEM_EDIT_PRIVATE_PATH).toString();\n  }\n\n  /**\n   * Returns the path to the page where the user can make this item public\n   */\n  getPublicRoute(): string {\n    return new URLCombiner(this.getEditRoute(), ITEM_EDIT_PUBLIC_PATH).toString();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Item } from '../../../../../core/shared/item.model';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { listableObjectComponent } from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { ItemSearchResult } from '../../../../../shared/object-collection/shared/item-search-result.model';\nimport { SearchResultListElementComponent } from '../../../../../shared/object-list/search-result-list-element/search-result-list-element.component';\n\n@listableObjectComponent(ItemSearchResult, ViewMode.ListElement, Context.AdminSearch)\n@Component({\n  selector: 'ds-item-admin-search-result-list-element',\n  styleUrls: ['./item-admin-search-result-list-element.component.scss'],\n  templateUrl: './item-admin-search-result-list-element.component.html'\n})\n/**\n * The component for displaying a list element for an item search result on the admin search page\n */\nexport class ItemAdminSearchResultListElementComponent extends SearchResultListElementComponent<ItemSearchResult, Item> {\n\n}\n","import { Component } from '@angular/core';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { listableObjectComponent } from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { SearchResultListElementComponent } from '../../../../../shared/object-list/search-result-list-element/search-result-list-element.component';\nimport { CommunitySearchResult } from '../../../../../shared/object-collection/shared/community-search-result.model';\nimport { Community } from '../../../../../core/shared/community.model';\nimport { getCommunityEditRoute } from '../../../../../community-page/community-page-routing-paths';\n\n@listableObjectComponent(CommunitySearchResult, ViewMode.ListElement, Context.AdminSearch)\n@Component({\n  selector: 'ds-community-admin-search-result-list-element',\n  styleUrls: ['./community-admin-search-result-list-element.component.scss'],\n  templateUrl: './community-admin-search-result-list-element.component.html'\n})\n/**\n * The component for displaying a list element for a community search result on the admin search page\n */\nexport class CommunityAdminSearchResultListElementComponent extends SearchResultListElementComponent<CommunitySearchResult, Community> {\n  editPath: string;\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.editPath = getCommunityEditRoute(this.dso.uuid);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { listableObjectComponent } from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { SearchResultListElementComponent } from '../../../../../shared/object-list/search-result-list-element/search-result-list-element.component';\nimport { CollectionSearchResult } from '../../../../../shared/object-collection/shared/collection-search-result.model';\nimport { Collection } from '../../../../../core/shared/collection.model';\nimport { getCollectionEditRoute } from '../../../../../collection-page/collection-page-routing-paths';\n\n@listableObjectComponent(CollectionSearchResult, ViewMode.ListElement, Context.AdminSearch)\n@Component({\n  selector: 'ds-collection-admin-search-result-list-element',\n  styleUrls: ['./collection-admin-search-result-list-element.component.scss'],\n  templateUrl: './collection-admin-search-result-list-element.component.html'\n})\n/**\n * The component for displaying a list element for a collection search result on the admin search page\n */\nexport class CollectionAdminSearchResultListElementComponent extends SearchResultListElementComponent<CollectionSearchResult, Collection> {\n  editPath: string;\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.editPath = getCollectionEditRoute(this.dso.uuid);\n  }\n}\n","<ds-listable-object-component-loader [object]=\"object\"\n                                     [viewMode]=\"viewModes.ListElement\"\n                                     [index]=\"index\"\n                                     [linkType]=\"linkType\"\n                                     [listID]=\"listID\"\n                                     [hideBadges]=\"true\"></ds-listable-object-component-loader>\n<ds-item-admin-search-result-actions-element [item]=\"dso\" [small]=\"false\"></ds-item-admin-search-result-actions-element>\n","<ds-community-search-result-list-element [object]=\"object\"\n                                         [index]=\"index\"\n                                         [linkType]=\"linkType\"\n                                         [listID]=\"listID\"></ds-community-search-result-list-element>\n<div>\n    <a class=\"btn btn-light mt-1\" [routerLink]=\"[editPath]\">\n        <i class=\"fa fa-edit\"></i> {{\"admin.search.community.edit\" | translate}}\n    </a>\n</div>\n","<ds-collection-search-result-list-element [object]=\"object\"\n                                          [index]=\"index\"\n                                          [linkType]=\"linkType\"\n                                          [listID]=\"listID\"></ds-collection-search-result-list-element>\n<div>\n    <a class=\"btn btn-light mt-1\" [routerLink]=\"[editPath]\">\n        <i class=\"fa fa-edit\"></i> {{\"admin.search.collection.edit\" | translate}}\n    </a>\n</div>\n","<ng-template dsListableObject>\n</ng-template>\n<div #badges>\n  <ng-content></ng-content>\n</div>\n<ul #buttons class=\"list-group list-group-flush\">\n  <li class=\"list-group-item\">\n      <ds-item-admin-search-result-actions-element class=\"d-flex justify-content-between\" [item]=\"dso\" [small]=\"true\"></ds-item-admin-search-result-actions-element>\n  </li>\n</ul>\n","import { Component, ComponentFactoryResolver, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Item } from '../../../../../core/shared/item.model';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport {\n  getListableObjectComponent,\n  listableObjectComponent\n} from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { ItemSearchResult } from '../../../../../shared/object-collection/shared/item-search-result.model';\nimport { SearchResultGridElementComponent } from '../../../../../shared/object-grid/search-result-grid-element/search-result-grid-element.component';\nimport { TruncatableService } from '../../../../../shared/truncatable/truncatable.service';\nimport { BitstreamDataService } from '../../../../../core/data/bitstream-data.service';\nimport { GenericConstructor } from '../../../../../core/shared/generic-constructor';\nimport { ListableObjectDirective } from '../../../../../shared/object-collection/shared/listable-object/listable-object.directive';\nimport { ThemeService } from '../../../../../shared/theme-support/theme.service';\n\n@listableObjectComponent(ItemSearchResult, ViewMode.GridElement, Context.AdminSearch)\n@Component({\n  selector: 'ds-item-admin-search-result-grid-element',\n  styleUrls: ['./item-admin-search-result-grid-element.component.scss'],\n  templateUrl: './item-admin-search-result-grid-element.component.html'\n})\n/**\n * The component for displaying a list element for an item search result on the admin search page\n */\nexport class ItemAdminSearchResultGridElementComponent extends SearchResultGridElementComponent<ItemSearchResult, Item> implements OnInit {\n  @ViewChild(ListableObjectDirective, { static: true }) listableObjectDirective: ListableObjectDirective;\n  @ViewChild('badges', { static: true }) badges: ElementRef;\n  @ViewChild('buttons', { static: true }) buttons: ElementRef;\n\n  constructor(protected truncatableService: TruncatableService,\n              protected bitstreamDataService: BitstreamDataService,\n              private themeService: ThemeService,\n              private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(truncatableService, bitstreamDataService);\n  }\n\n  /**\n   * Setup the dynamic child component\n   */\n  ngOnInit(): void {\n    super.ngOnInit();\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.getComponent());\n\n    const viewContainerRef = this.listableObjectDirective.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent(\n      componentFactory,\n      0,\n      undefined,\n      [\n        [this.badges.nativeElement],\n        [this.buttons.nativeElement]\n      ]);\n    (componentRef.instance as any).object = this.object;\n    (componentRef.instance as any).index = this.index;\n    (componentRef.instance as any).linkType = this.linkType;\n    (componentRef.instance as any).listID = this.listID;\n  }\n\n  /**\n   * Fetch the component depending on the item's entity type, view mode and context\n   * @returns {GenericConstructor<Component>}\n   */\n  private getComponent(): GenericConstructor<Component> {\n    return getListableObjectComponent(this.object.getRenderTypes(), ViewMode.GridElement, undefined, this.themeService.getThemeName());\n  }\n}\n","import { Component } from '@angular/core';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { listableObjectComponent } from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { CommunitySearchResult } from '../../../../../shared/object-collection/shared/community-search-result.model';\nimport { Community } from '../../../../../core/shared/community.model';\nimport { SearchResultGridElementComponent } from '../../../../../shared/object-grid/search-result-grid-element/search-result-grid-element.component';\nimport { getCommunityEditRoute } from '../../../../../community-page/community-page-routing-paths';\n\n@listableObjectComponent(CommunitySearchResult, ViewMode.GridElement, Context.AdminSearch)\n@Component({\n  selector: 'ds-community-admin-search-result-grid-element',\n  styleUrls: ['./community-admin-search-result-grid-element.component.scss'],\n  templateUrl: './community-admin-search-result-grid-element.component.html'\n})\n/**\n * The component for displaying a list element for a community search result on the admin search page\n */\nexport class CommunityAdminSearchResultGridElementComponent extends SearchResultGridElementComponent<CommunitySearchResult, Community> {\n  editPath: string;\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.editPath = getCommunityEditRoute(this.dso.uuid);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { listableObjectComponent } from '../../../../../shared/object-collection/shared/listable-object/listable-object.decorator';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { CollectionSearchResult } from '../../../../../shared/object-collection/shared/collection-search-result.model';\nimport { Collection } from '../../../../../core/shared/collection.model';\nimport { SearchResultGridElementComponent } from '../../../../../shared/object-grid/search-result-grid-element/search-result-grid-element.component';\nimport { getCollectionEditRoute } from '../../../../../collection-page/collection-page-routing-paths';\n\n@listableObjectComponent(CollectionSearchResult, ViewMode.GridElement, Context.AdminSearch)\n@Component({\n  selector: 'ds-collection-admin-search-result-list-element',\n  styleUrls: ['./collection-admin-search-result-grid-element.component.scss'],\n  templateUrl: './collection-admin-search-result-grid-element.component.html'\n})\n/**\n * The component for displaying a list element for a collection search result on the admin search page\n */\nexport class CollectionAdminSearchResultGridElementComponent extends SearchResultGridElementComponent<CollectionSearchResult, Collection> {\n  editPath: string;\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.editPath = getCollectionEditRoute(this.dso.uuid);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { AdminSearchPageComponent } from './admin-search-page.component';\nimport { ItemAdminSearchResultListElementComponent } from './admin-search-results/admin-search-result-list-element/item-search-result/item-admin-search-result-list-element.component';\nimport { CommunityAdminSearchResultListElementComponent } from './admin-search-results/admin-search-result-list-element/community-search-result/community-admin-search-result-list-element.component';\nimport { CollectionAdminSearchResultListElementComponent } from './admin-search-results/admin-search-result-list-element/collection-search-result/collection-admin-search-result-list-element.component';\nimport { ItemAdminSearchResultGridElementComponent } from './admin-search-results/admin-search-result-grid-element/item-search-result/item-admin-search-result-grid-element.component';\nimport { CommunityAdminSearchResultGridElementComponent } from './admin-search-results/admin-search-result-grid-element/community-search-result/community-admin-search-result-grid-element.component';\nimport { CollectionAdminSearchResultGridElementComponent } from './admin-search-results/admin-search-result-grid-element/collection-search-result/collection-admin-search-result-grid-element.component';\nimport { ItemAdminSearchResultActionsComponent } from './admin-search-results/item-admin-search-result-actions.component';\nimport { JournalEntitiesModule } from '../../entity-groups/journal-entities/journal-entities.module';\nimport { ResearchEntitiesModule } from '../../entity-groups/research-entities/research-entities.module';\nimport { SearchModule } from '../../shared/search/search.module';\n\nconst ENTRY_COMPONENTS = [\n  // put only entry components that use custom decorator\n  ItemAdminSearchResultListElementComponent,\n  CommunityAdminSearchResultListElementComponent,\n  CollectionAdminSearchResultListElementComponent,\n  ItemAdminSearchResultGridElementComponent,\n  CommunityAdminSearchResultGridElementComponent,\n  CollectionAdminSearchResultGridElementComponent,\n  ItemAdminSearchResultActionsComponent\n];\n\n@NgModule({\n  imports: [\n    SearchModule,\n    SharedModule.withEntryComponents(),\n    JournalEntitiesModule.withEntryComponents(),\n    ResearchEntitiesModule.withEntryComponents()\n  ],\n  declarations: [\n    AdminSearchPageComponent,\n    ...ENTRY_COMPONENTS\n  ]\n})\nexport class AdminSearchModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during SSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: SharedModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({provide: component}))\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { AccessControlModule } from '../access-control/access-control.module';\nimport { MetadataImportPageComponent } from './admin-import-metadata-page/metadata-import-page.component';\nimport { AdminRegistriesModule } from './admin-registries/admin-registries.module';\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { AdminCurationTasksComponent } from './admin-curation-tasks/admin-curation-tasks.component';\nimport { AdminWorkflowModuleModule } from './admin-workflow-page/admin-workflow.module';\nimport { AdminSearchModule } from './admin-search-page/admin-search.module';\nimport { AdminSidebarSectionComponent } from './admin-sidebar/admin-sidebar-section/admin-sidebar-section.component';\nimport { ExpandableAdminSidebarSectionComponent } from './admin-sidebar/expandable-admin-sidebar-section/expandable-admin-sidebar-section.component';\n\nconst ENTRY_COMPONENTS = [\n  // put only entry components that use custom decorator\n  AdminSidebarSectionComponent,\n  ExpandableAdminSidebarSectionComponent,\n];\n\n\n@NgModule({\n  imports: [\n    AdminRoutingModule,\n    AdminRegistriesModule,\n    AccessControlModule,\n    AdminSearchModule.withEntryComponents(),\n    AdminWorkflowModuleModule.withEntryComponents(),\n    SharedModule\n  ],\n  declarations: [\n    AdminCurationTasksComponent,\n    MetadataImportPageComponent\n  ]\n})\nexport class AdminModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during SSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: AdminModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({provide: component}))\n    };\n  }\n}\n","<ds-community-search-result-grid-element [object]=\"object\"\n                                         [index]=\"index\"\n                                         [linkType]=\"linkType\"\n                                         [listID]=\"listID\">\n  <ul class=\"list-group list-group-flush\">\n    <li class=\"list-group-item text-center\">\n      <a class=\"btn btn-light btn-sm btn-auto my-1 edit-link\" [routerLink]=\"[editPath]\">\n        <i class=\"fa fa-edit\"></i>\n      </a>\n    </li>\n  </ul>\n</ds-community-search-result-grid-element>\n\n","<ds-collection-search-result-grid-element [object]=\"object\"\n                                          [index]=\"index\"\n                                          [linkType]=\"linkType\"\n                                          [listID]=\"listID\">\n  <ul class=\"list-group list-group-flush\">\n    <li class=\"list-group-item text-center\">\n      <a class=\"btn btn-light btn-sm btn-auto my-1 edit-link\" [routerLink]=\"[editPath]\">\n        <i class=\"fa fa-edit\"></i>\n      </a>\n    </li>\n  </ul>\n</ds-collection-search-result-grid-element>\n\n","export const ITEM_EDIT_WITHDRAW_PATH = 'withdraw';\nexport const ITEM_EDIT_REINSTATE_PATH = 'reinstate';\nexport const ITEM_EDIT_PRIVATE_PATH = 'private';\nexport const ITEM_EDIT_PUBLIC_PATH = 'public';\nexport const ITEM_EDIT_DELETE_PATH = 'delete';\nexport const ITEM_EDIT_MOVE_PATH = 'move';\nexport const ITEM_EDIT_AUTHORIZATIONS_PATH = 'authorizations';\n","import { URLCombiner } from '../../core/url-combiner/url-combiner';\nimport { getRegistriesModuleRoute } from '../admin-routing-paths';\n\nexport const BITSTREAMFORMATS_MODULE_PATH = 'bitstream-formats';\n\nexport function getBitstreamFormatsModuleRoute() {\n  return new URLCombiner(getRegistriesModuleRoute(), BITSTREAMFORMATS_MODULE_PATH).toString();\n}\n"]}