{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/browse-by/browse-by-switcher/browse-by-decorator.ts","webpack:///src/app/core/breadcrumbs/dso-breadcrumbs.service.ts","webpack:///src/app/browse-by/browse-by-switcher/browse-by-switcher.component.ts","webpack:///src/app/browse-by/browse-by-switcher/browse-by-switcher.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/browse\\-by\\/browse\\-by\\-switcher\\/browse\\-by\\-switcher\\.component$ namespace object","webpack:///src/app/access-control/access-control-routing-paths.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/browse-by/browse-by-guard.ts","webpack:///src/app/browse-by/browse-by-dso-breadcrumb.resolver.ts","webpack:///src/app/browse-by/browse-by-i18n-breadcrumb.resolver.ts","webpack:///src/app/browse-by/browse-by-switcher/themed-browse-by-switcher.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/browse-by/browse-by-routing.module.ts","webpack:///src/app/core/browse/browse-entry-search-options.model.ts","webpack:///src/app/browse-by/browse-by-metadata-page/browse-by-metadata-page.component.html","webpack:///src/app/browse-by/browse-by-metadata-page/browse-by-metadata-page.component.ts","webpack:///src/app/browse-by/browse-by-title-page/browse-by-title-page.component.ts","webpack:///src/app/browse-by/browse-by-date-page/browse-by-date-page.component.ts","webpack:///src/app/browse-by/browse-by.module.ts","webpack:///src/app/browse-by/browse-by-page.module.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","constructor","breadcrumbService","resolve","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","BrowseByDataType","Title","Metadata","Date","DEFAULT_BROWSE_BY_TYPE","BROWSE_BY_COMPONENT_FACTORY","InjectionToken","providedIn","factory","getComponentByBrowseByType","map","Map","rendersBrowseBy","browseByType","component","get","set","comp","DSOBreadcrumbsService","linkService","dsoNameService","getBreadcrumbs","label","getName","crumb","propertyName","getParentLinkKey","resolveLink","pipe","parentRD","hasSucceeded","statusCode","payload","parent","breadcrumbs","BrowseBySwitcherComponent","ngOnInit","browseByComponent","browseDefinition","dataType","webpackAsyncContext","req","__webpack_require__","o","Promise","then","e","code","ids","id","keys","Object","module","exports","GROUP_EDIT_PATH","getGroupEditRoute","toString","I18nBreadcrumbsService","BrowseByGuard","dsoService","translate","browseDefinitionService","canActivate","title","params","queryParams","browseDefinition$","findById","scope","value","metadataTranslated","instant","switchMap","dsoRD","createData","name","collection","field","assign","BrowseByDSOBreadcrumbResolver","dataService","uuid","object","BrowseByI18nBreadcrumbResolver","super","ThemedBrowseBySwitcherComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","BrowseByRoutingModule","forChild","path","breadcrumb","children","BrowseEntrySearchOptions","metadataDefinition","pagination","sort","startsWith","BrowseByMetadataPageComponent","browseService","paginationService","router","paginationConfig","currentPage","pageSize","subs","defaultBrowseId","browseId","startsWithType","text","sortConfig","ASC","updatePage","currentPagination$","getCurrentPagination","currentSort$","getCurrentSort","push","routeParams","currentSort","subscribe","authority","searchOptions","browseParamsToOptions","updatePageWithItems","updateParent","updateStartsWithTextOptions","startsWithOptions","split","browseEntries$","getBrowseEntriesFor","items$","undefined","getBrowseItemsFor","parent$","goPrev","items","getPrevBrowseItems","entries","getPrevBrowseEntries","goNext","getNextBrowseItems","getNextBrowseEntries","ngOnDestroy","filter","sub","forEach","unsubscribe","clearPagination","metadata","BrowseByTitlePageComponent","BrowseByDatePageComponent","cdRef","defaultMetadataKeys","date","metadataKeys","updateStartsWithOptions","definition","getFirstItemFor","firstItemRD","lowerLimit","environment","browseBy","defaultLowerLimit","firstMetadataValue","getUTCFullYear","options","currentYear","oneYearBreak","Math","floor","oneYearLimit","fiveYearBreak","fiveYearLimit","i","detectChanges","ENTRY_COMPONENTS","BrowseByModule","static","ngModule","providers","provide","BrowseByPageModule","withEntryComponents","Breadcrumb"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { hasNoValue } from '../../shared/empty.util';\nimport { InjectionToken } from '@angular/core';\nimport { GenericConstructor } from '../../core/shared/generic-constructor';\n\nexport enum BrowseByDataType {\n  Title = 'title',\n  Metadata = 'text',\n  Date = 'date'\n}\n\nexport const DEFAULT_BROWSE_BY_TYPE = BrowseByDataType.Metadata;\n\nexport const BROWSE_BY_COMPONENT_FACTORY = new InjectionToken<(browseByType) => GenericConstructor<any>>('getComponentByBrowseByType', {\n  providedIn: 'root',\n  factory: () => getComponentByBrowseByType\n});\n\nconst map = new Map();\n\n/**\n * Decorator used for rendering Browse-By pages by type\n * @param browseByType  The type of page\n */\nexport function rendersBrowseBy(browseByType: BrowseByDataType) {\n  return function decorator(component: any) {\n    if (hasNoValue(map.get(browseByType))) {\n      map.set(browseByType, component);\n    } else {\n      throw new Error(`There can't be more than one component to render Browse-By of type \"${browseByType}\"`);\n    }\n  };\n}\n\n/**\n * Get the component used for rendering a Browse-By page by type\n * @param browseByType  The type of page\n */\nexport function getComponentByBrowseByType(browseByType) {\n  const comp = map.get(browseByType);\n  if (hasNoValue(comp)) {\n    map.get(DEFAULT_BROWSE_BY_TYPE);\n  }\n  return comp;\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { DSONameService } from './dso-name.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { LinkService } from '../cache/builders/link.service';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { find, map, switchMap } from 'rxjs/operators';\nimport { RemoteData } from '../data/remote-data';\nimport { hasValue } from '../../shared/empty.util';\nimport { Injectable } from '@angular/core';\nimport { getDSORoute } from '../../app-routing-paths';\n\n/**\n * Service to calculate DSpaceObject breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DSOBreadcrumbsService implements BreadcrumbsProviderService<ChildHALResource & DSpaceObject> {\n  constructor(\n    private linkService: LinkService,\n    private dsoNameService: DSONameService\n  ) {\n\n  }\n\n  /**\n   * Method to recursively calculate the breadcrumbs\n   * This method returns the name and url of the key and all its parent DSOs recursively, top down\n   * @param key The key (a DSpaceObject) used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: ChildHALResource & DSpaceObject, url: string): Observable<Breadcrumb[]> {\n    const label = this.dsoNameService.getName(key);\n    const crumb = new Breadcrumb(label, url);\n    const propertyName = key.getParentLinkKey();\n    return this.linkService.resolveLink(key, followLink(propertyName))[propertyName].pipe(\n      find((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => parentRD.hasSucceeded || parentRD.statusCode === 204),\n      switchMap((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => {\n        if (hasValue(parentRD.payload)) {\n          const parent = parentRD.payload;\n          return this.getBreadcrumbs(parent, getDSORoute(parent));\n        }\n        return observableOf([]);\n\n      }),\n      map((breadcrumbs: Breadcrumb[]) => [...breadcrumbs, crumb])\n    );\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BROWSE_BY_COMPONENT_FACTORY } from './browse-by-decorator';\nimport { GenericConstructor } from '../../core/shared/generic-constructor';\nimport { BrowseDefinition } from '../../core/shared/browse-definition.model';\n\n@Component({\n  selector: 'ds-browse-by-switcher',\n  templateUrl: './browse-by-switcher.component.html'\n})\n/**\n * Component for determining what Browse-By component to use depending on the metadata (browse ID) provided\n */\nexport class BrowseBySwitcherComponent implements OnInit {\n\n  /**\n   * Resolved browse-by component\n   */\n  browseByComponent: Observable<any>;\n\n  public constructor(protected route: ActivatedRoute,\n                     @Inject(BROWSE_BY_COMPONENT_FACTORY) private getComponentByBrowseByType: (browseByType) => GenericConstructor<any>) {\n  }\n\n  /**\n   * Fetch the correct browse-by component by using the relevant config from the route data\n   */\n  ngOnInit(): void {\n    this.browseByComponent = this.route.data.pipe(\n      map((data: { browseDefinition: BrowseDefinition }) => this.getComponentByBrowseByType(data.browseDefinition.dataType))\n    );\n  }\n\n}\n","<ng-container *ngComponentOutlet=\"browseByComponent | async\"></ng-container>\n","var map = {\n\t\"./custom/app/browse-by/browse-by-switcher/browse-by-switcher.component\": [\n\t\t\"O20E\",\n\t\t45\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"SuJu\";\nmodule.exports = webpackAsyncContext;","import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getAccessControlModuleRoute } from '../app-routing-paths';\n\nexport const GROUP_EDIT_PATH = 'groups';\n\nexport function getGroupsRoute() {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH).toString();\n}\n\nexport function getGroupEditRoute(id: string) {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH, id).toString();\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { DSpaceObjectDataService } from '../core/data/dspace-object-data.service';\nimport { hasNoValue, hasValue } from '../shared/empty.util';\nimport { map, switchMap } from 'rxjs/operators';\nimport { getFirstSucceededRemoteData, getFirstSucceededRemoteDataPayload } from '../core/shared/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { BrowseDefinitionDataService } from '../core/browse/browse-definition-data.service';\nimport { BrowseDefinition } from '../core/shared/browse-definition.model';\n\n@Injectable()\n/**\n * A guard taking care of the correct route.data being set for the Browse-By components\n */\nexport class BrowseByGuard implements CanActivate {\n\n  constructor(protected dsoService: DSpaceObjectDataService,\n              protected translate: TranslateService,\n              protected browseDefinitionService: BrowseDefinitionDataService) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const title = route.data.title;\n    const id = route.params.id || route.queryParams.id || route.data.id;\n    let browseDefinition$: Observable<BrowseDefinition>;\n    if (hasNoValue(route.data.browseDefinition) && hasValue(id)) {\n      browseDefinition$ = this.browseDefinitionService.findById(id).pipe(getFirstSucceededRemoteDataPayload());\n    } else {\n      browseDefinition$ = observableOf(route.data.browseDefinition);\n    }\n    const scope = route.queryParams.scope;\n    const value = route.queryParams.value;\n    const metadataTranslated = this.translate.instant('browse.metadata.' + id);\n    return browseDefinition$.pipe(\n      switchMap((browseDefinition) => {\n        if (hasValue(scope)) {\n          const dsoAndMetadata$ = this.dsoService.findById(scope).pipe(getFirstSucceededRemoteData());\n          return dsoAndMetadata$.pipe(\n            map((dsoRD) => {\n              const name = dsoRD.payload.name;\n              route.data = this.createData(title, id, browseDefinition, name, metadataTranslated, value, route);\n              return true;\n            })\n          );\n        } else {\n          route.data = this.createData(title, id, browseDefinition, '', metadataTranslated, value, route);\n          return observableOf(true);\n        }\n      })\n    );\n  }\n\n  private createData(title, id, browseDefinition, collection, field, value, route) {\n    return Object.assign({}, route.data, {\n      title: title,\n      id: id,\n      browseDefinition: browseDefinition,\n      collection: collection,\n      field: field,\n      value: hasValue(value) ? `\"${value}\"` : ''\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Community } from '../core/shared/community.model';\nimport { DSpaceObjectDataService } from '../core/data/dspace-object-data.service';\nimport { DSOBreadcrumbsService } from '../core/breadcrumbs/dso-breadcrumbs.service';\nimport { Collection } from '../core/shared/collection.model';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BreadcrumbConfig } from '../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Observable } from 'rxjs';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../core/shared/operators';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getDSORoute } from '../app-routing-paths';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a DSpaceObject on a browse by page\n */\n@Injectable()\nexport class BrowseByDSOBreadcrumbResolver {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: DSpaceObjectDataService) {\n  }\n\n  /**\n   * Method for resolving a breadcrumb config object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<Community | Collection>> {\n    const uuid = route.queryParams.scope;\n    if (hasValue(uuid)) {\n      return this.dataService.findById(uuid).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((object: Community | Collection) => {\n          return { provider: this.breadcrumbService, key: object, url: getDSORoute(object) };\n        })\n      );\n    }\n    return undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from '../core/breadcrumbs/i18n-breadcrumbs.service';\nimport { BreadcrumbConfig } from '../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\n\n/**\n * This class resolves a BreadcrumbConfig object with an i18n key string for a route\n * It adds the metadata field of the current browse-by page\n */\n@Injectable()\nexport class BrowseByI18nBreadcrumbResolver extends I18nBreadcrumbResolver {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n    super(breadcrumbService);\n  }\n\n  /**\n   * Method for resolving a browse-by i18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object for a browse-by page\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const extendedBreadcrumbKey = route.data.breadcrumbKey + '.' + route.params.id;\n    route.data = Object.assign({}, route.data, { breadcrumbKey: extendedBreadcrumbKey });\n    return super.resolve(route, state);\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { BrowseBySwitcherComponent } from './browse-by-switcher.component';\n\n/**\n * Themed wrapper for BrowseBySwitcherComponent\n */\n@Component({\n  selector: 'ds-themed-browse-by-switcher',\n  styleUrls: [],\n  templateUrl: '../../shared/theme-support/themed.component.html'\n})\nexport class ThemedBrowseBySwitcherComponent extends ThemedComponent<BrowseBySwitcherComponent> {\n  protected getComponentName(): string {\n    return 'BrowseBySwitcherComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/browse-by/browse-by-switcher/browse-by-switcher.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./browse-by-switcher.component`);\n  }\n\n\n}\n","<ng-template #vcr></ng-template>\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { BrowseByGuard } from './browse-by-guard';\nimport { BrowseByDSOBreadcrumbResolver } from './browse-by-dso-breadcrumb.resolver';\nimport { BrowseByI18nBreadcrumbResolver } from './browse-by-i18n-breadcrumb.resolver';\nimport { ThemedBrowseBySwitcherComponent } from './browse-by-switcher/themed-browse-by-switcher.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: { breadcrumb: BrowseByDSOBreadcrumbResolver },\n        children: [\n          {\n            path: ':id',\n            component: ThemedBrowseBySwitcherComponent,\n            canActivate: [BrowseByGuard],\n            resolve: { breadcrumb: BrowseByI18nBreadcrumbResolver },\n            data: { title: 'browse.title', breadcrumbKey: 'browse.metadata' }\n          }\n        ]\n      }])\n  ],\n  providers: [\n    BrowseByI18nBreadcrumbResolver,\n    BrowseByDSOBreadcrumbResolver\n  ]\n})\nexport class BrowseByRoutingModule {\n\n}\n","import { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortOptions } from '../cache/models/sort-options.model';\n\n/**\n * A class that defines the search options to be used for fetching browse entries or items\n * - metadataDefinition:  The metadata definition to fetch entries or items for\n * - pagination:          Optional pagination options to use\n * - sort:                Optional sorting options to use\n * - scope:               An optional scope to limit the results within a specific collection or community\n */\nexport class BrowseEntrySearchOptions {\n  constructor(public metadataDefinition: string,\n              public pagination?: PaginationComponentOptions,\n              public sort?: SortOptions,\n              public startsWith?: string,\n              public scope?: string) {\n  }\n}\n","<div class=\"container\">\n    <ng-container *ngVar=\"(parent$ | async) as parent\">\n    <ng-container *ngIf=\"parent?.payload as parentContext\">\n    <header class=\"comcol-header border-bottom mb-4 pb-4\">\n        <!-- Parent Name -->\n        <ds-comcol-page-header [name]=\"parentContext.name\">\n        </ds-comcol-page-header>\n        <!-- Handle -->\n        <ds-comcol-page-handle\n            [content]=\"parentContext.handle\"\n            [title]=\"parentContext.type+'.page.handle'\" >\n        </ds-comcol-page-handle>\n        <!-- Introductory text -->\n        <ds-comcol-page-content [content]=\"parentContext.introductoryText\" [hasInnerHtml]=\"true\">\n        </ds-comcol-page-content>\n        <!-- News -->\n        <ds-comcol-page-content [content]=\"parentContext.sidebarText\" [hasInnerHtml]=\"true\" [title]=\"'community.page.news'\">\n        </ds-comcol-page-content>\n      </header>\n      <!-- Browse-By Links -->\n      <ds-comcol-page-browse-by [id]=\"parentContext.id\" [contentType]=\"parentContext.type\"></ds-comcol-page-browse-by>\n      </ng-container></ng-container>\n\n    <section class=\"comcol-page-browse-section\">\n    <div class=\"browse-by-metadata w-100\">\n    <ds-browse-by *ngIf=\"startsWithOptions\" class=\"col-xs-12 w-100\"\n      title=\"{{'browse.title' | translate:{collection: (parent$ | async)?.payload?.name || '', field: 'browse.metadata.' + browseId | translate, value: (value)? '&quot;' + value + '&quot;': ''} }}\"\n      parentname=\"{{(parent$ | async)?.payload?.name || ''}}\"\n      [objects$]=\"(items$ !== undefined)? items$ : browseEntries$\"\n      [paginationConfig]=\"(currentPagination$ |async)\"\n      [sortConfig]=\"(currentSort$ |async)\"\n      [type]=\"startsWithType\"\n      [startsWithOptions]=\"startsWithOptions\"\n      [enableArrows]=\"true\"\n      (prev)=\"goPrev()\"\n      (next)=\"goNext()\">\n    </ds-browse-by>\n    <ds-loading *ngIf=\"!startsWithOptions\" message=\"{{'loading.browse-by-page' | translate}}\"></ds-loading>\n  </div>\n  </section>\n  <ng-container *ngVar=\"(parent$ | async) as parent\">\n    <ng-container *ngIf=\"parent?.payload as parentContext\">\n  <footer *ngIf=\"parentContext.copyrightText\" class=\"border-top my-5 pt-4\">\n    <div >\n\n      <!-- Copyright -->\n      <ds-comcol-page-content [content]=\"parentContext.copyrightText\" [hasInnerHtml]=\"true\">\n      </ds-comcol-page-content>\n    </div>\n  </footer>\n</ng-container>\n</ng-container>\n</div>\n","import { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { BrowseService } from '../../core/browse/browse.service';\nimport { BrowseEntry } from '../../core/shared/browse-entry.model';\nimport { Item } from '../../core/shared/item.model';\nimport { BrowseEntrySearchOptions } from '../../core/browse/browse-entry-search-options.model';\nimport { getFirstSucceededRemoteData } from '../../core/shared/operators';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { StartsWithType } from '../../shared/starts-with/starts-with-decorator';\nimport { BrowseByDataType, rendersBrowseBy } from '../browse-by-switcher/browse-by-decorator';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'ds-browse-by-metadata-page',\n  styleUrls: ['./browse-by-metadata-page.component.scss'],\n  templateUrl: './browse-by-metadata-page.component.html'\n})\n/**\n * Component for browsing (items) by metadata definition\n * A metadata definition (a.k.a. browse id) is a short term used to describe one or multiple metadata fields.\n * An example would be 'author' for 'dc.contributor.*'\n */\n@rendersBrowseBy(BrowseByDataType.Metadata)\nexport class BrowseByMetadataPageComponent implements OnInit {\n\n  /**\n   * The list of browse-entries to display\n   */\n  browseEntries$: Observable<RemoteData<PaginatedList<BrowseEntry>>>;\n\n  /**\n   * The list of items to display when a value is present\n   */\n  items$: Observable<RemoteData<PaginatedList<Item>>>;\n\n  /**\n   * The current Community or Collection we're browsing metadata/items in\n   */\n  parent$: Observable<RemoteData<DSpaceObject>>;\n\n  /**\n   * The pagination config used to display the values\n   */\n  paginationConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'bbm',\n    currentPage: 1,\n    pageSize: 20\n  });\n\n  /**\n   * The pagination observable\n   */\n  currentPagination$: Observable<PaginationComponentOptions>;\n\n  /**\n   * The sorting config observable\n   */\n  currentSort$: Observable<SortOptions>;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * The default browse id to resort to when none is provided\n   */\n  defaultBrowseId = 'author';\n\n  /**\n   * The current browse id\n   */\n  browseId = this.defaultBrowseId;\n\n  /**\n   * The type of StartsWith options to render\n   * Defaults to text\n   */\n  startsWithType = StartsWithType.text;\n\n  /**\n   * The list of StartsWith options\n   * Should be defined after ngOnInit is called!\n   */\n  startsWithOptions;\n\n  /**\n   * The value we're browing items for\n   * - When the value is not empty, we're browsing items\n   * - When the value is empty, we're browsing browse-entries (values for the given metadata definition)\n   */\n  value = '';\n\n  /**\n   * The authority key (may be undefined) associated with {@link #value}.\n   */\n   authority: string;\n\n  /**\n   * The current startsWith option (fetched and updated from query-params)\n   */\n  startsWith: string;\n\n  public constructor(protected route: ActivatedRoute,\n                     protected browseService: BrowseService,\n                     protected dsoService: DSpaceObjectDataService,\n                     protected paginationService: PaginationService,\n                     protected router: Router) {\n  }\n\n  ngOnInit(): void {\n    const sortConfig = new SortOptions('default', SortDirection.ASC);\n    this.updatePage(new BrowseEntrySearchOptions(this.defaultBrowseId, this.paginationConfig, sortConfig));\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    this.currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, sortConfig);\n    this.subs.push(\n      observableCombineLatest([this.route.params, this.route.queryParams, this.currentPagination$, this.currentSort$]).pipe(\n        map(([routeParams, queryParams, currentPage, currentSort]) => {\n          return [Object.assign({}, routeParams, queryParams),currentPage,currentSort];\n        })\n      ).subscribe(([params, currentPage, currentSort]: [Params, PaginationComponentOptions, SortOptions]) => {\n          this.browseId = params.id || this.defaultBrowseId;\n          this.authority = params.authority;\n          this.value = +params.value || params.value || '';\n          this.startsWith = +params.startsWith || params.startsWith;\n          const searchOptions = browseParamsToOptions(params, currentPage, currentSort, this.browseId);\n          if (isNotEmpty(this.value)) {\n            this.updatePageWithItems(searchOptions, this.value, this.authority);\n          } else {\n            this.updatePage(searchOptions);\n          }\n          this.updateParent(params.scope);\n        }));\n    this.updateStartsWithTextOptions();\n  }\n\n  /**\n   * Update the StartsWith options with text values\n   * It adds the value \"0-9\" as well as all letters from A to Z\n   */\n  updateStartsWithTextOptions() {\n    this.startsWithOptions = ['0-9', ...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')];\n  }\n\n  /**\n   * Updates the current page with searchOptions\n   * @param searchOptions   Options to narrow down your search:\n   *                        { metadata: string\n   *                          pagination: PaginationComponentOptions,\n   *                          sort: SortOptions,\n   *                          scope: string }\n   */\n  updatePage(searchOptions: BrowseEntrySearchOptions) {\n    this.browseEntries$ = this.browseService.getBrowseEntriesFor(searchOptions);\n    this.items$ = undefined;\n  }\n\n  /**\n   * Updates the current page with searchOptions and display items linked to the given value\n   * @param searchOptions   Options to narrow down your search:\n   *                        { metadata: string\n   *                          pagination: PaginationComponentOptions,\n   *                          sort: SortOptions,\n   *                          scope: string }\n   * @param value          The value of the browse-entry to display items for\n   */\n  updatePageWithItems(searchOptions: BrowseEntrySearchOptions, value: string, authority: string) {\n    this.items$ = this.browseService.getBrowseItemsFor(value, authority, searchOptions);\n  }\n\n  /**\n   * Update the parent Community or Collection using their scope\n   * @param scope   The UUID of the Community or Collection to fetch\n   */\n  updateParent(scope: string) {\n    if (hasValue(scope)) {\n      this.parent$ = this.dsoService.findById(scope).pipe(\n        getFirstSucceededRemoteData()\n      );\n    }\n  }\n\n  /**\n   * Navigate to the previous page\n   */\n  goPrev() {\n    if (this.items$) {\n      this.items$.pipe(getFirstSucceededRemoteData()).subscribe((items) => {\n        this.items$ = this.browseService.getPrevBrowseItems(items);\n      });\n    } else if (this.browseEntries$) {\n      this.browseEntries$.pipe(getFirstSucceededRemoteData()).subscribe((entries) => {\n        this.browseEntries$ = this.browseService.getPrevBrowseEntries(entries);\n      });\n    }\n  }\n\n  /**\n   * Navigate to the next page\n   */\n  goNext() {\n    if (this.items$) {\n      this.items$.pipe(getFirstSucceededRemoteData()).subscribe((items) => {\n        this.items$ = this.browseService.getNextBrowseItems(items);\n      });\n    } else if (this.browseEntries$) {\n      this.browseEntries$.pipe(getFirstSucceededRemoteData()).subscribe((entries) => {\n        this.browseEntries$ = this.browseService.getNextBrowseEntries(entries);\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.paginationConfig.id);\n  }\n\n\n}\n\n/**\n * Function to transform query and url parameters into searchOptions used to fetch browse entries or items\n * @param params            URL and query parameters\n * @param paginationConfig  Pagination configuration\n * @param sortConfig        Sorting configuration\n * @param metadata          Optional metadata definition to fetch browse entries/items for\n */\nexport function browseParamsToOptions(params: any,\n                                      paginationConfig: PaginationComponentOptions,\n                                      sortConfig: SortOptions,\n                                      metadata?: string): BrowseEntrySearchOptions {\n  return new BrowseEntrySearchOptions(\n    metadata,\n    paginationConfig,\n    sortConfig,\n    +params.startsWith || params.startsWith,\n    params.scope\n  );\n}\n","import { combineLatest as observableCombineLatest } from 'rxjs';\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { hasValue } from '../../shared/empty.util';\nimport {\n  BrowseByMetadataPageComponent,\n  browseParamsToOptions\n} from '../browse-by-metadata-page/browse-by-metadata-page.component';\nimport { BrowseEntrySearchOptions } from '../../core/browse/browse-entry-search-options.model';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { BrowseService } from '../../core/browse/browse.service';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\nimport { BrowseByDataType, rendersBrowseBy } from '../browse-by-switcher/browse-by-decorator';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { map } from 'rxjs/operators';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\n\n@Component({\n  selector: 'ds-browse-by-title-page',\n  styleUrls: ['../browse-by-metadata-page/browse-by-metadata-page.component.scss'],\n  templateUrl: '../browse-by-metadata-page/browse-by-metadata-page.component.html'\n})\n/**\n * Component for browsing items by title (dc.title)\n */\n@rendersBrowseBy(BrowseByDataType.Title)\nexport class BrowseByTitlePageComponent extends BrowseByMetadataPageComponent {\n\n  public constructor(protected route: ActivatedRoute,\n                     protected browseService: BrowseService,\n                     protected dsoService: DSpaceObjectDataService,\n                     protected paginationService: PaginationService,\n                     protected router: Router) {\n    super(route, browseService, dsoService, paginationService, router);\n  }\n\n  ngOnInit(): void {\n    const sortConfig = new SortOptions('dc.title', SortDirection.ASC);\n    this.updatePage(new BrowseEntrySearchOptions(this.defaultBrowseId, this.paginationConfig, sortConfig));\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    this.currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, sortConfig);\n    this.subs.push(\n      observableCombineLatest([this.route.params, this.route.queryParams, this.currentPagination$, this.currentSort$]).pipe(\n        map(([routeParams, queryParams, currentPage, currentSort]) => {\n          return [Object.assign({}, routeParams, queryParams),currentPage,currentSort];\n        })\n      ).subscribe(([params, currentPage, currentSort]: [Params, PaginationComponentOptions, SortOptions]) => {\n        this.browseId = params.id || this.defaultBrowseId;\n        this.updatePageWithItems(browseParamsToOptions(params, currentPage, currentSort, this.browseId), undefined, undefined);\n        this.updateParent(params.scope);\n      }));\n    this.updateStartsWithTextOptions();\n  }\n\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n}\n","import { ChangeDetectorRef, Component } from '@angular/core';\nimport {\n  BrowseByMetadataPageComponent,\n  browseParamsToOptions\n} from '../browse-by-metadata-page/browse-by-metadata-page.component';\nimport { BrowseEntrySearchOptions } from '../../core/browse/browse-entry-search-options.model';\nimport { combineLatest as observableCombineLatest } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { BrowseService } from '../../core/browse/browse.service';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { StartsWithType } from '../../shared/starts-with/starts-with-decorator';\nimport { BrowseByDataType, rendersBrowseBy } from '../browse-by-switcher/browse-by-decorator';\nimport { environment } from '../../../environments/environment';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { map } from 'rxjs/operators';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';\n\n@Component({\n  selector: 'ds-browse-by-date-page',\n  styleUrls: ['../browse-by-metadata-page/browse-by-metadata-page.component.scss'],\n  templateUrl: '../browse-by-metadata-page/browse-by-metadata-page.component.html'\n})\n/**\n * Component for browsing items by metadata definition of type 'date'\n * A metadata definition (a.k.a. browse id) is a short term used to describe one or multiple metadata fields.\n * An example would be 'dateissued' for 'dc.date.issued'\n */\n@rendersBrowseBy(BrowseByDataType.Date)\nexport class BrowseByDatePageComponent extends BrowseByMetadataPageComponent {\n\n  /**\n   * The default metadata keys to use for determining the lower limit of the StartsWith dropdown options\n   */\n  defaultMetadataKeys = ['dc.date.issued'];\n\n  public constructor(protected route: ActivatedRoute,\n                     protected browseService: BrowseService,\n                     protected dsoService: DSpaceObjectDataService,\n                     protected router: Router,\n                     protected paginationService: PaginationService,\n                     protected cdRef: ChangeDetectorRef) {\n    super(route, browseService, dsoService, paginationService, router);\n  }\n\n  ngOnInit(): void {\n    const sortConfig = new SortOptions('default', SortDirection.ASC);\n    this.startsWithType = StartsWithType.date;\n    this.updatePage(new BrowseEntrySearchOptions(this.defaultBrowseId, this.paginationConfig, sortConfig));\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.paginationConfig.id, this.paginationConfig);\n    this.currentSort$ = this.paginationService.getCurrentSort(this.paginationConfig.id, sortConfig);\n    this.subs.push(\n      observableCombineLatest([this.route.params, this.route.queryParams, this.route.data,\n        this.currentPagination$, this.currentSort$]).pipe(\n        map(([routeParams, queryParams, data, currentPage, currentSort]) => {\n          return [Object.assign({}, routeParams, queryParams, data), currentPage, currentSort];\n        })\n      ).subscribe(([params, currentPage, currentSort]: [Params, PaginationComponentOptions, SortOptions]) => {\n        const metadataKeys = params.browseDefinition ? params.browseDefinition.metadataKeys : this.defaultMetadataKeys;\n        this.browseId = params.id || this.defaultBrowseId;\n        this.startsWith = +params.startsWith || params.startsWith;\n        const searchOptions = browseParamsToOptions(params, currentPage, currentSort, this.browseId);\n        this.updatePageWithItems(searchOptions, this.value, undefined);\n        this.updateParent(params.scope);\n        this.updateStartsWithOptions(this.browseId, metadataKeys, params.scope);\n      }));\n  }\n\n  /**\n   * Update the StartsWith options\n   * In this implementation, it creates a list of years starting from now, going all the way back to the earliest\n   * date found on an item within this scope. The further back in time, the bigger the change in years become to avoid\n   * extremely long lists with a one-year difference.\n   * To determine the change in years, the config found under GlobalConfig.BrowseBy is used for this.\n   * @param definition      The metadata definition to fetch the first item for\n   * @param metadataKeys    The metadata fields to fetch the earliest date from (expects a date field)\n   * @param scope           The scope under which to fetch the earliest item for\n   */\n  updateStartsWithOptions(definition: string, metadataKeys: string[], scope?: string) {\n    this.subs.push(\n      this.browseService.getFirstItemFor(definition, scope).subscribe((firstItemRD: RemoteData<Item>) => {\n        let lowerLimit = environment.browseBy.defaultLowerLimit;\n        if (hasValue(firstItemRD.payload)) {\n          const date = firstItemRD.payload.firstMetadataValue(metadataKeys);\n          if (hasValue(date)) {\n            const dateObj = new Date(date);\n            // TODO: it appears that getFullYear (based on local time) is sometimes unreliable. Switching to UTC.\n            lowerLimit = dateObj.getUTCFullYear();\n          }\n        }\n        const options = [];\n        const currentYear = new Date().getUTCFullYear();\n        const oneYearBreak = Math.floor((currentYear - environment.browseBy.oneYearLimit) / 5) * 5;\n        const fiveYearBreak = Math.floor((currentYear - environment.browseBy.fiveYearLimit) / 10) * 10;\n        if (lowerLimit <= fiveYearBreak) {\n          lowerLimit -= 10;\n        } else if (lowerLimit <= oneYearBreak) {\n          lowerLimit -= 5;\n        } else {\n          lowerLimit -= 1;\n        }\n        let i = currentYear;\n        while (i > lowerLimit) {\n          options.push(i);\n          if (i <= fiveYearBreak) {\n            i -= 10;\n          } else if (i <= oneYearBreak) {\n            i -= 5;\n          } else {\n            i--;\n          }\n        }\n        if (isNotEmpty(options)) {\n          this.startsWithOptions = options;\n          this.cdRef.detectChanges();\n        }\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowseByTitlePageComponent } from './browse-by-title-page/browse-by-title-page.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { BrowseByMetadataPageComponent } from './browse-by-metadata-page/browse-by-metadata-page.component';\nimport { BrowseByDatePageComponent } from './browse-by-date-page/browse-by-date-page.component';\nimport { BrowseBySwitcherComponent } from './browse-by-switcher/browse-by-switcher.component';\nimport { ThemedBrowseBySwitcherComponent } from './browse-by-switcher/themed-browse-by-switcher.component';\nimport { ComcolModule } from '../shared/comcol/comcol.module';\n\nconst ENTRY_COMPONENTS = [\n  // put only entry components that use custom decorator\n  BrowseByTitlePageComponent,\n  BrowseByMetadataPageComponent,\n  BrowseByDatePageComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ComcolModule,\n    SharedModule\n  ],\n  declarations: [\n    BrowseBySwitcherComponent,\n    ThemedBrowseBySwitcherComponent,\n    ...ENTRY_COMPONENTS\n  ],\n  exports: [\n    BrowseBySwitcherComponent\n  ]\n})\nexport class BrowseByModule {\n  /**\n   * NOTE: this method allows to resolve issue with components that using a custom decorator\n   * which are not loaded during SSR otherwise\n   */\n  static withEntryComponents() {\n    return {\n      ngModule: SharedModule,\n      providers: ENTRY_COMPONENTS.map((component) => ({provide: component}))\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowseByRoutingModule } from './browse-by-routing.module';\nimport { BrowseByModule } from './browse-by.module';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { BrowseService } from '../core/browse/browse.service';\nimport { BrowseByGuard } from './browse-by-guard';\n\n@NgModule({\n  imports: [\n    BrowseByRoutingModule,\n    BrowseByModule.withEntryComponents()\n  ],\n  providers: [\n    ItemDataService,\n    BrowseService,\n    BrowseByGuard\n  ]\n})\nexport class BrowseByPageModule {\n\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}