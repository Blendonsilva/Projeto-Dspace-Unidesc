{"version":3,"sources":["webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard.ts","webpack:///src/app/search-page/configuration-search-page.guard.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/metadata-patch-operation.service.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-replace-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-remove-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-add-operation.model.ts","webpack:///src/app/core/data/object-updates/patch-operation-service/operations/metadata/metadata-patch-operation.model.ts","webpack:///src/app/item-page/edit-item-page/item-metadata/item-metadata.component.html","webpack:///src/app/item-page/edit-item-page/item-metadata/item-metadata.component.ts","webpack:///src/app/core/resolving/resolver.actions.ts","webpack:///src/app/item-page/item-page-administrator.guard.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/item-page/edit-item-page/edit-item-page.component.html","webpack:///src/app/item-page/edit-item-page/edit-item-page.component.ts","webpack:///src/app/item-page/edit-item-page/simple-item-action/abstract-simple-item-action.component.ts","webpack:///src/app/item-page/edit-item-page/item-withdraw/item-withdraw.component.ts","webpack:///src/app/item-page/edit-item-page/item-reinstate/item-reinstate.component.ts","webpack:///src/app/item-page/edit-item-page/item-private/item-private.component.ts","webpack:///src/app/item-page/edit-item-page/item-public/item-public.component.ts","webpack:///src/app/item-page/edit-item-page/edit-item-operators.ts","webpack:///src/app/item-page/edit-item-page/simple-item-action/abstract-simple-item-action.component.html","webpack:///src/app/item-page/edit-item-page/item-delete/item-delete.component.html","webpack:///src/app/item-page/edit-item-page/item-delete/item-delete.component.ts","webpack:///src/app/item-page/edit-item-page/item-operation/itemOperation.model.ts","webpack:///src/app/item-page/edit-item-page/item-operation/item-operation.component.html","webpack:///src/app/item-page/edit-item-page/item-operation/item-operation.component.ts","webpack:///src/app/item-page/edit-item-page/item-status/item-status.component.html","webpack:///src/app/item-page/edit-item-page/item-status/item-status.component.ts","webpack:///src/app/shared/responsive-table-sizes/responsive-column-sizes.ts","webpack:///src/app/shared/responsive-table-sizes/responsive-table-sizes.ts","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream-drag-handle/item-edit-bitstream-drag-handle.component.html","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream-drag-handle/item-edit-bitstream-drag-handle.component.ts","webpack:///src/app/shared/pagination-drag-and-drop/abstract-paginated-drag-and-drop-list.component.ts","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream/item-edit-bitstream.component.html","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream/item-edit-bitstream.component.ts","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/paginated-drag-and-drop-bitstream-list/paginated-drag-and-drop-bitstream-list.component.html","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/paginated-drag-and-drop-bitstream-list/paginated-drag-and-drop-bitstream-list.component.ts","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/item-edit-bitstream-bundle.component.html","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-edit-bitstream-bundle/item-edit-bitstream-bundle.component.ts","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-bitstreams.component.html","webpack:///src/app/item-page/edit-item-page/item-bitstreams/item-bitstreams.component.ts","webpack:///src/app/item-page/edit-item-page/item-collection-mapper/item-collection-mapper.component.html","webpack:///src/app/item-page/edit-item-page/item-collection-mapper/item-collection-mapper.component.ts","webpack:///src/app/item-page/edit-item-page/item-move/item-move.component.html","webpack:///src/app/item-page/edit-item-page/item-move/item-move.component.ts","webpack:///src/app/item-page/edit-item-page/virtual-metadata/virtual-metadata.component.html","webpack:///src/app/item-page/edit-item-page/virtual-metadata/virtual-metadata.component.ts","webpack:///src/app/item-page/edit-item-page/item-relationships/edit-relationship/edit-relationship.component.html","webpack:///src/app/item-page/edit-item-page/item-relationships/edit-relationship/edit-relationship.component.ts","webpack:///src/app/item-page/edit-item-page/item-relationships/edit-relationship-list/edit-relationship-list.component.html","webpack:///src/app/item-page/edit-item-page/item-relationships/edit-relationship-list/edit-relationship-list.component.ts","webpack:///src/app/item-page/edit-item-page/item-relationships/item-relationships.component.html","webpack:///src/app/item-page/edit-item-page/item-relationships/item-relationships.component.ts","webpack:///src/app/item-page/edit-item-page/item-version-history/item-version-history.component.html","webpack:///src/app/item-page/edit-item-page/item-version-history/item-version-history.component.ts","webpack:///src/app/item-page/edit-item-page/item-authorizations/item-authorizations.component.html","webpack:///src/app/item-page/edit-item-page/item-authorizations/item-authorizations.component.ts","webpack:///src/app/item-page/edit-item-page/item-page-metadata.guard.ts","webpack:///src/app/item-page/edit-item-page/item-page-withdraw.guard.ts","webpack:///src/app/item-page/edit-item-page/item-page-reinstate.guard.ts","webpack:///src/app/item-page/edit-item-page/edit-item-page.routing.module.ts","webpack:///src/app/item-page/edit-item-page/item-page-collection-mapper.guard.ts","webpack:///src/app/item-page/edit-item-page/item-page-version-history.guard.ts","webpack:///src/app/item-page/edit-item-page/item-page-relationships.guard.ts","webpack:///src/app/item-page/edit-item-page/item-page-bitstreams.guard.ts","webpack:///src/app/item-page/edit-item-page/item-page-status.guard.ts","webpack:///src/app/item-page/edit-item-page/edit-item-page.module.ts","webpack:///src/app/core/breadcrumbs/dso-breadcrumbs.service.ts","webpack:///src/app/item-page/edit-item-page/abstract-item-update/abstract-item-update.component.ts","webpack:///src/app/core/data/feature-authorization/feature-authorization-guard/dso-page-some-feature.guard.ts","webpack:///src/app/search-page/themed-search-page.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/search-page/search-tracker.component.ts","webpack:///src/app/search-page/search-tracker.component.html","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/search\\-page\\/search\\-page\\.component$ namespace object","webpack:///src/app/core/breadcrumbs/dso-breadcrumb.resolver.ts","webpack:///src/app/search-page/search-page.module.ts","webpack:///src/app/item-page/item.resolver.ts","webpack:///src/app/access-control/access-control-routing-paths.ts","webpack:///src/app/item-page/edit-item-page/item-metadata/edit-in-place-field/edit-in-place-field.component.ts","webpack:///src/app/item-page/edit-item-page/item-metadata/edit-in-place-field/edit-in-place-field.component.html","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/search-page/search-page.component.ts","webpack:///src/app/search-page/search-page.component.html","webpack:///src/app/item-page/item-page.resolver.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["DsoPageSingleFeatureGuard","getFeatureIDs","route","state","this","getFeatureID","pipe","featureID","ConfigurationSearchPageGuard","canActivate","data","title","params","configuration","MetadataPatchOperationService","MetadataPatchReplaceOperation","MetadataPatchRemoveOperation","MetadataPatchAddOperation","MetadataPatchOperation","constructor","op","field","value","super","operationType","toOperation","path","place","fieldUpdatesToPatchOperations","fieldUpdates","metadataPatch","fieldUpdatesToMetadataPatchOperations","metadataRemoveMap","Map","patch","forEach","operation","has","get","index","set","push","Object","keys","uuid","update","metadatum","val","language","changeType","ADD","key","REMOVE","UPDATE","ItemMetadataComponent","itemService","objectUpdatesService","router","notificationsService","translateService","AlertTypeEnum","ngOnInit","updateService","initializeUpdates","updates$","getFieldUpdates","url","item","metadataAsList","initializeNotificationsPrefix","notificationsPrefix","add","metadata","saveAddFieldUpdate","initializeOriginalFields","initialize","lastModified","submit","isValid","first","subscribe","createPatch","switchMap","g","rd","hasFailed","error","getNotificationTitle","errorMessage","payload","checkAndFixMetadataUUIDs","success","getNotificationContent","cloneDeep","map","assign","ResolverActionTypes","RESOLVED","ResolvedAction","dso","type","ItemPageAdministratorGuard","resolver","authorizationService","authService","next","AdministratorOf","I18nBreadcrumbResolver","breadcrumbService","resolve","breadcrumbKey","Error","fullPath","provider","EditItemPageComponent","AbstractSimpleItemActionComponent","ItemWithdrawComponent","ItemReinstateComponent","ItemPrivateComponent","ItemPublicComponent","injector","events","initPageParamsByRoute","pages","routeConfig","children","filter","child","enabled","guardConstructor","snapshot","routerState","canActivateOutcomes","every","e","page","itemRD$","getItemPage","currentPage","firstChild","fade","itemDataService","itemPageRoute","confirmMessage","messageKey","cancelMessage","headerMessage","descriptionMessage","performAction","processRestResponse","response","predicate","hasSucceeded","findById","id","source","navigate","isWithdrawn","setWithDrawn","isDiscoverable","setDiscoverable","ItemDeleteComponent","modalService","relationshipService","entityTypeService","linkService","viewMode","ListElement","types$","BehaviorSubject","relationships$","relatedItems$","virtualMetadata$","subs","label","firstMetadataValue","getEntityTypeByLabel","entityType","getEntityTypeRelationships","relationshipTypes","types","length","combineLatest","getRelationships","relationships","reduce","includedTypes","some","includedType","take","openVirtualMetadataModal","content","modalRef","open","closeVirtualMetadataModal","close","getRelationshipMessageKey","indexOf","substring","getLabel","relationshipType","isLeftItem","leftwardType","rightwardType","getItemRelationshipsArray","relationship","getRelationshipType","defaultIfEmpty","resolveLinks","getRelatedItem","rightItem","leftItem","getVirtualMetadata","relatedItem","entries","authority","endsWith","metadataField","metadataValue","previous","current","concat","isSelected","isSelectedVirtualMetadata","setSelected","selected","setSelectedVirtualMetadata","selection","selectedTypes","notify","succeeded","ngOnDestroy","sub","unsubscribe","ItemOperation","operationKey","operationUrl","disabled","authorized","setDisabled","ItemOperationComponent","ItemStatusComponent","operations$","parent","statusData","handle","statusDataKeys","operations","getCurrentUrl","CanManagePolicies","CanManageMappings","ReinstateItem","WithdrawItem","CanMakePrivate","CanDelete","CanMove","mergeMap","isAuthorized","self","distinctUntilChanged","toArray","ops","itemPageRoute$","trackOperation","ResponsiveColumnSizes","xs","sm","md","lg","xl","buildClasses","columns","combineColumns","start","end","i","ItemEditBitstreamDragHandleComponent","AbstractPaginatedDragAndDropListComponent","viewContainerRef","createEmbeddedView","handleView","elRef","objectValuesPipe","paginationService","dropObject","EventEmitter","pageSize","options","currentPage$","loading$","initializeObjectsRD","initializeURL","initializePagination","getCurrentPagination","currentPagination","objectsRD$","objects","Date","getFieldUpdatesExclusive","transform","fieldUpdate","updateValues","customOrder","loading","drop","event","dragIndex","previousIndex","dropIndex","currentIndex","dragPage","dropPage","droppedOnElement","nativeElement","querySelector","textContent","droppedPage","Number","isNaN","isNewPage","redirectPage","fromIndex","toIndex","emit","finish","paginationComponent","doPageChange","clearPagination","ItemEditBitstreamComponent","dsoNameService","bitstreamView","ngOnChanges","changes","bitstream","bitstreamName","getName","format$","format","remove","saveRemoveFieldUpdate","bundleUrl","undo","removeSingleFieldUpdate","canRemove","canUndo","PaginatedDragAndDropBitstreamListComponent","bundleService","requestService","paginatedOptions","pagination","getBitstreamsEndpoint","bundle","href","hasByHref$","getBitstreams","ItemEditBitstreamBundleComponent","bundleNameColumn","columnSizes","bundleView","ItemBitstreamsComponent","bitstreamService","objectCache","cdRef","zone","bundlesOptions","submitting","postItemInit","bundles$","getBundles","bundlePage","bundles","updates","values","removedBistreams","responses","displayNotifications","reset","dropBitstream","runOutsideAngular","from","run","removeByHrefSubstring","isCached","failedResponses","successfulResponses","instant","discard","undoNotification","info","timeOut","discardTimeOut","discardAllFieldUpdates","reinstate","reinstateFieldUpdates","isReinstatable","reinstatable","includes","hasChanges","hasUpdates","refreshItemCache","itemUpdateSubscription","ItemCollectionMapperComponent","searchConfigService","searchService","collectionDataService","performedSearch","itemName$","searchOptions$","paginatedSearchOptions","loadCollectionLists","console","log","shouldUpdate$","itemCollectionsRD$","shouldUpdate","findAllByHref","getMappedCollectionsEndpoint","owningCollectionRD$","findOwningCollectionFor","itemCollectionsAndOptions$","mappedCollectionsRD$","itemCollectionsRD","owningCollectionRD","searchOptions","search","query","buildQuery","dsoTypes","COLLECTION","startWith","mapCollections","ids","responses$","collections","collection","itemId","excludingIds","filterIds","mapToCollection","showNotifications","removeMappings","itemRD","removeMappingFromCollection","excluding","messagePrefix","successful","unsuccessful","amount","head","switchToFirstTab","tabChange","navigateByUrl","result","addExcludeCollection","collectionId","excludeQuery","tabs","select","onCancel","ItemMoveComponent","selectorType","inheritPolicies","canSubmit","processing","COLLECTIONS","owningCollection","originalCollection","selectDso","selectedCollection","selectedCollectionName","name","moveToCollection","move$","setStaleByHrefSubstring","canMove","VirtualMetadataComponent","save","virtualMetadata","items","startsWith","relationshipId","setSelectedVirtualMetadataItem","isSelectedVirtualMetadataItem","trackItem","EditRelationshipComponent","nameVariant","leftItem$","rightItem$","relatedItem$","find","editItem","of","selection$","keepLeftVirtualMetadata","keepRightVirtualMetadata","deleteRelationship","EditRelationshipListComponent","relationshipTypeService","selectableListService","relationshipsRd$","isLastPage$","nbAddedFields$","relatedEntityType$","relatedEntityType","relationshipLabel","leftType","rightType","itemTypeRD","itemTypes","findIndex","itemType","trackUpdate","openLookup","size","modalComp","componentInstance","repeatable","isEditRelationship","listId","currentItemIsLeftItem$","toAdd","toRemove","isPending","selectableObjects","searchResult","indexableObject","foundIndex","el","splice","getRelationFromId","foundIndexRemove","getValue","deselect","submitEv","subscriptions","getNameVariant","indexableObjectuuid","res","setTimeout","discardEv","deselectSingle","selectSingle","relationshipOptions","searchConfiguration","toLowerCase","nameVariants","deselectAll","isLeft","searchByItemsAndType","getFieldUpdatesForRelatedItem","identifiables","identifiable","relatedItems","getIsRelatedItem","allMetadataValues","relationshipLeftAndRightType$","relatedTypes","relatedType","warn","paginationConfig","currentPagination$","tap","currentItemIsLeftItem","getItemRelationshipsByLabel","elementsPerPage","_links","rightwardValue","leftwardValue","nextFields","fieldUpdatesFiltered","subscription","ItemRelationshipsComponent","cdr","relationshipTypes$","searchByEntityType","getRelationshipTypeFollowLinks","entityType$","removedRelationshipIDs$","addRelatedItems$","addRelatedItems","removeRelationshipIDs","deleteRelationships","addRelationships","action","detectChanges","dismissAll","deleteRelationshipIDs","copyVirtualMetadata","addRelationship","isLeftType","getRelatedItems","ItemVersionHistoryComponent","ItemAuthorizationsComponent","ItemPageMetadataGuard","ItemPageWithdrawGuard","ItemPageReinstateGuard","EditItemPageRoutingModule","ItemPageCollectionMapperGuard","ItemPageVersionHistoryGuard","ItemPageRelationshipsGuard","ItemPageBitstreamsGuard","ItemPageStatusGuard","bundleBitstreamsMap","item$","resolveLink","catchError","b","list","bitstreams","getBundleBitstreams","entry","getItemUUID","UUID","getItemBundles","asObservable","CanEditMetadata","CanManageBitstreamBundles","CanManageRelationships","CanManageVersions","forChild","breadcrumb","component","redirectTo","pathMatch","showBreadcrumbs","resourcePolicyTarget","resourcePolicy","EditItemPageModule","DSOBreadcrumbsService","getBreadcrumbs","crumb","propertyName","getParentLinkKey","parentRD","statusCode","breadcrumbs","AbstractItemUpdateComponent","setItem","parentData","findByHref","edit","undoTimeout","substr","checkLastModified","isValidPage","currentVersion","getLastModified","updateVersion","getDate","warning","DsoPageSomeFeatureGuard","getObjectUrl","routeWithObjectID","getRouteWithDSOId","routeWithDSOId","ThemedSearchPageComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","SearchTrackerComponent","service","sidebarService","windowService","routeService","angulartics2","getSearchOptions","searchEntries","config","searchQueryResponse","filters","appliedFilters","filtersLength","eventTrack","properties","totalElements","pageInfo","totalPages","number","sort","by","order","direction","SEARCH_CONFIG_SERVICE","provide","useClass","webpackAsyncContext","req","__webpack_require__","o","Promise","then","code","module","exports","DSOBreadcrumbResolver","dataService","followLinks","object","SearchPageModule","withEntryComponents","forRoot","ITEM_PAGE_LINKS_TO_FOLLOW","ItemResolver","store","dispatch","GROUP_EDIT_PATH","getGroupEditRoute","toString","EditInPlaceFieldComponent","registryService","metadataFieldSuggestions","editable","isEditable","valid","ngModel","saveChangeFieldUpdate","checkValidity","control","setValue","viewModel","updateValueAndValidity","setValidFieldUpdate","setEditable","setEditableFieldUpdate","removeChangesFromField","findMetadataFieldSuggestions","queryMetadataFields","fieldNames","setInputSuggestions","fields","fieldName","displayValue","split","join","canSetEditable","canSetUneditable","isNotEmpty","I18nBreadcrumbsService","SearchPageComponent","ItemPageResolver","itemRoute","thisRoute","subRoute","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { DSpaceObject } from '../../../shared/dspace-object.model';\nimport { DsoPageSomeFeatureGuard } from './dso-page-some-feature.guard';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { FeatureID } from '../feature-id';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n/**\n * Abstract Guard for preventing unauthorized access to {@link DSpaceObject} pages that require rights for a specific feature\n * This guard utilizes a resolver to retrieve the relevant object to check authorizations for\n */\nexport abstract class DsoPageSingleFeatureGuard<T extends DSpaceObject> extends DsoPageSomeFeatureGuard<T> {\n  /**\n   * The features to check authorization for\n   */\n  getFeatureIDs(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID[]> {\n    return this.getFeatureID(route, state).pipe(\n      map((featureID) => [featureID]),\n    );\n  }\n\n  /**\n   * The type of feature to check authorization for\n   * Override this method to define a feature\n   */\n  abstract getFeatureID(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID>;\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n/**\n * Assemble the correct i18n key for the configuration search page's title depending on the current route's configuration parameter.\n * The format of the key will be \"{configuration}.search.title\" with:\n * - configuration: The current configuration stored in route.params\n */\nexport class ConfigurationSearchPageGuard implements CanActivate {\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    const configuration = route.params.configuration;\n\n    const newTitle = configuration + '.search.title';\n\n    route.data = { title: newTitle };\n    return true;\n  }\n}\n","import { PatchOperationService } from './patch-operation.service';\nimport { MetadatumViewModel } from '../../../shared/metadata.models';\nimport { FieldUpdates } from '../object-updates.reducer';\nimport { Operation } from 'fast-json-patch';\nimport { FieldChangeType } from '../object-updates.actions';\nimport { Injectable } from '@angular/core';\nimport { MetadataPatchOperation } from './operations/metadata/metadata-patch-operation.model';\nimport { hasValue } from '../../../../shared/empty.util';\nimport { MetadataPatchAddOperation } from './operations/metadata/metadata-patch-add-operation.model';\nimport { MetadataPatchRemoveOperation } from './operations/metadata/metadata-patch-remove-operation.model';\nimport { MetadataPatchReplaceOperation } from './operations/metadata/metadata-patch-replace-operation.model';\n\n/**\n * Service transforming {@link FieldUpdates} into {@link Operation}s for metadata values\n * This expects the fields within every {@link FieldUpdate} to be {@link MetadatumViewModel}s\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MetadataPatchOperationService implements PatchOperationService {\n\n  /**\n   * Transform a {@link FieldUpdates} object into an array of fast-json-patch Operations for metadata values\n   * This method first creates an array of {@link MetadataPatchOperation} wrapper operations, which are then\n   * iterated over to create the actual patch operations. While iterating, it has the ability to check for previous\n   * operations that would modify the operation's position and act accordingly.\n   * @param fieldUpdates\n   */\n  fieldUpdatesToPatchOperations(fieldUpdates: FieldUpdates): Operation[] {\n    const metadataPatch = this.fieldUpdatesToMetadataPatchOperations(fieldUpdates);\n\n    // This map stores what metadata fields had a value deleted at which places\n    // This is used to modify the place of operations to match previous operations\n    const metadataRemoveMap = new Map<string, number[]>();\n    const patch = [];\n    metadataPatch.forEach((operation) => {\n      // If this operation is removing or editing an existing value, first check the map for previous operations\n      // If the map contains remove operations before this operation's place, lower the place by 1 for each\n      if ((operation.op === MetadataPatchRemoveOperation.operationType || operation.op === MetadataPatchReplaceOperation.operationType) && hasValue((operation as any).place)) {\n        if (metadataRemoveMap.has(operation.field)) {\n          metadataRemoveMap.get(operation.field).forEach((index) => {\n            if (index < (operation as any).place) {\n              (operation as any).place--;\n            }\n          });\n        }\n      }\n\n      // If this is a remove operation, add its (updated) place to the map, so we can adjust following operations accordingly\n      if (operation.op === MetadataPatchRemoveOperation.operationType && hasValue((operation as any).place)) {\n        if (!metadataRemoveMap.has(operation.field)) {\n          metadataRemoveMap.set(operation.field, []);\n        }\n        metadataRemoveMap.get(operation.field).push((operation as any).place);\n      }\n\n      // Transform the updated operation into a fast-json-patch Operation and add it to the patch\n      patch.push(operation.toOperation());\n    });\n\n    return patch;\n  }\n\n  /**\n   * Transform a {@link FieldUpdates} object into an array of {@link MetadataPatchOperation} wrapper objects\n   * These wrapper objects contain detailed information about the patch operation that needs to be creates for each update\n   * This information can then be modified before creating the actual patch\n   * @param fieldUpdates\n   */\n  fieldUpdatesToMetadataPatchOperations(fieldUpdates: FieldUpdates): MetadataPatchOperation[] {\n    const metadataPatch = [];\n\n    Object.keys(fieldUpdates).forEach((uuid) => {\n      const update = fieldUpdates[uuid];\n      const metadatum = update.field as MetadatumViewModel;\n      const val = {\n        value: metadatum.value,\n        language: metadatum.language\n      };\n\n      let operation: MetadataPatchOperation;\n      switch (update.changeType) {\n        case FieldChangeType.ADD:\n          operation = new MetadataPatchAddOperation(metadatum.key, [ val ]);\n          break;\n        case FieldChangeType.REMOVE:\n          operation = new MetadataPatchRemoveOperation(metadatum.key, metadatum.place);\n          break;\n        case FieldChangeType.UPDATE:\n          operation = new MetadataPatchReplaceOperation(metadatum.key, metadatum.place, val);\n          break;\n      }\n\n      metadataPatch.push(operation);\n    });\n\n    return metadataPatch;\n  }\n\n}\n","import { MetadataPatchOperation } from './metadata-patch-operation.model';\nimport { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for a metadata patch replace Operation\n */\nexport class MetadataPatchReplaceOperation extends MetadataPatchOperation {\n  static operationType = 'replace';\n\n  /**\n   * The place of the metadata value within its field to modify\n   */\n  place: number;\n\n  /**\n   * The new value to replace the metadata with\n   */\n  value: any;\n\n  constructor(field: string, place: number, value: any) {\n    super(MetadataPatchReplaceOperation.operationType, field);\n    this.place = place;\n    this.value = value;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  toOperation(): Operation {\n    return { op: this.op as any, path: `/metadata/${this.field}/${this.place}`, value: this.value };\n  }\n}\n","import { MetadataPatchOperation } from './metadata-patch-operation.model';\nimport { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for a metadata patch remove Operation\n */\nexport class MetadataPatchRemoveOperation extends MetadataPatchOperation {\n  static operationType = 'remove';\n\n  /**\n   * The place of the metadata value to remove within its field\n   */\n  place: number;\n\n  constructor(field: string, place: number) {\n    super(MetadataPatchRemoveOperation.operationType, field);\n    this.place = place;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  toOperation(): Operation {\n    return { op: this.op as any, path: `/metadata/${this.field}/${this.place}` };\n  }\n}\n","import { MetadataPatchOperation } from './metadata-patch-operation.model';\nimport { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for a metadata patch add Operation\n */\nexport class MetadataPatchAddOperation extends MetadataPatchOperation {\n  static operationType = 'add';\n\n  /**\n   * The metadata value(s) to add to the field\n   */\n  value: any;\n\n  constructor(field: string, value: any) {\n    super(MetadataPatchAddOperation.operationType, field);\n    this.value = value;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  toOperation(): Operation {\n    return { op: this.op as any, path: `/metadata/${this.field}/-`, value: this.value };\n  }\n}\n","import { Operation } from 'fast-json-patch';\n\n/**\n * Wrapper object for metadata patch Operations\n * It should contain at least the operation type and metadata field. An abstract method to transform this object\n * into a fast-json-patch Operation is defined in each instance extending from this.\n */\nexport abstract class MetadataPatchOperation {\n  /**\n   * The operation to perform\n   */\n  op: string;\n\n  /**\n   * The metadata field this operation is intended for\n   */\n  field: string;\n\n  constructor(op: string, field: string) {\n    this.op = op;\n    this.field = field;\n  }\n\n  /**\n   * Transform the MetadataPatchOperation into a fast-json-patch Operation by constructing its path and other properties\n   * using the information provided.\n   */\n  abstract toOperation(): Operation;\n}\n","<div class=\"item-metadata\">\n  <div class=\"button-row top d-flex mb-2\">\n    <button class=\"mr-auto btn btn-success\"\n            (click)=\"add()\"><i\n      class=\"fas fa-plus\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.add-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n      class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || !(isValid() | async)\"\n            (click)=\"submit()\"><i\n      class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async)\"\n            (click)=\"discard()\"><i\n      class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n    </button>\n  </div>\n  <table class=\"table table-responsive table-striped table-bordered\"\n         *ngIf=\"((updates$ | async)| dsObjectValues).length > 0\">\n    <thead>\n    <tr>\n      <th><span id=\"fieldName\">{{'item.edit.metadata.headers.field' | translate}}</span></th>\n      <th><span id=\"fieldValue\">{{'item.edit.metadata.headers.value' | translate}}</span></th>\n      <th class=\"text-center\"><span id=\"fieldLang\">{{'item.edit.metadata.headers.language' | translate}}</span></th>\n      <th class=\"text-center\">{{'item.edit.metadata.headers.edit' | translate}}</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let updateValue of ((updates$ | async)| dsObjectValues); trackBy: trackUpdate\"\n        ds-edit-in-place-field\n        [fieldUpdate]=\"updateValue || {}\"\n        [url]=\"url\"\n        [ngClass]=\"{\n                'table-warning': updateValue.changeType === 0,\n                'table-danger': updateValue.changeType === 2,\n                'table-success': updateValue.changeType === 1\n            }\">\n\n    </tr>\n    </tbody>\n  </table>\n  <div *ngIf=\"((updates$ | async)| dsObjectValues).length == 0\">\n    <ds-alert [content]=\"'item.edit.metadata.empty'\" [type]=\"AlertTypeEnum.Info\"></ds-alert>\n  </div>\n  <div class=\"button-row bottom\">\n    <div class=\"mt-2 float-right\">\n      <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n              (click)=\"reinstate()\"><i\n        class=\"fas fa-undo-alt\"></i> {{\"item.edit.metadata.reinstate-button\" | translate}}\n      </button>\n      <button class=\"btn btn-primary mr-0\" [disabled]=\"!(hasChanges() | async)\"\n              (click)=\"submit()\"><i\n        class=\"fas fa-save\"></i> {{\"item.edit.metadata.save-button\" | translate}}\n      </button>\n      <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n              [disabled]=\"!(hasChanges() | async)\"\n              (click)=\"discard()\"><i\n        class=\"fas fa-times\"></i> {{\"item.edit.metadata.discard-button\" | translate}}\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Item } from '../../../core/shared/item.model';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { cloneDeep } from 'lodash';\nimport { first, switchMap } from 'rxjs/operators';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { MetadataValue, MetadatumViewModel } from '../../../core/shared/metadata.models';\nimport { AbstractItemUpdateComponent } from '../abstract-item-update/abstract-item-update.component';\nimport { UpdateDataService } from '../../../core/data/update-data.service';\nimport { hasNoValue, hasValue } from '../../../shared/empty.util';\nimport { AlertType } from '../../../shared/alert/aletr-type';\nimport { Operation } from 'fast-json-patch';\nimport { MetadataPatchOperationService } from '../../../core/data/object-updates/patch-operation-service/metadata-patch-operation.service';\n\n@Component({\n  selector: 'ds-item-metadata',\n  styleUrls: ['./item-metadata.component.scss'],\n  templateUrl: './item-metadata.component.html',\n})\n/**\n * Component for displaying an item's metadata edit page\n */\nexport class ItemMetadataComponent extends AbstractItemUpdateComponent {\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * A custom update service to use for adding and committing patches\n   * This will default to the ItemDataService\n   */\n  @Input() updateService: UpdateDataService<Item>;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute,\n  ) {\n    super(itemService, objectUpdatesService, router, notificationsService, translateService, route);\n  }\n\n  /**\n   * Set up and initialize all fields\n   */\n  ngOnInit(): void {\n    super.ngOnInit();\n    if (hasNoValue(this.updateService)) {\n      this.updateService = this.itemService;\n    }\n  }\n\n  /**\n   * Initialize the values and updates of the current item's metadata fields\n   */\n  public initializeUpdates(): void {\n    this.updates$ = this.objectUpdatesService.getFieldUpdates(this.url, this.item.metadataAsList);\n    }\n\n  /**\n   * Initialize the prefix for notification messages\n   */\n  public initializeNotificationsPrefix(): void {\n    this.notificationsPrefix = 'item.edit.metadata.notifications.';\n  }\n\n  /**\n   * Sends a new add update for a field to the object updates service\n   * @param metadata The metadata to add, if no parameter is supplied, create a new Metadatum\n   */\n  add(metadata: MetadatumViewModel = new MetadatumViewModel()) {\n    this.objectUpdatesService.saveAddFieldUpdate(this.url, metadata);\n  }\n\n  /**\n   * Sends all initial values of this item to the object updates service\n   */\n  public initializeOriginalFields() {\n    this.objectUpdatesService.initialize(this.url, this.item.metadataAsList, this.item.lastModified, MetadataPatchOperationService);\n  }\n\n  /**\n   * Requests all current metadata for this item and requests the item service to update the item\n   * Makes sure the new version of the item is rendered on the page\n   */\n  public submit() {\n    this.isValid().pipe(first()).subscribe((isValid) => {\n      if (isValid) {\n        this.objectUpdatesService.createPatch(this.url).pipe(\n          first(),\n          switchMap((patch: Operation[]) => {\n            return this.updateService.patch(this.item, patch).pipe(\n              getFirstCompletedRemoteData()\n            );\n          })\n        ).subscribe(\n          (rd: RemoteData<Item>) => {\n            if (rd.hasFailed) {\n              this.notificationsService.error(this.getNotificationTitle('error'), rd.errorMessage);\n            } else {\n              this.item = rd.payload;\n              this.checkAndFixMetadataUUIDs();\n              this.initializeOriginalFields();\n              this.updates$ = this.objectUpdatesService.getFieldUpdates(this.url, this.item.metadataAsList);\n              this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved'));\n            }\n          }\n        );\n      } else {\n        this.notificationsService.error(this.getNotificationTitle('invalid'), this.getNotificationContent('invalid'));\n      }\n    });\n  }\n\n  /**\n   * Check for empty metadata UUIDs and fix them (empty UUIDs would break the object-update service)\n   */\n  checkAndFixMetadataUUIDs() {\n    const metadata = cloneDeep(this.item.metadata);\n    Object.keys(this.item.metadata).forEach((key: string) => {\n      metadata[key] = this.item.metadata[key].map((value) => hasValue(value.uuid) ? value : Object.assign(new MetadataValue(), value));\n    });\n    this.item.metadata = metadata;\n  }\n}\n","import { type } from '../../shared/ngrx/type';\nimport { Action } from '@ngrx/store';\nimport { DSpaceObject } from '../shared/dspace-object.model';\n\nexport const ResolverActionTypes = {\n  RESOLVED: type('dspace/resolver/RESOLVED')\n};\n\n/**\n * An action that indicates a route object has been resolved.\n *\n * It isn't used in a reducer for now. Its purpose is to be able to be notified that an object\n * has been resolved in an effect.\n */\nexport class ResolvedAction implements Action {\n  type = ResolverActionTypes.RESOLVED;\n  payload: {\n    url: string,\n    dso: DSpaceObject\n  };\n\n  constructor(url: string, dso: DSpaceObject) {\n    this.payload = { url, dso };\n  }\n}\n\nexport type ResolverAction = ResolvedAction;\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from './item-page.resolver';\nimport { Item } from '../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring administrator rights\n */\nexport class ItemPageAdministratorGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check administrator authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.AdministratorOf);\n  }\n}\n","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h2 class=\"border-bottom\">{{'item.edit.head' | translate}}</h2>\n            <div class=\"pt-2\">\n                <ul class=\"nav nav-tabs justify-content-start\">\n                    <li *ngFor=\"let page of pages\" class=\"nav-item\">\n                        <a *ngIf=\"(page.enabled | async)\"\n                           class=\"nav-link\"\n                           [ngClass]=\"{'active' : page.page === currentPage}\"\n                           [routerLink]=\"['./' + page.page]\">\n                            {{'item.edit.tabs.' + page.page + '.head' | translate}}\n                        </a>\n                        <span [ngbTooltip]=\"'item.edit.tabs.disabled.tooltip' | translate\">\n                            <button *ngIf=\"!(page.enabled | async)\"\n                                 class=\"nav-link disabled\">\n                                {{'item.edit.tabs.' + page.page + '.head' | translate}}\n                            </button>\n                        </span>\n                    </li>\n                </ul>\n                <div class=\"tab-pane active\">\n                    <div class=\"mb-4\">\n                        <router-outlet></router-outlet>\n                    </div>\n                    <div class=\"button-row bottom\">\n                      <div class=\"text-right\">\n                        <a [routerLink]=\"getItemPage((itemRD$ | async)?.payload)\" role=\"button\" class=\"btn btn-outline-secondary mr-1\"><i class=\"fas fa-arrow-left\"></i> {{'item.edit.return' | translate}}</a>\n                      </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { fadeIn, fadeInOut } from '../../shared/animations/fade';\nimport { ChangeDetectionStrategy, Component, Injector, OnInit } from '@angular/core';\nimport { ActivatedRoute, CanActivate, Route, Router } from '@angular/router';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Item } from '../../core/shared/item.model';\nimport { combineLatest as observableCombineLatest, Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { isNotEmpty } from '../../shared/empty.util';\nimport { getItemPageRoute } from '../item-page-routing-paths';\nimport { GenericConstructor } from '../../core/shared/generic-constructor';\n\n@Component({\n  selector: 'ds-edit-item-page',\n  templateUrl: './edit-item-page.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Page component for editing an item\n */\nexport class EditItemPageComponent implements OnInit {\n\n  /**\n   * The item to edit\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The current page outlet string\n   */\n  currentPage: string;\n\n  /**\n   * All possible page outlet strings\n   */\n  pages: { page: string, enabled: Observable<boolean> }[];\n\n  constructor(private route: ActivatedRoute, private router: Router, private injector: Injector) {\n    this.router.events.subscribe(() => this.initPageParamsByRoute());\n  }\n\n  ngOnInit(): void {\n    this.initPageParamsByRoute();\n    this.pages = this.route.routeConfig.children\n      .filter((child: Route) => isNotEmpty(child.path))\n      .map((child: Route) => {\n        let enabled = observableOf(true);\n        if (isNotEmpty(child.canActivate)) {\n          enabled = observableCombineLatest(child.canActivate.map((guardConstructor: GenericConstructor<CanActivate>) => {\n              const guard: CanActivate = this.injector.get<CanActivate>(guardConstructor);\n              return guard.canActivate(this.route.snapshot, this.router.routerState.snapshot);\n            })\n          ).pipe(\n            map((canActivateOutcomes: any[]) => canActivateOutcomes.every((e) => e === true))\n          );\n        }\n        return { page: child.path, enabled: enabled };\n      }); // ignore reroutes\n    this.itemRD$ = this.route.data.pipe(map((data) => data.dso));\n  }\n\n  /**\n   * Get the item page url\n   * @param item The item for which the url is requested\n   */\n  getItemPage(item: Item): string {\n    return getItemPageRoute(item);\n  }\n\n  /**\n   * Set page params depending on the route\n   */\n  initPageParamsByRoute() {\n    this.currentPage = this.route.snapshot.firstChild.routeConfig.path;\n  }\n}\n","import { Component, OnInit, Predicate } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Item } from '../../../core/shared/item.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { first, map } from 'rxjs/operators';\nimport { findSuccessfulAccordingTo } from '../edit-item-operators';\nimport { getItemEditRoute, getItemPageRoute } from '../../item-page-routing-paths';\n\n/**\n * Component to render and handle simple item edit actions such as withdrawal and reinstatement.\n * This component is not meant to be used itself but to be extended.\n */\n@Component({\n  selector: 'ds-simple-action',\n  templateUrl: './abstract-simple-item-action.component.html'\n})\nexport class AbstractSimpleItemActionComponent implements OnInit {\n\n  itemRD$: Observable<RemoteData<Item>>;\n  item: Item;\n\n  protected messageKey: string;\n  confirmMessage: string;\n  cancelMessage: string;\n  headerMessage: string;\n  descriptionMessage: string;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute: string;\n\n  protected predicate: Predicate<RemoteData<Item>>;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.data.pipe(\n      map((data) => data.dso),\n      getFirstSucceededRemoteData()\n    )as Observable<RemoteData<Item>>;\n\n    this.itemRD$.pipe(first()).subscribe((rd) => {\n        this.item = rd.payload;\n        this.itemPageRoute = getItemPageRoute(this.item);\n      }\n    );\n\n    this.confirmMessage = 'item.edit.' + this.messageKey + '.confirm';\n    this.cancelMessage = 'item.edit.' + this.messageKey + '.cancel';\n    this.headerMessage = 'item.edit.' + this.messageKey + '.header';\n    this.descriptionMessage = 'item.edit.' + this.messageKey + '.description';\n  }\n  /**\n   * Perform the operation linked to this action\n   */\n  performAction() {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Process the response obtained during the performAction method and navigate back to the edit page\n   * @param response from the action in the performAction method\n   */\n  processRestResponse(response: RemoteData<any>) {\n    if (response.hasSucceeded) {\n      this.itemDataService.findById(this.item.id).pipe(\n        findSuccessfulAccordingTo(this.predicate)).subscribe(() => {\n        this.notificationsService.success(this.translateService.get('item.edit.' + this.messageKey + '.success'));\n        this.router.navigate([getItemEditRoute(this.item)]);\n      });\n    } else {\n      this.notificationsService.error(this.translateService.get('item.edit.' + this.messageKey + '.error'));\n      this.router.navigate([getItemEditRoute(this.item)]);\n    }\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-withdraw',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the Item Withdraw page\n */\nexport class ItemWithdrawComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'withdraw';\n  protected predicate = (rd: RemoteData<Item>) => rd.payload.isWithdrawn;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the withdraw action to the item\n   */\n  performAction() {\n    this.itemDataService.setWithDrawn(this.item, true).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Item>) => {\n        this.processRestResponse(response);\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-reinstate',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the Item Reinstate page\n */\nexport class ItemReinstateComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'reinstate';\n  protected predicate = (rd: RemoteData<Item>) => !rd.payload.isWithdrawn;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the reinstate action to the item\n   */\n  performAction() {\n    this.itemDataService.setWithDrawn(this.item, false).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Item>) => {\n        this.processRestResponse(response);\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-private',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the make item private page\n */\nexport class ItemPrivateComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'private';\n  protected predicate = (rd: RemoteData<Item>) => !rd.payload.isDiscoverable;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the make private action to the item\n   */\n  performAction() {\n    this.itemDataService.setDiscoverable(this.item, false).pipe(getFirstCompletedRemoteData()).subscribe(\n      (rd: RemoteData<Item>) => {\n        this.processRestResponse(rd);\n      }\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AbstractSimpleItemActionComponent } from '../simple-item-action/abstract-simple-item-action.component';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-public',\n  templateUrl: '../simple-item-action/abstract-simple-item-action.component.html'\n})\n/**\n * Component responsible for rendering the make item public page\n */\nexport class ItemPublicComponent extends AbstractSimpleItemActionComponent {\n\n  protected messageKey = 'public';\n  protected predicate = (rd: RemoteData<Item>) => rd.payload.isDiscoverable;\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService) {\n    super(route, router, notificationsService, itemDataService, translateService);\n  }\n\n  /**\n   * Perform the make public action to the item\n   */\n  performAction() {\n    this.itemDataService.setDiscoverable(this.item, true).pipe(getFirstCompletedRemoteData()).subscribe(\n      (response: RemoteData<Item>) => {\n        this.processRestResponse(response);\n      }\n    );\n  }\n}\n","import {RemoteData} from '../../core/data/remote-data';\nimport {Observable} from 'rxjs';\nimport {first} from 'rxjs/operators';\nimport {getAllSucceededRemoteData} from '../../core/shared/operators';\n\n/**\n * Return first Observable of a RemoteData object that complies to the provided predicate\n * @param predicate\n */\nexport const findSuccessfulAccordingTo = <T>(predicate: (rd: RemoteData<T>) => boolean) =>\n  (source: Observable<RemoteData<T>>): Observable<RemoteData<T>> =>\n    source.pipe(getAllSucceededRemoteData(),\n      first(predicate));\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h2>{{headerMessage | translate: {id: item.handle} }}</h2>\n            <p>{{descriptionMessage | translate}}</p>\n            <ds-modify-item-overview [item]=\"item\"></ds-modify-item-overview>\n            <button (click)=\"performAction()\" class=\"btn btn-outline-secondary perform-action\">{{confirmMessage | translate}}\n            </button>\n            <button [routerLink]=\"[itemPageRoute, 'edit']\" class=\"btn btn-outline-secondary cancel\">\n                {{cancelMessage| translate}}\n            </button>\n\n        </div>\n    </div>\n\n</div>\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n\n            <h2>{{headerMessage | translate: {id: item.handle} }}</h2>\n            <p>{{descriptionMessage | translate}}</p>\n            <ds-modify-item-overview [item]=\"item\"></ds-modify-item-overview>\n\n            <ng-container *ngVar=\"(types$ | async) as types\">\n\n                <div *ngIf=\"types && types.length > 0\" class=\"mb-4\">\n\n                    {{'virtual-metadata.delete-item.info' | translate}}\n\n                    <div *ngFor=\"let type of types\" class=\"mb-4\">\n\n                        <div *ngVar=\"(isSelected(type) | async) as selected\"\n                             class=\"d-flex flex-row\">\n\n                            <div class=\"m-2\" (click)=\"setSelected(type, !selected)\">\n                                <label>\n                                    <input type=\"checkbox\" [checked]=\"selected\">\n                                </label>\n                            </div>\n\n                            <div class=\"flex-column flex-grow-1\">\n                                <h5 (click)=\"setSelected(type, !selected)\">\n                                    {{getRelationshipMessageKey(getLabel(type) | async) | translate}}\n                                </h5>\n                                <div *ngFor=\"let relationship of (getRelationships(type) | async)\"\n                                     class=\"d-flex flex-row\">\n                                    <ng-container *ngVar=\"(getRelatedItem(relationship) | async) as relatedItem\">\n\n                                        <ds-listable-object-component-loader\n                                                *ngIf=\"relatedItem\"\n                                                [object]=\"relatedItem\"\n                                                [viewMode]=\"viewMode\">\n                                        </ds-listable-object-component-loader>\n                                        <div class=\"ml-auto\">\n                                            <div class=\"btn-group\">\n                                                <button class=\"btn btn-outline-info btn-sm\"\n                                                        (click)=\"openVirtualMetadataModal(virtualMetadataModal)\">\n                                                    <i class=\"fas fa-info fa-fw\"></i>\n                                                </button>\n                                            </div>\n                                        </div>\n\n                                        <ng-template #virtualMetadataModal>\n                                            <div>\n                                                <div class=\"modal-header\">\n                                                    {{'virtual-metadata.delete-item.modal-head' | translate}}\n                                                    <button type=\"button\" class=\"close\"\n                                                            (click)=\"closeVirtualMetadataModal()\" aria-label=\"Close\">\n                                                        <span aria-hidden=\"true\">×</span>\n                                                    </button>\n                                                </div>\n                                                <div class=\"modal-body\">\n                                                    <ds-listable-object-component-loader\n                                                            *ngIf=\"relatedItem\"\n                                                            [object]=\"relatedItem\"\n                                                            [viewMode]=\"viewMode\">\n                                                    </ds-listable-object-component-loader>\n                                                    <div *ngFor=\"let metadata of (getVirtualMetadata(relationship) | async)\">\n                                                        <div>\n                                                            <div class=\"font-weight-bold\">\n                                                                {{metadata.metadataField}}\n                                                            </div>\n                                                            <div>\n                                                                {{metadata.metadataValue.value}}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </ng-template>\n\n                                    </ng-container>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </ng-container>\n\n            <button (click)=\"performAction()\"\n                    class=\"btn btn-outline-secondary perform-action\">{{confirmMessage | translate}}\n            </button>\n            <button [routerLink]=\"[itemPageRoute, 'edit']\" class=\"btn btn-outline-secondary cancel\">\n                {{cancelMessage| translate}}\n            </button>\n\n        </div>\n    </div>\n</div>\n","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { defaultIfEmpty, filter, map, switchMap, take } from 'rxjs/operators';\nimport {\n  AbstractSimpleItemActionComponent\n} from '../simple-item-action/abstract-simple-item-action.component';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  combineLatest as observableCombineLatest,\n  combineLatest,\n  Observable,\n  of as observableOf, Subscription\n} from 'rxjs';\nimport { RelationshipType } from '../../../core/shared/item-relationships/relationship-type.model';\nimport { VirtualMetadata } from '../virtual-metadata/virtual-metadata.component';\nimport { Relationship } from '../../../core/shared/item-relationships/relationship.model';\nimport {\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData\n} from '../../../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { Item } from '../../../core/shared/item.model';\nimport { MetadataValue } from '../../../core/shared/metadata.models';\nimport { ViewMode } from '../../../core/shared/view-mode.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { RelationshipService } from '../../../core/data/relationship.service';\nimport { EntityTypeService } from '../../../core/data/entity-type.service';\nimport { LinkService } from '../../../core/cache/builders/link.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { getItemEditRoute } from '../../item-page-routing-paths';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\n@Component({\n  selector: 'ds-item-delete',\n  templateUrl: '../item-delete/item-delete.component.html'\n})\n/**\n * Component responsible for rendering the item delete page\n */\nexport class ItemDeleteComponent\n  extends AbstractSimpleItemActionComponent\n  implements OnInit, OnDestroy {\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  protected messageKey = 'delete';\n\n  /**\n   * The view-mode we're currently on\n   */\n  viewMode = ViewMode.ListElement;\n\n  /**\n   * A list of the relationship types for which this item has relations as an observable.\n   * The list doesn't contain duplicates.\n   */\n  types$: BehaviorSubject<RelationshipType[]> = new BehaviorSubject([]);\n\n  /**\n   * A map which stores the relationships of this item for each type as observable lists\n   */\n  relationships$: Map<RelationshipType, Observable<Relationship[]>>\n    = new Map<RelationshipType, Observable<Relationship[]>>();\n\n  /**\n   * A map which stores the related item of each relationship of this item as an observable\n   */\n  relatedItems$: Map<Relationship, Observable<Item>> = new Map<Relationship, Observable<Item>>();\n\n  /**\n   * A map which stores the virtual metadata (of the related) item corresponding to each relationship of this item\n   * as an observable list\n   */\n  virtualMetadata$: Map<Relationship, Observable<VirtualMetadata[]>> = new Map<Relationship, Observable<VirtualMetadata[]>>();\n\n  /**\n   * Reference to NgbModal\n   */\n  public modalRef: NgbModalRef;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   */\n  private subs: Subscription[] = [];\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected notificationsService: NotificationsService,\n              protected itemDataService: ItemDataService,\n              protected translateService: TranslateService,\n              protected modalService: NgbModal,\n              protected objectUpdatesService: ObjectUpdatesService,\n              protected relationshipService: RelationshipService,\n              protected entityTypeService: EntityTypeService,\n              protected linkService: LinkService,\n  ) {\n    super(\n      route,\n      router,\n      notificationsService,\n      itemDataService,\n      translateService,\n    );\n  }\n\n  /**\n   * Set up and initialize all fields\n   */\n  ngOnInit() {\n\n    super.ngOnInit();\n    this.url = this.router.url;\n\n    const label = this.item.firstMetadataValue('dspace.entity.type');\n    if (isNotEmpty(label)) {\n      this.subs.push(this.entityTypeService.getEntityTypeByLabel(label).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        switchMap((entityType) => this.entityTypeService.getEntityTypeRelationships(entityType.id)),\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((relationshipTypes) => relationshipTypes.page),\n        switchMap((types) => {\n          if (types.length === 0) {\n            return observableOf(types);\n          }\n          return combineLatest(types.map((type) => this.getRelationships(type))).pipe(\n            map((relationships) =>\n              types.reduce<RelationshipType[]>((includedTypes, type, index) => {\n                if (!includedTypes.some((includedType) => includedType.id === type.id)\n                  && !(relationships[index].length === 0)) {\n                  return [...includedTypes, type];\n                } else {\n                  return includedTypes;\n                }\n              }, [])\n            ),\n          );\n        })\n      ).subscribe((types: RelationshipType[]) => this.types$.next(types)));\n    }\n\n    this.subs.push(this.types$.pipe(\n      take(1),\n    ).subscribe((types) =>\n      this.objectUpdatesService.initialize(this.url, types, this.item.lastModified)\n    ));\n  }\n\n  /**\n   * Open the modal which lists the virtual metadata of a relation\n   * @param content the html content of the modal\n   */\n  openVirtualMetadataModal(content: any) {\n    this.modalRef = this.modalService.open(content);\n  }\n\n  /**\n   * Close the modal which lists the virtual metadata of a relation\n   */\n  closeVirtualMetadataModal() {\n    this.modalRef.close();\n  }\n\n  /**\n   * Get the i18n message key for a relationship\n   * @param label   The relationship type's label\n   */\n  getRelationshipMessageKey(label: string): string {\n    if (hasValue(label) && label.indexOf('Of') > -1) {\n      return `relationships.${label.substring(0, label.indexOf('Of') + 2)}`;\n    } else {\n      return label;\n    }\n  }\n\n  /**\n   * Get the relationship type label relevant for this item as an observable\n   * @param relationshipType  the relationship type to get the label for\n   */\n  getLabel(relationshipType: RelationshipType): Observable<string> {\n\n    return this.getRelationships(relationshipType).pipe(\n      switchMap((relationships) =>\n        this.isLeftItem(relationships[0]).pipe(\n          map((isLeftItem) => isLeftItem ? relationshipType.leftwardType : relationshipType.rightwardType),\n        )\n      ),\n    );\n  }\n\n  /**\n   * Get the relationships of this item with a given type as an observable\n   * @param relationshipType  the relationship type to filter the item's relationships on\n   */\n  getRelationships(relationshipType: RelationshipType): Observable<Relationship[]> {\n\n    if (!this.relationships$.has(relationshipType)) {\n      this.relationships$.set(\n        relationshipType,\n        this.relationshipService.getItemRelationshipsArray(this.item).pipe(\n          // filter on type\n          switchMap((relationships) =>\n            observableCombineLatest(\n              relationships.map((relationship) => this.getRelationshipType(relationship))\n            ).pipe(\n              defaultIfEmpty([]),\n              map((types) => relationships.filter(\n                (relationship, index) => relationshipType.id === types[index].id\n              )),\n            )\n          ),\n        )\n      );\n    }\n\n    return this.relationships$.get(relationshipType);\n  }\n\n  /**\n   * Get the type of a given relationship as an observable\n   * @param relationship  the relationship to get the type for\n   */\n  private getRelationshipType(relationship: Relationship): Observable<RelationshipType> {\n\n    this.linkService.resolveLinks(\n      relationship,\n      followLink('relationshipType'),\n      followLink('leftItem'),\n      followLink('rightItem'),\n    );\n    return relationship.relationshipType.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      filter((relationshipType: RelationshipType) => hasValue(relationshipType) && isNotEmpty(relationshipType.uuid))\n    );\n  }\n\n  /**\n   * Get the item this item is related to through a given relationship as an observable\n   * @param relationship  the relationship to get the other item for\n   */\n  getRelatedItem(relationship: Relationship): Observable<Item> {\n\n    if (!this.relatedItems$.has(relationship)) {\n\n      this.relatedItems$.set(\n        relationship,\n        this.isLeftItem(relationship).pipe(\n          switchMap((isLeftItem) => isLeftItem ? relationship.rightItem : relationship.leftItem),\n          getFirstSucceededRemoteData(),\n          getRemoteDataPayload(),\n        ),\n      );\n    }\n\n    return this.relatedItems$.get(relationship);\n  }\n\n  /**\n   * Get the virtual metadata for a given relationship of the related item.\n   * @param relationship  the relationship to get the virtual metadata for\n   */\n  getVirtualMetadata(relationship: Relationship): Observable<VirtualMetadata[]> {\n\n    if (!this.virtualMetadata$.has(relationship)) {\n\n      this.virtualMetadata$.set(\n        relationship,\n        this.getRelatedItem(relationship).pipe(\n          map((relatedItem) =>\n            Object.entries(relatedItem.metadata)\n              .map(([key, value]) => value\n                .filter((metadata: MetadataValue) =>\n                  metadata.authority && metadata.authority.endsWith(relationship.id))\n                .map((metadata: MetadataValue) => {\n                  return {\n                    metadataField: key,\n                    metadataValue: metadata,\n                  };\n                }))\n              .reduce((previous, current) => previous.concat(current))\n          ),\n        )\n      );\n    }\n\n    return this.virtualMetadata$.get(relationship);\n  }\n\n  /**\n   * Check whether this item is the left item of a given relationship, as an observable boolean\n   * @param relationship  the relationship for which to check whether this item is the left item\n   */\n  private isLeftItem(relationship: Relationship): Observable<boolean> {\n\n    return relationship.leftItem.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid)),\n      map((leftItem) => leftItem.uuid === this.item.uuid)\n    );\n  }\n\n  /**\n   * Check whether a given relationship type is selected to save the corresponding virtual metadata\n   * @param type  the relationship type for which to check whether it is selected\n   */\n  isSelected(type: RelationshipType): Observable<boolean> {\n    return this.objectUpdatesService.isSelectedVirtualMetadata(this.url, this.item.uuid, type.uuid);\n  }\n\n  /**\n   * Select/deselect a given relationship type to save the corresponding virtual metadata\n   * @param type      the relationship type to select/deselect\n   * @param selected  whether the type should be selected\n   */\n  setSelected(type: RelationshipType, selected: boolean): void {\n    this.objectUpdatesService.setSelectedVirtualMetadata(this.url, this.item.uuid, type.uuid, selected);\n  }\n\n  /**\n   * Perform the delete operation\n   */\n  performAction() {\n\n    this.subs.push(this.types$.pipe(\n      switchMap((types) =>\n        combineLatest(\n          types.map((type) => this.isSelected(type))\n        ).pipe(\n          defaultIfEmpty([]),\n          map((selection) => types.filter(\n            (type, index) => selection[index]\n          )),\n          map((selectedTypes) => selectedTypes.map((type) => type.id)),\n        )\n      ),\n      switchMap((types) =>\n        this.itemDataService.delete(this.item.id, types).pipe(getFirstCompletedRemoteData())\n      )\n    ).subscribe(\n      (rd: RemoteData<NoContent>) => {\n        this.notify(rd.hasSucceeded);\n      }\n    ));\n  }\n\n  /**\n   * When the item is successfully delete, navigate to the homepage, otherwise navigate back to the item edit page\n   * @param succeeded\n   */\n  notify(succeeded: boolean) {\n    if (succeeded) {\n      this.notificationsService.success(this.translateService.get('item.edit.' + this.messageKey + '.success'));\n      this.router.navigate(['']);\n    } else {\n      this.notificationsService.error(this.translateService.get('item.edit.' + this.messageKey + '.error'));\n      this.router.navigate([getItemEditRoute(this.item)]);\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n}\n","import { FeatureID } from '../../../core/data/feature-authorization/feature-id';\n\n/**\n *  Represents an item operation used on the edit item page with a key, an operation URL to which will be navigated\n *  when performing the action and an option to disable the operation.\n */\nexport class ItemOperation {\n\n  operationKey: string;\n  operationUrl: string;\n  disabled: boolean;\n  authorized: boolean;\n  featureID: FeatureID;\n\n  constructor(operationKey: string, operationUrl: string, featureID?: FeatureID, disabled = false, authorized = true) {\n    this.operationKey = operationKey;\n    this.operationUrl = operationUrl;\n    this.featureID = featureID;\n    this.authorized = authorized;\n    this.setDisabled(disabled);\n  }\n\n  /**\n   * Set whether this operation should be disabled\n   * @param disabled\n   */\n  setDisabled(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n}\n","<div class=\"col-3 float-left d-flex h-100 action-label\">\n      <span class=\"justify-content-center align-self-center\">\n        {{'item.edit.tabs.status.buttons.' + operation.operationKey + '.label' | translate}}\n      </span>\n</div>\n<div class=\"col-9 float-left action-button\">\n  <span *ngIf=\"operation.authorized\">\n    <button class=\"btn btn-outline-primary\" [disabled]=\"operation.disabled\" [routerLink]=\"operation.operationUrl\">\n      {{'item.edit.tabs.status.buttons.' + operation.operationKey + '.button' | translate}}\n    </button>\n  </span>\n  <span *ngIf=\"!operation.authorized\" [ngbTooltip]=\"'item.edit.tabs.status.buttons.unauthorized' | translate\">\n    <button class=\"btn btn-outline-primary\" [disabled]=\"true\">\n      {{'item.edit.tabs.status.buttons.' + operation.operationKey + '.button' | translate}}\n    </button>\n  </span>\n</div>\n","import {Component, Input} from '@angular/core';\nimport {ItemOperation} from './itemOperation.model';\n\n@Component({\n  selector: 'ds-item-operation',\n  templateUrl: './item-operation.component.html'\n})\n/**\n * Operation that can be performed on an item\n */\nexport class ItemOperationComponent {\n\n  @Input() operation: ItemOperation;\n\n}\n","<p class=\"mt-2\">{{'item.edit.tabs.status.description' | translate}}</p>\n<div class=\"row\">\n  <div *ngFor=\"let statusKey of statusDataKeys\" class=\"w-100\">\n    <div class=\"col-3 float-left status-label\">\n      {{'item.edit.tabs.status.labels.' + statusKey | translate}}:\n    </div>\n    <div class=\"col-9 float-left status-data\" id=\"status-{{statusKey}}\">\n      {{statusData[statusKey]}}\n    </div>\n  </div>\n  <div class=\"col-3 float-left status-label\">\n    {{'item.edit.tabs.status.labels.itemPage' | translate}}:\n  </div>\n  <div class=\"col-9 float-left status-data\" id=\"status-itemPage\">\n    <a [routerLink]=\"itemPageRoute$ | async\">{{itemPageRoute$ | async}}</a>\n  </div>\n\n  <div *ngFor=\"let operation of (operations$ | async)\" class=\"w-100\" [ngClass]=\"{'pt-3': operation}\">\n    <ds-item-operation *ngIf=\"operation\" [operation]=\"operation\"></ds-item-operation>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { fadeIn, fadeInOut } from '../../../shared/animations/fade';\nimport { Item } from '../../../core/shared/item.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { ItemOperation } from '../item-operation/itemOperation.model';\nimport { distinctUntilChanged, first, map, mergeMap, toArray } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, from as observableFrom } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { getItemEditRoute, getItemPageRoute } from '../../item-page-routing-paths';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { hasValue } from '../../../shared/empty.util';\nimport { getAllSucceededRemoteDataPayload } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-item-status',\n  templateUrl: './item-status.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Component for displaying an item's status\n */\nexport class ItemStatusComponent implements OnInit {\n\n  /**\n   * The item to display the status for\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The data to show in the status\n   */\n  statusData: any;\n  /**\n   * The keys of the data (to loop over)\n   */\n  statusDataKeys;\n\n  /**\n   * The possible actions that can be performed on the item\n   *  key: id   value: url to action's component\n   */\n  operations$: BehaviorSubject<ItemOperation[]> = new BehaviorSubject<ItemOperation[]>([]);\n\n  /**\n   * The keys of the actions (to loop over)\n   */\n  actionsKeys;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute$: Observable<string>;\n\n  constructor(private route: ActivatedRoute,\n              private authorizationService: AuthorizationDataService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.parent.data.pipe(map((data) => data.dso));\n    this.itemRD$.pipe(\n      first(),\n      map((data: RemoteData<Item>) => data.payload)\n    ).subscribe((item: Item) => {\n      this.statusData = Object.assign({\n        id: item.id,\n        handle: item.handle,\n        lastModified: item.lastModified\n      });\n      this.statusDataKeys = Object.keys(this.statusData);\n      /*\n        The key is used to build messages\n          i18n example: 'item.edit.tabs.status.buttons.<key>.label'\n        The value is supposed to be a href for the button\n      */\n      const operations = [];\n      operations.push(new ItemOperation('authorizations', this.getCurrentUrl(item) + '/authorizations', FeatureID.CanManagePolicies, true));\n      operations.push(new ItemOperation('mappedCollections', this.getCurrentUrl(item) + '/mapper', FeatureID.CanManageMappings, true));\n      if (item.isWithdrawn) {\n        operations.push(new ItemOperation('reinstate', this.getCurrentUrl(item) + '/reinstate', FeatureID.ReinstateItem, true));\n      } else {\n        operations.push(new ItemOperation('withdraw', this.getCurrentUrl(item) + '/withdraw', FeatureID.WithdrawItem, true));\n      }\n      if (item.isDiscoverable) {\n        operations.push(new ItemOperation('private', this.getCurrentUrl(item) + '/private', FeatureID.CanMakePrivate, true));\n      } else {\n        operations.push(new ItemOperation('public', this.getCurrentUrl(item) + '/public', FeatureID.CanMakePrivate, true));\n      }\n      operations.push(new ItemOperation('delete', this.getCurrentUrl(item) + '/delete', FeatureID.CanDelete, true));\n      operations.push(new ItemOperation('move', this.getCurrentUrl(item) + '/move', FeatureID.CanMove, true));\n\n      this.operations$.next(operations);\n\n      observableFrom(operations).pipe(\n        mergeMap((operation) => {\n          if (hasValue(operation.featureID)) {\n            return this.authorizationService.isAuthorized(operation.featureID, item.self).pipe(\n              distinctUntilChanged(),\n              map((authorized) => new ItemOperation(operation.operationKey, operation.operationUrl, operation.featureID, !authorized, authorized))\n            );\n          } else {\n            return [operation];\n          }\n        }),\n        toArray()\n      ).subscribe((ops) => this.operations$.next(ops));\n    });\n    this.itemPageRoute$ = this.itemRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((item) => getItemPageRoute(item))\n    );\n  }\n\n  /**\n   * Get the current url without query params\n   * @returns {string}  url\n   */\n  getCurrentUrl(item: Item): string {\n    return getItemEditRoute(item);\n  }\n\n  trackOperation(index: number, operation: ItemOperation) {\n    return hasValue(operation) ? operation.operationKey : undefined;\n  }\n\n}\n","/**\n * A helper class storing the sizes in which to render a single column\n * The values in this class are expected to be between 1 and 12\n * There are used to be added to bootstrap classes such as col-xs-{this.xs}\n */\nexport class ResponsiveColumnSizes {\n  /**\n   * The extra small bootstrap size\n   */\n  xs: number;\n\n  /**\n   * The small bootstrap size\n   */\n  sm: number;\n\n  /**\n   * The medium bootstrap size\n   */\n  md: number;\n\n  /**\n   * The large bootstrap size\n   */\n  lg: number;\n\n  /**\n   * The extra large bootstrap size\n   */\n  xl: number;\n\n  constructor(xs: number, sm: number, md: number, lg: number, xl: number) {\n    this.xs = xs;\n    this.sm = sm;\n    this.md = md;\n    this.lg = lg;\n    this.xl = xl;\n  }\n\n  /**\n   * Build the bootstrap responsive column classes matching the values of this object\n   */\n  buildClasses(): string {\n    return `col-${this.xs} col-sm-${this.sm} col-md-${this.md} col-lg-${this.lg} col-xl-${this.xl}`;\n  }\n}\n","import { ResponsiveColumnSizes } from './responsive-column-sizes';\nimport { hasValue } from '../empty.util';\n\n/**\n * A helper class storing the sizes in which to render a table\n * It stores a list of columns, which in turn store their own bootstrap column sizes\n */\nexport class ResponsiveTableSizes {\n  /**\n   * A list of all the columns and their responsive sizes within this table\n   */\n  columns: ResponsiveColumnSizes[];\n\n  constructor(columns: ResponsiveColumnSizes[]) {\n    this.columns = columns;\n  }\n\n  /**\n   * Combine the values of multiple columns into a single ResponsiveColumnSizes\n   * Useful when a row element stretches over multiple columns\n   * @param start Index of the first column\n   * @param end   Index of the last column (inclusive)\n   */\n  combineColumns(start: number, end: number): ResponsiveColumnSizes {\n    if (start < end && hasValue(this.columns[start]) && hasValue(this.columns[end])) {\n      let xs = this.columns[start].xs;\n      let sm = this.columns[start].sm;\n      let md = this.columns[start].md;\n      let lg = this.columns[start].lg;\n      let xl = this.columns[start].xl;\n      for (let i = start + 1; i < end + 1; i++) {\n        xs += this.columns[i].xs;\n        sm += this.columns[i].sm;\n        md += this.columns[i].md;\n        lg += this.columns[i].lg;\n        xl += this.columns[i].xl;\n      }\n      return new ResponsiveColumnSizes(xs, sm, md, lg, xl);\n    }\n    return undefined;\n  }\n}\n","<ng-template #handleView>\n  <div class=\"drag-handle text-muted float-left p-1 mr-2\" tabindex=\"0\">\n    <i class=\"fas fa-grip-vertical fa-fw\" [title]=\"'item.edit.bitstreams.edit.buttons.drag' | translate\"></i>\n  </div>\n</ng-template>\n","import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n  selector: 'ds-item-edit-bitstream-drag-handle',\n  styleUrls: ['../item-bitstreams.component.scss'],\n  templateUrl: './item-edit-bitstream-drag-handle.component.html',\n})\n/**\n * Component displaying a drag handle for the item-edit-bitstream page\n * Creates an embedded view of the contents\n * (which means it'll be added to the parents html without a wrapping ds-item-edit-bitstream-drag-handle element)\n */\nexport class ItemEditBitstreamDragHandleComponent implements OnInit {\n  /**\n   * The view on the drag-handle\n   */\n  @ViewChild('handleView', {static: true}) handleView;\n\n  constructor(private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.handleView);\n  }\n\n}\n","import { FieldUpdate, FieldUpdates } from '../../core/data/object-updates/object-updates.reducer';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { PaginationComponentOptions } from '../pagination/pagination-component-options.model';\nimport { ObjectUpdatesService } from '../../core/data/object-updates/object-updates.service';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { hasValue } from '../empty.util';\nimport {\n  paginatedListToArray,\n  getFirstSucceededRemoteData,\n  getAllSucceededRemoteData\n} from '../../core/shared/operators';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Component, ElementRef, EventEmitter, OnDestroy, Output, ViewChild } from '@angular/core';\nimport { PaginationComponent } from '../pagination/pagination.component';\nimport { ObjectValuesPipe } from '../utils/object-values-pipe';\nimport { compareArraysUsing } from '../../item-page/simple/item-types/shared/item-relationships-utils';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n/**\n * Operator used for comparing {@link FieldUpdate}s by their field's UUID\n */\nexport const compareArraysUsingFieldUuids = () =>\n  compareArraysUsing((fieldUpdate: FieldUpdate) => (hasValue(fieldUpdate) && hasValue(fieldUpdate.field)) ? fieldUpdate.field.uuid : undefined);\n\n/**\n * An abstract component containing general methods and logic to be able to drag and drop objects within a paginated\n * list. This implementation supports being able to drag and drop objects between pages.\n * Dragging an object on top of a page number will automatically detect the page it's being dropped on and send a\n * dropObject event to the parent component containing detailed information about the indexes the object was dropped from\n * and to.\n *\n * To extend this component, it is important to make sure to:\n * - Initialize objectsRD$ within the initializeObjectsRD() method\n * - Initialize a unique URL for this component/page within the initializeURL() method\n * - Add (cdkDropListDropped)=\"drop($event)\" to the cdkDropList element in your template\n * - Add (pageChange)=\"switchPage($event)\" to the ds-pagination element in your template\n * - Use the updates$ observable for building your list of cdkDrag elements in your template\n *\n * An example component extending from this abstract component: PaginatedDragAndDropBitstreamListComponent\n */\n@Component({\n  selector: 'ds-paginated-drag-drop-abstract',\n  template: ''\n})\nexport abstract class AbstractPaginatedDragAndDropListComponent<T extends DSpaceObject> implements OnDestroy {\n  /**\n   * A view on the child pagination component\n   */\n  @ViewChild(PaginationComponent) paginationComponent: PaginationComponent;\n\n  /**\n   * Send an event when the user drops an object on the pagination\n   * The event contains details about the index the object came from and is dropped to (across the entirety of the list,\n   * not just within a single page)\n   */\n  @Output() dropObject: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * The URL to use for accessing the object updates from this list\n   */\n  url: string;\n\n  /**\n   * The objects to retrieve data for and transform into field updates\n   */\n  objectsRD$: Observable<RemoteData<PaginatedList<T>>>;\n\n  /**\n   * The updates to the current list\n   */\n  updates$: Observable<FieldUpdates>;\n\n  /**\n   * A list of object UUIDs\n   * This is the order the objects will be displayed in\n   */\n  customOrder: string[];\n\n  /**\n   * The amount of objects to display per page\n   */\n  pageSize = 10;\n\n  /**\n   * The page options to use for fetching the objects\n   * Start at page 1 and always use the set page size\n   */\n  options = Object.assign(new PaginationComponentOptions(),{\n    id: 'dad',\n    currentPage: 1,\n    pageSize: this.pageSize\n  });\n\n  /**\n   * The current page being displayed\n   */\n  currentPage$ = new BehaviorSubject<PaginationComponentOptions>(this.options);\n\n  /**\n   * Whether or not we should display a loading animation\n   * This is used to display a loading page when the user drops a bitstream onto a new page. The loading animation\n   * should stop once the bitstream has moved to the new page and the new page's response has loaded and contains the\n   * dropped object on top (see this.stopLoadingWhenFirstIs below)\n   */\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  protected constructor(protected objectUpdatesService: ObjectUpdatesService,\n                        protected elRef: ElementRef,\n                        protected objectValuesPipe: ObjectValuesPipe,\n                        protected paginationService: PaginationService\n                        ) {\n  }\n\n  /**\n   * Initialize the observables\n   */\n  ngOnInit() {\n    this.initializeObjectsRD();\n    this.initializeURL();\n    this.initializeUpdates();\n    this.initializePagination();\n  }\n\n  /**\n   * Overwrite this method to define how the list of objects is initialized and updated\n   */\n  abstract initializeObjectsRD(): void;\n\n  /**\n   * Overwrite this method to define how the URL is set\n   */\n  abstract initializeURL(): void;\n\n  /**\n   * Initialize the current pagination retrieval from the paginationService and push to the currentPage$\n   */\n  initializePagination() {\n    this.paginationService.getCurrentPagination(this.options.id, this.options).subscribe((currentPagination) => {\n      this.currentPage$.next(currentPagination);\n    });\n  }\n\n  /**\n   * Initialize the field-updates in the store\n   */\n  initializeUpdates(): void {\n    this.objectsRD$.pipe(\n      getFirstSucceededRemoteData(),\n      paginatedListToArray(),\n    ).subscribe((objects: T[]) => {\n      this.objectUpdatesService.initialize(this.url, objects, new Date());\n    });\n    this.updates$ = this.objectsRD$.pipe(\n      getAllSucceededRemoteData(),\n      paginatedListToArray(),\n      switchMap((objects: T[]) => this.objectUpdatesService.getFieldUpdatesExclusive(this.url, objects))\n    );\n    this.subs.push(\n      this.updates$.pipe(\n        map((fieldUpdates) => this.objectValuesPipe.transform(fieldUpdates)),\n        distinctUntilChanged(compareArraysUsingFieldUuids())\n      ).subscribe((updateValues) => {\n        this.customOrder = updateValues.map((fieldUpdate) => fieldUpdate.field.uuid);\n        // We received new values, stop displaying a loading indicator if it's present\n        this.loading$.next(false);\n      }),\n      // Disable the pagination when objects are loading\n      this.loading$.subscribe((loading) => this.options.disabled = loading)\n    );\n  }\n\n  /**\n   * An object was moved, send updates to the dropObject EventEmitter\n   * When the object is dropped on a page within the pagination of this component, the object moves to the top of that\n   * page and the pagination automatically loads and switches the view to that page (this is done by calling the event's\n   * finish() method after sending patch requests to the REST API)\n   * @param event\n   */\n  drop(event: CdkDragDrop<any>) {\n    const dragIndex = event.previousIndex;\n    let dropIndex = event.currentIndex;\n    const dragPage = this.currentPage$.value.currentPage - 1;\n    let dropPage = this.currentPage$.value.currentPage - 1;\n\n    // Check if the user is hovering over any of the pagination's pages at the time of dropping the object\n    const droppedOnElement = this.elRef.nativeElement.querySelector('.page-item:hover');\n    if (hasValue(droppedOnElement) && hasValue(droppedOnElement.textContent)) {\n      // The user is hovering over a page, fetch the page's number from the element\n      const droppedPage = Number(droppedOnElement.textContent);\n      if (hasValue(droppedPage) && !Number.isNaN(droppedPage)) {\n        dropPage = droppedPage - 1;\n        dropIndex = 0;\n      }\n    }\n\n    const isNewPage = dragPage !== dropPage;\n    // Move the object in the custom order array if the drop happened within the same page\n    // This allows us to instantly display a change in the order, instead of waiting for the REST API's response first\n    if (!isNewPage && dragIndex !== dropIndex) {\n      moveItemInArray(this.customOrder, dragIndex, dropIndex);\n    }\n\n    const redirectPage = dropPage + 1;\n    const fromIndex = (dragPage * this.pageSize) + dragIndex;\n    const toIndex = (dropPage * this.pageSize) + dropIndex;\n    // Send out a drop event (and navigate to the new page) when the \"from\" and \"to\" indexes are different from each other\n    if (fromIndex !== toIndex) {\n      if (isNewPage) {\n        this.loading$.next(true);\n      }\n      this.dropObject.emit(Object.assign({\n        fromIndex,\n        toIndex,\n        finish: () => {\n          if (isNewPage) {\n            this.paginationComponent.doPageChange(redirectPage);\n          }\n        }\n      }));\n    }\n  }\n\n  /**\n   * unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.options.id);\n  }\n}\n","<ng-template #bitstreamView>\n  <div class=\"{{columnSizes.columns[0].buildClasses()}} row-element d-flex\">\n    <ng-content select=\"[slot=drag-handle]\"></ng-content>\n    <div class=\"float-left d-flex align-items-center overflow-hidden\">\n      <span class=\"text-truncate\">\n        {{ bitstreamName }}\n      </span>\n    </div>\n  </div>\n  <div class=\"{{columnSizes.columns[1].buildClasses()}} row-element d-flex align-items-center\">\n    <div class=\"w-100\">\n      <span class=\"text-truncate\">\n      {{ bitstream?.firstMetadataValue('dc.description') }}\n      </span>\n    </div>\n  </div>\n  <div class=\"{{columnSizes.columns[2].buildClasses()}} row-element d-flex align-items-center\">\n    <div class=\"text-center w-100\">\n        <span class=\"text-truncate\">\n            {{ (format$ | async)?.shortDescription }}\n        </span>\n    </div>\n  </div>\n  <div class=\"{{columnSizes.columns[3].buildClasses()}} row-element d-flex align-items-center\">\n    <div class=\"text-center w-100\">\n      <div class=\"btn-group relationship-action-buttons\">\n        <a [href]=\"bitstream?._links?.content?.href\"\n                class=\"btn btn-outline-primary btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.download' | translate}}\">\n          <i class=\"fas fa-download fa-fw\"></i>\n        </a>\n        <button [routerLink]=\"['/bitstreams/', bitstream.id, 'edit']\" class=\"btn btn-outline-primary btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.edit' | translate}}\">\n          <i class=\"fas fa-edit fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!canRemove()\" (click)=\"remove()\"\n                class=\"btn btn-outline-danger btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.remove' | translate}}\">\n          <i class=\"fas fa-trash-alt fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!canUndo()\" (click)=\"undo()\"\n                class=\"btn btn-outline-warning btn-sm\"\n                title=\"{{'item.edit.bitstreams.edit.buttons.undo' | translate}}\">\n          <i class=\"fas fa-undo-alt fa-fw\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldUpdate } from '../../../../core/data/object-updates/object-updates.reducer';\nimport { Bitstream } from '../../../../core/shared/bitstream.model';\nimport { cloneDeep } from 'lodash';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport { Observable } from 'rxjs';\nimport { BitstreamFormat } from '../../../../core/shared/bitstream-format.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../../core/shared/operators';\nimport { ResponsiveTableSizes } from '../../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { DSONameService } from '../../../../core/breadcrumbs/dso-name.service';\n\n@Component({\n  selector: 'ds-item-edit-bitstream',\n  styleUrls: ['../item-bitstreams.component.scss'],\n  templateUrl: './item-edit-bitstream.component.html',\n})\n/**\n * Component that displays a single bitstream of an item on the edit page\n * Creates an embedded view of the contents\n * (which means it'll be added to the parents html without a wrapping ds-item-edit-bitstream element)\n */\nexport class ItemEditBitstreamComponent implements OnChanges, OnInit {\n\n  /**\n   * The view on the bitstream\n   */\n  @ViewChild('bitstreamView', {static: true}) bitstreamView;\n\n  /**\n   * The current field, value and state of the bitstream\n   */\n  @Input() fieldUpdate: FieldUpdate;\n\n  /**\n   * The url of the bundle\n   */\n  @Input() bundleUrl: string;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  @Input() columnSizes: ResponsiveTableSizes;\n\n  /**\n   * The bitstream of this field\n   */\n  bitstream: Bitstream;\n\n  /**\n   * The bitstream's name\n   */\n  bitstreamName: string;\n\n  /**\n   * The format of the bitstream\n   */\n  format$: Observable<BitstreamFormat>;\n\n  constructor(private objectUpdatesService: ObjectUpdatesService,\n              private dsoNameService: DSONameService,\n              private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.viewContainerRef.createEmbeddedView(this.bitstreamView);\n  }\n\n  /**\n   * Update the current bitstream and its format on changes\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.bitstream = cloneDeep(this.fieldUpdate.field) as Bitstream;\n    this.bitstreamName = this.dsoNameService.getName(this.bitstream);\n    this.format$ = this.bitstream.format.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload()\n    );\n  }\n\n  /**\n   * Sends a new remove update for this field to the object updates service\n   */\n  remove(): void {\n    this.objectUpdatesService.saveRemoveFieldUpdate(this.bundleUrl, this.bitstream);\n  }\n\n  /**\n   * Cancels the current update for this field in the object updates service\n   */\n  undo(): void {\n    this.objectUpdatesService.removeSingleFieldUpdate(this.bundleUrl, this.bitstream.uuid);\n  }\n\n  /**\n   * Check if a user should be allowed to remove this field\n   */\n  canRemove(): boolean {\n    return this.fieldUpdate.changeType !== FieldChangeType.REMOVE;\n  }\n\n  /**\n   * Check if a user should be allowed to cancel the update to this field\n   */\n  canUndo(): boolean {\n    return this.fieldUpdate.changeType >= 0;\n  }\n\n}\n","<ds-pagination *ngIf=\"(objectsRD$ | async)?.payload\"\n               [hideGear]=\"true\"\n               [hidePagerWhenSinglePage]=\"true\"\n               [hidePaginationDetail]=\"true\"\n               [paginationOptions]=\"options\"\n               [pageInfoState]=\"(objectsRD$ | async)?.payload\"\n               [collectionSize]=\"(objectsRD$ | async)?.payload?.totalElements\">\n  <ng-container *ngIf=\"!(loading$ | async)\">\n    <div [id]=\"bundle.id\" class=\"bundle-bitstreams-list\"\n         [ngClass]=\"{'mb-3': (objectsRD$ | async)?.payload?.totalElements > pageSize}\"\n         *ngVar=\"(updates$ | async) as updates\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n      <ng-container *ngIf=\"updates\">\n        <div class=\"row bitstream-row\" *ngFor=\"let uuid of customOrder\" cdkDrag\n             [id]=\"uuid\"\n             [ngClass]=\"{\n                  'table-warning': updates[uuid].changeType === 0,\n                  'table-danger': updates[uuid].changeType === 2,\n                  'table-success': updates[uuid].changeType === 1,\n                  'bg-white': updates[uuid].changeType === undefined\n                }\">\n          <ds-item-edit-bitstream [fieldUpdate]=\"updates[uuid]\"\n                                  [bundleUrl]=\"bundle.self\"\n                                  [columnSizes]=\"columnSizes\">\n            <div class=\"d-flex align-items-center bitstream-row-drag-handle\" slot=\"drag-handle\" cdkDragHandle tabindex=\"0\">\n              <ds-item-edit-bitstream-drag-handle></ds-item-edit-bitstream-drag-handle>\n            </div>\n          </ds-item-edit-bitstream>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ds-loading *ngIf=\"(loading$ | async)\" [message]=\"'loading.bitstreams' | translate\"></ds-loading>\n</ds-pagination>\n","import { AbstractPaginatedDragAndDropListComponent } from '../../../../../shared/pagination-drag-and-drop/abstract-paginated-drag-and-drop-list.component';\nimport { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { Bundle } from '../../../../../core/shared/bundle.model';\nimport { Bitstream } from '../../../../../core/shared/bitstream.model';\nimport { ObjectUpdatesService } from '../../../../../core/data/object-updates/object-updates.service';\nimport { BundleDataService } from '../../../../../core/data/bundle-data.service';\nimport { switchMap } from 'rxjs/operators';\nimport { PaginatedSearchOptions } from '../../../../../shared/search/models/paginated-search-options.model';\nimport { ResponsiveTableSizes } from '../../../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { followLink } from '../../../../../shared/utils/follow-link-config.model';\nimport { ObjectValuesPipe } from '../../../../../shared/utils/object-values-pipe';\nimport { RequestService } from '../../../../../core/data/request.service';\nimport { PaginationService } from '../../../../../core/pagination/pagination.service';\nimport { PaginationComponentOptions } from '../../../../../shared/pagination/pagination-component-options.model';\n\n@Component({\n  selector: 'ds-paginated-drag-and-drop-bitstream-list',\n  styleUrls: ['../../item-bitstreams.component.scss'],\n  templateUrl: './paginated-drag-and-drop-bitstream-list.component.html',\n})\n/**\n * A component listing edit-bitstream rows for each bitstream within the given bundle.\n * This component makes use of the AbstractPaginatedDragAndDropListComponent, allowing for users to drag and drop\n * bitstreams within the paginated list. To drag and drop a bitstream between two pages, drag the row on top of the\n * page number you want the bitstream to end up at. Doing so will add the bitstream to the top of that page.\n */\nexport class PaginatedDragAndDropBitstreamListComponent extends AbstractPaginatedDragAndDropListComponent<Bitstream> implements OnInit {\n  /**\n   * The bundle to display bitstreams for\n   */\n  @Input() bundle: Bundle;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  @Input() columnSizes: ResponsiveTableSizes;\n\n  constructor(protected objectUpdatesService: ObjectUpdatesService,\n              protected elRef: ElementRef,\n              protected objectValuesPipe: ObjectValuesPipe,\n              protected bundleService: BundleDataService,\n              protected paginationService: PaginationService,\n              protected requestService: RequestService) {\n    super(objectUpdatesService, elRef, objectValuesPipe, paginationService);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  /**\n   * Initialize the bitstreams observable depending on currentPage$\n   */\n  initializeObjectsRD(): void {\n    this.objectsRD$ = this.currentPage$.pipe(\n      switchMap((page: PaginationComponentOptions) => {\n        const paginatedOptions = new PaginatedSearchOptions({pagination: Object.assign({}, page)});\n        return this.bundleService.getBitstreamsEndpoint(this.bundle.id, paginatedOptions).pipe(\n          switchMap((href) => this.requestService.hasByHref$(href)),\n          switchMap(() => this.bundleService.getBitstreams(\n            this.bundle.id,\n            paginatedOptions,\n            followLink('format')\n          ))\n        );\n      })\n    );\n  }\n\n  /**\n   * Initialize the URL used for the field-update store, in this case the bundle's self-link\n   */\n  initializeURL(): void {\n    this.url = this.bundle.self;\n  }\n}\n","<ng-template #bundleView>\n  <div class=\"row bundle-row\">\n    <div class=\"{{bundleNameColumn.buildClasses()}} font-weight-bold row-element d-flex\">\n      <ds-item-edit-bitstream-drag-handle></ds-item-edit-bitstream-drag-handle>\n      <div class=\"float-left d-flex align-items-center\">\n        {{'item.edit.bitstreams.bundle.name' | translate:{ name: bundle.name } }}\n      </div>\n    </div>\n    <div class=\"{{columnSizes.columns[3].buildClasses()}} text-center row-element\">\n      <div class=\"btn-group bundle-action-buttons\">\n        <button [routerLink]=\"[itemPageRoute, 'bitstreams', 'new']\"\n                [queryParams]=\"{bundle: bundle.id}\"\n                class=\"btn btn-outline-success btn-sm\"\n                title=\"{{'item.edit.bitstreams.bundle.edit.buttons.upload' | translate}}\">\n          <i class=\"fas fa-upload fa-fw\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n  <ds-paginated-drag-and-drop-bitstream-list [bundle]=\"bundle\" [columnSizes]=\"columnSizes\" (dropObject)=\"dropObject.emit($event)\"></ds-paginated-drag-and-drop-bitstream-list>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Bundle } from '../../../../core/shared/bundle.model';\nimport { Item } from '../../../../core/shared/item.model';\nimport { ResponsiveColumnSizes } from '../../../../shared/responsive-table-sizes/responsive-column-sizes';\nimport { ResponsiveTableSizes } from '../../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { getItemPageRoute } from '../../../item-page-routing-paths';\n\n@Component({\n  selector: 'ds-item-edit-bitstream-bundle',\n  styleUrls: ['../item-bitstreams.component.scss'],\n  templateUrl: './item-edit-bitstream-bundle.component.html',\n})\n/**\n * Component that displays a single bundle of an item on the item bitstreams edit page\n * Creates an embedded view of the contents. This is to ensure the table structure won't break.\n * (which means it'll be added to the parents html without a wrapping ds-item-edit-bitstream-bundle element)\n */\nexport class ItemEditBitstreamBundleComponent implements OnInit {\n\n  /**\n   * The view on the bundle information and bitstreams\n   */\n  @ViewChild('bundleView', {static: true}) bundleView;\n\n  /**\n   * The bundle to display bitstreams for\n   */\n  @Input() bundle: Bundle;\n\n  /**\n   * The item the bundle belongs to\n   */\n  @Input() item: Item;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  @Input() columnSizes: ResponsiveTableSizes;\n\n  /**\n   * Send an event when the user drops an object on the pagination\n   * The event contains details about the index the object came from and is dropped to (across the entirety of the list,\n   * not just within a single page)\n   */\n  @Output() dropObject: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * The bootstrap sizes used for the Bundle Name column\n   * This column stretches over the first 3 columns and thus is a combination of their sizes processed in ngOnInit\n   */\n  bundleNameColumn: ResponsiveColumnSizes;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute: string;\n\n  constructor(private viewContainerRef: ViewContainerRef) {\n  }\n\n  ngOnInit(): void {\n    this.bundleNameColumn = this.columnSizes.combineColumns(0, 2);\n    this.viewContainerRef.createEmbeddedView(this.bundleView);\n    this.itemPageRoute = getItemPageRoute(this.item);\n  }\n}\n","<div class=\"item-bitstreams\" *ngVar=\"(bundles$ | async) as bundles\">\n  <div class=\"button-row top d-flex mt-2\">\n    <button class=\"mr-auto btn btn-success\"\n            [routerLink]=\"[itemPageRoute, 'bitstreams', 'new']\"><i\n            class=\"fas fa-upload\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.upload-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-warning mr-1\" *ngIf=\"isReinstatable() | async\"\n            (click)=\"reinstate()\"><i\n            class=\"fas fa-undo-alt\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.reinstate-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-primary mr-1\" [disabled]=\"!(hasChanges() | async) || submitting\"\n            (click)=\"submit()\"><i\n            class=\"fas fa-save\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.save-button\" | translate}}</span>\n    </button>\n    <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n            [disabled]=\"!(hasChanges() | async) || submitting\"\n            (click)=\"discard()\"><i\n            class=\"fas fa-times\"></i>\n      <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.discard-button\" | translate}}</span>\n    </button>\n  </div>\n\n  <div *ngIf=\"item && bundles?.length > 0\" class=\"container table-bordered mt-4\">\n    <div class=\"row header-row font-weight-bold\">\n      <div class=\"{{columnSizes.columns[0].buildClasses()}} row-element\">\n        <ds-item-edit-bitstream-drag-handle></ds-item-edit-bitstream-drag-handle>\n        {{'item.edit.bitstreams.headers.name' | translate}}\n      </div>\n      <div class=\"{{columnSizes.columns[1].buildClasses()}} row-element\">{{'item.edit.bitstreams.headers.description' | translate}}</div>\n      <div class=\"{{columnSizes.columns[2].buildClasses()}} text-center row-element\">{{'item.edit.bitstreams.headers.format' | translate}}</div>\n      <div class=\"{{columnSizes.columns[3].buildClasses()}} text-center row-element\">{{'item.edit.bitstreams.headers.actions' | translate}}</div>\n    </div>\n    <ds-item-edit-bitstream-bundle *ngFor=\"let bundle of bundles\"\n                                   [bundle]=\"bundle\"\n                                   [item]=\"item\"\n                                   [columnSizes]=\"columnSizes\"\n                                   (dropObject)=\"dropBitstream(bundle, $event)\">\n    </ds-item-edit-bitstream-bundle>\n  </div>\n  <div *ngIf=\"bundles?.length === 0\"\n       class=\"alert alert-info w-100 d-inline-block mt-4\" role=\"alert\">\n    {{'item.edit.bitstreams.empty' | translate}}\n  </div>\n  <ds-loading *ngIf=\"!bundles\" message=\"{{'loading.bitstreams' | translate}}\"></ds-loading>\n\n  <div class=\"button-row bottom\">\n    <div class=\"mt-4 float-right\">\n      <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n              (click)=\"reinstate()\"><i\n        class=\"fas fa-undo-alt\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.reinstate-button\" | translate}}</span>\n      </button>\n      <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async) || submitting\"\n              (click)=\"submit()\"><i\n        class=\"fas fa-save\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.save-button\" | translate}}</span>\n      </button>\n      <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n              [disabled]=\"!(hasChanges() | async) || submitting\"\n              (click)=\"discard()\"><i\n        class=\"fas fa-times\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.bitstreams.discard-button\" | translate}}</span>\n      </button>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, NgZone, OnDestroy } from '@angular/core';\nimport { AbstractItemUpdateComponent } from '../abstract-item-update/abstract-item-update.component';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { Observable, of as observableOf, Subscription, zip as observableZip } from 'rxjs';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BitstreamDataService } from '../../../core/data/bitstream-data.service';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { RequestService } from '../../../core/data/request.service';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { Bundle } from '../../../core/shared/bundle.model';\nimport { FieldUpdate, FieldUpdates } from '../../../core/data/object-updates/object-updates.reducer';\nimport { Bitstream } from '../../../core/shared/bitstream.model';\nimport { FieldChangeType } from '../../../core/data/object-updates/object-updates.actions';\nimport { BundleDataService } from '../../../core/data/bundle-data.service';\nimport { PaginatedSearchOptions } from '../../../shared/search/models/paginated-search-options.model';\nimport { ResponsiveColumnSizes } from '../../../shared/responsive-table-sizes/responsive-column-sizes';\nimport { ResponsiveTableSizes } from '../../../shared/responsive-table-sizes/responsive-table-sizes';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { Operation } from 'fast-json-patch';\n\n@Component({\n  selector: 'ds-item-bitstreams',\n  styleUrls: ['./item-bitstreams.component.scss'],\n  templateUrl: './item-bitstreams.component.html',\n})\n/**\n * Component for displaying an item's bitstreams edit page\n */\nexport class ItemBitstreamsComponent extends AbstractItemUpdateComponent implements OnDestroy {\n\n  /**\n   * The currently listed bundles\n   */\n  bundles$: Observable<Bundle[]>;\n\n  /**\n   * The page options to use for fetching the bundles\n   */\n  bundlesOptions = {\n    id: 'bundles-pagination-options',\n    currentPage: 1,\n    pageSize: 9999\n  } as any;\n\n  /**\n   * The bootstrap sizes used for the columns within this table\n   */\n  columnSizes = new ResponsiveTableSizes([\n    // Name column\n    new ResponsiveColumnSizes(2, 2, 3, 4, 4),\n    // Description column\n    new ResponsiveColumnSizes(2, 3, 3, 3, 3),\n    // Format column\n    new ResponsiveColumnSizes(2, 2, 2, 2, 2),\n    // Actions column\n    new ResponsiveColumnSizes(6, 5, 4, 3, 3)\n  ]);\n\n  /**\n   * Are we currently submitting the changes?\n   * Used to disable any action buttons until the submit finishes\n   */\n  submitting = false;\n\n  /**\n   * A subscription that checks when the item is deleted in cache and reloads the item by sending a new request\n   * This is used to update the item in cache after bitstreams are deleted\n   */\n  itemUpdateSubscription: Subscription;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute,\n    public bitstreamService: BitstreamDataService,\n    public objectCache: ObjectCacheService,\n    public requestService: RequestService,\n    public cdRef: ChangeDetectorRef,\n    public bundleService: BundleDataService,\n    public zone: NgZone\n  ) {\n    super(itemService, objectUpdatesService, router, notificationsService, translateService, route);\n  }\n\n  /**\n   * Actions to perform after the item has been initialized\n   */\n  postItemInit(): void {\n    this.bundles$ = this.itemService.getBundles(this.item.id, new PaginatedSearchOptions({pagination: this.bundlesOptions})).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      map((bundlePage: PaginatedList<Bundle>) => bundlePage.page)\n    );\n  }\n\n  /**\n   * Initialize the notification messages prefix\n   */\n  initializeNotificationsPrefix(): void {\n    this.notificationsPrefix = 'item.edit.bitstreams.notifications.';\n  }\n\n\n  /**\n   * Submit the current changes\n   * Bitstreams marked as deleted send out a delete request to the rest API\n   * Display notifications and reset the current item/updates\n   */\n  submit() {\n    this.submitting = true;\n    const bundlesOnce$ = this.bundles$.pipe(take(1));\n\n    // Fetch all removed bitstreams from the object update service\n    const removedBitstreams$ = bundlesOnce$.pipe(\n      switchMap((bundles: Bundle[]) => observableZip(\n        ...bundles.map((bundle: Bundle) => this.objectUpdatesService.getFieldUpdates(bundle.self, [], true))\n      )),\n      map((fieldUpdates: FieldUpdates[]) => ([] as FieldUpdate[]).concat(\n        ...fieldUpdates.map((updates: FieldUpdates) => Object.values(updates).filter((fieldUpdate: FieldUpdate) => fieldUpdate.changeType === FieldChangeType.REMOVE))\n      )),\n      map((fieldUpdates: FieldUpdate[]) => fieldUpdates.map((fieldUpdate: FieldUpdate) => fieldUpdate.field))\n    );\n\n    // Send out delete requests for all deleted bitstreams\n    const removedResponses$ = removedBitstreams$.pipe(\n      take(1),\n      switchMap((removedBistreams: Bitstream[]) => {\n        if (isNotEmpty(removedBistreams)) {\n          return observableZip(...removedBistreams.map((bitstream: Bitstream) => this.bitstreamService.delete(bitstream.id)));\n        } else {\n          return observableOf(undefined);\n        }\n      })\n    );\n\n    // Perform the setup actions from above in order and display notifications\n    removedResponses$.pipe(take(1)).subscribe((responses: RemoteData<NoContent>[]) => {\n      this.displayNotifications('item.edit.bitstreams.notifications.remove', responses);\n      this.reset();\n      this.submitting = false;\n    });\n  }\n\n  /**\n   * A bitstream was dropped in a new location. Send out a Move Patch request to the REST API, display notifications,\n   * refresh the bundle's cache (so the lists can properly reload) and call the event's callback function (which will\n   * navigate the user to the correct page)\n   * @param bundle  The bundle to send patch requests to\n   * @param event   The event containing the index the bitstream came from and was dropped to\n   */\n  dropBitstream(bundle: Bundle, event: any) {\n    this.zone.runOutsideAngular(() => {\n      if (hasValue(event) && hasValue(event.fromIndex) && hasValue(event.toIndex) && hasValue(event.finish)) {\n        const moveOperation = {\n          op: 'move',\n          from: `/_links/bitstreams/${event.fromIndex}/href`,\n          path: `/_links/bitstreams/${event.toIndex}/href`\n        } as Operation;\n        this.bundleService.patch(bundle, [moveOperation]).pipe(take(1)).subscribe((response: RemoteData<Bundle>) => {\n          this.zone.run(() => {\n            this.displayNotifications('item.edit.bitstreams.notifications.move', [response]);\n            // Remove all cached requests from this bundle and call the event's callback when the requests are cleared\n            this.requestService.removeByHrefSubstring(bundle.self).pipe(\n              filter((isCached) => isCached),\n              take(1)\n            ).subscribe(() => event.finish());\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * Display notifications\n   * - Error notification for each failed response with their message\n   * - Success notification in case there's at least one successful response\n   * @param key       The i18n key for the notification messages\n   * @param responses The returned responses to display notifications for\n   */\n  displayNotifications(key: string, responses: RemoteData<any>[]) {\n    if (isNotEmpty(responses)) {\n      const failedResponses = responses.filter((response: RemoteData<Bundle>) => hasValue(response) && response.hasFailed);\n      const successfulResponses = responses.filter((response: RemoteData<Bundle>) => hasValue(response) && response.hasSucceeded);\n\n      failedResponses.forEach((response: RemoteData<Bundle>) => {\n        this.notificationsService.error(this.translateService.instant(`${key}.failed.title`), response.errorMessage);\n      });\n      if (successfulResponses.length > 0) {\n        this.notificationsService.success(this.translateService.instant(`${key}.saved.title`), this.translateService.instant(`${key}.saved.content`));\n      }\n    }\n  }\n\n  /**\n   * Request the object updates service to discard all current changes to this item\n   * Shows a notification to remind the user that they can undo this\n   */\n  discard() {\n    const undoNotification = this.notificationsService.info(this.getNotificationTitle('discarded'), this.getNotificationContent('discarded'), {timeOut: this.discardTimeOut});\n    this.objectUpdatesService.discardAllFieldUpdates(this.url, undoNotification);\n  }\n\n  /**\n   * Request the object updates service to undo discarding all changes to this item\n   */\n  reinstate() {\n    this.bundles$.pipe(take(1)).subscribe((bundles: Bundle[]) => {\n      bundles.forEach((bundle: Bundle) => {\n        this.objectUpdatesService.reinstateFieldUpdates(bundle.self);\n      });\n    });\n  }\n\n  /**\n   * Checks whether or not the object is currently reinstatable\n   */\n  isReinstatable(): Observable<boolean> {\n    return this.bundles$.pipe(\n      switchMap((bundles: Bundle[]) => observableZip(...bundles.map((bundle: Bundle) => this.objectUpdatesService.isReinstatable(bundle.self)))),\n      map((reinstatable: boolean[]) => reinstatable.includes(true))\n    );\n  }\n\n  /**\n   * Checks whether or not there are currently updates for this object\n   */\n  hasChanges(): Observable<boolean> {\n    return this.bundles$.pipe(\n      switchMap((bundles: Bundle[]) => observableZip(...bundles.map((bundle: Bundle) => this.objectUpdatesService.hasUpdates(bundle.self)))),\n      map((hasChanges: boolean[]) => hasChanges.includes(true))\n    );\n  }\n\n  /**\n   * De-cache the current item (it should automatically reload due to itemUpdateSubscription)\n   */\n  reset() {\n    this.refreshItemCache();\n  }\n\n  /**\n   * Remove the current item's cache from object- and request-cache\n   */\n  refreshItemCache() {\n    this.bundles$.pipe(take(1)).subscribe((bundles: Bundle[]) => {\n      bundles.forEach((bundle: Bundle) => {\n        this.objectCache.remove(bundle.self);\n        this.requestService.removeByHrefSubstring(bundle.self);\n      });\n      this.objectCache.remove(this.item.self);\n      this.requestService.removeByHrefSubstring(this.item.self);\n    });\n  }\n\n  /**\n   * Unsubscribe from open subscriptions whenever the component gets destroyed\n   */\n  ngOnDestroy(): void {\n    if (this.itemUpdateSubscription) {\n      this.itemUpdateSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h2>{{'item.edit.item-mapper.head' | translate}}</h2>\n      <p [innerHTML]=\"'item.edit.item-mapper.item' | translate:{ name: (itemName$ | async) }\" id=\"item-name\"></p>\n      <p>{{'item.edit.item-mapper.description' | translate}}</p>\n\n      <ul ngbNav (navChange)=\"tabChange($event)\" [destroyOnHide]=\"true\" #tabs=\"ngbNav\" class=\"nav-tabs\">\n        <li [ngbNavItem]=\"'browseTab'\">\n          <a ngbNavLink>{{'item.edit.item-mapper.tabs.browse' | translate}}</a>\n          <ng-template ngbNavContent>\n            <div class=\"mt-2\">\n              <ds-collection-select class=\"mt-2\"\n                [key]=\"'browse'\"\n                [dsoRD$]=\"itemCollectionsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [confirmButton]=\"'item.edit.item-mapper.buttons.remove'\"\n                [cancelButton]=\"'item.edit.item-mapper.cancel'\"\n                [dangerConfirm]=\"true\"\n                (confirm)=\"removeMappings($event)\"\n                (cancel)=\"onCancel()\"></ds-collection-select>\n            </div>\n          </ng-template>\n        </li>\n        <li [ngbNavItem]=\"'mapTab'\">\n          <a ngbNavLink>{{'item.edit.item-mapper.tabs.map' | translate}}</a>\n          <ng-template ngbNavContent>\n            <div class=\"row mt-2\">\n              <div class=\"col-12 col-lg-6\">\n                <ds-search-form id=\"search-form\"\n                                [query]=\"(searchOptions$ | async)?.query\"\n                                [currentUrl]=\"'./'\"\n                                [inPlaceSearch]=\"true\"\n                                [searchPlaceholder]=\"'item.edit.item-mapper.search-form.placeholder' | translate\"\n                                (submitSearch)=\"performedSearch = true\">\n                </ds-search-form>\n              </div>\n            </div>\n\n            <div *ngIf=\"performedSearch\">\n              <ds-collection-select class=\"mt-2\"\n                [key]=\"'map'\"\n                [dsoRD$]=\"mappedCollectionsRD$\"\n                [paginationOptions]=\"(searchOptions$ | async)?.pagination\"\n                [sortOptions]=\"(searchOptions$ | async)?.sort\"\n                [confirmButton]=\"'item.edit.item-mapper.buttons.add'\"\n                [cancelButton]=\"'item.edit.item-mapper.cancel'\"\n                (confirm)=\"mapCollections($event)\"\n                (cancel)=\"onCancel()\"></ds-collection-select>\n            </div>\n            <div *ngIf=\"!performedSearch\" class=\"alert alert-info w-100\" role=\"alert\">\n              {{'item.edit.item-mapper.no-search' | translate}}\n            </div>\n          </ng-template>\n        </li>\n      </ul>\n      <div [ngbNavOutlet]=\"tabs\"></div>\n    </div>\n  </div>\n</div>\n","import { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\n\nimport { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { CollectionDataService } from '../../../core/data/collection-data.service';\nimport { fadeIn, fadeInOut } from '../../../shared/animations/fade';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { Item } from '../../../core/shared/item.model';\nimport {\n  getAllSucceededRemoteData,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getFirstSucceededRemoteDataPayload,\n  getRemoteDataPayload,\n  toDSpaceObjectListRD\n} from '../../../core/shared/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter, map, startWith, switchMap, take } from 'rxjs/operators';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { DSpaceObjectType } from '../../../core/shared/dspace-object-type.model';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { PaginatedSearchOptions } from '../../../shared/search/models/paginated-search-options.model';\nimport { SearchConfigurationService } from '../../../core/shared/search/search-configuration.service';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { getItemPageRoute } from '../../item-page-routing-paths';\n\n@Component({\n  selector: 'ds-item-collection-mapper',\n  styleUrls: ['./item-collection-mapper.component.scss'],\n  templateUrl: './item-collection-mapper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Component for mapping collections to an item\n */\nexport class ItemCollectionMapperComponent implements OnInit {\n\n  /**\n   * A view on the tabset element\n   * Used to switch tabs programmatically\n   */\n  @ViewChild('tabs') tabs;\n\n  /**\n   * The item to map to collections\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n  itemName$: Observable<string>;\n\n  /**\n   * Search options\n   */\n  searchOptions$: Observable<PaginatedSearchOptions>;\n\n  /**\n   * List of collections to show under the \"Browse\" tab\n   * Collections that are mapped to the item\n   */\n  itemCollectionsRD$: Observable<RemoteData<PaginatedList<Collection>>>;\n\n  /**\n   * List of collections to show under the \"Map\" tab\n   * Collections that are not mapped to the item\n   */\n  mappedCollectionsRD$: Observable<RemoteData<PaginatedList<Collection>>>;\n\n  /**\n   * Firing this observable (shouldUpdate$.next(true)) forces the two lists to reload themselves\n   * Usually fired after the lists their cache is cleared (to force a new request to the REST API)\n   */\n  shouldUpdate$: BehaviorSubject<boolean>;\n\n  /**\n   * Track whether at least one search has been performed or not\n   * As soon as at least one search has been performed, we display the search results\n   */\n  performedSearch = false;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private searchConfigService: SearchConfigurationService,\n              private searchService: SearchService,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private collectionDataService: CollectionDataService,\n              private translateService: TranslateService,\n              private dsoNameService: DSONameService) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.parent.data.pipe(\n      take(1),\n      map((data) => data.dso),\n    );\n\n    this.itemName$ = this.itemRD$.pipe(\n      filter((rd: RemoteData<Item>) => hasValue(rd)),\n      map((rd: RemoteData<Item>) => {\n        return this.dsoNameService.getName(rd.payload);\n      })\n    );\n    this.searchOptions$ = this.searchConfigService.paginatedSearchOptions;\n    this.loadCollectionLists();\n  }\n\n  /**\n   * Load itemCollectionsRD$ with a fixed scope to only obtain the collections that own this item\n   * Load mappedCollectionsRD$ to only obtain collections that don't own this item\n   */\n  loadCollectionLists() {\n    console.log('loadCollectionLists');\n    this.shouldUpdate$ = new BehaviorSubject<boolean>(true);\n    this.itemCollectionsRD$ = observableCombineLatest(this.itemRD$.pipe(getFirstSucceededRemoteDataPayload()), this.shouldUpdate$).pipe(\n      switchMap(([item, shouldUpdate]) => {\n        if (shouldUpdate === true) {\n          this.shouldUpdate$.next(false);\n        }\n        return this.collectionDataService.findAllByHref(\n          this.itemDataService.getMappedCollectionsEndpoint(item.id),\n          undefined,\n          !shouldUpdate,\n          false\n        ).pipe(\n          getAllSucceededRemoteData()\n        );\n      }),\n    );\n\n    const owningCollectionRD$ = this.itemRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((item: Item) => this.collectionDataService.findOwningCollectionFor(item)),\n      getAllSucceededRemoteData(),\n    );\n    const itemCollectionsAndOptions$ = observableCombineLatest(\n      this.itemCollectionsRD$,\n      owningCollectionRD$,\n      this.searchOptions$\n    );\n    this.mappedCollectionsRD$ = itemCollectionsAndOptions$.pipe(\n      switchMap(([itemCollectionsRD, owningCollectionRD, searchOptions]) => {\n        return this.searchService.search(Object.assign(new PaginatedSearchOptions(searchOptions), {\n          query: this.buildQuery([...itemCollectionsRD.payload.page, owningCollectionRD.payload], searchOptions.query),\n          dsoTypes: [DSpaceObjectType.COLLECTION]\n        }), 10000).pipe(\n          toDSpaceObjectListRD(),\n          startWith(undefined)\n        );\n      })\n    ) as Observable<RemoteData<PaginatedList<Collection>>>;\n  }\n\n  /**\n   * Map the item to the selected collections and display notifications\n   * @param {string[]} ids  The list of collection UUID's to map the item to\n   */\n  mapCollections(ids: string[]) {\n    const itemIdAndExcludingIds$ = observableCombineLatest([\n      this.itemRD$.pipe(\n        getFirstSucceededRemoteData(),\n        map((rd: RemoteData<Item>) => rd.payload),\n        map((item: Item) => item.id)\n      ),\n      this.itemCollectionsRD$.pipe(\n        getFirstSucceededRemoteData(),\n        map((rd: RemoteData<PaginatedList<Collection>>) => rd.payload.page),\n        map((collections: Collection[]) => collections.map((collection: Collection) => collection.id))\n      )\n    ]);\n\n    // Map the item to the collections found in ids, excluding the collections the item is already mapped to\n    const responses$ = itemIdAndExcludingIds$.pipe(\n      switchMap(([itemId, excludingIds]) =>\n        observableCombineLatest(\n          this.filterIds(ids, excludingIds).map((id: string) =>\n            this.itemDataService.mapToCollection(itemId, id).pipe(getFirstCompletedRemoteData())\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, 'item.edit.item-mapper.notifications.add');\n  }\n\n  /**\n   * Remove the mapping of the item to the selected collections and display notifications\n   * @param {string[]} ids  The list of collection UUID's to remove the mapping of the item for\n   */\n  removeMappings(ids: string[]) {\n    const responses$ = this.itemRD$.pipe(\n      getFirstSucceededRemoteData(),\n      map((itemRD: RemoteData<Item>) => itemRD.payload.id),\n      switchMap((itemId: string) => observableCombineLatest(\n        ids.map((id: string) =>\n          this.itemDataService.removeMappingFromCollection(itemId, id).pipe(getFirstCompletedRemoteData())\n        ))\n      )\n    );\n\n    this.showNotifications(responses$, 'item.edit.item-mapper.notifications.remove');\n  }\n\n  /**\n   * Filters ids from a given list of ids, which exist in a second given list of ids\n   * @param {string[]} ids          The list of ids to filter out of\n   * @param {string[]} excluding    The ids that should be excluded from the first list\n   * @returns {string[]}\n   */\n  private filterIds(ids: string[], excluding: string[]): string[] {\n    return ids.filter((id: string) => excluding.indexOf(id) < 0);\n  }\n\n  /**\n   * Display notifications\n   * @param {Observable<RestResponse[]>} responses$   The responses after adding/removing a mapping\n   * @param {string} messagePrefix                    The prefix to build the notification messages with\n   */\n  private showNotifications(responses$: Observable<RemoteData<NoContent>[]>, messagePrefix: string) {\n    responses$.subscribe((responses: RemoteData<NoContent>[]) => {\n      const successful = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n      const unsuccessful = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n      if (successful.length > 0) {\n        const successMessages = observableCombineLatest([\n          this.translateService.get(`${messagePrefix}.success.head`),\n          this.translateService.get(`${messagePrefix}.success.content`, { amount: successful.length })\n        ]);\n\n        successMessages.subscribe(([head, content]) => {\n          this.notificationsService.success(head, content);\n        });\n        this.shouldUpdate$.next(true);\n      }\n      if (unsuccessful.length > 0) {\n        const unsuccessMessages = observableCombineLatest([\n          this.translateService.get(`${messagePrefix}.error.head`),\n          this.translateService.get(`${messagePrefix}.error.content`, { amount: unsuccessful.length })\n        ]);\n\n        unsuccessMessages.subscribe(([head, content]) => {\n          this.notificationsService.error(head, content);\n        });\n      }\n      this.switchToFirstTab();\n    });\n  }\n\n  /**\n   * Clear url parameters on tab change (temporary fix until pagination is improved)\n   * @param event\n   */\n  tabChange(event) {\n    this.performedSearch = false;\n    this.router.navigateByUrl(this.getCurrentUrl());\n  }\n\n  /**\n   * Get current url without parameters\n   * @returns {string}\n   */\n  getCurrentUrl(): string {\n    if (this.router.url.indexOf('?') > -1) {\n      return this.router.url.substring(0, this.router.url.indexOf('?'));\n    }\n    return this.router.url;\n  }\n\n  /**\n   * Build a query to exclude collections from\n   * @param collections     The collections their UUIDs\n   * @param query           The query to add to it\n   */\n  buildQuery(collections: Collection[], query: string): string {\n    let result = query;\n    for (const collection of collections) {\n      result = this.addExcludeCollection(collection.id, result);\n    }\n    return result;\n  }\n\n  /**\n   * Add an exclusion of a collection to a query\n   * @param collectionId    The collection's UUID\n   * @param query           The query to add the exclusion to\n   */\n  addExcludeCollection(collectionId: string, query: string): string {\n    const excludeQuery = `-search.resourceid:${collectionId}`;\n    if (isNotEmpty(query)) {\n      return `${query} AND ${excludeQuery}`;\n    } else {\n      return excludeQuery;\n    }\n  }\n\n  /**\n   * Switch the view to focus on the first tab\n   */\n  switchToFirstTab() {\n    this.tabs.select('browseTab');\n  }\n\n  /**\n   * When a cancel event is fired, return to the item page\n   */\n  onCancel() {\n    this.itemRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      take(1)\n    ).subscribe((item: Item) => {\n      this.router.navigate([getItemPageRoute(item)]);\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <h2>{{'item.edit.move.head' | translate: {id: (itemRD$ | async)?.payload?.handle} }}</h2>\n            <p>{{'item.edit.move.description' | translate}}</p>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                  <div class=\"card mb-3\">\n                    <div class=\"card-header\">{{'dso-selector.placeholder' | translate: { type: 'collection' } }}</div>\n                    <div class=\"card-body\">\n                      <ds-authorized-collection-selector [types]=\"COLLECTIONS\"\n                                                         [currentDSOId]=\"selectedCollection ? selectedCollection.id : originalCollection.id\"\n                                                         (onSelect)=\"selectDso($event)\">\n                      </ds-authorized-collection-selector>\n                    </div>\n                    <div></div>\n                  </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <p>\n                        <input type=\"checkbox\" name=\"tc\" [(ngModel)]=\"inheritPolicies\" id=\"inheritPoliciesCheckbox\">\n                        <label for=\"inheritPoliciesCheckbox\">{{'item.edit.move.inheritpolicies.checkbox' |\n                                translate}}</label>\n                    </p>\n                    <p>\n                        {{'item.edit.move.inheritpolicies.description' | translate}}\n                    </p>\n                </div>\n            </div>\n\n          <div class=\"button-row bottom\">\n            <div class=\"float-right\">\n              <button [routerLink]=\"[(itemPageRoute$ | async), 'edit']\" class=\"btn btn-outline-secondary\">\n                <i class=\"fas fa-arrow-left\"></i> {{'item.edit.move.cancel' | translate}}\n              </button>\n              <button class=\"btn btn-primary mr-0\" [disabled]=\"!canMove\" (click)=\"moveToCollection()\">\n              <span *ngIf=\"!processing\">\n                <i class=\"fas fa-save\"></i> {{'item.edit.move.save-button' | translate}}\n              </span>\n                <span *ngIf=\"processing\">\n                <i class=\"fas fa-circle-notch fa-spin\"></i> {{'item.edit.move.processing' | translate}}\n              </span>\n              </button>\n              <button class=\"btn btn-danger\" [disabled]=\"!canSubmit\" (click)=\"discard()\">\n                <i class=\"fas fa-times\"></i> {{\"item.edit.move.discard-button\" | translate}}\n              </button>\n            </div>\n          </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { map, switchMap } from 'rxjs/operators';\nimport { DSpaceObjectType } from '../../../core/shared/dspace-object-type.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  getAllSucceededRemoteDataPayload, getFirstCompletedRemoteData, getFirstSucceededRemoteData, getRemoteDataPayload,\n} from '../../../core/shared/operators';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { Observable } from 'rxjs';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { SearchService } from '../../../core/shared/search/search.service';\nimport { getItemEditRoute, getItemPageRoute } from '../../item-page-routing-paths';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { RequestService } from '../../../core/data/request.service';\n\n@Component({\n  selector: 'ds-item-move',\n  templateUrl: './item-move.component.html'\n})\n/**\n * Component that handles the moving of an item to a different collection\n */\nexport class ItemMoveComponent implements OnInit {\n  /**\n   * TODO: There is currently no backend support to change the owningCollection and inherit policies,\n   * TODO: when this is added, the inherit policies option should be used.\n   */\n\n  selectorType = DSpaceObjectType.COLLECTION;\n\n  inheritPolicies = false;\n  itemRD$: Observable<RemoteData<Item>>;\n  originalCollection: Collection;\n\n  selectedCollectionName: string;\n  selectedCollection: Collection;\n  canSubmit = false;\n\n  item: Item;\n  processing = false;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute$: Observable<string>;\n\n  COLLECTIONS = [DSpaceObjectType.COLLECTION];\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private notificationsService: NotificationsService,\n              private itemDataService: ItemDataService,\n              private searchService: SearchService,\n              private translateService: TranslateService,\n              private requestService: RequestService,\n  ) {}\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.data.pipe(\n      map((data) => data.dso), getFirstSucceededRemoteData()\n    ) as Observable<RemoteData<Item>>;\n    this.itemPageRoute$ = this.itemRD$.pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((item) => getItemPageRoute(item))\n    );\n    this.itemRD$.subscribe((rd) => {\n        this.item = rd.payload;\n      }\n    );\n    this.itemRD$.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      switchMap((item) => item.owningCollection),\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    ).subscribe((collection) => {\n      this.originalCollection = collection;\n    });\n  }\n\n  /**\n   * Set the collection name and id based on the selected value\n   * @param data - obtained from the ds-input-suggestions component\n   */\n  selectDso(data: any): void {\n    this.selectedCollection = data;\n    this.selectedCollectionName = data.name;\n    this.canSubmit = true;\n  }\n\n  /**\n   * @returns {string} the current URL\n   */\n  getCurrentUrl() {\n    return this.router.url;\n  }\n\n  /**\n   * Moves the item to a new collection based on the selected collection\n   */\n  moveToCollection() {\n    this.processing = true;\n    const move$ = this.itemDataService.moveToCollection(this.item.id, this.selectedCollection)\n      .pipe(getFirstCompletedRemoteData());\n\n    move$.subscribe((response: RemoteData<any>) => {\n      if (response.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get('item.edit.move.success'));\n      } else {\n        this.notificationsService.error(this.translateService.get('item.edit.move.error'));\n      }\n    });\n\n    move$.pipe(\n      switchMap(() => this.requestService.setStaleByHrefSubstring(this.item.id)),\n      switchMap(() =>\n        this.itemDataService.findById(\n          this.item.id,\n          false,\n          true,\n          followLink('owningCollection')\n      )),\n      getFirstCompletedRemoteData()\n    ).subscribe(() => {\n      this.processing = false;\n      this.router.navigate([getItemEditRoute(this.item)]);\n    });\n  }\n\n  discard(): void {\n    this.selectedCollection = null;\n    this.canSubmit = false;\n  }\n\n  get canMove(): boolean {\n    return this.canSubmit && this.selectedCollection?.id !== this.originalCollection.id;\n  }\n}\n","<div>\n    <div class=\"modal-header\">{{'virtual-metadata.delete-relationship.modal-head' | translate}}\n        <button type=\"button\" class=\"close\" (click)=\"close.emit()\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">×</span>\n        </button>\n    </div>\n    <div class=\"modal-body\">\n        <ng-container *ngFor=\"let item of items; trackBy: trackItem\">\n            <div *ngVar=\"(isSelectedVirtualMetadataItem(item) | async) as selected\"\n                 (click)=\"setSelectedVirtualMetadataItem(item, !selected)\"\n                 class=\"item d-flex flex-row\">\n                <div class=\"m-2\">\n                    <label>\n                        <input class=\"select\" type=\"checkbox\" [checked]=\"selected\">\n                    </label>\n                </div>\n                <div class=\"flex-column\">\n                    <ds-listable-object-component-loader [object]=\"item\">\n                    </ds-listable-object-component-loader>\n                    <div *ngFor=\"let metadata of virtualMetadata.get(item.uuid)\">\n                        <div class=\"font-weight-bold\">\n                            {{metadata.metadataField}}\n                        </div>\n                        <div>\n                            {{metadata.metadataValue.value}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n        <div class=\"d-flex flex-row-reverse m-2\">\n            <button class=\"btn btn-primary save\"\n                    (click)=\"save.emit()\">\n                <i class=\"fas fa-save\"></i> {{\"item.edit.metadata.save-button\" | translate}}\n            </button>\n        </div>\n    </div>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Item} from '../../../core/shared/item.model';\nimport {MetadataValue} from '../../../core/shared/metadata.models';\nimport {ObjectUpdatesService} from '../../../core/data/object-updates/object-updates.service';\n\n@Component({\n  selector: 'ds-virtual-metadata',\n  templateUrl: './virtual-metadata.component.html'\n})\n/**\n * Component that lists both items of a relationship, along with their virtual metadata of the relationship.\n * The component is shown when a relationship is marked to be deleted.\n * Each item has a checkbox to indicate whether its virtual metadata should be saved as real metadata.\n */\nexport class VirtualMetadataComponent implements OnInit {\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  /**\n   * The id of the relationship to be deleted.\n   */\n  @Input() relationshipId: string;\n\n  /**\n   * The left item of the relationship to be deleted.\n   */\n  @Input() leftItem: Item;\n\n  /**\n   * The right item of the relationship to be deleted.\n   */\n  @Input() rightItem: Item;\n\n  /**\n   * Emits when the close button is pressed.\n   */\n  @Output() close = new EventEmitter();\n\n  /**\n   * Emits when the save button is pressed.\n   */\n  @Output() save = new EventEmitter();\n\n  /**\n   * Get an array of the left and the right item of the relationship to be deleted.\n   */\n  get items() {\n    return [this.leftItem, this.rightItem];\n  }\n\n  public virtualMetadata: Map<string, VirtualMetadata[]> = new Map<string, VirtualMetadata[]>();\n\n  constructor(\n    protected objectUpdatesService: ObjectUpdatesService,\n  ) {\n  }\n\n  /**\n   * Get the virtual metadata of a given item corresponding to this relationship.\n   * @param item  the item to get the virtual metadata for\n   */\n  getVirtualMetadata(item: Item): VirtualMetadata[] {\n\n    return Object.entries(item.metadata)\n      .map(([key, value]) =>\n        value\n          .filter((metadata: MetadataValue) =>\n            !key.startsWith('relation') && metadata.authority && metadata.authority.endsWith(this.relationshipId))\n          .map((metadata: MetadataValue) => {\n            return {\n              metadataField: key,\n              metadataValue: metadata,\n            };\n          })\n      )\n      .reduce((previous, current) => previous.concat(current), []);\n  }\n\n  /**\n   * Select/deselect the virtual metadata of an item to be saved as real metadata.\n   * @param item      the item for which (not) to save the virtual metadata as real metadata\n   * @param selected  whether or not to save the virtual metadata as real metadata\n   */\n  setSelectedVirtualMetadataItem(item: Item, selected: boolean) {\n    this.objectUpdatesService.setSelectedVirtualMetadata(this.url, this.relationshipId, item.uuid, selected);\n  }\n\n  /**\n   * Check whether the virtual metadata of a given item is selected to be saved as real metadata\n   * @param item  the item for which to check whether the virtual metadata is selected to be saved as real metadata\n   */\n  isSelectedVirtualMetadataItem(item: Item): Observable<boolean> {\n    return this.objectUpdatesService.isSelectedVirtualMetadata(this.url, this.relationshipId, item.uuid);\n  }\n\n  /**\n   * Prevent unnecessary rerendering so fields don't lose focus\n   */\n  trackItem(index, item: Item) {\n    return item && item.uuid;\n  }\n\n  ngOnInit(): void {\n    this.items.forEach((item) => {\n      this.virtualMetadata.set(item.uuid, this.getVirtualMetadata(item));\n    });\n  }\n}\n\n/**\n * Represents a virtual metadata entry.\n */\nexport interface VirtualMetadata {\n  metadataField: string;\n  metadataValue: MetadataValue;\n}\n","<div class=\"row\" *ngIf=\"relatedItem$ | async\">\n  <div class=\"col-10 relationship\">\n    <ds-listable-object-component-loader\n      [object]=\"relatedItem$ | async\"\n      [viewMode]=\"viewMode\"\n      [value]=\"nameVariant\"\n    >\n    </ds-listable-object-component-loader>\n  </div>\n  <div class=\"col-2\">\n    <div class=\"btn-group relationship-action-buttons\">\n      <button [disabled]=\"!canRemove()\" (click)=\"openVirtualMetadataModal(virtualMetadataModal)\"\n              class=\"btn btn-outline-danger btn-sm\"\n              title=\"{{'item.edit.metadata.edit.buttons.remove' | translate}}\">\n        <i class=\"fas fa-trash-alt fa-fw\"></i>\n      </button>\n      <button [disabled]=\"!canUndo()\" (click)=\"undo()\"\n              class=\"btn btn-outline-warning btn-sm\"\n              title=\"{{'item.edit.metadata.edit.buttons.undo' | translate}}\">\n        <i class=\"fas fa-undo-alt fa-fw\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n<ng-template #virtualMetadataModal>\n  <ds-virtual-metadata\n          [relationshipId]=\"relationship.id\"\n          [leftItem]=\"leftItem$ | async\"\n          [rightItem]=\"rightItem$ | async\"\n          [url]=\"url\"\n          (close)=\"closeVirtualMetadataModal()\"\n          (save)=\"remove()\"\n  >\n  </ds-virtual-metadata>\n</ng-template>\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { combineLatest as observableCombineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport {\n  DeleteRelationship,\n  FieldUpdate,\n  RelationshipIdentifiable\n} from '../../../../core/data/object-updates/object-updates.reducer';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { Item } from '../../../../core/shared/item.model';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../../core/shared/operators';\nimport { ViewMode } from '../../../../core/shared/view-mode.model';\nimport { hasValue, isNotEmpty } from '../../../../shared/empty.util';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ds-edit-relationship',\n  styleUrls: ['./edit-relationship.component.scss'],\n  templateUrl: './edit-relationship.component.html',\n})\nexport class EditRelationshipComponent implements OnChanges {\n  /**\n   * The current field, value and state of the relationship\n   */\n  @Input() fieldUpdate: FieldUpdate;\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  /**\n   * The item being edited\n   */\n  @Input() editItem: Item;\n\n  /**\n   * The relationship being edited\n   */\n  get relationship() {\n    return this.update.relationship;\n  }\n\n  get update() {\n    return this.fieldUpdate.field as RelationshipIdentifiable;\n  }\n\n  get nameVariant() {\n    return this.update.nameVariant;\n  }\n\n  public leftItem$: Observable<Item>;\n  public rightItem$: Observable<Item>;\n\n  /**\n   * The related item of this relationship\n   */\n  relatedItem$: Observable<Item>;\n\n  /**\n   * The view-mode we're currently on\n   */\n  viewMode = ViewMode.ListElement;\n\n  /**\n   * Reference to NgbModal\n   */\n  public modalRef: NgbModalRef;\n\n  constructor(\n    private objectUpdatesService: ObjectUpdatesService,\n    private modalService: NgbModal,\n  ) {\n  }\n\n  /**\n   * Sets the current relationship based on the fieldUpdate input field\n   */\n  ngOnChanges(): void {\n    if (this.relationship && (!!this.relationship.leftItem || !!this.relationship.rightItem)) {\n      this.leftItem$ = this.relationship.leftItem.pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid))\n      );\n      this.rightItem$ = this.relationship.rightItem.pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid))\n      );\n      this.relatedItem$ = observableCombineLatest(\n        this.leftItem$,\n        this.rightItem$,\n      ).pipe(\n        map((items: Item[]) =>\n          items.find((item) => item.uuid !== this.editItem.uuid)\n        )\n      );\n    } else {\n      this.relatedItem$ = of(this.update.relatedItem);\n    }\n  }\n\n  /**\n   * Sends a new remove update for this field to the object updates service\n   */\n  remove(): void {\n    this.closeVirtualMetadataModal();\n    observableCombineLatest(\n      this.leftItem$,\n      this.rightItem$,\n    ).pipe(\n      map((items: Item[]) =>\n        items.map((item) => this.objectUpdatesService\n          .isSelectedVirtualMetadata(this.url, this.relationship.id, item.uuid))\n      ),\n      switchMap((selection$) => observableCombineLatest(selection$)),\n      map((selection: boolean[]) => {\n        return Object.assign({},\n          this.fieldUpdate.field,\n          {\n            keepLeftVirtualMetadata: selection[0] === true,\n            keepRightVirtualMetadata: selection[1] === true,\n          }\n        ) as DeleteRelationship;\n      }),\n      take(1),\n    ).subscribe((deleteRelationship: DeleteRelationship) =>\n      this.objectUpdatesService.saveRemoveFieldUpdate(this.url, deleteRelationship)\n    );\n  }\n\n  openVirtualMetadataModal(content: any) {\n    this.modalRef = this.modalService.open(content);\n  }\n\n  closeVirtualMetadataModal() {\n    this.modalRef.close();\n  }\n\n  /**\n   * Cancels the current update for this field in the object updates service\n   */\n  undo(): void {\n    this.objectUpdatesService.removeSingleFieldUpdate(this.url, this.fieldUpdate.field.uuid);\n  }\n\n  /**\n   * Check if a user should be allowed to remove this field\n   */\n  canRemove(): boolean {\n    return this.fieldUpdate.changeType !== FieldChangeType.REMOVE\n      && this.fieldUpdate.changeType !== FieldChangeType.ADD;\n  }\n\n  /**\n   * Check if a user should be allowed to cancel the update to this field\n   */\n  canUndo(): boolean {\n    return this.fieldUpdate.changeType >= 0;\n  }\n}\n","<h5>\n    {{getRelationshipMessageKey() | async | translate}}\n    <button class=\"ml-2 btn btn-success\" [disabled]=\"(hasChanges | async)\" (click)=\"openLookup()\">\n        <i class=\"fas fa-plus\"></i>\n        <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.relationships.edit.buttons.add\" | translate}}</span>\n    </button>\n</h5>\n<ng-container *ngVar=\"updates$ | async as updates\">\n    <ng-container *ngIf=\"updates && !(loading$ | async)\">\n        <ng-container *ngVar=\"updates | dsObjectValues as updateValues\">\n          <ds-pagination\n            [paginationOptions]=\"paginationConfig\"\n            [pageInfoState]=\"(relationshipsRd$ | async)?.payload?.pageInfo\"\n            [collectionSize]=\"(relationshipsRd$ | async)?.payload?.totalElements + (this.nbAddedFields$ | async)\"\n            [hideGear]=\"true\"\n            [hidePagerWhenSinglePage]=\"true\">\n            <div class=\"my-2\">\n              <ds-edit-relationship *ngFor=\"let updateValue of updateValues; trackBy: trackUpdate\"\n                                    class=\"relationship-row d-block alert\"\n                                    [fieldUpdate]=\"updateValue || {}\"\n                                    [url]=\"url\"\n                                    [editItem]=\"item\"\n                                    [ngClass]=\"{\n                                        'alert-success': updateValue.changeType === 1,\n                                        'alert-warning': updateValue.changeType === 0,\n                                        'alert-danger': updateValue.changeType === 2\n                                  }\">\n              </ds-edit-relationship>\n            </div>\n          </ds-pagination>\n          <div *ngIf=\"updateValues.length === 0\">{{\"item.edit.relationships.no-relationships\" | translate}}</div>\n        </ng-container>\n    </ng-container>\n    <ds-loading *ngIf=\"loading$ | async\"></ds-loading>\n</ng-container>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { LinkService } from '../../../../core/cache/builders/link.service';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  from as observableFrom,\n  Observable,\n  Subscription\n} from 'rxjs';\nimport {\n  FieldUpdate,\n  FieldUpdates,\n  RelationshipIdentifiable\n} from '../../../../core/data/object-updates/object-updates.reducer';\nimport { RelationshipService } from '../../../../core/data/relationship.service';\nimport { Item } from '../../../../core/shared/item.model';\nimport { defaultIfEmpty, map, mergeMap, startWith, switchMap, take, tap, toArray } from 'rxjs/operators';\nimport { hasNoValue, hasValue, hasValueOperator } from '../../../../shared/empty.util';\nimport { Relationship } from '../../../../core/shared/item-relationships/relationship.model';\nimport { RelationshipType } from '../../../../core/shared/item-relationships/relationship-type.model';\nimport {\n  getAllSucceededRemoteData,\n  getFirstSucceededRemoteData,\n  getFirstSucceededRemoteDataPayload,\n  getRemoteDataPayload,\n} from '../../../../core/shared/operators';\nimport { ItemType } from '../../../../core/shared/item-relationships/item-type.model';\nimport { DsDynamicLookupRelationModalComponent } from '../../../../shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { RelationshipOptions } from '../../../../shared/form/builder/models/relationship-options.model';\nimport { SelectableListService } from '../../../../shared/object-list/selectable-list/selectable-list.service';\nimport { SearchResult } from '../../../../shared/search/models/search-result.model';\nimport { followLink } from '../../../../shared/utils/follow-link-config.model';\nimport { PaginatedList } from '../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { Collection } from '../../../../core/shared/collection.model';\nimport { PaginationComponentOptions } from '../../../../shared/pagination/pagination-component-options.model';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\nimport { RelationshipTypeService } from '../../../../core/data/relationship-type.service';\n\n@Component({\n  selector: 'ds-edit-relationship-list',\n  styleUrls: ['./edit-relationship-list.component.scss'],\n  templateUrl: './edit-relationship-list.component.html',\n})\n/**\n * A component creating a list of editable relationships of a certain type\n * The relationships are rendered as a list of related items\n */\nexport class EditRelationshipListComponent implements OnInit, OnDestroy {\n\n  /**\n   * The item to display related items for\n   */\n  @Input() item: Item;\n\n  @Input() itemType: ItemType;\n\n  /**\n   * The URL to the current page\n   * Used to fetch updates for the current item from the store\n   */\n  @Input() url: string;\n\n  /**\n   * The label of the relationship-type we're rendering a list for\n   */\n  @Input() relationshipType: RelationshipType;\n\n  /**\n   * If updated information has changed\n   */\n  @Input() hasChanges!: Observable<boolean>;\n\n  /**\n   * The event emmiter to submit the new information\n   */\n  @Output() submit: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Observable that emits the left and right item type of {@link relationshipType} simultaneously.\n   */\n  private relationshipLeftAndRightType$: Observable<[ItemType, ItemType]>;\n\n  /**\n   * Observable that emits true if {@link itemType} is on the left-hand side of {@link relationshipType},\n   * false if it is on the right-hand side and undefined in the rare case that it is on neither side.\n   */\n  private currentItemIsLeftItem$: Observable<boolean>;\n\n  private relatedEntityType$: Observable<ItemType>;\n\n  /**\n   * The list ID to save selected entities under\n   */\n  listId: string;\n\n  /**\n   * The FieldUpdates for the relationships in question\n   */\n  updates$: BehaviorSubject<FieldUpdates> = new BehaviorSubject(undefined);\n\n  /**\n   * The RemoteData for the relationships\n   */\n  relationshipsRd$: BehaviorSubject<RemoteData<PaginatedList<Relationship>>> = new BehaviorSubject(undefined);\n\n  /**\n   * Whether the current page is the last page\n   */\n  isLastPage$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n\n  /**\n   * Whether we're loading\n   */\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n\n  /**\n   * The number of added fields that haven't been saved yet\n   */\n  nbAddedFields$: BehaviorSubject<number> = new BehaviorSubject(0);\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * The pagination config\n   */\n  paginationConfig: PaginationComponentOptions;\n\n  /**\n   * A reference to the lookup window\n   */\n  modalRef: NgbModalRef;\n\n\n  constructor(\n    protected objectUpdatesService: ObjectUpdatesService,\n    protected linkService: LinkService,\n    protected relationshipService: RelationshipService,\n    protected relationshipTypeService: RelationshipTypeService,\n    protected modalService: NgbModal,\n    protected paginationService: PaginationService,\n    protected selectableListService: SelectableListService,\n  ) {\n  }\n\n  /**\n   * Get the i18n message key for this relationship type\n   */\n  public getRelationshipMessageKey(): Observable<string> {\n\n    return observableCombineLatest(\n      this.getLabel(),\n      this.relatedEntityType$,\n    ).pipe(\n      map(([label, relatedEntityType]) => {\n        if (hasValue(label) && label.indexOf('is') > -1 && label.indexOf('Of') > -1) {\n          const relationshipLabel = `${label.substring(2, label.indexOf('Of'))}`;\n          if (relationshipLabel !== relatedEntityType.label) {\n            return `relationships.is${relationshipLabel}Of.${relatedEntityType.label}`;\n          } else {\n            return `relationships.is${relationshipLabel}Of`;\n          }\n        } else {\n          return label;\n        }\n      }),\n    );\n  }\n\n  /**\n   * Get the relevant label for this relationship type\n   */\n  private getLabel(): Observable<string> {\n    return observableCombineLatest([\n      this.relationshipType.leftType,\n      this.relationshipType.rightType,\n    ].map((itemTypeRD) => itemTypeRD.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    ))).pipe(\n      map((itemTypes: ItemType[]) => [\n        this.relationshipType.leftwardType,\n        this.relationshipType.rightwardType,\n      ][itemTypes.findIndex((itemType) => itemType.id === this.itemType.id)]),\n    );\n  }\n\n  /**\n   * Prevent unnecessary rerendering so fields don't lose focus\n   */\n  trackUpdate(index, update: FieldUpdate) {\n    return update && update.field ? update.field.uuid : undefined;\n  }\n\n  /**\n   * Open the dynamic lookup modal to search for items to add as relationships\n   */\n  openLookup() {\n\n    this.modalRef = this.modalService.open(DsDynamicLookupRelationModalComponent, {\n      size: 'lg'\n    });\n    const modalComp: DsDynamicLookupRelationModalComponent = this.modalRef.componentInstance;\n    modalComp.repeatable = true;\n    modalComp.isEditRelationship = true;\n    modalComp.listId = this.listId;\n    modalComp.item = this.item;\n    modalComp.relationshipType = this.relationshipType;\n    modalComp.currentItemIsLeftItem$ = this.currentItemIsLeftItem$;\n    modalComp.toAdd = [];\n    modalComp.toRemove = [];\n    modalComp.isPending = false;\n\n    this.item.owningCollection.pipe(\n      getFirstSucceededRemoteDataPayload()\n    ).subscribe((collection: Collection) => {\n      modalComp.collection = collection;\n    });\n\n    modalComp.select = (...selectableObjects: SearchResult<Item>[]) => {\n      selectableObjects.forEach((searchResult) => {\n        const relatedItem: Item = searchResult.indexableObject;\n\n        const foundIndex = modalComp.toRemove.findIndex( el => el.uuid === relatedItem.uuid);\n\n        if (foundIndex !== -1) {\n          modalComp.toRemove.splice(foundIndex,1);\n        } else {\n\n          this.getRelationFromId(relatedItem)\n            .subscribe((relationship: Relationship) => {\n              if (!relationship ) {\n                modalComp.toAdd.push(searchResult);\n              } else {\n                const foundIndexRemove = modalComp.toRemove.findIndex( el => el.indexableObject.uuid === relatedItem.uuid);\n                if (foundIndexRemove !== -1) {\n                  modalComp.toRemove.splice(foundIndexRemove,1);\n                }\n              }\n\n              this.loading$.next(true);\n              // emit the last page again to trigger a fieldupdates refresh\n              this.relationshipsRd$.next(this.relationshipsRd$.getValue());\n            });\n        }\n      });\n    };\n    modalComp.deselect = (...selectableObjects: SearchResult<Item>[]) => {\n      selectableObjects.forEach((searchResult) => {\n        const relatedItem: Item = searchResult.indexableObject;\n\n        const foundIndex = modalComp.toAdd.findIndex( el => el.indexableObject.uuid === relatedItem.uuid);\n\n        if (foundIndex !== -1) {\n          modalComp.toAdd.splice(foundIndex,1);\n        } else {\n          modalComp.toRemove.push(searchResult);\n        }\n      });\n    };\n\n\n\n    modalComp.submitEv = () => {\n\n      const subscriptions = [];\n\n      modalComp.toAdd.forEach((searchResult: SearchResult<Item>) => {\n        const relatedItem = searchResult.indexableObject;\n        subscriptions.push(this.relationshipService.getNameVariant(this.listId, relatedItem.uuid).pipe(\n          map((nameVariant) => {\n          const update = {\n            uuid: this.relationshipType.id + '-' + searchResult.indexableObject.uuid,\n            nameVariant,\n            type: this.relationshipType,\n            relatedItem,\n          } as RelationshipIdentifiable;\n          this.objectUpdatesService.saveAddFieldUpdate(this.url, update);\n          return update;\n        })\n        ));\n      });\n\n      modalComp.toRemove.forEach( (searchResult) => {\n        subscriptions.push(this.relationshipService.getNameVariant(this.listId, searchResult.indexableObjectuuid).pipe(\n          switchMap((nameVariant) => {\n            return this.getRelationFromId(searchResult.indexableObject).pipe(\n              map( (relationship: Relationship) => {\n                const update = {\n                  uuid: relationship.id,\n                  nameVariant,\n                  type: this.relationshipType,\n                  relationship,\n                } as RelationshipIdentifiable;\n                this.objectUpdatesService.saveRemoveFieldUpdate(this.url,update);\n                return update;\n              })\n            );\n          })\n        ));\n      });\n\n      observableCombineLatest(subscriptions).subscribe( (res) => {\n        // Wait until the states changes since there are multiple items\n        setTimeout( () => {\n          this.submit.emit();\n        },1000);\n\n        modalComp.isPending = true;\n      });\n    };\n\n\n    modalComp.discardEv = () => {\n      modalComp.toAdd.forEach( (searchResult) => {\n        this.selectableListService.deselectSingle(this.listId,searchResult);\n      });\n\n      modalComp.toRemove.forEach( (searchResult) => {\n        this.selectableListService.selectSingle(this.listId,searchResult);\n      });\n\n      modalComp.toAdd = [];\n      modalComp.toRemove = [];\n    };\n\n    this.relatedEntityType$\n      .pipe(take(1))\n      .subscribe((relatedEntityType) => {\n        modalComp.relationshipOptions = Object.assign(\n          new RelationshipOptions(), {\n            relationshipType: relatedEntityType.label,\n            searchConfiguration: relatedEntityType.label.toLowerCase(),\n            nameVariants: 'true',\n          }\n        );\n      });\n\n    this.selectableListService.deselectAll(this.listId);\n  }\n\n  getRelationFromId(relatedItem) {\n    return this.currentItemIsLeftItem$.pipe(\n      take(1),\n      switchMap( isLeft => {\n        let apiCall;\n        if (isLeft) {\n          apiCall = this.relationshipService.searchByItemsAndType( this.relationshipType.id, this.item.uuid, this.relationshipType.leftwardType ,[relatedItem.id] ).pipe(\n                      getFirstSucceededRemoteData(),\n                      getRemoteDataPayload(),\n                    );\n        } else {\n          apiCall = this.relationshipService.searchByItemsAndType( this.relationshipType.id, this.item.uuid, this.relationshipType.rightwardType ,[relatedItem.id] ).pipe(\n                      getFirstSucceededRemoteData(),\n                      getRemoteDataPayload(),\n                    );\n        }\n\n        return apiCall.pipe(\n          map( (res: PaginatedList<Relationship>) => res.page[0])\n        );\n      }\n    ));\n  }\n\n\n\n  /**\n   * Get the existing field updates regarding a relationship with a given item\n   * @param relatedItem The item for which to get the existing field updates\n   */\n  private getFieldUpdatesForRelatedItem(relatedItem: Item): Observable<RelationshipIdentifiable[]> {\n    return this.updates$.pipe(\n      take(1),\n      map((updates) => Object.values(updates)\n        .map((update) => update.field as RelationshipIdentifiable)\n        .filter((field) => field.relationship)\n      ),\n      mergeMap((identifiables) =>\n        observableCombineLatest(\n          identifiables.map((identifiable) => this.getRelatedItem(identifiable.relationship))\n        ).pipe(\n          defaultIfEmpty([]),\n          map((relatedItems) => {\n            return identifiables.filter( (identifiable, index) => {\n                return relatedItems[index].uuid === relatedItem.uuid;\n            });\n          }\n          ),\n        )\n      )\n    );\n  }\n\n  /**\n   * Check if the given item is related with the item we are editing relationships\n   * @param relatedItem The item for which to get the existing field updates\n   */\n  private getIsRelatedItem(relatedItem: Item): Observable<boolean> {\n\n    return this.currentItemIsLeftItem$.pipe(\n      take(1),\n      map( isLeft => {\n        if (isLeft) {\n          const listOfRelatedItems = this.item.allMetadataValues( 'relation.' + this.relationshipType.leftwardType );\n          return !!listOfRelatedItems.find( (uuid) => uuid === relatedItem.uuid );\n        } else {\n          const listOfRelatedItems = this.item.allMetadataValues( 'relation.' + this.relationshipType.rightwardType );\n          return !!listOfRelatedItems.find( (uuid) => uuid === relatedItem.uuid );\n        }\n      })\n    );\n  }\n\n  /**\n   * Get the related item for a given relationship\n   * @param relationship  The relationship for which to get the related item\n   */\n  private getRelatedItem(relationship: Relationship): Observable<Item> {\n    return this.relationshipService.isLeftItem(relationship, this.item).pipe(\n      switchMap((isLeftItem) => isLeftItem ? relationship.rightItem : relationship.leftItem),\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    ) as Observable<Item>;\n  }\n\n  ngOnInit(): void {\n\n    // store the left and right type of the relationship in a single observable\n    this.relationshipLeftAndRightType$ = observableCombineLatest([\n      this.relationshipType.leftType,\n      this.relationshipType.rightType,\n    ].map((type) => type.pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n    ))) as Observable<[ItemType, ItemType]>;\n\n    this.relatedEntityType$ = this.relationshipLeftAndRightType$.pipe(\n      map((relatedTypes: ItemType[]) => relatedTypes.find((relatedType) => relatedType.uuid !== this.itemType.uuid)),\n      hasValueOperator()\n    );\n\n    this.relatedEntityType$.pipe(\n      take(1)\n    ).subscribe(\n      (relatedEntityType) => this.listId = `edit-relationship-${this.itemType.id}-${relatedEntityType.id}`\n    );\n\n    this.currentItemIsLeftItem$ = this.relationshipLeftAndRightType$.pipe(\n      map(([leftType, rightType]: [ItemType, ItemType]) => {\n        if (leftType.id === this.itemType.id) {\n          return true;\n        }\n\n        if (rightType.id === this.itemType.id) {\n          return false;\n        }\n\n        // should never happen...\n        console.warn(`The item ${this.item.uuid} is not on the right or the left side of relationship type ${this.relationshipType.uuid}`);\n        return undefined;\n      })\n    );\n\n\n    // initialize the pagination options\n    this.paginationConfig = new PaginationComponentOptions();\n    this.paginationConfig.id = `er${this.relationshipType.id}`;\n    this.paginationConfig.pageSize = 5;\n    this.paginationConfig.currentPage = 1;\n\n    // get the pagination params from the route\n    const currentPagination$ = this.paginationService.getCurrentPagination(\n      this.paginationConfig.id,\n      this.paginationConfig\n    ).pipe(\n      tap(() => this.loading$.next(true))\n    );\n\n    this.subs.push(\n      observableCombineLatest([\n        currentPagination$,\n        this.currentItemIsLeftItem$,\n      ]).pipe(\n        switchMap(([currentPagination, currentItemIsLeftItem]: [PaginationComponentOptions, boolean]) =>\n          // get the relationships for the current item, relationshiptype and page\n          this.relationshipService.getItemRelationshipsByLabel(\n            this.item,\n            currentItemIsLeftItem ? this.relationshipType.leftwardType : this.relationshipType.rightwardType,\n            {\n              elementsPerPage: currentPagination.pageSize,\n              currentPage: currentPagination.currentPage,\n            },\n            false,\n            true,\n            followLink('leftItem'),\n            followLink('rightItem'),\n          )),\n      ).subscribe((rd: RemoteData<PaginatedList<Relationship>>) => {\n        this.relationshipsRd$.next(rd);\n      })\n    );\n\n    // keep isLastPage$ up to date based on relationshipsRd$\n    this.subs.push(this.relationshipsRd$.pipe(\n      hasValueOperator(),\n      getAllSucceededRemoteData()\n    ).subscribe((rd: RemoteData<PaginatedList<Relationship>>) => {\n      this.isLastPage$.next(hasNoValue(rd.payload._links.next));\n    }));\n\n    this.subs.push(this.relationshipsRd$.pipe(\n      hasValueOperator(),\n      getAllSucceededRemoteData(),\n      switchMap((rd: RemoteData<PaginatedList<Relationship>>) =>\n        // emit each relationship in the page separately\n        observableFrom(rd.payload.page).pipe(\n          mergeMap((relationship: Relationship) =>\n            // check for each relationship whether it's the left item\n            this.relationshipService.isLeftItem(relationship, this.item).pipe(\n              // emit an array containing both the relationship and whether it's the left item,\n              // as we'll need both\n              map((isLeftItem: boolean) => [relationship, isLeftItem])\n            )\n          ),\n          map(([relationship, isLeftItem]: [Relationship, boolean]) => {\n            // turn it into a RelationshipIdentifiable, an\n            const nameVariant =\n              isLeftItem ? relationship.rightwardValue : relationship.leftwardValue;\n            return {\n              uuid: relationship.id,\n              type: this.relationshipType,\n              relationship,\n              nameVariant,\n            } as RelationshipIdentifiable;\n          }),\n          // wait until all relationships have been processed, and emit them all as a single array\n          toArray(),\n          // if the pipe above completes without emitting anything, emit an empty array instead\n          defaultIfEmpty([])\n      )),\n      switchMap((nextFields: RelationshipIdentifiable[]) => {\n        // Get a list that contains the unsaved changes for the page, as well as the page of\n        // RelationshipIdentifiables, as a single list of FieldUpdates\n        return this.objectUpdatesService.getFieldUpdates(this.url, nextFields).pipe(\n          map((fieldUpdates: FieldUpdates) => {\n            const fieldUpdatesFiltered: FieldUpdates = {};\n            this.nbAddedFields$.next(0);\n            // iterate over the fieldupdates and filter out the ones that pertain to this\n            // relationshiptype\n            Object.keys(fieldUpdates).forEach((uuid) => {\n              if (hasValue(fieldUpdates[uuid])) {\n                const field = fieldUpdates[uuid].field as RelationshipIdentifiable;\n                // only include fieldupdates regarding this RelationshipType\n                if (field.type.id === this.relationshipType.id) {\n                  // if it's a newly added relationship\n                  if (fieldUpdates[uuid].changeType === FieldChangeType.ADD) {\n                    // increase the counter that tracks new relationships\n                    this.nbAddedFields$.next(this.nbAddedFields$.getValue() + 1);\n                    if (this.isLastPage$.getValue() === true) {\n                      // only include newly added relationships to the output if we're on the last\n                      // page\n                      fieldUpdatesFiltered[uuid] = fieldUpdates[uuid];\n                    }\n                  } else {\n                    // include all others\n                    fieldUpdatesFiltered[uuid] = fieldUpdates[uuid];\n                  }\n                }\n              }\n            });\n            return fieldUpdatesFiltered;\n          }),\n        );\n      }),\n      startWith({}),\n    ).subscribe((updates: FieldUpdates) => {\n      this.loading$.next(false);\n      this.updates$.next(updates);\n    }));\n  }\n\n  ngOnDestroy(): void {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","<div class=\"item-relationships\">\n  <ng-container *ngVar=\"entityType$ | async as entityType\">\n    <ng-container *ngIf=\"entityType\">\n      <div class=\"button-row top d-flex\">\n        <button class=\"btn btn-danger ml-auto\" *ngIf=\"!(isReinstatable() | async)\"\n                [disabled]=\"!(hasChanges() | async)\"\n                (click)=\"discard()\"><i\n          class=\"fas fa-times\"></i>\n          <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-warning ml-auto\" *ngIf=\"isReinstatable() | async\"\n                (click)=\"reinstate()\"><i\n          class=\"fas fa-undo-alt\"></i>\n          <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n        </button>\n        <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async)\"\n                (click)=\"submit()\"><i\n          class=\"fas fa-save\"></i>\n          <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n        </button>\n      </div>\n      <ng-container *ngVar=\"relationshipTypes$ | async as relationshipTypes\">\n        <ng-container *ngIf=\"relationshipTypes\">\n          <div *ngFor=\"let relationshipType of relationshipTypes\" class=\"mb-4\">\n            <ds-edit-relationship-list\n              [url]=\"url\"\n              [item]=\"item\"\n              [itemType]=\"entityType$ | async\"\n              [relationshipType]=\"relationshipType\"\n              [hasChanges] = hasChanges()\n              (submit) = submit()\n            ></ds-edit-relationship-list>\n          </div>\n        </ng-container>\n        <ds-loading *ngIf=\"!relationshipTypes\"></ds-loading>\n      </ng-container>\n      <div class=\"button-row bottom\">\n        <div class=\"float-right\">\n          <button class=\"btn btn-danger\" *ngIf=\"!(isReinstatable() | async)\"\n                  [disabled]=\"!(hasChanges() | async)\"\n                  (click)=\"discard()\"><i\n            class=\"fas fa-times\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n          </button>\n          <button class=\"btn btn-warning\" *ngIf=\"isReinstatable() | async\"\n                  (click)=\"reinstate()\"><i\n            class=\"fas fa-undo-alt\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.reinstate-button\" | translate}}</span>\n          </button>\n          <button class=\"btn btn-primary\" [disabled]=\"!(hasChanges() | async)\"\n                  (click)=\"submit()\"><i\n            class=\"fas fa-save\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n          </button>\n        </div>\n      </div>\n    </ng-container>\n    <div *ngIf=\"!entityType\"\n         class=\"alert alert-info mt-2\" role=\"alert\">\n      {{ 'item.edit.relationships.no-entity-type' | translate }}\n    </div>\n  </ng-container>\n</div>\n","import { ChangeDetectorRef, Component } from '@angular/core';\nimport { Item } from '../../../core/shared/item.model';\nimport {\n  DeleteRelationship,\n  FieldUpdate,\n  FieldUpdates,\n  RelationshipIdentifiable,\n} from '../../../core/data/object-updates/object-updates.reducer';\nimport { map, startWith, switchMap, take } from 'rxjs/operators';\nimport { combineLatest as observableCombineLatest, of as observableOf, zip as observableZip, Observable } from 'rxjs';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { AbstractItemUpdateComponent } from '../abstract-item-update/abstract-item-update.component';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RelationshipService } from '../../../core/data/relationship.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { ObjectCacheService } from '../../../core/cache/object-cache.service';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../core/shared/operators';\nimport { RequestService } from '../../../core/data/request.service';\nimport { RelationshipType } from '../../../core/shared/item-relationships/relationship-type.model';\nimport { ItemType } from '../../../core/shared/item-relationships/item-type.model';\nimport { EntityTypeService } from '../../../core/data/entity-type.service';\nimport { FieldChangeType } from '../../../core/data/object-updates/object-updates.actions';\nimport { Relationship } from '../../../core/shared/item-relationships/relationship.model';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { hasValue } from '../../../shared/empty.util';\nimport { RelationshipTypeService } from '../../../core/data/relationship-type.service';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'ds-item-relationships',\n  styleUrls: ['./item-relationships.component.scss'],\n  templateUrl: './item-relationships.component.html',\n})\n/**\n * Component for displaying an item's relationships edit page\n */\nexport class ItemRelationshipsComponent extends AbstractItemUpdateComponent {\n\n\n  /**\n   * The allowed relationship types for this type of item as an observable list\n   */\n  relationshipTypes$: Observable<RelationshipType[]>;\n\n  /**\n   * The item's entity type as an observable\n   */\n  entityType$: Observable<ItemType>;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute,\n    public relationshipService: RelationshipService,\n    public objectCache: ObjectCacheService,\n    public requestService: RequestService,\n    public entityTypeService: EntityTypeService,\n    protected relationshipTypeService: RelationshipTypeService,\n    public cdr: ChangeDetectorRef,\n    protected modalService: NgbModal,\n  ) {\n    super(itemService, objectUpdatesService, router, notificationsService, translateService, route);\n  }\n\n  /**\n   * Initialize the values and updates of the current item's relationship fields\n   */\n  public initializeUpdates(): void {\n\n    const label = this.item.firstMetadataValue('dspace.entity.type');\n    if (label !== undefined) {\n      this.relationshipTypes$ = this.relationshipTypeService.searchByEntityType(label, true, true, ...this.getRelationshipTypeFollowLinks())\n      .pipe(\n        map((relationshipTypes: PaginatedList<RelationshipType>) => relationshipTypes.page)\n      );\n\n      this.entityType$ = this.entityTypeService.getEntityTypeByLabel(label).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n      );\n\n    } else {\n      this.entityType$ = observableOf(undefined);\n    }\n  }\n\n  /**\n   * Initialize the prefix for notification messages\n   */\n  public initializeNotificationsPrefix(): void {\n    this.notificationsPrefix = 'item.edit.relationships.notifications.';\n  }\n\n  /**\n   * Resolve the currently selected related items back to relationships and send a delete request for each of the relationships found\n   * Make sure the lists are refreshed afterwards and notifications are sent for success and errors\n   */\n  public submit(): void {\n\n    // Get all the relationships that should be removed\n    const removedRelationshipIDs$: Observable<DeleteRelationship[]> = this.relationshipService.getItemRelationshipsArray(this.item).pipe(\n      startWith([]),\n      map((relationships: Relationship[]) => relationships.map((relationship) =>\n        Object.assign(new Relationship(), relationship, { uuid: relationship.id })\n      )),\n      switchMap((relationships: Relationship[]) => {\n        return this.objectUpdatesService.getFieldUpdatesExclusive(this.url, relationships) as Observable<FieldUpdates>;\n      }),\n      map((fieldUpdates: FieldUpdates) =>\n        Object.values(fieldUpdates)\n          .filter((fieldUpdate: FieldUpdate) => fieldUpdate.changeType === FieldChangeType.REMOVE)\n          .map((fieldUpdate: FieldUpdate) => fieldUpdate.field as DeleteRelationship)\n      ),\n    );\n\n    const addRelatedItems$: Observable<RelationshipIdentifiable[]> = this.objectUpdatesService.getFieldUpdates(this.url, []).pipe(\n      map((fieldUpdates: FieldUpdates) =>\n        Object.values(fieldUpdates)\n          .filter((fieldUpdate: FieldUpdate) => hasValue(fieldUpdate))\n          .filter((fieldUpdate: FieldUpdate) => fieldUpdate.changeType === FieldChangeType.ADD)\n          .map((fieldUpdate: FieldUpdate) => fieldUpdate.field as RelationshipIdentifiable)\n      ),\n    );\n\n    observableCombineLatest(\n      removedRelationshipIDs$,\n      addRelatedItems$,\n    ).pipe(\n      take(1),\n    ).subscribe(([removeRelationshipIDs, addRelatedItems]) => {\n      const actions = [\n        this.deleteRelationships(removeRelationshipIDs),\n        this.addRelationships(addRelatedItems),\n      ];\n      actions.forEach((action) =>\n        action.subscribe((response) => {\n          if (response.length > 0) {\n            this.initializeOriginalFields();\n            this.cdr.detectChanges();\n            this.displayNotifications(response);\n            this.modalService.dismissAll();\n          }\n        })\n      );\n    });\n  }\n\n  deleteRelationships(deleteRelationshipIDs: DeleteRelationship[]): Observable<RemoteData<NoContent>[]> {\n    return observableZip(...deleteRelationshipIDs.map((deleteRelationship) => {\n        let copyVirtualMetadata: string;\n        if (deleteRelationship.keepLeftVirtualMetadata && deleteRelationship.keepRightVirtualMetadata) {\n          copyVirtualMetadata = 'all';\n        } else if (deleteRelationship.keepLeftVirtualMetadata) {\n          copyVirtualMetadata = 'left';\n        } else if (deleteRelationship.keepRightVirtualMetadata) {\n          copyVirtualMetadata = 'right';\n        } else {\n          copyVirtualMetadata = 'none';\n        }\n        return this.relationshipService.deleteRelationship(deleteRelationship.uuid, copyVirtualMetadata);\n      }\n    ));\n  }\n\n  addRelationships(addRelatedItems: RelationshipIdentifiable[]): Observable<RemoteData<Relationship>[]> {\n    return observableZip(...addRelatedItems.map((addRelationship) =>\n      this.entityType$.pipe(\n        switchMap((entityType) => this.entityTypeService.isLeftType(addRelationship.type, entityType)),\n        switchMap((isLeftType) => {\n          let leftItem: Item;\n          let rightItem: Item;\n          let leftwardValue: string;\n          let rightwardValue: string;\n          if (isLeftType) {\n            leftItem = this.item;\n            rightItem = addRelationship.relatedItem;\n            leftwardValue = null;\n            rightwardValue = addRelationship.nameVariant;\n          } else {\n            leftItem = addRelationship.relatedItem;\n            rightItem = this.item;\n            leftwardValue = addRelationship.nameVariant;\n            rightwardValue = null;\n          }\n          return this.relationshipService.addRelationship(addRelationship.type.id, leftItem, rightItem, leftwardValue, rightwardValue);\n        }),\n      )\n    ));\n  }\n\n  /**\n   * Display notifications\n   * - Error notification for each failed response with their message\n   * - Success notification in case there's at least one successful response\n   * @param responses\n   */\n  displayNotifications(responses: RemoteData<NoContent>[]) {\n    const failedResponses = responses.filter((response: RemoteData<NoContent>) => response.hasFailed);\n    const successfulResponses = responses.filter((response: RemoteData<NoContent>) => response.hasSucceeded);\n\n    failedResponses.forEach((response: RemoteData<NoContent>) => {\n      this.notificationsService.error(this.getNotificationTitle('failed'), response.errorMessage);\n    });\n    if (successfulResponses.length > 0) {\n      this.notificationsService.success(this.getNotificationTitle('saved'), this.getNotificationContent('saved'));\n    }\n  }\n  /**\n   * Sends all initial values of this item to the object updates service\n   */\n  public initializeOriginalFields() {\n    return this.relationshipService.getRelatedItems(this.item).pipe(\n      take(1),\n    ).subscribe((items: Item[]) => {\n      this.objectUpdatesService.initialize(this.url, items, this.item.lastModified);\n    });\n  }\n\n\n  getRelationshipTypeFollowLinks() {\n    return [\n      followLink('leftType'),\n      followLink('rightType')\n    ];\n  }\n\n}\n","<div class=\"mt-2\" *ngVar=\"(itemRD$ | async)?.payload as item\">\n  <ds-item-versions *ngIf=\"item\" [item]=\"item\" [displayWhenEmpty]=\"true\" [displayTitle]=\"false\"\n                    [displayActions]=\"true\"></ds-item-versions>\n</div>\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { Item } from '../../../core/shared/item.model';\nimport { map } from 'rxjs/operators';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { AlertType } from '../../../shared/alert/aletr-type';\n\n@Component({\n  selector: 'ds-item-version-history',\n  templateUrl: './item-version-history.component.html'\n})\n/**\n * Component for listing and managing an item's version history\n */\nexport class ItemVersionHistoryComponent {\n  /**\n   * The item to display the version history for\n   */\n  itemRD$: Observable<RemoteData<Item>>;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  AlertTypeEnum = AlertType;\n\n  constructor(private route: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.itemRD$ = this.route.parent.parent.data.pipe(map((data) => data.dso)).pipe(getFirstSucceededRemoteData()) as Observable<RemoteData<Item>>;\n  }\n}\n","<div class=\"container\">\n  <ds-alert [type]=\"'alert-info'\" [content]=\"'item.edit.authorizations.heading'\"></ds-alert>\n  <ds-resource-policies [resourceType]=\"'item'\" [resourceUUID]=\"(getItemUUID() | async)\"></ds-resource-policies>\n  <ng-container *ngFor=\"let bundle of (getItemBundles() | async); trackById\">\n    <ds-resource-policies [resourceType]=\"'bundle'\"\n                          [resourceUUID]=\"bundle.id\"></ds-resource-policies>\n    <ng-container *ngFor=\"let bitstream of (bundleBitstreamsMap.get(bundle.id) | async)?.page; trackById\">\n      <ds-resource-policies [resourceType]=\"'bitstream'\"\n                            [resourceUUID]=\"bitstream.id\"></ds-resource-policies>\n    </ng-container>\n  </ng-container>\n</div>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BehaviorSubject, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { catchError, filter, first, map, mergeMap, take } from 'rxjs/operators';\n\nimport { buildPaginatedList, PaginatedList } from '../../../core/data/paginated-list.model';\nimport {\n  getFirstSucceededRemoteDataPayload, getFirstSucceededRemoteDataWithNotEmptyPayload,\n} from '../../../core/shared/operators';\nimport { Item } from '../../../core/shared/item.model';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { LinkService } from '../../../core/cache/builders/link.service';\nimport { Bundle } from '../../../core/shared/bundle.model';\nimport { hasValue, isNotEmpty } from '../../../shared/empty.util';\nimport { Bitstream } from '../../../core/shared/bitstream.model';\n\n/**\n * Interface for a bundle's bitstream map entry\n */\ninterface BundleBitstreamsMapEntry {\n  id: string;\n  bitstreams: Observable<PaginatedList<Bitstream>>;\n}\n\n@Component({\n  selector: 'ds-item-authorizations',\n  templateUrl: './item-authorizations.component.html'\n})\n/**\n * Component that handles the item Authorizations\n */\nexport class ItemAuthorizationsComponent implements OnInit, OnDestroy {\n\n  /**\n   * A map that contains all bitstream of the item's bundles\n   * @type {Observable<Map<string, Observable<PaginatedList<Bitstream>>>>}\n   */\n  public bundleBitstreamsMap: Map<string, Observable<PaginatedList<Bitstream>>> = new Map<string, Observable<PaginatedList<Bitstream>>>();\n\n  /**\n   * The list of bundle for the item\n   * @type {Observable<PaginatedList<Bundle>>}\n   */\n  private bundles$: BehaviorSubject<Bundle[]> = new BehaviorSubject<Bundle[]>([]);\n\n  /**\n   * The target editing item\n   * @type {Observable<Item>}\n   */\n  private item$: Observable<Item>;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {LinkService} linkService\n   * @param {ActivatedRoute} route\n   */\n  constructor(\n    private linkService: LinkService,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the bundle and bitstream within the item\n   */\n  ngOnInit(): void {\n    this.item$ = this.route.data.pipe(\n      map((data) => data.dso),\n      getFirstSucceededRemoteDataWithNotEmptyPayload(),\n      map((item: Item) => this.linkService.resolveLink(\n        item,\n        followLink('bundles', {}, followLink('bitstreams'))\n      ))\n    ) as Observable<Item>;\n\n    const bundles$: Observable<PaginatedList<Bundle>> = this.item$.pipe(\n      filter((item: Item) => isNotEmpty(item.bundles)),\n      mergeMap((item: Item) => item.bundles),\n      getFirstSucceededRemoteDataWithNotEmptyPayload(),\n      catchError((error) => {\n        console.error(error);\n        return observableOf(buildPaginatedList(null, []));\n      })\n    );\n\n    this.subs.push(\n      bundles$.pipe(\n        take(1),\n        map((list: PaginatedList<Bundle>) => list.page)\n      ).subscribe((bundles: Bundle[]) => {\n        this.bundles$.next(bundles);\n      }),\n      bundles$.pipe(\n        take(1),\n        mergeMap((list: PaginatedList<Bundle>) => list.page),\n        map((bundle: Bundle) => ({ id: bundle.id, bitstreams: this.getBundleBitstreams(bundle) }))\n      ).subscribe((entry: BundleBitstreamsMapEntry) => {\n        this.bundleBitstreamsMap.set(entry.id, entry.bitstreams);\n      })\n    );\n  }\n\n  /**\n   * Return the item's UUID\n   */\n  getItemUUID(): Observable<string> {\n    return this.item$.pipe(\n      map((item: Item) => item.id),\n      first((UUID: string) => isNotEmpty(UUID))\n    );\n  }\n\n  /**\n   * Return all item's bundles\n   *\n   * @return an observable that emits all item's bundles\n   */\n  getItemBundles(): Observable<Bundle[]> {\n    return this.bundles$.asObservable();\n  }\n\n  /**\n   * Return all bundle's bitstreams\n   *\n   * @return an observable that emits all item's bundles\n   */\n  private getBundleBitstreams(bundle: Bundle): Observable<PaginatedList<Bitstream>> {\n    return bundle.bitstreams.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      catchError((error) => {\n        console.error(error);\n        return observableOf(buildPaginatedList(null, []));\n      })\n    );\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring edit metadata rights\n */\nexport class ItemPageMetadataGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check edit metadata authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanEditMetadata);\n  }\n}\n","import { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Item } from '../../core/shared/item.model';\nimport { Injectable } from '@angular/core';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring withdraw rights\n */\nexport class ItemPageWithdrawGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check withdraw authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.WithdrawItem);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring reinstate rights\n */\nexport class ItemPageReinstateGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check reinstate authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.ReinstateItem);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EditItemPageComponent } from './edit-item-page.component';\nimport { ItemWithdrawComponent } from './item-withdraw/item-withdraw.component';\nimport { ItemReinstateComponent } from './item-reinstate/item-reinstate.component';\nimport { ItemPrivateComponent } from './item-private/item-private.component';\nimport { ItemPublicComponent } from './item-public/item-public.component';\nimport { ItemDeleteComponent } from './item-delete/item-delete.component';\nimport { ItemStatusComponent } from './item-status/item-status.component';\nimport { ItemMetadataComponent } from './item-metadata/item-metadata.component';\nimport { ItemBitstreamsComponent } from './item-bitstreams/item-bitstreams.component';\nimport { ItemCollectionMapperComponent } from './item-collection-mapper/item-collection-mapper.component';\nimport { ItemMoveComponent } from './item-move/item-move.component';\nimport { ItemRelationshipsComponent } from './item-relationships/item-relationships.component';\nimport { I18nBreadcrumbResolver } from '../../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ItemVersionHistoryComponent } from './item-version-history/item-version-history.component';\nimport { ItemAuthorizationsComponent } from './item-authorizations/item-authorizations.component';\nimport { ResourcePolicyTargetResolver } from '../../shared/resource-policies/resolvers/resource-policy-target.resolver';\nimport { ResourcePolicyResolver } from '../../shared/resource-policies/resolvers/resource-policy.resolver';\nimport { ResourcePolicyCreateComponent } from '../../shared/resource-policies/create/resource-policy-create.component';\nimport { ResourcePolicyEditComponent } from '../../shared/resource-policies/edit/resource-policy-edit.component';\nimport { I18nBreadcrumbsService } from '../../core/breadcrumbs/i18n-breadcrumbs.service';\nimport {\n  ITEM_EDIT_AUTHORIZATIONS_PATH,\n  ITEM_EDIT_DELETE_PATH,\n  ITEM_EDIT_MOVE_PATH,\n  ITEM_EDIT_PRIVATE_PATH,\n  ITEM_EDIT_PUBLIC_PATH,\n  ITEM_EDIT_REINSTATE_PATH,\n  ITEM_EDIT_WITHDRAW_PATH\n} from './edit-item-page.routing-paths';\nimport { ItemPageReinstateGuard } from './item-page-reinstate.guard';\nimport { ItemPageWithdrawGuard } from './item-page-withdraw.guard';\nimport { ItemPageMetadataGuard } from './item-page-metadata.guard';\nimport { ItemPageAdministratorGuard } from '../item-page-administrator.guard';\nimport { ItemPageStatusGuard } from './item-page-status.guard';\nimport { ItemPageBitstreamsGuard } from './item-page-bitstreams.guard';\nimport { ItemPageRelationshipsGuard } from './item-page-relationships.guard';\nimport { ItemPageVersionHistoryGuard } from './item-page-version-history.guard';\nimport { ItemPageCollectionMapperGuard } from './item-page-collection-mapper.guard';\n\n/**\n * Routing module that handles the routing for the Edit Item page administrator functionality\n */\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { breadcrumbKey: 'item.edit' },\n        children: [\n          {\n            path: '',\n            component: EditItemPageComponent,\n            children: [\n              {\n                path: '',\n                redirectTo: 'status',\n                pathMatch: 'full'\n              },\n              {\n                path: 'status',\n                component: ItemStatusComponent,\n                data: { title: 'item.edit.tabs.status.title', showBreadcrumbs: true },\n                canActivate: [ItemPageStatusGuard]\n              },\n              {\n                path: 'bitstreams',\n                component: ItemBitstreamsComponent,\n                data: { title: 'item.edit.tabs.bitstreams.title', showBreadcrumbs: true },\n                canActivate: [ItemPageBitstreamsGuard]\n              },\n              {\n                path: 'metadata',\n                component: ItemMetadataComponent,\n                data: { title: 'item.edit.tabs.metadata.title', showBreadcrumbs: true },\n                canActivate: [ItemPageMetadataGuard]\n              },\n              {\n                path: 'relationships',\n                component: ItemRelationshipsComponent,\n                data: { title: 'item.edit.tabs.relationships.title', showBreadcrumbs: true },\n                canActivate: [ItemPageRelationshipsGuard]\n              },\n              /* TODO - uncomment & fix when view page exists\n              {\n                path: 'view',\n                component: ItemBitstreamsComponent,\n                data: { title: 'item.edit.tabs.view.title', showBreadcrumbs: true }\n              }, */\n              /* TODO - uncomment & fix when curate page exists\n              {\n                path: 'curate',\n                component: ItemBitstreamsComponent,\n                data: { title: 'item.edit.tabs.curate.title', showBreadcrumbs: true }\n              }, */\n              {\n                path: 'versionhistory',\n                component: ItemVersionHistoryComponent,\n                data: { title: 'item.edit.tabs.versionhistory.title', showBreadcrumbs: true },\n                canActivate: [ItemPageVersionHistoryGuard]\n              },\n              {\n                path: 'mapper',\n                component: ItemCollectionMapperComponent,\n                data: { title: 'item.edit.tabs.item-mapper.title', showBreadcrumbs: true },\n                canActivate: [ItemPageCollectionMapperGuard]\n              }\n            ]\n          },\n          {\n            path: 'mapper',\n            component: ItemCollectionMapperComponent,\n          },\n          {\n            path: ITEM_EDIT_WITHDRAW_PATH,\n            component: ItemWithdrawComponent,\n            canActivate: [ItemPageWithdrawGuard]\n          },\n          {\n            path: ITEM_EDIT_REINSTATE_PATH,\n            component: ItemReinstateComponent,\n            canActivate: [ItemPageReinstateGuard]\n          },\n          {\n            path: ITEM_EDIT_PRIVATE_PATH,\n            component: ItemPrivateComponent,\n          },\n          {\n            path: ITEM_EDIT_PUBLIC_PATH,\n            component: ItemPublicComponent,\n          },\n          {\n            path: ITEM_EDIT_DELETE_PATH,\n            component: ItemDeleteComponent,\n          },\n          {\n            path: ITEM_EDIT_MOVE_PATH,\n            component: ItemMoveComponent,\n            data: { title: 'item.edit.move.title' },\n          },\n          {\n            path: ITEM_EDIT_AUTHORIZATIONS_PATH,\n            children: [\n              {\n                path: 'create',\n                resolve: {\n                  resourcePolicyTarget: ResourcePolicyTargetResolver\n                },\n                component: ResourcePolicyCreateComponent,\n                data: { title: 'resource-policies.create.page.title' }\n              },\n              {\n                path: 'edit',\n                resolve: {\n                  resourcePolicy: ResourcePolicyResolver\n                },\n                component: ResourcePolicyEditComponent,\n                data: { title: 'resource-policies.edit.page.title' }\n              },\n              {\n                path: '',\n                component: ItemAuthorizationsComponent,\n                data: { title: 'item.edit.authorizations.title' }\n              }\n            ]\n          }\n        ]\n      }\n    ])\n  ],\n  providers: [\n    I18nBreadcrumbResolver,\n    I18nBreadcrumbsService,\n    ResourcePolicyResolver,\n    ResourcePolicyTargetResolver,\n    ItemPageReinstateGuard,\n    ItemPageWithdrawGuard,\n    ItemPageAdministratorGuard,\n    ItemPageMetadataGuard,\n    ItemPageStatusGuard,\n    ItemPageBitstreamsGuard,\n    ItemPageRelationshipsGuard,\n    ItemPageVersionHistoryGuard,\n    ItemPageCollectionMapperGuard,\n  ]\n})\nexport class EditItemPageRoutingModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage mappings rights\n */\nexport class ItemPageCollectionMapperGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage mappings authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageMappings);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage versions rights\n */\nexport class ItemPageVersionHistoryGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage versions authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageVersions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { Item } from '../../core/shared/item.model';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage relationships rights\n */\nexport class ItemPageRelationshipsGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage relationships authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageRelationships);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DsoPageSingleFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-single-feature.guard';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring manage bitstreams rights\n */\nexport class ItemPageBitstreamsGuard extends DsoPageSingleFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check manage bitstreams authorization rights\n   */\n  getFeatureID(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID> {\n    return observableOf(FeatureID.CanManageBitstreamBundles);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Item } from '../../core/shared/item.model';\nimport { ItemPageResolver } from '../item-page.resolver';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { DsoPageSomeFeatureGuard } from '../../core/data/feature-authorization/feature-authorization-guard/dso-page-some-feature.guard';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Guard for preventing unauthorized access to certain {@link Item} pages requiring any of the rights required for\n * the status page\n */\nexport class ItemPageStatusGuard extends DsoPageSomeFeatureGuard<Item> {\n  constructor(protected resolver: ItemPageResolver,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(resolver, authorizationService, router, authService);\n  }\n\n  /**\n   * Check authorization rights\n   */\n  getFeatureIDs(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID[]> {\n    return observableOf([FeatureID.CanManageMappings, FeatureID.WithdrawItem, FeatureID.ReinstateItem, FeatureID.CanManagePolicies, FeatureID.CanMakePrivate, FeatureID.CanDelete, FeatureID.CanMove]);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { SharedModule } from '../../shared/shared.module';\nimport { EditItemPageRoutingModule } from './edit-item-page.routing.module';\nimport { EditItemPageComponent } from './edit-item-page.component';\nimport { ItemStatusComponent } from './item-status/item-status.component';\nimport { ItemOperationComponent } from './item-operation/item-operation.component';\nimport { ItemWithdrawComponent } from './item-withdraw/item-withdraw.component';\nimport { ItemReinstateComponent } from './item-reinstate/item-reinstate.component';\nimport { AbstractSimpleItemActionComponent } from './simple-item-action/abstract-simple-item-action.component';\nimport { ItemPrivateComponent } from './item-private/item-private.component';\nimport { ItemPublicComponent } from './item-public/item-public.component';\nimport { ItemDeleteComponent } from './item-delete/item-delete.component';\nimport { ItemMetadataComponent } from './item-metadata/item-metadata.component';\nimport { EditInPlaceFieldComponent } from './item-metadata/edit-in-place-field/edit-in-place-field.component';\nimport { ItemBitstreamsComponent } from './item-bitstreams/item-bitstreams.component';\nimport { ItemEditBitstreamComponent } from './item-bitstreams/item-edit-bitstream/item-edit-bitstream.component';\nimport { SearchPageModule } from '../../search-page/search-page.module';\nimport { ItemCollectionMapperComponent } from './item-collection-mapper/item-collection-mapper.component';\nimport { ItemRelationshipsComponent } from './item-relationships/item-relationships.component';\nimport { EditRelationshipComponent } from './item-relationships/edit-relationship/edit-relationship.component';\nimport { EditRelationshipListComponent } from './item-relationships/edit-relationship-list/edit-relationship-list.component';\nimport { AbstractItemUpdateComponent } from './abstract-item-update/abstract-item-update.component';\nimport { ItemMoveComponent } from './item-move/item-move.component';\nimport { ItemEditBitstreamBundleComponent } from './item-bitstreams/item-edit-bitstream-bundle/item-edit-bitstream-bundle.component';\nimport { BundleDataService } from '../../core/data/bundle-data.service';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ItemEditBitstreamDragHandleComponent } from './item-bitstreams/item-edit-bitstream-drag-handle/item-edit-bitstream-drag-handle.component';\nimport { PaginatedDragAndDropBitstreamListComponent } from './item-bitstreams/item-edit-bitstream-bundle/paginated-drag-and-drop-bitstream-list/paginated-drag-and-drop-bitstream-list.component';\nimport { VirtualMetadataComponent } from './virtual-metadata/virtual-metadata.component';\nimport { ItemVersionHistoryComponent } from './item-version-history/item-version-history.component';\nimport { ItemAuthorizationsComponent } from './item-authorizations/item-authorizations.component';\nimport { ObjectValuesPipe } from '../../shared/utils/object-values-pipe';\nimport { ResourcePoliciesModule } from '../../shared/resource-policies/resource-policies.module';\n\n\n/**\n * Module that contains all components related to the Edit Item page administrator functionality\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    NgbTooltipModule,\n    EditItemPageRoutingModule,\n    SearchPageModule,\n    DragDropModule,\n    ResourcePoliciesModule\n  ],\n  declarations: [\n    EditItemPageComponent,\n    ItemOperationComponent,\n    AbstractSimpleItemActionComponent,\n    AbstractItemUpdateComponent,\n    ItemWithdrawComponent,\n    ItemReinstateComponent,\n    ItemPrivateComponent,\n    ItemPublicComponent,\n    ItemDeleteComponent,\n    ItemStatusComponent,\n    ItemMetadataComponent,\n    ItemRelationshipsComponent,\n    ItemBitstreamsComponent,\n    ItemVersionHistoryComponent,\n    EditInPlaceFieldComponent,\n    ItemEditBitstreamComponent,\n    ItemEditBitstreamBundleComponent,\n    PaginatedDragAndDropBitstreamListComponent,\n    EditInPlaceFieldComponent,\n    EditRelationshipComponent,\n    EditRelationshipListComponent,\n    ItemCollectionMapperComponent,\n    ItemMoveComponent,\n    ItemEditBitstreamDragHandleComponent,\n    VirtualMetadataComponent,\n    ItemAuthorizationsComponent\n  ],\n  providers: [\n    BundleDataService,\n    ObjectValuesPipe\n  ],\n  exports: [\n    ItemMetadataComponent\n  ]\n})\nexport class EditItemPageModule {\n\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { DSONameService } from './dso-name.service';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { LinkService } from '../cache/builders/link.service';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { find, map, switchMap } from 'rxjs/operators';\nimport { RemoteData } from '../data/remote-data';\nimport { hasValue } from '../../shared/empty.util';\nimport { Injectable } from '@angular/core';\nimport { getDSORoute } from '../../app-routing-paths';\n\n/**\n * Service to calculate DSpaceObject breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DSOBreadcrumbsService implements BreadcrumbsProviderService<ChildHALResource & DSpaceObject> {\n  constructor(\n    private linkService: LinkService,\n    private dsoNameService: DSONameService\n  ) {\n\n  }\n\n  /**\n   * Method to recursively calculate the breadcrumbs\n   * This method returns the name and url of the key and all its parent DSOs recursively, top down\n   * @param key The key (a DSpaceObject) used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: ChildHALResource & DSpaceObject, url: string): Observable<Breadcrumb[]> {\n    const label = this.dsoNameService.getName(key);\n    const crumb = new Breadcrumb(label, url);\n    const propertyName = key.getParentLinkKey();\n    return this.linkService.resolveLink(key, followLink(propertyName))[propertyName].pipe(\n      find((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => parentRD.hasSucceeded || parentRD.statusCode === 204),\n      switchMap((parentRD: RemoteData<ChildHALResource & DSpaceObject>) => {\n        if (hasValue(parentRD.payload)) {\n          const parent = parentRD.payload;\n          return this.getBreadcrumbs(parent, getDSORoute(parent));\n        }\n        return observableOf([]);\n\n      }),\n      map((breadcrumbs: Breadcrumb[]) => [...breadcrumbs, crumb])\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport {\n  FieldUpdate,\n  FieldUpdates\n} from '../../../core/data/object-updates/object-updates.reducer';\nimport { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { Item } from '../../../core/shared/item.model';\nimport { ItemDataService } from '../../../core/data/item-data.service';\nimport { ObjectUpdatesService } from '../../../core/data/object-updates/object-updates.service';\nimport { ActivatedRoute, Router, Data } from '@angular/router';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { first, map, switchMap, tap } from 'rxjs/operators';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { AbstractTrackableComponent } from '../../../shared/trackable/abstract-trackable.component';\nimport { environment } from '../../../../environments/environment';\nimport { getItemPageRoute } from '../../item-page-routing-paths';\nimport { getAllSucceededRemoteData } from '../../../core/shared/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ITEM_PAGE_LINKS_TO_FOLLOW } from '../../item.resolver';\n\n@Component({\n  selector: 'ds-abstract-item-update',\n  template: ''\n})\n/**\n * Abstract component for managing object updates of an item\n */\nexport class AbstractItemUpdateComponent extends AbstractTrackableComponent implements OnInit, OnDestroy {\n  /**\n   * The item to display the edit page for\n   */\n  @Input() item: Item;\n  /**\n   * The current values and updates for all this item's fields\n   * Should be initialized in the initializeUpdates method of the child component\n   */\n  updates$: Observable<FieldUpdates>;\n\n  /**\n   * Route to the item's page\n   */\n  itemPageRoute: string;\n\n  /**\n   * A subscription that checks when the item is deleted in cache and reloads the item by sending a new request\n   * This is used to update the item in cache after bitstreams are deleted\n   */\n  itemUpdateSubscription: Subscription;\n\n  constructor(\n    public itemService: ItemDataService,\n    public objectUpdatesService: ObjectUpdatesService,\n    public router: Router,\n    public notificationsService: NotificationsService,\n    public translateService: TranslateService,\n    public route: ActivatedRoute\n  ) {\n    super(objectUpdatesService, notificationsService, translateService);\n  }\n\n  /**\n   * Initialize common properties between item-update components\n   */\n  ngOnInit(): void {\n    if (hasValue(this.item)) {\n      this.setItem(this.item);\n    } else {\n      // The item wasn't provided through an input, retrieve it from the route instead.\n      this.itemUpdateSubscription = observableCombineLatest([this.route.data, this.route.parent.data]).pipe(\n        map(([data, parentData]: [Data, Data]) => Object.assign({}, data, parentData)),\n        map((data: any) => data.dso),\n        tap((rd: RemoteData<Item>) => {\n          this.item = rd.payload;\n        }),\n        switchMap((rd: RemoteData<Item>) => {\n          return this.itemService.findByHref(rd.payload._links.self.href, true, true, ...ITEM_PAGE_LINKS_TO_FOLLOW);\n        }),\n        getAllSucceededRemoteData()\n      ).subscribe((rd: RemoteData<Item>) => {\n        this.setItem(rd.payload);\n      });\n    }\n\n    this.discardTimeOut = environment.item.edit.undoTimeout;\n    this.url = this.router.url;\n    if (this.url.indexOf('?') > 0) {\n      this.url = this.url.substr(0, this.url.indexOf('?'));\n    }\n    this.hasChanges().pipe(first()).subscribe((hasChanges) => {\n      if (!hasChanges) {\n        this.initializeOriginalFields();\n      } else {\n        this.checkLastModified();\n      }\n    });\n\n    this.initializeNotificationsPrefix();\n    this.initializeUpdates();\n  }\n\n  setItem(item: Item) {\n    this.item = item;\n    this.itemPageRoute = getItemPageRoute(this.item);\n    this.postItemInit();\n    this.initializeUpdates();\n  }\n\n  ngOnDestroy() {\n    if (hasValue(this.itemUpdateSubscription)) {\n      this.itemUpdateSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Actions to perform after the item has been initialized\n   * Abstract method: Should be overwritten in the sub class\n   */\n  postItemInit(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Initialize the values and updates of the current item's fields\n   * Abstract method: Should be overwritten in the sub class\n   */\n  initializeUpdates(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Initialize the prefix for notification messages\n   * Abstract method: Should be overwritten in the sub class\n   */\n  initializeNotificationsPrefix(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Sends all initial values of this item to the object updates service\n   * Abstract method: Should be overwritten in the sub class\n   */\n  initializeOriginalFields(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Submit the current changes\n   * Abstract method: Should be overwritten in the sub class\n   */\n  submit(): void {\n    // Overwrite in subclasses\n  }\n\n  /**\n   * Prevent unnecessary rerendering so fields don't lose focus\n   */\n  trackUpdate(index, update: FieldUpdate) {\n    return update && update.field ? update.field.uuid : undefined;\n  }\n\n  /**\n   * Check if the current page is entirely valid\n   */\n  public isValid() {\n    return this.objectUpdatesService.isValidPage(this.url);\n  }\n\n  /**\n   * Checks if the current item is still in sync with the version in the store\n   * If it's not, a notification is shown and the changes are removed\n   */\n  private checkLastModified() {\n    const currentVersion = this.item.lastModified;\n    this.objectUpdatesService.getLastModified(this.url).pipe(first()).subscribe(\n      (updateVersion: Date) => {\n        if (updateVersion.getDate() !== currentVersion.getDate()) {\n          this.notificationsService.warning(this.getNotificationTitle('outdated'), this.getNotificationContent('outdated'));\n          this.initializeOriginalFields();\n        }\n      }\n    );\n  }\n}\n","import { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../../remote-data';\nimport { AuthorizationDataService } from '../authorization-data.service';\nimport { Observable } from 'rxjs';\nimport { getAllSucceededRemoteDataPayload } from '../../../shared/operators';\nimport { map } from 'rxjs/operators';\nimport { DSpaceObject } from '../../../shared/dspace-object.model';\nimport { AuthService } from '../../../auth/auth.service';\nimport { hasNoValue, hasValue } from '../../../../shared/empty.util';\nimport { SomeFeatureAuthorizationGuard } from './some-feature-authorization.guard';\n\n/**\n * Abstract Guard for preventing unauthorized access to {@link DSpaceObject} pages that require rights for any specific feature in a list\n * This guard utilizes a resolver to retrieve the relevant object to check authorizations for\n */\nexport abstract class DsoPageSomeFeatureGuard<T extends DSpaceObject> extends SomeFeatureAuthorizationGuard {\n  constructor(protected resolver: Resolve<RemoteData<T>>,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  /**\n   * Check authorization rights for the object resolved using the provided resolver\n   */\n  getObjectUrl(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\n    const routeWithObjectID = this.getRouteWithDSOId(route);\n    return (this.resolver.resolve(routeWithObjectID, state) as Observable<RemoteData<T>>).pipe(\n      getAllSucceededRemoteDataPayload(),\n      map((dso) => dso.self)\n    );\n  }\n\n  /**\n   * Method to resolve resolve (parent) route that contains the UUID of the DSO\n   * @param route The current route\n   */\n  protected getRouteWithDSOId(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot {\n    let routeWithDSOId = route;\n    while (hasNoValue(routeWithDSOId.params.id) && hasValue(routeWithDSOId.parent)) {\n      routeWithDSOId = routeWithDSOId.parent;\n    }\n    return routeWithDSOId;\n  }\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { SearchPageComponent } from './search-page.component';\n\n/**\n * Themed wrapper for SearchPageComponent\n */\n@Component({\n  selector: 'ds-themed-search-page',\n  styleUrls: [],\n  templateUrl: '../shared/theme-support/themed.component.html',\n})\nexport class ThemedSearchPageComponent extends ThemedComponent<SearchPageComponent> {\n\n  protected getComponentName(): string {\n    return 'SearchPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/search-page/search-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./search-page.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { Angulartics2 } from 'angulartics2';\nimport { map, switchMap } from 'rxjs/operators';\nimport { SearchComponent } from '../shared/search/search.component';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { HostWindowService } from '../shared/host-window.service';\nimport { SEARCH_CONFIG_SERVICE } from '../my-dspace-page/my-dspace-page.component';\nimport { RouteService } from '../core/services/route.service';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { SearchService } from '../core/shared/search/search.service';\nimport { PaginatedSearchOptions } from '../shared/search/models/paginated-search-options.model';\nimport { SearchObjects } from '../shared/search/models/search-objects.model';\nimport { Router } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { DSpaceObject } from '../core/shared/dspace-object.model';\nimport { getFirstSucceededRemoteData } from '../core/shared/operators';\n\n/**\n * This component triggers a page view statistic\n */\n@Component({\n  selector: 'ds-search-tracker',\n  styleUrls: ['./search-tracker.component.scss'],\n  templateUrl: './search-tracker.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\nexport class SearchTrackerComponent extends SearchComponent implements OnInit {\n\n  constructor(\n    protected service: SearchService,\n    protected sidebarService: SidebarService,\n    protected windowService: HostWindowService,\n    @Inject(SEARCH_CONFIG_SERVICE) public searchConfigService: SearchConfigurationService,\n    protected routeService: RouteService,\n    public angulartics2: Angulartics2,\n    protected router: Router\n  ) {\n    super(service, sidebarService, windowService, searchConfigService, routeService, router);\n  }\n\n  ngOnInit(): void {\n    // super.ngOnInit();\n    this.getSearchOptions().pipe(\n      switchMap((options: PaginatedSearchOptions) =>\n        this.service.searchEntries(options).pipe(\n          getFirstSucceededRemoteData(),\n          map((rd: RemoteData<SearchObjects<DSpaceObject>>) => ({\n            config: options,\n            searchQueryResponse: rd.payload\n          }))\n        )),\n    ).subscribe(({ config, searchQueryResponse }) => {\n        const filters: { filter: string, operator: string, value: string, label: string; }[] = [];\n        const appliedFilters = searchQueryResponse.appliedFilters || [];\n        for (let i = 0, filtersLength = appliedFilters.length; i < filtersLength; i++) {\n          const appliedFilter = appliedFilters[i];\n          filters.push(appliedFilter);\n        }\n        this.angulartics2.eventTrack.next({\n          action: 'search',\n          properties: {\n            searchOptions: config,\n            page: {\n              size: config.pagination.size, // same as searchQueryResponse.page.elementsPerPage\n              totalElements: searchQueryResponse.pageInfo.totalElements,\n              totalPages: searchQueryResponse.pageInfo.totalPages,\n              number: config.pagination.currentPage, // same as searchQueryResponse.page.currentPage\n            },\n            sort: {\n              by: config.sort.field,\n              order: config.sort.direction\n            },\n            filters: filters,\n          },\n        });\n      });\n  }\n}\n","&nbsp;\n","var map = {\n\t\"./custom/app/search-page/search-page.component\": [\n\t\t\"Bvb0\",\n\t\t73\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"VxFp\";\nmodule.exports = webpackAsyncContext;","import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { DSOBreadcrumbsService } from './dso-breadcrumbs.service';\nimport { DataService } from '../data/data.service';\nimport { getRemoteDataPayload, getFirstCompletedRemoteData } from '../shared/operators';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { DSpaceObject } from '../shared/dspace-object.model';\nimport { ChildHALResource } from '../shared/child-hal-resource.model';\nimport { FollowLinkConfig } from '../../shared/utils/follow-link-config.model';\nimport { hasValue } from '../../shared/empty.util';\n\n/**\n * The class that resolves the BreadcrumbConfig object for a DSpaceObject\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class DSOBreadcrumbResolver<T extends ChildHALResource & DSpaceObject> implements Resolve<BreadcrumbConfig<T>> {\n  constructor(protected breadcrumbService: DSOBreadcrumbsService, protected dataService: DataService<T>) {\n  }\n\n  /**\n   * Method for resolving a breadcrumb config object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<T>> {\n    const uuid = route.params.id;\n    return this.dataService.findById(uuid, true, false, ...this.followLinks).pipe(\n      getFirstCompletedRemoteData(),\n      getRemoteDataPayload(),\n      map((object: T) => {\n        if (hasValue(object)) {\n          const fullPath = state.url;\n          const url = fullPath.substr(0, fullPath.indexOf(uuid)) + uuid;\n          return {provider: this.breadcrumbService, key: object, url: url};\n        } else {\n          return undefined;\n        }\n      })\n    );\n  }\n\n  /**\n   * Method that returns the follow links to already resolve\n   * The self links defined in this list are expected to be requested somewhere in the near future\n   * Requesting them as embeds will limit the number of requests\n   */\n  abstract get followLinks(): FollowLinkConfig<T>[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '../core/core.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { SidebarService } from '../shared/sidebar/sidebar.service';\nimport { ConfigurationSearchPageGuard } from './configuration-search-page.guard';\nimport { SearchTrackerComponent } from './search-tracker.component';\nimport { StatisticsModule } from '../statistics/statistics.module';\nimport { SearchPageComponent } from './search-page.component';\nimport { SidebarFilterService } from '../shared/sidebar/filter/sidebar-filter.service';\nimport { SearchFilterService } from '../core/shared/search/search-filter.service';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\nimport { JournalEntitiesModule } from '../entity-groups/journal-entities/journal-entities.module';\nimport { ResearchEntitiesModule } from '../entity-groups/research-entities/research-entities.module';\nimport { ThemedSearchPageComponent } from './themed-search-page.component';\nimport { SearchModule } from '../shared/search/search.module';\n\nconst components = [\n  SearchPageComponent,\n  SearchTrackerComponent,\n  ThemedSearchPageComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SearchModule,\n    SharedModule.withEntryComponents(),\n    CoreModule.forRoot(),\n    StatisticsModule.forRoot(),\n    JournalEntitiesModule.withEntryComponents(),\n    ResearchEntitiesModule.withEntryComponents()\n  ],\n  declarations: components,\n  providers: [\n    SidebarService,\n    SidebarFilterService,\n    SearchFilterService,\n    ConfigurationSearchPageGuard,\n    SearchConfigurationService\n  ],\n  exports: components\n})\n\n/**\n * This module handles all components and pipes that are necessary for the search page\n */\nexport class SearchPageModule {\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const ITEM_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Item>[] = [\n  followLink('owningCollection', {},\n    followLink('parentCommunity', {},\n      followLink('parentCommunity'))\n  ),\n  followLink('relationships'),\n  followLink('version', {}, followLink('versionhistory')),\n  followLink('thumbnail')\n];\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ItemResolver implements Resolve<RemoteData<Item>> {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    const itemRD$ = this.itemService.findById(route.params.id,\n      true,\n      false,\n      ...ITEM_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    itemRD$.subscribe((itemRD: RemoteData<Item>) => {\n      this.store.dispatch(new ResolvedAction(state.url, itemRD.payload));\n    });\n\n    return itemRD$;\n  }\n}\n","import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getAccessControlModuleRoute } from '../app-routing-paths';\n\nexport const GROUP_EDIT_PATH = 'groups';\n\nexport function getGroupsRoute() {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH).toString();\n}\n\nexport function getGroupEditRoute(id: string) {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH, id).toString();\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport {\n  metadataFieldsToString,\n  getFirstSucceededRemoteData\n} from '../../../../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../../../../shared/empty.util';\nimport { RegistryService } from '../../../../core/registry/registry.service';\nimport { cloneDeep } from 'lodash';\nimport { BehaviorSubject, Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FieldChangeType } from '../../../../core/data/object-updates/object-updates.actions';\nimport { FieldUpdate } from '../../../../core/data/object-updates/object-updates.reducer';\nimport { ObjectUpdatesService } from '../../../../core/data/object-updates/object-updates.service';\nimport { NgModel } from '@angular/forms';\nimport { MetadatumViewModel } from '../../../../core/shared/metadata.models';\nimport { InputSuggestion } from '../../../../shared/input-suggestions/input-suggestions.model';\nimport { followLink } from '../../../../shared/utils/follow-link-config.model';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[ds-edit-in-place-field]',\n  styleUrls: ['./edit-in-place-field.component.scss'],\n  templateUrl: './edit-in-place-field.component.html',\n})\n/**\n * Component that displays a single metadatum of an item on the edit page\n */\nexport class EditInPlaceFieldComponent implements OnInit, OnChanges {\n  /**\n   * The current field, value and state of the metadatum\n   */\n  @Input() fieldUpdate: FieldUpdate;\n\n  /**\n   * The current url of this page\n   */\n  @Input() url: string;\n\n  /**\n   * The metadatum of this field\n   */\n  @Input() metadata: MetadatumViewModel;\n\n  /**\n   * Emits whether or not this field is currently editable\n   */\n  editable: Observable<boolean>;\n\n  /**\n   * Emits whether or not this field is currently valid\n   */\n  valid: Observable<boolean>;\n\n  /**\n   * The current suggestions for the metadatafield when editing\n   */\n  metadataFieldSuggestions: BehaviorSubject<InputSuggestion[]> = new BehaviorSubject([]);\n\n  constructor(\n    private registryService: RegistryService,\n    private objectUpdatesService: ObjectUpdatesService,\n  ) {\n  }\n\n  /**\n   * Sets up an observable that keeps track of the current editable and valid state of this field\n   */\n  ngOnInit(): void {\n    this.editable = this.objectUpdatesService.isEditable(this.url, this.metadata.uuid);\n    this.valid = this.objectUpdatesService.isValid(this.url, this.metadata.uuid);\n  }\n\n  /**\n   * Sends a new change update for this field to the object updates service\n   */\n  update(ngModel?: NgModel) {\n    this.objectUpdatesService.saveChangeFieldUpdate(this.url, cloneDeep(this.metadata));\n    if (hasValue(ngModel)) {\n      this.checkValidity(ngModel);\n    }\n  }\n\n  /**\n   * Method to check the validity of a form control\n   * @param ngModel\n   */\n  public checkValidity(ngModel: NgModel) {\n    ngModel.control.setValue(ngModel.viewModel);\n    ngModel.control.updateValueAndValidity();\n    this.objectUpdatesService.setValidFieldUpdate(this.url, this.metadata.uuid, ngModel.control.valid);\n  }\n\n  /**\n   * Sends a new editable state for this field to the service to change it\n   * @param editable The new editable state for this field\n   */\n  setEditable(editable: boolean) {\n    this.objectUpdatesService.setEditableFieldUpdate(this.url, this.metadata.uuid, editable);\n  }\n\n  /**\n   * Sends a new remove update for this field to the object updates service\n   */\n  remove() {\n    this.objectUpdatesService.saveRemoveFieldUpdate(this.url, cloneDeep(this.metadata));\n  }\n\n  /**\n   * Notifies the object updates service that the updates for the current field can be removed\n   */\n  removeChangesFromField() {\n    this.objectUpdatesService.removeSingleFieldUpdate(this.url, this.metadata.uuid);\n  }\n\n  /**\n   * Sets the current metadatafield based on the fieldUpdate input field\n   */\n  ngOnChanges(): void {\n    this.metadata = cloneDeep(this.fieldUpdate.field) as MetadatumViewModel;\n  }\n\n  /**\n   * Requests all metadata fields that contain the query string in their key\n   * Then sets all found metadata fields as metadataFieldSuggestions\n   * Ignores fields from metadata schemas \"relation\" and \"relationship\"\n   * @param query The query to look for\n   */\n  findMetadataFieldSuggestions(query: string) {\n    if (isNotEmpty(query)) {\n      return this.registryService.queryMetadataFields(query, null, true, false, followLink('schema')).pipe(\n        getFirstSucceededRemoteData(),\n        metadataFieldsToString(),\n      ).subscribe((fieldNames: string[]) => {\n          this.setInputSuggestions(fieldNames);\n        });\n    } else {\n      this.metadataFieldSuggestions.next([]);\n    }\n  }\n\n  /**\n   * Set the list of input suggestion with the given Metadata fields, which all require a resolved MetadataSchema\n   * @param fields  list of Metadata fields, which all require a resolved MetadataSchema\n   */\n  setInputSuggestions(fields: string[]) {\n    this.metadataFieldSuggestions.next(\n      fields.map((fieldName: string) => {\n        return {\n          displayValue: fieldName.split('.').join('.&#8203;'),\n          value: fieldName\n        };\n      })\n    );\n  }\n\n  /**\n   * Check if a user should be allowed to edit this field\n   * @return an observable that emits true when the user should be able to edit this field and false when they should not\n   */\n  canSetEditable(): Observable<boolean> {\n    return this.editable.pipe(\n      map((editable: boolean) => {\n        if (editable) {\n          return false;\n        } else {\n          return this.fieldUpdate.changeType !== FieldChangeType.REMOVE;\n        }\n      })\n    );\n  }\n\n  /**\n   * Check if a user should be allowed to disabled editing this field\n   * @return an observable that emits true when the user should be able to disable editing this field and false when they should not\n   */\n  canSetUneditable(): Observable<boolean> {\n    return this.editable;\n  }\n\n  /**\n   * Check if a user should be allowed to remove this field\n   * @return an observable that emits true when the user should be able to remove this field and false when they should not\n   */\n  canRemove(): Observable<boolean> {\n    return observableOf(this.fieldUpdate.changeType !== FieldChangeType.REMOVE && this.fieldUpdate.changeType !== FieldChangeType.ADD);\n  }\n\n  /**\n   * Check if a user should be allowed to undo changes to this field\n   * @return an observable that emits true when the user should be able to undo changes to this field and false when they should not\n   */\n  canUndo(): Observable<boolean> {\n    return this.editable.pipe(\n      map((editable: boolean) => this.fieldUpdate.changeType >= 0 || editable)\n    );\n  }\n\n  protected isNotEmpty(value): boolean {\n    return isNotEmpty(value);\n  }\n}\n","<td>\n    <div class=\"metadata-field\">\n        <div *ngIf=\"!(editable | async)\">\n            <span >{{metadata?.key?.split('.').join('.&#8203;')}}</span>\n        </div>\n        <div *ngIf=\"(editable | async)\" class=\"field-container\">\n            <ds-validation-suggestions [disable]=\"fieldUpdate.changeType != 1\" [suggestions]=\"(metadataFieldSuggestions | async)\"\n                                         [(ngModel)]=\"metadata.key\"\n                                         [url]=\"this.url\"\n                                         [metadata]=\"this.metadata\"\n                                  (submitSuggestion)=\"update(suggestionControl)\"\n                                  (clickSuggestion)=\"update(suggestionControl)\"\n                                  (typeSuggestion)=\"update(suggestionControl)\"\n                                  (dsClickOutside)=\"checkValidity(suggestionControl)\"\n                                  (findSuggestions)=\"findMetadataFieldSuggestions($event)\"\n                                  #suggestionControl=\"ngModel\"\n                                  [valid]=\"(valid | async) !== false\"\n                                  dsAutoFocus autoFocusSelector=\".suggestion_input\"\n                                  [ngModelOptions]=\"{standalone: true}\"\n            ></ds-validation-suggestions>\n        </div>\n        <small class=\"text-danger\"\n               *ngIf=\"(valid | async) === false\">{{\"item.edit.metadata.metadatafield.invalid\" | translate}}</small>\n    </div>\n</td>\n<td class=\"w-100\">\n    <div class=\"value-field\">\n        <div *ngIf=\"!(editable | async)\">\n            <span class=\"dont-break-out\">{{metadata?.value}}</span>\n        </div>\n        <div *ngIf=\"(editable | async)\" class=\"field-container\">\n            <textarea class=\"form-control\" type=\"textarea\" attr.aria-labelledby=\"fieldValue\" [(ngModel)]=\"metadata.value\" [dsDebounce]\n                      (onDebounce)=\"update()\"></textarea>\n        </div>\n    </div>\n</td>\n<td class=\"text-center\">\n    <div class=\"language-field\">\n        <div *ngIf=\"!(editable | async)\">\n            <span>{{metadata?.language}}</span>\n        </div>\n        <div *ngIf=\"(editable | async)\" class=\"field-container\">\n            <input class=\"form-control\" type=\"text\" attr.aria-labelledby=\"fieldLang\" [(ngModel)]=\"metadata.language\" [dsDebounce]\n                   (onDebounce)=\"update()\"/>\n        </div>\n    </div>\n</td>\n<td class=\"text-center\">\n    <div class=\"btn-group edit-field\">\n        <button [disabled]=\"!(canSetEditable() | async)\" *ngIf=\"!(editable | async)\"\n                (click)=\"setEditable(true)\" class=\"btn btn-outline-primary btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.edit' | translate}}\">\n            <i class=\"fas fa-edit fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!(canSetUneditable() | async) || (valid | async) === false\" *ngIf=\"(editable | async)\"\n                (click)=\"setEditable(false)\" class=\"btn btn-outline-success btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.unedit' | translate}}\">\n            <i class=\"fas fa-check fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!(canRemove() | async)\" (click)=\"remove()\"\n                class=\"btn btn-outline-danger btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.remove' | translate}}\">\n            <i class=\"fas fa-trash-alt fa-fw\"></i>\n        </button>\n        <button [disabled]=\"!(canUndo() | async)\" (click)=\"removeChangesFromField()\"\n                class=\"btn btn-outline-warning btn-sm\"\n                title=\"{{'item.edit.metadata.edit.buttons.undo' | translate}}\">\n            <i class=\"fas fa-undo-alt fa-fw\"></i>\n        </button>\n    </div>\n</td>\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Component } from '@angular/core';\nimport { SEARCH_CONFIG_SERVICE } from '../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../core/shared/search/search-configuration.service';\n\n@Component({\n  selector: 'ds-search-page',\n  templateUrl: './search-page.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n/**\n * This component represents the whole search page\n * It renders search results depending on the current search options\n */\nexport class SearchPageComponent {\n}\n","<ds-search></ds-search>\n<ds-search-tracker></ds-search-tracker>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { Store } from '@ngrx/store';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getItemPageRoute } from './item-page-routing-paths';\nimport { ItemResolver } from './item.resolver';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated and will redirect to the\n * entity page\n */\n@Injectable()\nexport class ItemPageResolver extends ItemResolver {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n    super(itemService, store, router);\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    return super.resolve(route, state).pipe(\n      map((rd: RemoteData<Item>) => {\n        if (rd.hasSucceeded && hasValue(rd.payload)) {\n          const itemRoute = getItemPageRoute(rd.payload);\n          const thisRoute = state.url;\n          if (!thisRoute.startsWith(itemRoute)) {\n            const itemId = rd.payload.uuid;\n            const subRoute = thisRoute.substring(thisRoute.indexOf(itemId) + itemId.length, thisRoute.length);\n            this.router.navigateByUrl(itemRoute + subRoute);\n          }\n        }\n        return rd;\n      })\n    );\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}