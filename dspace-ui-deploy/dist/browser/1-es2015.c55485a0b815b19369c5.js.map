{"version":3,"sources":["webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component.html","webpack:///src/app/submission/import-external/import-external-collection/submission-import-external-collection.component.ts","webpack:///src/app/submission/import-external/import-external-collection/submission-import-external-collection.component.html","webpack:///node_modules/rxjs/internal/BehaviorSubject.js","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component.html","webpack:///src/app/shared/chips/models/chips-item.model.ts","webpack:///src/app/shared/chips/models/chips.model.ts","webpack:///node_modules/rxjs/internal/SubjectSubscription.js","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.model.ts","webpack:///src/app/shared/animations/shrink.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.components.ts","webpack:///node_modules/rxjs/internal/util/ObjectUnsubscribedError.js","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/dynamic-vocabulary.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/mapTo.js","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/list/dynamic-list.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/list/dynamic-list.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component.html","webpack:///node_modules/rxjs/internal/Subject.js","webpack:///src/app/shared/form/form.component.ts","webpack:///src/app/shared/form/form.component.html","webpack:///node_modules/@ng-dynamic-forms/ui-ng-bootstrap/__ivy_ngcc__/fesm2015/ui-ng-bootstrap.js","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component.html"],"names":["ExistingRelationListElementComponent","constructor","selectableListService","submissionService","store","relatedItem$","undefined","viewType","ListElement","remove","EventEmitter","subs","ngOnInit","this","ngOnChanges","reoRel","push","useLeftItem","relationship","leftItem","rightItem","pipe","item","uuid","subscribe","next","removeSelection","dispatchSave","submissionId","deselectSingle","listId","Object","assign","indexableObject","getValue","dispatch","submissionItem","relationshipOptions","relationshipType","ngOnDestroy","filter","sub","forEach","unsubscribe","$event","stopPropagation","DsDynamicLookupComponent","vocabularyService","cdr","layoutService","validationService","super","blur","change","focus","editMode","firstInputValue","secondInputValue","loading","inputFormatter","x","y","model","value","setCurrentValue","valueChanges","resetFields","hasAuthorityValue","hasAuthority","hasEmptyValue","getCurrentValue","clearFields","vocabularyOptions","closed","isEditDisabled","isInputDisabled","isLookupName","isSearchDisabled","onChange","event","preventDefault","currentValue","updateModel","onScroll","pageInfo","currentPage","totalPages","updatePageInfo","elementsPerPage","totalElements","search","onSelect","openChange","isOpened","group","markAsPristine","dispatchUpdate","saveChanges","newValue","display","switchEditMode","optionsList","maxOptions","getVocabularyEntriesByValue","b","list","page","detectChanges","whenClickOnConfidenceNotAccepted","sdRef","confidence","readOnly","open","init","getInitValueFromModel","formValue","setDisplayInputValue","displayValue","values","split","separator","trim","result","markAsDirty","onBlur","onFocus","DsDynamicLookupRelationModalComponent","modal","relationshipService","relationshipTypeService","externalSourceService","lookupRelationService","searchConfigService","rdbService","zone","router","selectEvent","subMap","totalInternal$","BehaviorSubject","isLeft","isEditRelationship","toAdd","toRemove","isPending","currentItemIsLeftItem$","selection$","getSelectableList","listState","selection","map","s","addNameVariantSubscription","context","nameVariants","EntitySearchModalWithNameVariants","EntitySearchModal","externalSources","externalSourcesRD$","aggregate","source","findById","setTotals","close","select","selectableObjects","runOutsideAngular","sri","getNameVariant","nameVariant","arr","object","addRelationshipAction","nameVariant$","deselect","imported","externalSourcesAndOptions$","paginatedSearchOptions","totalExternal$","sources","options","getTotalExternalResults","setTotalInternals","navigate","subscription","discardEv","submitEv","provide","SEARCH_CONFIG_SERVICE","useClass","SubmissionImportExternalCollectionComponent","activeModal","selectedEvent","selectObject","emit","closeCollectionModal","dismiss","theOnlySelectable","searchComplete","isLoading","__extends","extendStatics","d","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","prototype","create","Subject_1","ObjectUnsubscribedError_1","exports","_super","_value","_this","call","defineProperty","get","enumerable","configurable","_subscribe","subscriber","hasError","thrownError","ObjectUnsubscribedError","Subject","deselectObject","DsDynamicLookupRelationSelectionTabComponent","paginationService","initialPagination","id","pageSize","resetRoute","selectionRD$","pagination","selected","offset","slice","length","Math","ceil","c","currentPagination$","getCurrentPagination","paginationID","updateRoute","DsDynamicOneboxComponent","modalService","searching","searchFailed","hideSearchingWhenUnsubscribed$","changeSearchingStatus","click$","formatter","text$","term","minChars","vocabulary$","findVocabularyById","name","isHierarchicalVocabulary$","hierarchical","status","isHierarchicalVocabulary","onInput","target","inputValue","instance","isPopupOpen","stopImmediatePropagation","onSelectItem","openTree","vocabulary","preloadLevel","modalRef","size","windowClass","componentInstance","selectedItem","then","fieldToDisplay","objToDisplay","icons","uniqueId","_item","setDisplayText","isNestedItem","isObject","hasIcons","hasVisibleIcons","hasVisible","icon","metadata","hasValue","hasPlaceholder","visibleWhenAuthorityEmpty","CF_UNSET","style","setEditMode","updateIcons","updateItem","unsetEditMode","obj","items","displayField","displayObj","iconsConfig","isArray","setInitialItems","add","getChipsIcons","chipsItem","duplicatedIndex","findIndex","_items","isEqual","getChipByIndex","chipsItems","getChipById","index","getChips","getChipsItems","out","hasItems","splice","update","chipsItemTarget","updateOrder","defaultConfigIndex","defaultConfig","config","configIndex","keys","SubjectSubscription","subject","observers","isStopped","subscriberIndex","indexOf","Subscription","DsDynamicTagComponent","bindId","hideSearchingWhenUnsubscribed","chips","submission","subItems","data","addTagsToChips","setTimeout","onKeyUp","keyCode","preventEventsPropagation","res","res1","i","DYNAMIC_FORM_CONTROL_TYPE_CUSTOM_SWITCH","DynamicCustomSwitchModel","layout","type","shrinkInOut","height","opacity","DsDynamicRelationGroupComponent","formBuilderService","formService","formCollapsed","rows","formConfiguration","isEmpty","expandForm","collapseForm","formId","getUniqueId","formModel","modelFromConfiguration","scopeUUID","submissionScope","initChipsFromModelValue","isMandatoryFieldEmpty","row","mandatoryField","onChipSelected","selectedChipItem","nextValue","isInputModel","clear","resetForm","save","modifyChip","addToChips","delete","formRef","formGroup","valid","buildChipItem","validateAllFormFields","control","initChipsValue$","initChips","mergeMap","valueModel","returnList","valueObj","returnObj","fieldName","return$","authority","fieldId","replace","findEntryDetailById","entryDetail","otherInformation","entry","combineLatest","valueListObj","reduce","acc","scan","modelValues","modelValue","markForCheck","initChipsValue","environment","ObjectUnsubscribedErrorImpl","Error","message","dsDynamicFormControlMapFn","inline","DsDynamicFormControlContainerComponent","componentFactoryResolver","dynamicFormComponentService","translateService","relationService","itemService","submissionObjectService","ref","asBootstrapFormGroup","hasErrorMessaging","customEvent","componentType","isRelationship","isWrapperAroundRelationshipList","relationshipConfig","setItem","repeatable","item$","relationshipsRD$","getItemRelationshipsByLabel","relationships","relationshipMD","firstMetadata","metadataField","nameVariantMD","metadataFields","setNameVariant","payload","relatedItems","metadataValue","isVirtual","relationship$","virtualValue","relationshipValue$","isCheckbox","changes","placeholder","instant","ngDoCheck","showErrorMessagesPreviousStage","showErrorMessages","forceShowErrorDetection","ngAfterViewInit","destroyFormControlComponent","createFormControlComponent","onChangeLanguage","hasRelationship","hasResultsSelected","openLookup","Event","Focus","Change","modalComp","query","label","collection","onRemove","arrayContext","path","getPath","formArrayControl","root","removeFormArrayGroup","parent","groups","addFormArrayGroup","hasHint","hint","submissionObject$","submissionObject","collection$","ViewContainerRef","DsDynamicVocabularyComponent","initValue$","initEntry$","getVocabularyEntryByID","getVocabularyEntryByValue","initEntry","place","updateValue","MapToOperator","Subscriber","destination","_next","DsDynamicLookupRelationSearchTabComponent","searchService","resultsRD$","linkTypes","resultFound","selectPage","take","filteredPage","pageItem","equals","deselectPage","allSelected","selectAll","selectAllLoading","fullPagination","fullSearchConfig","searchConfig","resultsRD","tap","switchMap","results","filteredResults","lift","setSelectedIds","idOfItems","resultListOfItems","relationType","rightwardType","leftwardType","searchByItemsAndType","selectableObject","arrUrl","_links","href","getRelatedItem","selObject","getIfInRemove","deselectAll","resultList","find","resultItem","searchResult","onResultFound","itemSearchResult","DsDynamicListComponent","setOptionsFromVocabulary","tabIndex","checked","valueUpdates","listGroup","controls","getVocabularyEntries","entries","groupCounter","itemsPerGroup","tempList","option","key","findKey","v","addFormGroupControl","groupLength","DsDynamicFormArrayComponent","moveSelection","previousIndex","currentIndex","moveGroup","prevIndex","onCustomEvent","arrayModel","dragDisabled","isDraggable","DsDynamicScrollableDropdownComponent","openDropdown","markAsUntouched","concat","Observable_1","Subscriber_1","Subscription_1","SubjectSubscription_1","rxSubscriber_1","SubjectSubscriber","rxSubscriber","operator","AnonymousSubject","len","copy","error","err","complete","_trySubscribe","EMPTY","asObservable","observable","Observable","FormComponent","changeDetectorRef","formErrors","displaySubmit","displayCancel","emitChange","submitLabel","cancelLabel","formLayout","addArrayItem","removeArrayItem","cancel","submitForm","getFormGroup","parentFormModel","getFormGroupValue","getFormGroupValidStatus","createFormGroup","initForm","formValid","statusChanges","setStatusChanged","getForm","formState","errors","fieldIndex","field","getFormControlById","addErrorToField","removeErrorFromField","removeForm","isValid","keepSync","getFormData","stateFormData","is","setValue","removeError","addControlErrors","setTouched","changeForm","onSubmit","reset","isItemReadOnly","removeItem","getEvent","isQualdropGroup","insertItem","insertFormArrayGroup","itemGroupModel","_c0","a0","a1","DynamicNGBootstrapCheckboxGroupComponent_label_4_Template","rf","ctx","_r3","checkboxModel_r1","$implicit","onCheckboxChange","ctx_r0","hidden","getClass","getCheckboxId","required","DynamicNGBootstrapInputComponent_div_2_Template","prefix","DynamicNGBootstrapInputComponent_div_6_Template","ctx_r1","suffix","DynamicNGBootstrapInputComponent_datalist_8_option_2_Template","DynamicNGBootstrapInputComponent_datalist_8_Template","ctx_r2","list$","_c1","mask","showMask","DynamicNGBootstrapRadioGroupComponent_legend_4_Template","legend","DynamicNGBootstrapRadioGroupComponent_label_6_Template","_r4","option_r2","disabled","DynamicNGBootstrapSelectComponent_option_4_Template","option_r1","DynamicNGBootstrapCalendarComponent","ɵfac","t","ɵcmp","selectors","viewQuery","_t","ngbCalendar","first","inputs","outputs","features","decls","vars","consts","template","getAdditional","max","min","focusedDate","directives","encapsulation","changeDetection","DynamicNGBootstrapCheckboxComponent","indeterminate","DynamicNGBootstrapCheckboxGroupComponent","getElementId","DynamicNGBootstrapInputComponent","inputType","autoComplete","autoFocus","maxLength","minLength","pattern","spellCheck","accept","multiple","step","hasList","pipes","DynamicNGBootstrapRadioGroupComponent","options$","DynamicNGBootstrapSelectComponent","compareWithFn","DynamicNGBootstrapTextAreaComponent","cols","wrap","DynamicNGBootstrapTimePickerComponent","ngbTimePicker","meridian","showSeconds","DynamicFormsNGBootstrapUIModule","ɵmod","ɵinj","imports","ReactiveFormsModule","N","TextMaskModule","DsDynamicDisabledComponent","modelValuesString","DsDynamicFormGroupComponent","DsDatePickerInlineComponent","CustomSwitchComponent","ReorderableRelationship","oldIndex","newIndex","hasMoved","submissionID","getId","getPlace","rightPlace","leftPlace","ExistingMetadataListElementComponent","metadataRepresentation$","relatedItem","relationMD","metadataRepresentationMD","getSubmissionObject","state","savePending","ImportType","None","LocalEntity","LocalAuthority","NewEntity","NewAuthority","ExternalSourceEntryImportModalComponent","selectService","notificationsService","labelPrefix","entityListId","authorityListId","importType","selectedImportType","importedObject","authorityEnabled","uri","externalSourceEntry","searchOptions","localEntitiesRD$","getLocalResults","import","importLocalEntity","importNewEntity","importLocalAuthority","importNewAuthority","deselectAllLists","selectedEntity","success","entityType","relatedEntityType","collectionListEntry","importExternalSourceEntry","removeLocalResultsCache","deselectEntity","selectEntity","entity","selectNewEntity","deselectAuthority","selectedAuthority","selectAuthority","selectNewAuthority","DsDynamicLookupRelationExternalSourceTabComponent","externalSource","entityTypes","g","entityTypesRD","hasSucceeded","entriesRD$","getExternalSourceEntries","importConfig","buttonLabel","container","importObjectSub","selectSingle"],"mappings":"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","file":"x","sourcesContent":["import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { AppState } from '../../../../../app.reducer';\nimport { Item } from '../../../../../core/shared/item.model';\nimport { getAllSucceededRemoteData, getRemoteDataPayload } from '../../../../../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../../../../empty.util';\nimport { ItemSearchResult } from '../../../../object-collection/shared/item-search-result.model';\nimport { SelectableListService } from '../../../../object-list/selectable-list/selectable-list.service';\nimport { RelationshipOptions } from '../../models/relationship-options.model';\nimport { RemoveRelationshipAction } from '../relation-lookup-modal/relationship.actions';\nimport { ViewMode } from '../../../../../core/shared/view-mode.model';\nimport { ReorderableRelationship } from '../existing-metadata-list-element/existing-metadata-list-element.component';\nimport { SubmissionService } from '../../../../../submission/submission.service';\n\n// tslint:disable:max-classes-per-file\n/**\n * Abstract class that defines objects that can be reordered\n */\nexport abstract class Reorderable {\n\n  constructor(public oldIndex?: number, public newIndex?: number) {\n  }\n\n  /**\n   * Return the id for this Reorderable\n   */\n  abstract getId(): string;\n\n  /**\n   * Return the place metadata for this Reorderable\n   */\n  abstract getPlace(): number;\n\n  /**\n   * Update the Reorderable\n   */\n  abstract update(): Observable<any>;\n\n  /**\n   * Returns true if the oldIndex of this Reorderable\n   * differs from the newIndex\n   */\n  get hasMoved(): boolean {\n    return this.oldIndex !== this.newIndex;\n  }\n}\n\n/**\n * Represents a single existing relationship value as metadata in submission\n */\n@Component({\n  selector: 'ds-existing-relation-list-element',\n  templateUrl: './existing-relation-list-element.component.html',\n  styleUrls: ['./existing-relation-list-element.component.scss']\n})\nexport class ExistingRelationListElementComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() listId: string;\n  @Input() submissionItem: Item;\n  @Input() reoRel: ReorderableRelationship;\n  @Input() metadataFields: string[];\n  @Input() relationshipOptions: RelationshipOptions;\n  @Input() submissionId: string;\n  relatedItem$: BehaviorSubject<Item> = new BehaviorSubject<Item>(undefined);\n  viewType = ViewMode.ListElement;\n  @Output() remove: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * List of subscriptions to unsubscribe from\n   */\n  private subs: Subscription[] = [];\n\n  constructor(\n    private selectableListService: SelectableListService,\n    private submissionService: SubmissionService,\n    private store: Store<AppState>\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.ngOnChanges();\n  }\n\n  /**\n   * Change callback for the component\n   */\n  ngOnChanges() {\n    if (hasValue(this.reoRel)) {\n      const item$ = this.reoRel.useLeftItem ?\n        this.reoRel.relationship.leftItem : this.reoRel.relationship.rightItem;\n      this.subs.push(item$.pipe(\n        getAllSucceededRemoteData(),\n        getRemoteDataPayload(),\n        filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid))\n      ).subscribe((item: Item) => {\n        this.relatedItem$.next(item);\n      }));\n    }\n\n  }\n\n  /**\n   * Removes the selected relationship from the list\n   */\n  removeSelection() {\n    this.submissionService.dispatchSave(this.submissionId);\n    this.selectableListService.deselectSingle(this.listId, Object.assign(new ItemSearchResult(), { indexableObject: this.relatedItem$.getValue() }));\n    this.store.dispatch(new RemoveRelationshipAction(this.submissionItem, this.relatedItem$.getValue(), this.relationshipOptions.relationshipType, this.submissionId));\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n}\n\n// tslint:enable:max-classes-per-file\n","<div class=\"d-flex\">\n    <span class=\"mr-auto text-contents\">\n        <ng-container *ngIf=\"!(relatedItem$ | async)\">\n            <ds-loading [showMessage]=\"false\"></ds-loading>\n        </ng-container>\n        <ng-container *ngIf=\"(relatedItem$ | async)\">\n            <ds-listable-object-component-loader [showLabel]=\"false\" [viewMode]=\"viewType\" [object]=\"(relatedItem$ | async)\"></ds-listable-object-component-loader>\n        </ng-container>\n    </span>\n    <button type=\"button\" class=\"btn btn-secondary\"\n            (click)=\"removeSelection()\">\n        <i class=\"fas fa-trash\" aria-hidden=\"true\"></i>\n    </button>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { of as observableOf, Subscription } from 'rxjs';\nimport { catchError, distinctUntilChanged } from 'rxjs/operators';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\nimport { DynamicFormLayoutService, DynamicFormValidationService } from '@ng-dynamic-forms/core';\n\nimport { VocabularyService } from '../../../../../../core/submission/vocabularies/vocabulary.service';\nimport { hasValue, isEmpty, isNotEmpty } from '../../../../../empty.util';\nimport { PageInfo } from '../../../../../../core/shared/page-info.model';\nimport { FormFieldMetadataValueObject } from '../../../models/form-field-metadata-value.model';\nimport { VocabularyEntry } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { DynamicLookupNameModel } from './dynamic-lookup-name.model';\nimport { ConfidenceType } from '../../../../../../core/shared/confidence-type';\nimport {\n  PaginatedList,\n  buildPaginatedList\n} from '../../../../../../core/data/paginated-list.model';\nimport { getFirstSucceededRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport { DsDynamicVocabularyComponent } from '../dynamic-vocabulary.component';\n\n/**\n * Component representing a lookup or lookup-name input field\n */\n@Component({\n  selector: 'ds-dynamic-lookup',\n  styleUrls: ['./dynamic-lookup.component.scss'],\n  templateUrl: './dynamic-lookup.component.html'\n})\nexport class DsDynamicLookupComponent extends DsDynamicVocabularyComponent implements OnDestroy, OnInit {\n\n  @Input() group: FormGroup;\n  @Input() model: any;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  public editMode = false;\n  public firstInputValue = '';\n  public secondInputValue = '';\n  public loading = false;\n  public pageInfo: PageInfo;\n  public optionsList: any;\n\n  protected subs: Subscription[] = [];\n\n  constructor(protected vocabularyService: VocabularyService,\n              private cdr: ChangeDetectorRef,\n              protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(vocabularyService, layoutService, validationService);\n  }\n\n  /**\n   * Converts an item from the result list to a `string` to display in the `<input>` field.\n   */\n  inputFormatter = (x: { display: string }, y: number) => {\n    return y === 1 ? this.firstInputValue : this.secondInputValue;\n  }\n\n  /**\n   * Initialize the component, setting up the init form value\n   */\n  ngOnInit() {\n    if (isNotEmpty(this.model.value)) {\n      this.setCurrentValue(this.model.value, true);\n    }\n\n    this.subs.push(this.model.valueChanges\n      .subscribe((value) => {\n        if (isEmpty(value)) {\n          this.resetFields();\n        } else if (!this.editMode) {\n          this.setCurrentValue(this.model.value);\n        }\n      }));\n  }\n\n  /**\n   * Check if model value has an authority\n   */\n  public hasAuthorityValue() {\n    return hasValue(this.model.value)\n      && typeof this.model.value === 'object'\n      && this.model.value.hasAuthority();\n  }\n\n  /**\n   * Check if current value has an authority\n   */\n  public hasEmptyValue() {\n    return isNotEmpty(this.getCurrentValue());\n  }\n\n  /**\n   * Clear inputs whether there is no results and authority is closed\n   */\n  public clearFields() {\n    if (this.model.vocabularyOptions.closed) {\n      this.resetFields();\n    }\n  }\n\n  /**\n   * Check if edit button is disabled\n   */\n  public isEditDisabled() {\n    return !this.hasAuthorityValue();\n  }\n\n  /**\n   * Check if input is disabled\n   */\n  public isInputDisabled() {\n    return (this.model.vocabularyOptions.closed && this.hasAuthorityValue() && !this.editMode);\n  }\n\n  /**\n   * Check if model is instanceof DynamicLookupNameModel\n   */\n  public isLookupName() {\n    return (this.model instanceof DynamicLookupNameModel);\n  }\n\n  /**\n   * Check if search button is disabled\n   */\n  public isSearchDisabled() {\n    return isEmpty(this.firstInputValue) || this.editMode;\n  }\n\n  /**\n   * Update model value with the typed text if vocabulary is not closed\n   * @param event the typed text\n   */\n  public onChange(event) {\n    event.preventDefault();\n    if (!this.model.vocabularyOptions.closed) {\n      if (isNotEmpty(this.getCurrentValue())) {\n        const currentValue = new FormFieldMetadataValueObject(this.getCurrentValue());\n        if (!this.editMode) {\n          this.updateModel(currentValue);\n        }\n      } else {\n        this.remove();\n      }\n    }\n  }\n\n  /**\n   * Load more result entries\n   */\n  public onScroll() {\n    if (!this.loading && this.pageInfo.currentPage <= this.pageInfo.totalPages) {\n      this.updatePageInfo(\n        this.pageInfo.elementsPerPage,\n        this.pageInfo.currentPage + 1,\n        this.pageInfo.totalElements,\n        this.pageInfo.totalPages\n      );\n      this.search();\n    }\n  }\n\n  /**\n   * Update model value with selected entry\n   * @param event the selected entry\n   */\n  public onSelect(event) {\n    this.updateModel(event);\n  }\n\n  /**\n   * Reset the current value when dropdown toggle\n   */\n  public openChange(isOpened: boolean) {\n    if (!isOpened) {\n      if (this.model.vocabularyOptions.closed && !this.hasAuthorityValue()) {\n        this.setCurrentValue('');\n      }\n    }\n  }\n\n  /**\n   * Reset the model value\n   */\n  public remove() {\n    this.group.markAsPristine();\n    this.dispatchUpdate(null);\n  }\n\n  /**\n   * Saves all changes\n   */\n  public saveChanges() {\n    if (isNotEmpty(this.getCurrentValue())) {\n      const newValue = Object.assign(new VocabularyEntry(), this.model.value, {\n        display: this.getCurrentValue(),\n        value: this.getCurrentValue()\n      });\n      this.updateModel(newValue);\n    } else {\n      this.remove();\n    }\n    this.switchEditMode();\n  }\n\n  /**\n   * Converts a stream of text values from the `<input>` element to the stream of the array of items\n   * to display in the result list.\n   */\n  public search() {\n    this.optionsList = null;\n    this.updatePageInfo(this.model.maxOptions, 1);\n    this.loading = true;\n\n    this.subs.push(this.vocabularyService.getVocabularyEntriesByValue(\n      this.getCurrentValue(),\n      false,\n      this.model.vocabularyOptions,\n      this.pageInfo\n    ).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      catchError(() =>\n        observableOf(buildPaginatedList(\n          new PageInfo(),\n          []\n        ))\n      ),\n      distinctUntilChanged())\n      .subscribe((list: PaginatedList<VocabularyEntry>) => {\n        this.optionsList = list.page;\n        this.updatePageInfo(\n          list.pageInfo.elementsPerPage,\n          list.pageInfo.currentPage,\n          list.pageInfo.totalElements,\n          list.pageInfo.totalPages\n        );\n        this.loading = false;\n        this.cdr.detectChanges();\n      }));\n  }\n\n  /**\n   * Changes the edit mode flag\n   */\n  public switchEditMode() {\n    this.editMode = !this.editMode;\n  }\n\n  /**\n   * Callback functions for whenClickOnConfidenceNotAccepted event\n   */\n  public whenClickOnConfidenceNotAccepted(sdRef: NgbDropdown, confidence: ConfidenceType) {\n    if (!this.model.readOnly) {\n      sdRef.open();\n      this.search();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n  /**\n   * Sets the current value with the given value.\n   * @param value The value to set.\n   * @param init Representing if is init value or not.\n   */\n  public setCurrentValue(value: any, init = false) {\n    if (init) {\n      this.getInitValueFromModel()\n        .subscribe((formValue: FormFieldMetadataValueObject) => this.setDisplayInputValue(formValue.display));\n    } else if (hasValue(value)) {\n      if (value instanceof FormFieldMetadataValueObject || value instanceof VocabularyEntry) {\n        this.setDisplayInputValue(value.display);\n      }\n    }\n  }\n\n  protected setDisplayInputValue(displayValue: string) {\n    if (hasValue(displayValue)) {\n      if (this.isLookupName()) {\n        const values = displayValue.split((this.model as DynamicLookupNameModel).separator);\n\n        this.firstInputValue = (values[0] || '').trim();\n        this.secondInputValue = (values[1] || '').trim();\n      } else {\n        this.firstInputValue = displayValue || '';\n      }\n      this.cdr.detectChanges();\n    }\n  }\n\n  /**\n   * Gets the current text present in the input field(s)\n   */\n  protected getCurrentValue(): string {\n    let result = '';\n    if (!this.isLookupName()) {\n      result = this.firstInputValue;\n    } else {\n      if (isNotEmpty(this.firstInputValue)) {\n        result = this.firstInputValue;\n      }\n      if (isNotEmpty(this.secondInputValue)) {\n        result = isEmpty(result)\n          ? this.secondInputValue\n          : this.firstInputValue + (this.model as DynamicLookupNameModel).separator + ' ' + this.secondInputValue;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Clear text present in the input field(s)\n   */\n  protected resetFields() {\n    this.firstInputValue = '';\n    if (this.isLookupName()) {\n      this.secondInputValue = '';\n    }\n  }\n\n  protected updateModel(value) {\n    this.group.markAsDirty();\n    this.dispatchUpdate(value);\n    this.setCurrentValue(value);\n    this.optionsList = null;\n    this.pageInfo = null;\n  }\n\n}\n","<div ngbDropdown #sdRef=\"ngbDropdown\"\n     (click)=\"$event.stopPropagation();\"\n     (openChange)=\"openChange($event);\">\n\n  <div class=\"form-row align-items-center\">\n    <!--Simple lookup, first field -->\n    <div class=\"col right-addon\">\n      <i dsAuthorityConfidenceState\n         class=\"far fa-circle fa-2x fa-fw position-absolute mt-1 p-0 pr-2\"\n         aria-hidden=\"true\"\n         [authorityValue]=\"model.value\"\n         (whenClickOnConfidenceNotAccepted)=\"whenClickOnConfidenceNotAccepted(sdRef, $event)\"></i>\n      <input class=\"form-control\"\n             [attr.aria-labelledby]=\"'label_' + model.id\"\n             [attr.autoComplete]=\"model.autoComplete\"\n             [class.is-invalid]=\"showErrorMessages\"\n             [id]=\"model.id\"\n             [name]=\"model.name\"\n             [type]=\"model.inputType\"\n             [(ngModel)]=\"firstInputValue\"\n             [disabled]=\"isInputDisabled()\"\n             [placeholder]=\"model.placeholder | translate\"\n             [readonly]=\"model.readOnly\"\n             (change)=\"onChange($event)\"\n             (blur)=\"onBlur($event); $event.stopPropagation(); sdRef.close();\"\n             (focus)=\"onFocus($event); $event.stopPropagation(); sdRef.close();\"\n             (click)=\"$event.stopPropagation(); $event.stopPropagation(); sdRef.close();\">\n    </div>\n\n    <!--Lookup-name, second field-->\n    <div *ngIf=\"isLookupName()\" class=\"col\" >\n      <input  class=\"form-control\"\n              [ngClass]=\"{}\"\n              [attr.aria-labelledby]=\"'label_' + model.id\"\n              [attr.autoComplete]=\"model.autoComplete\"\n              [class.is-invalid]=\"showErrorMessages\"\n              [id]=\"id\"\n              [name]=\"model.name + '_2'\"\n              [type]=\"model.inputType\"\n              [(ngModel)]=\"secondInputValue\"\n              [disabled]=\"firstInputValue.length === 0 || isInputDisabled()\"\n              [placeholder]=\"model.secondPlaceholder | translate\"\n              [readonly]=\"model.readOnly\"\n              (change)=\"onChange($event)\"\n              (blur)=\"onBlur($event); $event.stopPropagation(); sdRef.close();\"\n              (focus)=\"onFocus($event); $event.stopPropagation(); sdRef.close();\"\n              (click)=\"$event.stopPropagation(); sdRef.close();\">\n    </div>\n    <div class=\"col-auto text-center\">\n      <button ngbDropdownAnchor\n              class=\"btn btn-secondary\"\n              type=\"button\"\n              ngbTooltip=\"{{'form.search-help' | translate}}\"\n              placement=\"top\"\n              [disabled]=\"model.readOnly || isSearchDisabled()\"\n              [hidden]=\"isInputDisabled()\"\n              (click)=\"sdRef.open(); search(); $event.stopPropagation();\">{{'form.search' | translate}}\n      </button>\n      <button *ngIf=\"isInputDisabled()\" class=\"btn btn-secondary\"\n              type=\"button\"\n              ngbTooltip=\"{{'form.clear-help' | translate}}\"\n              placement=\"top\"\n              [disabled]=\"model.readOnly\"\n              (click)=\"remove()\">{{'form.clear' | translate}}\n      </button>\n    </div>\n    <div class=\"col-auto text-center\">\n      <button *ngIf=\"!editMode\" class=\"btn btn-secondary\"\n              type=\"button\"\n              ngbTooltip=\"{{'form.edit-help' | translate}}\"\n              placement=\"top\"\n              [disabled]=\"isEditDisabled()\"\n              (click)=\"switchEditMode()\">{{'form.edit' | translate}}\n      </button>\n      <button *ngIf=\"editMode\" class=\"btn btn-secondary\"\n              type=\"button\"\n              ngbTooltip=\"{{'form.save-help' | translate}}\"\n              placement=\"top\"\n              [disabled]=\"!hasEmptyValue()\"\n              (click)=\"saveChanges()\">{{'form.save' | translate}}\n      </button>\n    </div>\n  </div>\n\n  <div ngbDropdownMenu\n       class=\"dropdown-menu scrollable-dropdown-menu w-100\"\n       aria-haspopup=\"true\"\n       aria-expanded=\"false\"\n       [attr.aria-labelledby]=\"'label_' + model.id\">\n    <div class=\"scrollable-menu\"\n         aria-labelledby=\"scrollableDropdownMenuButton\"\n         infiniteScroll\n         [infiniteScrollDistance]=\"2\"\n         [infiniteScrollThrottle]=\"50\"\n         (scrolled)=\"onScroll()\"\n         [scrollWindow]=\"false\">\n\n      <button class=\"dropdown-item disabled\"\n              *ngIf=\"optionsList && optionsList.length == 0\"\n              (click)=\"$event.stopPropagation(); clearFields(); sdRef.close();\">{{'form.no-results' | translate}}\n      </button>\n      <button class=\"dropdown-item lookup-item\"\n              *ngFor=\"let listEntry of optionsList\"\n              (click)=\"$event.stopPropagation(); onSelect(listEntry); sdRef.close();\"\n              title=\"{{ listEntry.display }}\">\n        <ng-container\n          [ngTemplateOutlet]=\"(listEntry.hasOtherInformation()) ? hasInfo : noInfo\"\n          [ngTemplateOutletContext]=\"{entry: listEntry}\">\n        </ng-container>\n      </button>\n      <div class=\"scrollable-dropdown-loading text-center\" *ngIf=\"loading\"><p>{{'form.loading' | translate}}</p></div>\n    </div>\n  </div>\n</div>\n\n<ng-template #hasInfo let-entry=\"entry\">\n  <ul class=\"list-unstyled mb-0\" [attr.aria-labelledby]=\"'label_' + model.id\">\n    <li class=\"list-item text-truncate text-primary font-weight-bold\">{{entry.value}}</li>\n    <li class=\"list-item text-truncate text-secondary\" *ngFor=\"let item of entry.otherInformation | dsObjNgFor\" >\n      {{ 'form.other-information.' + item.key | translate }} : {{item.value}}\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noInfo let-entry=\"entry\">\n  <ul class=\"list-unstyled mb-0\" [attr.aria-labelledby]=\"'label_' + model.id\">\n    <li class=\"list-item text-truncate text-primary font-weight-bold\">{{entry.value}}</li>\n  </ul>\n</ng-template>\n","import { Component, EventEmitter, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { hasValue, isNotEmpty } from '../../../../empty.util';\nimport { map, skip, switchMap, take } from 'rxjs/operators';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../../../../core/shared/search/search-configuration.service';\nimport { SelectableListService } from '../../../../object-list/selectable-list/selectable-list.service';\nimport { SelectableListState } from '../../../../object-list/selectable-list/selectable-list.reducer';\nimport { ListableObject } from '../../../../object-collection/shared/listable-object.model';\nimport { RelationshipOptions } from '../../models/relationship-options.model';\nimport { SearchResult } from '../../../../search/models/search-result.model';\nimport { Item } from '../../../../../core/shared/item.model';\nimport {\n  AddRelationshipAction,\n  RemoveRelationshipAction,\n  UpdateRelationshipNameVariantAction,\n} from './relationship.actions';\nimport { RelationshipService } from '../../../../../core/data/relationship.service';\nimport { RelationshipTypeService } from '../../../../../core/data/relationship-type.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../../../app.reducer';\nimport { Context } from '../../../../../core/shared/context.model';\nimport { LookupRelationService } from '../../../../../core/data/lookup-relation.service';\nimport { ExternalSource } from '../../../../../core/shared/external-source.model';\nimport { ExternalSourceService } from '../../../../../core/data/external-source.service';\nimport { Router } from '@angular/router';\nimport { RemoteDataBuildService } from '../../../../../core/cache/builders/remote-data-build.service';\nimport { getAllSucceededRemoteDataPayload } from '../../../../../core/shared/operators';\nimport { followLink } from '../../../../utils/follow-link-config.model';\nimport { RelationshipType } from '../../../../../core/shared/item-relationships/relationship-type.model';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\n@Component({\n  selector: 'ds-dynamic-lookup-relation-modal',\n  styleUrls: ['./dynamic-lookup-relation-modal.component.scss'],\n  templateUrl: './dynamic-lookup-relation-modal.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n\n/**\n * Represents a modal where the submitter can select items to be added as a certain relationship type to the object being submitted\n */\nexport class DsDynamicLookupRelationModalComponent implements OnInit, OnDestroy {\n  @Output() selectEvent: EventEmitter<ListableObject[]> = new EventEmitter<ListableObject[]>();\n\n  /**\n   * The label to use to display i18n messages (describing the type of relationship)\n   */\n  label: string;\n\n  /**\n   * Options for searching related items\n   */\n  relationshipOptions: RelationshipOptions;\n\n  /**\n   * The ID of the list to add/remove selected items to/from\n   */\n  listId: string;\n\n  /**\n   * The item we're adding relationships to\n   */\n  item;\n\n  /**\n   * The collection we're submitting an item to\n   */\n  collection;\n\n  /**\n   * Is the selection repeatable?\n   */\n  repeatable: boolean;\n\n  /**\n   * The list of selected items\n   */\n  selection$: Observable<ListableObject[]>;\n\n  /**\n   * The context to display lists\n   */\n  context: Context;\n\n  /**\n   * The metadata-fields describing these relationships\n   */\n  metadataFields: string;\n\n  query: string;\n\n  /**\n   * A map of subscriptions within this component\n   */\n  subMap: {\n    [uuid: string]: Subscription\n  } = {};\n  submissionId: string;\n\n  /**\n   * A list of the available external sources configured for this relationship\n   */\n  externalSourcesRD$: Observable<ExternalSource[]>;\n\n  /**\n   * The total amount of internal items for the current options\n   */\n  totalInternal$: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n\n  /**\n   * The total amount of results for each external source using the current options\n   */\n  totalExternal$: Observable<number[]>;\n\n  /**\n   * The type of relationship\n   */\n  relationshipType: RelationshipType;\n\n  /**\n   * Checks if relationship is left\n   */\n  currentItemIsLeftItem$: Observable<boolean>;\n\n  /**\n   * Relationship is left\n   */\n  isLeft = false;\n\n  /**\n   * Checks if modal is being used by edit relationship page\n   */\n  isEditRelationship = false;\n\n  /**\n   * Maintain the list of the related items to be added\n   */\n  toAdd = [];\n\n  /**\n   * Maintain the list of the related items to be removed\n   */\n  toRemove = [];\n\n  /**\n   * Disable buttons while the submit button is pressed\n   */\n  isPending = false;\n\n  constructor(\n    public modal: NgbActiveModal,\n    private selectableListService: SelectableListService,\n    private relationshipService: RelationshipService,\n    private relationshipTypeService: RelationshipTypeService,\n    private externalSourceService: ExternalSourceService,\n    private lookupRelationService: LookupRelationService,\n    private searchConfigService: SearchConfigurationService,\n    private rdbService: RemoteDataBuildService,\n    private zone: NgZone,\n    private store: Store<AppState>,\n    private router: Router,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    if (!!this.currentItemIsLeftItem$) {\n      this.currentItemIsLeftItem$.subscribe((isLeft) => {\n        this.isLeft = isLeft;\n      });\n    }\n\n    this.selection$ = this.selectableListService\n      .getSelectableList(this.listId)\n      .pipe(map((listState: SelectableListState) => hasValue(listState) && hasValue(listState.selection) ? listState.selection : []));\n    this.selection$.pipe(take(1)).subscribe((selection) =>\n      selection.map((s: SearchResult<Item>) => this.addNameVariantSubscription(s))\n    );\n    if (this.relationshipOptions.nameVariants === 'true') {\n      this.context = Context.EntitySearchModalWithNameVariants;\n    } else {\n      this.context = Context.EntitySearchModal;\n    }\n\n    if (isNotEmpty(this.relationshipOptions.externalSources)) {\n      this.externalSourcesRD$ = this.rdbService.aggregate(\n        this.relationshipOptions.externalSources.map((source) => {\n          return this.externalSourceService.findById(\n            source,\n            true,\n            true,\n            followLink('entityTypes')\n          );\n        })\n      ).pipe(\n        getAllSucceededRemoteDataPayload()\n      );\n    }\n\n    this.setTotals();\n  }\n\n  close() {\n    this.toAdd = [];\n    this.toRemove = [];\n    this.modal.close();\n  }\n\n  /**\n   * Select (a list of) objects and add them to the store\n   * @param selectableObjects\n   */\n  select(...selectableObjects: SearchResult<Item>[]) {\n    this.zone.runOutsideAngular(\n      () => {\n        const obs: Observable<any[]> = observableCombineLatest([...selectableObjects.map((sri: SearchResult<Item>) => {\n            this.addNameVariantSubscription(sri);\n            return this.relationshipService.getNameVariant(this.listId, sri.indexableObject.uuid)\n              .pipe(\n                take(1),\n                map((nameVariant: string) => {\n                  return {\n                    item: sri.indexableObject,\n                    nameVariant\n                  };\n                })\n              );\n          })\n        ]);\n        obs\n          .subscribe((arr: any[]) => {\n            return arr.forEach((object: any) => {\n              const addRelationshipAction = new AddRelationshipAction(this.item, object.item, this.relationshipOptions.relationshipType, this.submissionId, object.nameVariant);\n              this.store.dispatch(addRelationshipAction);\n              }\n            );\n          });\n      });\n  }\n\n  /**\n   * Add a subscription updating relationships with name variants\n   * @param sri The search result to track name variants for\n   */\n  private addNameVariantSubscription(sri: SearchResult<Item>) {\n    const nameVariant$ = this.relationshipService.getNameVariant(this.listId, sri.indexableObject.uuid);\n    this.subMap[sri.indexableObject.uuid] = nameVariant$.pipe(\n      skip(1),\n    ).subscribe((nameVariant: string) => this.store.dispatch(new UpdateRelationshipNameVariantAction(this.item, sri.indexableObject, this.relationshipOptions.relationshipType, this.submissionId, nameVariant)));\n  }\n\n  /**\n   * Deselect (a list of) objects and remove them from the store\n   * @param selectableObjects\n   */\n  deselect(...selectableObjects: SearchResult<Item>[]) {\n    this.zone.runOutsideAngular(\n      () => selectableObjects.forEach((object) => {\n        this.subMap[object.indexableObject.uuid].unsubscribe();\n        this.store.dispatch(new RemoveRelationshipAction(this.item, object.indexableObject, this.relationshipOptions.relationshipType, this.submissionId));\n      })\n    );\n  }\n\n  /**\n   * Called when an external object has been imported, resets the total values and adds the object to the selected list\n   * @param object\n   */\n  imported(object) {\n    this.setTotals();\n    this.select(object);\n  }\n\n  /**\n   * Calculate and set the total entries available for each tab\n   */\n  setTotals() {\n    const externalSourcesAndOptions$ = observableCombineLatest([\n      this.externalSourcesRD$,\n      this.searchConfigService.paginatedSearchOptions\n    ]);\n\n    this.totalExternal$ = externalSourcesAndOptions$.pipe(\n      switchMap(([sources, options]) =>\n        observableCombineLatest([...sources.map((source: ExternalSource) => this.lookupRelationService.getTotalExternalResults(source, options))]))\n    );\n  }\n\n\n  setTotalInternals(totalPages: number) {\n    this.totalInternal$.next(totalPages);\n  }\n\n  ngOnDestroy() {\n    this.router.navigate([], {});\n    Object.values(this.subMap).forEach((subscription) => subscription.unsubscribe());\n  }\n\n  /* tslint:disable:no-empty */\n  /**\n   * Called when discard button is clicked, emit discard event to parent to conclude functionality\n   */\n  discardEv(): void {\n  }\n\n  /**\n   * Called when submit button is clicked, emit submit event to parent to conclude functionality\n   */\n  submitEv(): void {\n  }\n  /* tslint:enable:no-empty */\n\n}\n","<div class=\"modal-header\">\n    <h4 class=\"modal-title\" id=\"modal-title\">{{ ('submission.sections.describe.relationship-lookup.title.' + relationshipOptions.relationshipType) | translate }}</h4>\n    <button type=\"button\" [disabled]=\"isPending\" class=\"close\" aria-label=\"Close button\" aria-describedby=\"modal-title\"\n            (click)=\"close()\">\n        <span aria-hidden=\"true\">&times;</span>\n    </button>\n</div>\n<div class=\"modal-body\">\n    <ds-loading *ngIf=\"!item || !collection\"></ds-loading>\n    <ng-container *ngIf=\"item && collection\">\n        <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\n            <li ngbNavItem>\n                <a ngbNavLink>{{'submission.sections.describe.relationship-lookup.search-tab.tab-title.' + relationshipOptions.relationshipType | translate  : { count: (totalInternal$ | async)} }}</a>\n                <ng-template ngbNavContent>\n                    <ds-dynamic-lookup-relation-search-tab\n                            [selection$]=\"selection$\"\n                            [listId]=\"listId\"\n                            [relationship]=\"relationshipOptions\"\n                            [repeatable]=\"repeatable\"\n                            [context]=\"context\"\n                            [query]=\"query\"\n                            [relationshipType]=\"relationshipType\"\n                            [isLeft]=\"isLeft\"\n                            [item]=\"item\"\n                            [isEditRelationship]=\"isEditRelationship\"\n                            [toRemove]=\"toRemove\"\n                            (selectObject)=\"select($event)\"\n                            (deselectObject)=\"deselect($event)\"\n                            (resultFound)=\"setTotalInternals($event.pageInfo.totalElements)\"\n                            class=\"d-block pt-3\">\n                    </ds-dynamic-lookup-relation-search-tab>\n                </ng-template>\n            </li>\n            <li ngbNavItem *ngFor=\"let source of (externalSourcesRD$ | async); let idx = index\">\n                <a ngbNavLink>{{'submission.sections.describe.relationship-lookup.search-tab.tab-title.' + source.id | translate  : { count: (totalExternal$ | async)[idx] } }}</a>\n                <ng-template ngbNavContent>\n                    <ds-dynamic-lookup-relation-external-source-tab\n                            [label]=\"label\"\n                            [listId]=\"listId\"\n                            [repeatable]=\"repeatable\"\n                            [item]=\"item\"\n                            [collection]=\"collection\"\n                            [relationship]=\"relationshipOptions\"\n                            [context]=\"context\"\n                            [externalSource]=\"source\"\n                            (importedObject)=\"imported($event)\"\n                            class=\"d-block pt-3\">\n                    </ds-dynamic-lookup-relation-external-source-tab>\n                </ng-template>\n            </li>\n            <li ngbNavItem *ngIf=\"!isEditRelationship\">\n                <a ngbNavLink>{{'submission.sections.describe.relationship-lookup.selection-tab.tab-title' | translate : { count: (selection$ | async)?.length } }}</a>\n                <ng-template ngbNavContent>\n                    <ds-dynamic-lookup-relation-selection-tab\n                            [selection$]=\"selection$\"\n                            [listId]=\"listId\"\n                            [relationshipType]=\"relationshipOptions.relationshipType\"\n                            [repeatable]=\"repeatable\"\n                            [context]=\"context\"\n                            (selectObject)=\"select($event)\"\n                            (deselectObject)=\"deselect($event)\"\n                            class=\"d-block pt-3\">\n                    </ds-dynamic-lookup-relation-selection-tab>\n                </ng-template>\n            </li>\n        </ul>\n        <div [ngbNavOutlet]=\"nav\"></div>\n    </ng-container>\n</div>\n<div class=\"modal-footer\">\n    <small>{{ ('submission.sections.describe.relationship-lookup.selected' | translate: {size: (selection$ | async)?.length || 0}) }}</small>\n    <div class=\"buttons-container\">\n    <div class=\"close-button\">\n        <button type=\"button\" [disabled]=\"isPending\" class=\"btn btn-outline-secondary\" (click)=\"close()\">\n            {{ ('submission.sections.describe.relationship-lookup.close' | translate) }}</button>\n    </div>\n     <div *ngIf=\"isEditRelationship\" class=\"button-row bottom\">\n        <div class=\"float-right\">\n          <button class=\"btn btn-danger discard\"\n                  [disabled]=\"(toAdd.length == 0 && toRemove.length == 0) || isPending\"\n                  (click)=\"discardEv()\">\n                  <i class=\"fas fa-times\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.discard-button\" | translate}}</span>\n          </button>\n          <button class=\"btn btn-primary submit\"\n                [disabled]=\"(toAdd.length == 0 && toRemove.length == 0) || isPending\"\n                  (click)=\"submitEv()\">\n                  <span *ngIf=\"isPending\" class=\"spinner-border spinner-border-sm\" role=\"status\"\n                                  aria-hidden=\"true\"></span>\n                  <i class=\"fas fa-save\"></i>\n            <span class=\"d-none d-sm-inline\">&nbsp;{{\"item.edit.metadata.save-button\" | translate}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n</div>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { CollectionListEntry } from '../../../shared/collection-dropdown/collection-dropdown.component';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * Wrap component for 'ds-collection-dropdown'.\n */\n@Component({\n  selector: 'ds-submission-import-external-collection',\n  styleUrls: ['./submission-import-external-collection.component.scss'],\n  templateUrl: './submission-import-external-collection.component.html'\n})\nexport class SubmissionImportExternalCollectionComponent {\n  /**\n   * The event passed by 'ds-collection-dropdown'.\n   */\n  @Output() public selectedEvent = new EventEmitter<CollectionListEntry>();\n\n  /**\n   * If present this value is used to filter collection list by entity type\n   */\n  public entityType: string;\n\n  /**\n   * If collection searching is pending or not\n   */\n  public loading = true;\n\n  /**\n   * Initialize the component variables.\n   * @param {NgbActiveModal} activeModal\n   */\n  constructor(\n    private activeModal: NgbActiveModal\n  ) { }\n\n  /**\n   * This method populates the 'selectedEvent' variable.\n   */\n  public selectObject(event): void {\n    this.selectedEvent.emit(event);\n  }\n\n  /**\n   * This method closes the modal.\n   */\n  public closeCollectionModal(): void {\n    this.activeModal.dismiss(false);\n  }\n\n  /**\n   * Propagate the onlySelectable collection\n   * @param theOnlySelectable\n   */\n  public theOnlySelectable(theOnlySelectable: CollectionListEntry) {\n    this.selectedEvent.emit(theOnlySelectable);\n  }\n\n  /**\n   * Set the hasChoice state\n   * @param hasChoice\n   */\n  public searchComplete() {\n    this.loading = false;\n  }\n\n  /**\n   * If the component is in loading state.\n   */\n  public isLoading(): boolean {\n    return !!this.loading;\n  }\n\n}\n","<div>\n  <div class=\"modal-header\">{{'dso-selector.select.collection.head' | translate}}\n    <button type=\"button\" class=\"close\" (click)=\"closeCollectionModal()\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">×</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <ds-loading *ngIf=\"isLoading()\"></ds-loading>\n    <ds-collection-dropdown [ngClass]=\"{'d-none': isLoading()}\"\n                            (selectionChange)=\"selectObject($event)\"\n                            (searchComplete)=\"searchComplete()\"\n                            (theOnlySelectable)=\"theOnlySelectable($event)\"\n                            [entityType]=\"entityType\">\n    </ds-collection-dropdown>\n  </div>\n</div>\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"./Subject\");\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../../../../../core/shared/search/search-configuration.service';\nimport { Observable } from 'rxjs';\nimport { ListableObject } from '../../../../../object-collection/shared/listable-object.model';\nimport { RemoteData } from '../../../../../../core/data/remote-data';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { PaginationComponentOptions } from '../../../../../pagination/pagination-component-options.model';\nimport { buildPaginatedList, PaginatedList } from '../../../../../../core/data/paginated-list.model';\nimport { Router } from '@angular/router';\nimport { PaginatedSearchOptions } from '../../../../../search/models/paginated-search-options.model';\nimport { PageInfo } from '../../../../../../core/shared/page-info.model';\nimport { Context } from '../../../../../../core/shared/context.model';\nimport { createSuccessfulRemoteDataObject } from '../../../../../remote-data.utils';\nimport { PaginationService } from '../../../../../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-dynamic-lookup-relation-selection-tab',\n  styleUrls: ['./dynamic-lookup-relation-selection-tab.component.scss'],\n  templateUrl: './dynamic-lookup-relation-selection-tab.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n\n/**\n * Tab for inside the lookup model that represents the currently selected relationships\n */\nexport class DsDynamicLookupRelationSelectionTabComponent {\n  /**\n   * A string that describes the type of relationship\n   */\n  @Input() relationshipType: string;\n\n  /**\n   * The ID of the list to add/remove selected items to/from\n   */\n  @Input() listId: string;\n\n  /**\n   * Is the selection repeatable?\n   */\n  @Input() repeatable: boolean;\n\n  /**\n   * The list of selected items\n   */\n  @Input() selection$: Observable<ListableObject[]>;\n\n  /**\n   * The paginated list of selected items\n   */\n  @Input() selectionRD$: Observable<RemoteData<PaginatedList<ListableObject>>>;\n\n  /**\n   * The context to display lists\n   */\n  @Input() context: Context;\n\n  /**\n   * Send an event to deselect an object from the list\n   */\n  @Output() deselectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * Send an event to select an object from the list\n   */\n  @Output() selectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * The initial pagination to use\n   */\n  initialPagination = Object.assign(new PaginationComponentOptions(), {\n    id: 'spc',\n    pageSize: 5\n  });\n\n  /**\n   * The current pagination options\n   */\n  currentPagination$: Observable<PaginationComponentOptions>;\n\n  constructor(private router: Router,\n              private searchConfigService: SearchConfigurationService,\n              private paginationService: PaginationService\n  ) {\n  }\n\n  /**\n   * Set up the selection and pagination on load\n   */\n  ngOnInit() {\n    this.resetRoute();\n    this.selectionRD$ = this.searchConfigService.paginatedSearchOptions\n      .pipe(\n        map((options: PaginatedSearchOptions) => options.pagination),\n        switchMap((pagination: PaginationComponentOptions) => {\n          return this.selection$.pipe(\n            take(1),\n            map((selected) => {\n              const offset = (pagination.currentPage - 1) * pagination.pageSize;\n              const end = (offset + pagination.pageSize) > selected.length ? selected.length : offset + pagination.pageSize;\n              const selection = selected.slice(offset, end);\n              const pageInfo = new PageInfo(\n                {\n                  elementsPerPage: pagination.pageSize,\n                  totalElements: selected.length,\n                  currentPage: pagination.currentPage,\n                  totalPages: Math.ceil(selected.length / pagination.pageSize)\n                });\n              return createSuccessfulRemoteDataObject(buildPaginatedList(pageInfo, selection));\n            })\n          );\n        })\n      );\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.searchConfigService.paginationID, this.initialPagination);\n  }\n\n  /**\n   * Method to reset the route when the tab is opened to make sure no strange pagination issues appears\n   */\n  resetRoute() {\n    this.paginationService.updateRoute(this.searchConfigService.paginationID, {\n      page: 1,\n      pageSize: 5\n    });\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-4\">\n        <h3>{{ 'submission.sections.describe.relationship-lookup.selection-tab.settings' | translate}}</h3>\n        <ds-page-size-selector></ds-page-size-selector>\n    </div>\n    <div class=\"col-8\">\n        <div *ngIf=\"(selectionRD$ | async)?.payload.page < 1\">\n            {{'submission.sections.describe.relationship-lookup.selection-tab.no-selection' | translate}}\n        </div>\n        <div *ngIf=\"(selectionRD$ | async)?.payload.page.length >= 1\">\n            <h3>{{ 'submission.sections.describe.relationship-lookup.selection-tab.title.' + relationshipType | translate}}</h3>\n            <ds-viewable-collection [objects]=\"selectionRD$ | async\"\n                                    [selectable]=\"true\"\n                                    [selectionConfig]=\"{ repeatable: repeatable, listId: listId }\"\n                                    [config]=\"(currentPagination$ |async)\"\n                                    [hideGear]=\"true\"\n                                    [context]=\"context\"\n                                    (deselectObject)=\"deselectObject.emit($event)\"\n                                    (selectObject)=\"selectObject.emit($event)\"\n            ></ds-viewable-collection>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { DynamicFormLayoutService, DynamicFormValidationService } from '@ng-dynamic-forms/core';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  merge,\n  switchMap,\n  take,\n  tap\n} from 'rxjs/operators';\nimport { Observable, of as observableOf, Subject, Subscription } from 'rxjs';\nimport { NgbModal, NgbModalRef, NgbTypeahead, NgbTypeaheadSelectItemEvent } from '@ng-bootstrap/ng-bootstrap';\n\nimport { VocabularyService } from '../../../../../../core/submission/vocabularies/vocabulary.service';\nimport { DynamicOneboxModel } from './dynamic-onebox.model';\nimport { hasValue, isEmpty, isNotEmpty, isNotNull } from '../../../../../empty.util';\nimport { FormFieldMetadataValueObject } from '../../../models/form-field-metadata-value.model';\nimport { ConfidenceType } from '../../../../../../core/shared/confidence-type';\nimport { getFirstSucceededRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport {\n  PaginatedList,\n  buildPaginatedList\n} from '../../../../../../core/data/paginated-list.model';\nimport { VocabularyEntry } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { PageInfo } from '../../../../../../core/shared/page-info.model';\nimport { DsDynamicVocabularyComponent } from '../dynamic-vocabulary.component';\nimport { Vocabulary } from '../../../../../../core/submission/vocabularies/models/vocabulary.model';\nimport { VocabularyTreeviewComponent } from '../../../../../vocabulary-treeview/vocabulary-treeview.component';\nimport { VocabularyEntryDetail } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry-detail.model';\n\n/**\n * Component representing a onebox input field.\n * If field has a Hierarchical Vocabulary configured, it's rendered with vocabulary tree\n */\n@Component({\n  selector: 'ds-dynamic-onebox',\n  styleUrls: ['./dynamic-onebox.component.scss'],\n  templateUrl: './dynamic-onebox.component.html'\n})\nexport class DsDynamicOneboxComponent extends DsDynamicVocabularyComponent implements OnInit {\n\n  @Input() group: FormGroup;\n  @Input() model: DynamicOneboxModel;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  @ViewChild('instance') instance: NgbTypeahead;\n\n  pageInfo: PageInfo = new PageInfo();\n  searching = false;\n  searchFailed = false;\n  hideSearchingWhenUnsubscribed$ = new Observable(() => () => this.changeSearchingStatus(false));\n  click$ = new Subject<string>();\n  currentValue: any;\n  inputValue: any;\n  preloadLevel: number;\n\n  private vocabulary$: Observable<Vocabulary>;\n  private isHierarchicalVocabulary$: Observable<boolean>;\n  private subs: Subscription[] = [];\n\n  constructor(protected vocabularyService: VocabularyService,\n              protected cdr: ChangeDetectorRef,\n              protected layoutService: DynamicFormLayoutService,\n              protected modalService: NgbModal,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(vocabularyService, layoutService, validationService);\n  }\n\n  /**\n   * Converts an item from the result list to a `string` to display in the `<input>` field.\n   */\n  formatter = (x: { display: string }) => {\n    return (typeof x === 'object') ? x.display : x;\n  }\n\n  /**\n   * Converts a stream of text values from the `<input>` element to the stream of the array of items\n   * to display in the onebox popup.\n   */\n  search = (text$: Observable<string>) => {\n    return text$.pipe(\n      merge(this.click$),\n      debounceTime(300),\n      distinctUntilChanged(),\n      tap(() => this.changeSearchingStatus(true)),\n      switchMap((term) => {\n        if (term === '' || term.length < this.model.minChars) {\n          return observableOf({ list: [] });\n        } else {\n          return this.vocabularyService.getVocabularyEntriesByValue(\n            term,\n            false,\n            this.model.vocabularyOptions,\n            this.pageInfo).pipe(\n            getFirstSucceededRemoteDataPayload(),\n            tap(() => this.searchFailed = false),\n            catchError(() => {\n              this.searchFailed = true;\n              return observableOf(buildPaginatedList(\n                new PageInfo(),\n                []\n              ));\n            }));\n        }\n      }),\n      map((list: PaginatedList<VocabularyEntry>) => list.page),\n      tap(() => this.changeSearchingStatus(false)),\n      merge(this.hideSearchingWhenUnsubscribed$)\n    );\n  }\n\n  /**\n   * Initialize the component, setting up the init form value\n   */\n  ngOnInit() {\n    if (this.model.value) {\n      this.setCurrentValue(this.model.value, true);\n    }\n\n    this.vocabulary$ = this.vocabularyService.findVocabularyById(this.model.vocabularyOptions.name).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      distinctUntilChanged()\n    );\n\n    this.isHierarchicalVocabulary$ = this.vocabulary$.pipe(\n      map((result: Vocabulary) => result.hierarchical)\n    );\n\n    this.subs.push(this.group.get(this.model.id).valueChanges.pipe(\n      filter((value) => this.currentValue !== value))\n      .subscribe((value) => {\n        this.setCurrentValue(this.model.value);\n      }));\n  }\n\n  /**\n   * Changes the searching status\n   * @param status\n   */\n  changeSearchingStatus(status: boolean) {\n    this.searching = status;\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Checks if configured vocabulary is Hierarchical or not\n   */\n  isHierarchicalVocabulary(): Observable<boolean> {\n    return this.isHierarchicalVocabulary$;\n  }\n\n  /**\n   * Update the input value with a FormFieldMetadataValueObject\n   * @param event\n   */\n  onInput(event) {\n    if (!this.model.vocabularyOptions.closed && isNotEmpty(event.target.value)) {\n      this.inputValue = new FormFieldMetadataValueObject(event.target.value);\n    }\n  }\n\n  /**\n   * Emits a blur event containing a given value.\n   * @param event The value to emit.\n   */\n  onBlur(event: Event) {\n    if (!this.instance.isPopupOpen()) {\n      if (!this.model.vocabularyOptions.closed && isNotEmpty(this.inputValue)) {\n        if (isNotNull(this.inputValue) && this.model.value !== this.inputValue) {\n          this.dispatchUpdate(this.inputValue);\n        }\n        this.inputValue = null;\n      }\n      this.blur.emit(event);\n    } else {\n      // prevent on blur propagation if typeahed suggestions are showed\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      // set focus on input again, this is to avoid to lose changes when no suggestion is selected\n      (event.target as HTMLInputElement).focus();\n    }\n  }\n\n  /**\n   * Updates model value with the current value\n   * @param event The change event.\n   */\n  onChange(event: Event) {\n    event.stopPropagation();\n    if (isEmpty(this.currentValue)) {\n      this.dispatchUpdate(null);\n    }\n  }\n\n  /**\n   * Updates current value and model value with the selected value.\n   * @param event The value to set.\n   */\n  onSelectItem(event: NgbTypeaheadSelectItemEvent) {\n    this.inputValue = null;\n    this.setCurrentValue(event.item);\n    this.dispatchUpdate(event.item);\n  }\n\n  /**\n   * Open modal to show tree for hierarchical vocabulary\n   * @param event The click event fired\n   */\n  openTree(event) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    this.subs.push(this.vocabulary$.pipe(\n      map((vocabulary: Vocabulary) => vocabulary.preloadLevel),\n      take(1)\n    ).subscribe((preloadLevel) => {\n      const modalRef: NgbModalRef = this.modalService.open(VocabularyTreeviewComponent, { size: 'lg', windowClass: 'treeview' });\n      modalRef.componentInstance.vocabularyOptions = this.model.vocabularyOptions;\n      modalRef.componentInstance.preloadLevel = preloadLevel;\n      modalRef.componentInstance.selectedItem = this.currentValue ? this.currentValue : '';\n      modalRef.result.then((result: VocabularyEntryDetail) => {\n        if (result) {\n          this.currentValue = result;\n          this.dispatchUpdate(result);\n        }\n      }, () => {\n        return;\n      });\n    }));\n  }\n\n  /**\n   * Callback functions for whenClickOnConfidenceNotAccepted event\n   */\n  public whenClickOnConfidenceNotAccepted(confidence: ConfidenceType) {\n    if (!this.model.readOnly) {\n      this.click$.next(this.formatter(this.currentValue));\n    }\n  }\n\n  /**\n   * Sets the current value with the given value.\n   * @param value The value to set.\n   * @param init Representing if is init value or not.\n   */\n  setCurrentValue(value: any, init = false): void {\n    let result: string;\n    if (init) {\n      this.getInitValueFromModel()\n        .subscribe((formValue: FormFieldMetadataValueObject) => {\n          this.currentValue = formValue;\n          this.cdr.detectChanges();\n        });\n    } else {\n      if (isEmpty(value)) {\n        result = '';\n      } else {\n        result = value.value;\n      }\n\n      this.currentValue = result;\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n}\n","<ng-template #rt let-listEntry=\"result\" let-t=\"term\">\n  <ng-container\n    [ngTemplateOutlet]=\"(listEntry.hasOtherInformation()) ? hasInfo : noInfo\"\n    [ngTemplateOutletContext]=\"{entry: listEntry}\">\n  </ng-container>\n</ng-template>\n\n<ng-template #hasInfo let-entry=\"entry\">\n  <ul class=\"list-unstyled mb-0\">\n    <li class=\"list-item text-truncate text-primary font-weight-bold\">{{entry.value}}</li>\n    <li class=\"list-item text-truncate text-secondary\" *ngFor=\"let item of entry.otherInformation | dsObjNgFor\" >\n      {{ 'form.other-information.' + item.key | translate }} : {{item.value}}\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noInfo let-entry=\"entry\">\n  <ul class=\"list-unstyled mb-0\">\n    <li class=\"list-item text-truncate text-primary font-weight-bold\">{{entry.value}}</li>\n  </ul>\n</ng-template>\n\n<div *ngIf=\"!(isHierarchicalVocabulary() | async)\" class=\"position-relative right-addon\">\n  <i *ngIf=\"searching\" class=\"fas fa-circle-notch fa-spin fa-2x fa-fw text-primary position-absolute mt-1 p-0\" aria-hidden=\"true\"></i>\n  <i *ngIf=\"!searching\"\n     dsAuthorityConfidenceState\n     class=\"far fa-circle fa-2x fa-fw position-absolute mt-1 p-0\"\n     aria-hidden=\"true\"\n     [authorityValue]=\"currentValue\"\n     (whenClickOnConfidenceNotAccepted)=\"whenClickOnConfidenceNotAccepted($event)\"></i>\n  <input #instance=\"ngbTypeahead\"\n         class=\"form-control\"\n         [attr.aria-labelledby]=\"'label_' + model.id\"\n         [attr.autoComplete]=\"model.autoComplete\"\n         [class.is-invalid]=\"showErrorMessages\"\n         [id]=\"model.id\"\n         [inputFormatter]=\"formatter\"\n         [name]=\"model.name\"\n         [ngbTypeahead]=\"search\"\n         [placeholder]=\"model.placeholder\"\n         [readonly]=\"model.readOnly\"\n         [resultTemplate]=\"rt\"\n         [type]=\"model.inputType\"\n         [(ngModel)]=\"currentValue\"\n         (blur)=\"onBlur($event)\"\n         (focus)=\"onFocus($event)\"\n         (change)=\"onChange($event)\"\n         (input)=\"onInput($event)\"\n         (selectItem)=\"onSelectItem($event)\">\n\n  <div class=\"invalid-feedback\" *ngIf=\"searchFailed\">Sorry, suggestions could not be loaded.</div>\n</div>\n\n<div *ngIf=\"(isHierarchicalVocabulary() | async)\" class=\"position-relative right-addon\">\n  <i class=\"dropdown-toggle position-absolute tree-toggle\" (click)=\"openTree($event)\"\n     aria-hidden=\"true\"></i>\n  <input class=\"form-control\"\n         [attr.aria-labelledby]=\"'label_' + model.id\"\n         [attr.autoComplete]=\"model.autoComplete\"\n         [class.is-invalid]=\"showErrorMessages\"\n         [class.tree-input]=\"!model.readOnly\"\n         [id]=\"id\"\n         [name]=\"model.name\"\n         [placeholder]=\"model.placeholder\"\n         [readonly]=\"true\"\n         [type]=\"model.inputType\"\n         [value]=\"currentValue?.display\"\n         (focus)=\"onFocus($event)\"\n         (change)=\"onChange($event)\"\n         (click)=\"openTree($event)\"\n         (keydown)=\"$event.preventDefault()\"\n         (keypress)=\"$event.preventDefault()\"\n         (keyup)=\"$event.preventDefault()\">\n</div>\n","import { isObject, uniqueId } from 'lodash';\nimport { hasValue, isNotEmpty } from '../../empty.util';\nimport { FormFieldMetadataValueObject } from '../../form/builder/models/form-field-metadata-value.model';\nimport { ConfidenceType } from '../../../core/shared/confidence-type';\nimport { PLACEHOLDER_PARENT_METADATA } from '../../form/builder/ds-dynamic-form-ui/ds-dynamic-form-constants';\n\nexport interface ChipsItemIcon {\n  metadata: string;\n  style: string;\n  visibleWhenAuthorityEmpty: boolean;\n  tooltip?: any;\n}\n\nexport class ChipsItem {\n  public id: string;\n  public display: string;\n  private _item: any;\n  public editMode?: boolean;\n  public icons?: ChipsItemIcon[];\n\n  private fieldToDisplay: string;\n  private objToDisplay: string;\n\n  constructor(item: any,\n              fieldToDisplay: string = 'display',\n              objToDisplay?: string,\n              icons?: ChipsItemIcon[],\n              editMode?: boolean) {\n\n    this.id = uniqueId();\n    this._item = item;\n    this.fieldToDisplay = fieldToDisplay;\n    this.objToDisplay = objToDisplay;\n    this.setDisplayText();\n    this.editMode = editMode || false;\n    this.icons = icons || [];\n  }\n\n  public set item(item) {\n    this._item = item;\n  }\n\n  public get item() {\n    return this._item;\n  }\n\n  isNestedItem(): boolean {\n    return (isNotEmpty(this.item)\n      && isObject(this.item)\n      && isNotEmpty(this.objToDisplay)\n      && this.item[this.objToDisplay]);\n  }\n\n  hasIcons(): boolean {\n     return isNotEmpty(this.icons);\n  }\n\n  hasVisibleIcons(): boolean {\n    if (isNotEmpty(this.icons)) {\n      let hasVisible = false;\n      // check if it has at least one visible icon\n      for (const icon of this.icons) {\n        if (this._item.hasOwnProperty(icon.metadata)\n          && (((typeof this._item[icon.metadata] === 'string') && hasValue(this._item[icon.metadata]))\n            || (this._item[icon.metadata] as FormFieldMetadataValueObject).hasValue())\n          && !this.hasPlaceholder(this._item[icon.metadata])) {\n          if ((icon.visibleWhenAuthorityEmpty\n            || (this._item[icon.metadata] as FormFieldMetadataValueObject).confidence !== ConfidenceType.CF_UNSET)\n            && isNotEmpty(icon.style)) {\n            hasVisible = true;\n            break;\n          }\n        }\n      }\n      return hasVisible;\n    } else {\n      return false;\n    }\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  updateIcons(icons: ChipsItemIcon[]): void {\n    this.icons = icons;\n  }\n\n  updateItem(item: any): void {\n    this._item = item;\n    this.setDisplayText();\n  }\n\n  unsetEditMode(): void {\n    this.editMode = false;\n  }\n\n  private setDisplayText(): void {\n    let value = this._item;\n    if (isObject(this._item)) {\n      // Check If displayField is in an internal object\n      const obj = this.objToDisplay ? this._item[this.objToDisplay] : this._item;\n\n      if (isObject(obj) && obj) {\n        value = obj[this.fieldToDisplay] || (obj as any).value;\n      } else {\n        value = obj;\n      }\n    }\n\n    this.display = value;\n  }\n\n  private hasPlaceholder(value: any) {\n    return (typeof value === 'string') ? (value === PLACEHOLDER_PARENT_METADATA) :\n      (value as FormFieldMetadataValueObject).hasPlaceholder();\n  }\n}\n","import { findIndex, isEqual, isObject } from 'lodash';\nimport { BehaviorSubject } from 'rxjs';\nimport { ChipsItem, ChipsItemIcon } from './chips-item.model';\nimport { hasValue, isNotEmpty } from '../../empty.util';\nimport { MetadataIconConfig } from '../../../../config/submission-config.interface';\nimport { FormFieldMetadataValueObject } from '../../form/builder/models/form-field-metadata-value.model';\nimport { VocabularyEntry } from '../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { PLACEHOLDER_PARENT_METADATA } from '../../form/builder/ds-dynamic-form-ui/ds-dynamic-form-constants';\n\nexport class Chips {\n  chipsItems: BehaviorSubject<ChipsItem[]>;\n  displayField: string;\n  displayObj: string;\n  iconsConfig: MetadataIconConfig[];\n\n  private _items: ChipsItem[];\n\n  constructor(items: any[] = [],\n              displayField: string = 'display',\n              displayObj?: string,\n              iconsConfig?: MetadataIconConfig[]) {\n\n    this.displayField = displayField;\n    this.displayObj = displayObj;\n    this.iconsConfig = iconsConfig || [];\n    if (Array.isArray(items)) {\n      this.setInitialItems(items);\n    }\n  }\n\n  public add(item: any): void {\n    const icons = this.getChipsIcons(item);\n    const chipsItem = new ChipsItem(item, this.displayField, this.displayObj, icons);\n\n    const duplicatedIndex = findIndex(this._items, {display: chipsItem.display.trim()});\n    if (duplicatedIndex === -1 || !isEqual(item, this.getChipByIndex(duplicatedIndex).item)) {\n      this._items.push(chipsItem);\n      this.chipsItems.next(this._items);\n    }\n  }\n\n  public getChipById(id): ChipsItem {\n    const index = findIndex(this._items, {id: id});\n    return this.getChipByIndex(index);\n  }\n\n  public getChipByIndex(index): ChipsItem {\n    if (this._items.length > 0 && this._items[index]) {\n      return this._items[index];\n    } else {\n      return null;\n    }\n  }\n\n  public getChips(): ChipsItem[] {\n    return this._items;\n  }\n\n  /**\n   * To use to get items before to store it\n   * @returns {any[]}\n   */\n  public getChipsItems(): any[] {\n    const out = [];\n    this._items.forEach((item) => {\n      out.push(item.item);\n    });\n    return out;\n  }\n\n  public hasItems(): boolean {\n    return this._items.length > 0;\n  }\n\n  private hasPlaceholder(value) {\n    if (isObject(value)) {\n      return (value as any).value === PLACEHOLDER_PARENT_METADATA;\n    } else {\n      return value === PLACEHOLDER_PARENT_METADATA;\n    }\n  }\n\n  public remove(chipsItem: ChipsItem): void {\n    const index = findIndex(this._items, {id: chipsItem.id});\n    this._items.splice(index, 1);\n    this.chipsItems.next(this._items);\n  }\n\n  public update(id: string, item: any): void {\n    const chipsItemTarget = this.getChipById(id);\n    const icons = this.getChipsIcons(item);\n\n    chipsItemTarget.updateItem(item);\n    chipsItemTarget.updateIcons(icons);\n    chipsItemTarget.unsetEditMode();\n    this.chipsItems.next(this._items);\n  }\n\n  public updateOrder(): void {\n    this.chipsItems.next(this._items);\n  }\n\n  private getChipsIcons(item) {\n    const icons = [];\n    if (typeof item === 'string' || item instanceof FormFieldMetadataValueObject || item instanceof VocabularyEntry) {\n      return icons;\n    }\n\n    const defaultConfigIndex: number = findIndex(this.iconsConfig, {name: 'default'});\n    const defaultConfig: MetadataIconConfig = (defaultConfigIndex !== -1) ? this.iconsConfig[defaultConfigIndex] : undefined;\n    let config: MetadataIconConfig;\n    let configIndex: number;\n    let value: any;\n\n    Object.keys(item)\n      .forEach((metadata) => {\n\n        value = item[metadata];\n        configIndex = findIndex(this.iconsConfig, {name: metadata});\n\n        config = (configIndex !== -1) ? this.iconsConfig[configIndex] : defaultConfig;\n\n        if (hasValue(value) && isNotEmpty(config) && !this.hasPlaceholder(value)) {\n\n          let icon: ChipsItemIcon;\n          const visibleWhenAuthorityEmpty = this.displayObj !== metadata;\n\n          // Set icon\n          icon = {\n            metadata,\n            visibleWhenAuthorityEmpty,\n            style: config.style\n          };\n\n          icons.push(icon);\n        }\n      });\n\n    return icons;\n  }\n\n  /**\n   * Sets initial items, used in edit mode\n   */\n  private setInitialItems(items: any[]): void {\n    this._items = [];\n    items.forEach((item) => {\n      const icons = this.getChipsIcons(item);\n      const chipsItem = new ChipsItem(item, this.displayField, this.displayObj, icons);\n      this._items.push(chipsItem);\n    });\n\n    this.chipsItems = new BehaviorSubject<ChipsItem[]>(this._items);\n  }\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subscription_1 = require(\"./Subscription\");\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { DynamicFormLayoutService, DynamicFormValidationService } from '@ng-dynamic-forms/core';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { catchError, debounceTime, distinctUntilChanged, map, merge, switchMap, tap } from 'rxjs/operators';\nimport { NgbTypeahead, NgbTypeaheadSelectItemEvent } from '@ng-bootstrap/ng-bootstrap';\nimport { isEqual } from 'lodash';\n\nimport { VocabularyService } from '../../../../../../core/submission/vocabularies/vocabulary.service';\nimport { DynamicTagModel } from './dynamic-tag.model';\nimport { Chips } from '../../../../../chips/models/chips.model';\nimport { hasValue, isNotEmpty } from '../../../../../empty.util';\nimport { environment } from '../../../../../../../environments/environment';\nimport { getFirstSucceededRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport {\n  PaginatedList,\n  buildPaginatedList\n} from '../../../../../../core/data/paginated-list.model';\nimport { VocabularyEntry } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { PageInfo } from '../../../../../../core/shared/page-info.model';\nimport { DsDynamicVocabularyComponent } from '../dynamic-vocabulary.component';\n\n/**\n * Component representing a tag input field\n */\n@Component({\n  selector: 'ds-dynamic-tag',\n  styleUrls: ['./dynamic-tag.component.scss'],\n  templateUrl: './dynamic-tag.component.html'\n})\nexport class DsDynamicTagComponent extends DsDynamicVocabularyComponent implements OnInit {\n\n  @Input() bindId = true;\n  @Input() group: FormGroup;\n  @Input() model: DynamicTagModel;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  @ViewChild('instance') instance: NgbTypeahead;\n\n  chips: Chips;\n  hasAuthority: boolean;\n\n  searching = false;\n  searchFailed = false;\n  hideSearchingWhenUnsubscribed = new Observable(() => () => this.changeSearchingStatus(false));\n  currentValue: any;\n  public pageInfo: PageInfo;\n\n  constructor(protected vocabularyService: VocabularyService,\n              private cdr: ChangeDetectorRef,\n              protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(vocabularyService, layoutService, validationService);\n  }\n\n  /**\n   * Converts an item from the result list to a `string` to display in the `<input>` field.\n   */\n  formatter = (x: { display: string }) => x.display;\n\n  /**\n   * Converts a stream of text values from the `<input>` element to the stream of the array of items\n   * to display in the typeahead popup.\n   */\n  search = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      tap(() => this.changeSearchingStatus(true)),\n      switchMap((term) => {\n        if (term === '' || term.length < this.model.minChars) {\n          return observableOf({ list: [] });\n        } else {\n          return this.vocabularyService.getVocabularyEntriesByValue(term, false, this.model.vocabularyOptions, new PageInfo()).pipe(\n            getFirstSucceededRemoteDataPayload(),\n            tap(() => this.searchFailed = false),\n            catchError(() => {\n              this.searchFailed = true;\n              return observableOf(buildPaginatedList(\n                new PageInfo(),\n                []\n              ));\n            }));\n        }\n      }),\n      map((list: PaginatedList<VocabularyEntry>) => list.page),\n      tap(() => this.changeSearchingStatus(false)),\n      merge(this.hideSearchingWhenUnsubscribed))\n\n  /**\n   * Initialize the component, setting up the init form value\n   */\n  ngOnInit() {\n    this.hasAuthority = this.model.vocabularyOptions && hasValue(this.model.vocabularyOptions.name);\n\n    this.chips = new Chips(\n      this.model.value as any[],\n      'display',\n      null,\n      environment.submission.icons.metadata);\n\n    this.chips.chipsItems\n      .subscribe((subItems: any[]) => {\n        const items = this.chips.getChipsItems();\n        // Does not emit change if model value is equal to the current value\n        if (!isEqual(items, this.model.value)) {\n          this.dispatchUpdate(items);\n        }\n      });\n  }\n\n  /**\n   * Changes the searching status\n   * @param status\n   */\n  changeSearchingStatus(status: boolean) {\n    this.searching = status;\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Mark form group as dirty on input\n   * @param event\n   */\n  onInput(event) {\n    if (event.data) {\n      this.group.markAsDirty();\n    }\n    this.cdr.detectChanges();\n  }\n\n  /**\n   * Emits a blur event containing a given value and add all tags to chips.\n   * @param event The value to emit.\n   */\n  onBlur(event: Event) {\n    if (isNotEmpty(this.currentValue) && !this.instance.isPopupOpen()) {\n      this.addTagsToChips();\n    }\n    this.blur.emit(event);\n  }\n\n  /**\n   * Updates model value with the selected value and add a new tag to chips.\n   * @param event The value to set.\n   */\n  onSelectItem(event: NgbTypeaheadSelectItemEvent) {\n    this.chips.add(event.item);\n    // this.group.controls[this.model.id].setValue(this.model.value);\n    this.updateModel(event);\n\n    setTimeout(() => {\n      // Reset the input text after x ms, mandatory or the formatter overwrite it\n      this.setCurrentValue(null);\n      this.cdr.detectChanges();\n    }, 50);\n  }\n\n  updateModel(event) {\n    /*    this.model.valueUpdates.next(this.chips.getChipsItems());\n        this.change.emit(event);*/\n    this.dispatchUpdate(this.chips.getChipsItems());\n  }\n\n  /**\n   * Add a new tag with typed text when typing 'Enter' or ',' or ';'\n   * @param event the keyUp event\n   */\n  onKeyUp(event) {\n    if (event.keyCode === 13 || event.keyCode === 188) {\n      event.preventDefault();\n      // Key: 'Enter' or ',' or ';'\n      this.addTagsToChips();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Prevent propagation of a key event in case of return key is pressed\n   * @param event the key event\n   */\n  preventEventsPropagation(event) {\n    event.stopPropagation();\n    if (event.keyCode === 13) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Sets the current value with the given value.\n   * @param value The value to set.\n   * @param init Representing if is init value or not.\n   */\n  public setCurrentValue(value: any, init = false) {\n    this.currentValue = value;\n  }\n\n  private addTagsToChips() {\n    if (hasValue(this.currentValue) && (!this.hasAuthority || !this.model.vocabularyOptions.closed)) {\n      let res: string[] = [];\n      res = this.currentValue.split(',');\n\n      const res1 = [];\n      res.forEach((item) => {\n        item.split(';').forEach((i) => {\n          res1.push(i);\n        });\n      });\n\n      res1.forEach((c) => {\n        c = c.trim();\n        if (c.length > 0) {\n          this.chips.add(c);\n        }\n      });\n\n      // this.currentValue = '';\n      setTimeout(() => {\n        // Reset the input text after x ms, mandatory or the formatter overwrite it\n        this.setCurrentValue(null);\n        this.cdr.detectChanges();\n      }, 50);\n      this.updateModel(event);\n    }\n  }\n}\n","<ng-template #rt let-r=\"result\" let-t=\"term\">\n  {{ r.display }}\n</ng-template>\n\n\n  <ds-chips [chips]=\"chips\"\n            [editable]=\"false\"\n            [showIcons]=\"model.hasAuthority\"\n            [wrapperClass]=\"'border-bottom border-light'\">\n\n  <input *ngIf=\"!model.hasAuthority\"\n         class=\"border-0 form-control-plaintext tag-input flex-grow-1 mt-1 mb-1\"\n         type=\"text\"\n         role=\"textbox\"\n         [class.pl-3]=\"chips.hasItems()\"\n         [placeholder]=\"model.placeholder\"\n         [readonly]=\"model.readOnly\"\n         [(ngModel)]=\"currentValue\"\n         (blur)=\"onBlur($event)\"\n         (keypress)=\"preventEventsPropagation($event)\"\n         (keydown)=\"preventEventsPropagation($event)\"\n         (keyup)=\"onKeyUp($event)\" />\n\n  <div *ngIf=\"model.hasAuthority\" class=\"position-relative right-addon\">\n    <i *ngIf=\"searching\" class=\"fas fa-circle-notch fa-spin fa-2x fa-fw text-primary position-absolute mt-1 p-0\" aria-hidden=\"true\"></i>\n    <input class=\"border-0 form-control-plaintext tag-input flex-grow-1 mt-1 mb-1\"\n           type=\"text\"\n           [attr.aria-labelledby]=\"'label_' + model.id\"\n           [(ngModel)]=\"currentValue\"\n           [attr.autoComplete]=\"model.autoComplete\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [class.pl-3]=\"chips.hasItems()\"\n           [id]=\"id\"\n           [inputFormatter]=\"formatter\"\n           [name]=\"model.name\"\n           [ngbTypeahead]=\"search\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [resultTemplate]=\"rt\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (focus)=\"onFocus($event)\"\n           (change)=\"$event.stopPropagation()\"\n           (input)=\"onInput($event)\"\n           (selectItem)=\"onSelectItem($event)\"\n           (keypress)=\"preventEventsPropagation($event)\"\n           (keydown)=\"preventEventsPropagation($event)\"\n           (keyup)=\"onKeyUp($event)\"\n           #instance=\"ngbTypeahead\"/>\n    </div>\n  </ds-chips>\n\n","import {\n  DynamicCheckboxModel,\n  DynamicCheckboxModelConfig,\n  DynamicFormControlLayout,\n  serializable\n} from '@ng-dynamic-forms/core';\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CUSTOM_SWITCH = 'CUSTOM_SWITCH';\n\n/**\n * Model class for displaying a custom switch input in a form\n * Functions like a checkbox, but displays a switch instead\n */\nexport class DynamicCustomSwitchModel extends DynamicCheckboxModel {\n  @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CUSTOM_SWITCH;\n\n  constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\n    super(config, layout);\n  }\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\n\nexport const shrinkInOut = trigger('shrinkInOut', [\n  state('in', style({height: '100%', opacity: 1})),\n  transition('* => void', [\n    style({height: '!', opacity: 1}),\n    animate(200, style({height: 0, opacity: 0}))\n  ]),\n  transition('void => *', [\n    style({height: 0, opacity: 0}),\n    animate(200, style({height: '*', opacity: 1}))\n  ])\n]);\n","<a *ngIf=\"!(formCollapsed | async)\"\n   class=\"close position-relative\"\n   ngbTooltip=\"{{'form.group-collapse-help' | translate}}\"\n   placement=\"left\">\n  <span class=\"fas fa-angle-up fa-fw fa-2x\"\n        aria-hidden=\"true\"\n        (click)=\"collapseForm()\"></span>\n</a>\n<a *ngIf=\"(formCollapsed | async)\"\n   class=\"close position-relative\"\n   ngbTooltip=\"{{'form.group-expand-help' | translate}}\"\n   placement=\"left\">\n  <span class=\"fas fa-angle-down fa-fw fa-2x\"\n        aria-hidden=\"true\"\n        (click)=\"expandForm()\"></span>\n</a>\n\n<div class=\"pt-2\" [ngClass]=\"{'border-top': !showErrorMessages, 'border border-danger': showErrorMessages}\">\n  <div *ngIf=\"!(formCollapsed | async)\" class=\"pl-2 row\"  @shrinkInOut>\n    <ds-form #formRef=\"formComponent\"\n             class=\"col-sm-12 col-md-8 col-lg-9 col-xl-10 pl-0\"\n             [formId]=\"formId\"\n             [formModel]=\"formModel\"\n             [displaySubmit]=\"false\"\n             [displayCancel]=\"false\"\n             [emitChange]=\"false\"\n             (dfBlur)=\"onBlur($event)\"\n             (dfFocus)=\"onFocus($event)\"></ds-form>\n\n\n    <div *ngIf=\"!(formCollapsed | async)\" class=\"col p-0 m-0 d-flex justify-content-center align-items-center\">\n\n        <button type=\"button\"\n                class=\"btn btn-link\"\n                [disabled]=\"isMandatoryFieldEmpty()\"\n                (click)=\"save()\">\n          <i class=\"fas fa-save text-primary fa-2x\"\n             aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-link\"\n                [disabled]=\"!editMode\"\n                (click)=\"delete()\">\n          <i class=\"fas fa-trash text-danger fa-2x\"\n             aria-hidden=\"true\"></i>\n        </button>\n        <button type=\"button\"\n                class=\"btn btn-link\"\n                [disabled]=\"isMandatoryFieldEmpty()\"\n                (click)=\"clear()\">\n          <i class=\"fas fa-undo fa-2x\"\n             aria-hidden=\"true\"></i>\n        </button>\n\n    </div>\n    <div class=\"clearfix\"></div>\n  </div>\n\n  <div class=\"d-flex\">\n    <ds-loading *ngIf=\"!chips\" [showMessage]=\"false\"></ds-loading>\n    <div *ngIf=\"chips && !chips.hasItems()\">\n      <input type=\"text\"\n             class=\"border-0 form-control-plaintext tag-input mt-1 mb-1 pl-2 text-muted\"\n             readonly\n             tabindex=\"-1\"\n             value=\"{{'form.no-value' | translate}}\">\n    </div>\n    <ds-chips\n      *ngIf=\"chips && chips.hasItems()\"\n      [chips]=\"chips\"\n      [editable]=\"true\"\n      [showIcons]=\"true\"\n      (selected)=\"onChipSelected($event)\"></ds-chips>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { combineLatest, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { filter, map, mergeMap, scan } from 'rxjs/operators';\nimport {\n  DynamicFormControlComponent,\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayoutService,\n  DynamicFormValidationService,\n  DynamicInputModel\n} from '@ng-dynamic-forms/core';\nimport { isEqual, isObject } from 'lodash';\n\nimport { DynamicRelationGroupModel } from './dynamic-relation-group.model';\nimport { FormBuilderService } from '../../../form-builder.service';\nimport { SubmissionFormsModel } from '../../../../../../core/config/models/config-submission-forms.model';\nimport { FormService } from '../../../../form.service';\nimport { FormComponent } from '../../../../form.component';\nimport { Chips } from '../../../../../chips/models/chips.model';\nimport { hasValue, isEmpty, isNotEmpty, isNotNull } from '../../../../../empty.util';\nimport { shrinkInOut } from '../../../../../animations/shrink';\nimport { ChipsItem } from '../../../../../chips/models/chips-item.model';\nimport { hasOnlyEmptyProperties } from '../../../../../object.util';\nimport { VocabularyService } from '../../../../../../core/submission/vocabularies/vocabulary.service';\nimport { FormFieldMetadataValueObject } from '../../../models/form-field-metadata-value.model';\nimport { environment } from '../../../../../../../environments/environment';\nimport { PLACEHOLDER_PARENT_METADATA } from '../../ds-dynamic-form-constants';\nimport { getFirstSucceededRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport { VocabularyEntryDetail } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry-detail.model';\n\n/**\n * Component representing a group input field\n */\n@Component({\n  selector: 'ds-dynamic-relation-group',\n  styleUrls: ['./dynamic-relation-group.component.scss'],\n  templateUrl: './dynamic-relation-group.component.html',\n  animations: [shrinkInOut]\n})\nexport class DsDynamicRelationGroupComponent extends DynamicFormControlComponent implements OnDestroy, OnInit {\n\n  @Input() formId: string;\n  @Input() group: FormGroup;\n  @Input() model: DynamicRelationGroupModel;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  public chips: Chips;\n  public formCollapsed = observableOf(false);\n  public formModel: DynamicFormControlModel[];\n  public editMode = false;\n\n  private selectedChipItem: ChipsItem;\n  private subs: Subscription[] = [];\n\n  @ViewChild('formRef') private formRef: FormComponent;\n\n  constructor(private vocabularyService: VocabularyService,\n              private formBuilderService: FormBuilderService,\n              private formService: FormService,\n              private cdr: ChangeDetectorRef,\n              protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(layoutService, validationService);\n  }\n\n  ngOnInit() {\n    const config = { rows: this.model.formConfiguration } as SubmissionFormsModel;\n    if (!this.model.isEmpty()) {\n      this.formCollapsed = observableOf(true);\n    }\n    this.model.valueChanges.subscribe((value: any[]) => {\n      if ((isNotEmpty(value) && !(value.length === 1 && hasOnlyEmptyProperties(value[0])))) {\n        this.collapseForm();\n      } else {\n        this.expandForm();\n      }\n    });\n\n    this.formId = this.formService.getUniqueId(this.model.id);\n    this.formModel = this.formBuilderService.modelFromConfiguration(\n      this.model.submissionId,\n      config,\n      this.model.scopeUUID,\n      {},\n      this.model.submissionScope,\n      this.model.readOnly);\n    this.initChipsFromModelValue();\n  }\n\n  isMandatoryFieldEmpty() {\n    let res = true;\n    this.formModel.forEach((row) => {\n      const modelRow = row as DynamicFormGroupModel;\n      modelRow.group.forEach((model: DynamicInputModel) => {\n        if (model.name === this.model.mandatoryField) {\n          res = model.value == null;\n          return;\n        }\n      });\n    });\n    return res;\n  }\n\n  onBlur(event) {\n    this.blur.emit();\n  }\n\n  onChipSelected(event) {\n    this.expandForm();\n    this.selectedChipItem = this.chips.getChipByIndex(event);\n    this.formModel.forEach((row) => {\n      const modelRow = row as DynamicFormGroupModel;\n      modelRow.group.forEach((model: DynamicInputModel) => {\n        const value = (this.selectedChipItem.item[model.name] === PLACEHOLDER_PARENT_METADATA\n          || this.selectedChipItem.item[model.name].value === PLACEHOLDER_PARENT_METADATA)\n          ? null\n          : this.selectedChipItem.item[model.name];\n\n        const nextValue = (this.formBuilderService.isInputModel(model) && isNotNull(value) && (typeof value !== 'string')) ?\n          value.value : value;\n        model.value = nextValue;\n\n      });\n    });\n\n    this.editMode = true;\n  }\n\n  onFocus(event) {\n    this.focus.emit(event);\n  }\n\n  collapseForm() {\n    this.formCollapsed = observableOf(true);\n    this.clear();\n  }\n\n  expandForm() {\n    this.formCollapsed = observableOf(false);\n  }\n\n  clear() {\n    if (this.editMode) {\n      this.selectedChipItem.editMode = false;\n      this.selectedChipItem = null;\n      this.editMode = false;\n    }\n    this.resetForm();\n    if (!this.model.isEmpty()) {\n      this.formCollapsed = observableOf(true);\n    }\n  }\n\n  save() {\n    if (this.editMode) {\n      this.modifyChip();\n    } else {\n      this.addToChips();\n    }\n  }\n\n  delete() {\n    this.chips.remove(this.selectedChipItem);\n    this.clear();\n  }\n\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n  private addToChips() {\n    if (!this.formRef.formGroup.valid) {\n      this.formService.validateAllFormFields(this.formRef.formGroup);\n      return;\n    }\n\n    // Item to add\n    if (!this.isMandatoryFieldEmpty()) {\n      const item = this.buildChipItem();\n      this.chips.add(item);\n\n      this.resetForm();\n    }\n  }\n\n  private modifyChip() {\n    if (!this.formRef.formGroup.valid) {\n      this.formService.validateAllFormFields(this.formRef.formGroup);\n      return;\n    }\n\n    if (!this.isMandatoryFieldEmpty()) {\n      const item = this.buildChipItem();\n      this.chips.update(this.selectedChipItem.id, item);\n      this.resetForm();\n      this.cdr.detectChanges();\n    }\n  }\n\n  private buildChipItem() {\n    const item = Object.create({});\n    this.formModel.forEach((row) => {\n      const modelRow = row as DynamicFormGroupModel;\n      modelRow.group.forEach((control: DynamicInputModel) => {\n        item[control.name] = control.value || PLACEHOLDER_PARENT_METADATA;\n      });\n    });\n    return item;\n  }\n\n  private initChipsFromModelValue() {\n\n    let initChipsValue$: Observable<any[]>;\n    if (this.model.isEmpty()) {\n      this.initChips([]);\n    } else {\n      initChipsValue$ = observableOf(this.model.value as any[]);\n\n      // If authority\n      this.subs.push(initChipsValue$.pipe(\n        mergeMap((valueModel) => {\n          const returnList: Observable<any>[] = [];\n          valueModel.forEach((valueObj) => {\n            const returnObj = Object.keys(valueObj).map((fieldName) => {\n              let return$: Observable<any>;\n              if (isObject(valueObj[fieldName]) && valueObj[fieldName].hasAuthority() && isNotEmpty(valueObj[fieldName].authority)) {\n                const fieldId = fieldName.replace(/\\./g, '_');\n                const model = this.formBuilderService.findById(fieldId, this.formModel);\n                return$ = this.vocabularyService.findEntryDetailById(\n                  valueObj[fieldName].authority,\n                  (model as any).vocabularyOptions.name\n                ).pipe(\n                  getFirstSucceededRemoteDataPayload(),\n                  map((entryDetail: VocabularyEntryDetail) => Object.assign(\n                    new FormFieldMetadataValueObject(),\n                    valueObj[fieldName],\n                    {\n                      otherInformation: entryDetail.otherInformation\n                    })\n                  ));\n              } else {\n                return$ = observableOf(valueObj[fieldName]);\n              }\n              return return$.pipe(map((entry) => ({ [fieldName]: entry })));\n            });\n\n            returnList.push(combineLatest(returnObj));\n          });\n          return returnList;\n        }),\n        mergeMap((valueListObj: Observable<any>, index: number) => {\n          return valueListObj.pipe(\n            map((valueObj: any) => ({\n                index: index, value: valueObj.reduce(\n                (acc: any, value: any) => Object.assign({}, acc, value)\n                )\n              })\n            )\n          );\n        }),\n        scan((acc: any[], valueObj: any) => {\n          if (acc.length === 0) {\n            acc.push(valueObj.value);\n          } else {\n            acc.splice(valueObj.index, 0, valueObj.value);\n          }\n          return acc;\n        }, []),\n        filter((modelValues: any[]) => (this.model.value as any[]).length === modelValues.length)\n      ).subscribe((modelValue) => {\n        this.model.value = modelValue;\n        this.initChips(modelValue);\n        this.cdr.markForCheck();\n      }));\n    }\n  }\n\n  private initChips(initChipsValue) {\n    this.chips = new Chips(\n      initChipsValue,\n      'value',\n      this.model.mandatoryField,\n      environment.submission.icons.metadata);\n    this.subs.push(\n      this.chips.chipsItems\n        .subscribe(() => {\n          const items = this.chips.getChipsItems();\n          // Does not emit change if model value is equal to the current value\n          if (!isEqual(items, this.model.value)) {\n            if (!(isEmpty(items) && this.model.isEmpty())) {\n              this.model.value = items;\n              this.change.emit();\n            }\n          }\n        }),\n    );\n  }\n\n  private resetForm() {\n    if (this.formRef) {\n      this.formService.resetForm(this.formRef.formGroup, this.formModel, this.formId);\n    }\n  }\n\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ObjectUnsubscribedErrorImpl = (function () {\n    function ObjectUnsubscribedErrorImpl() {\n        Error.call(this);\n        this.message = 'object unsubscribed';\n        this.name = 'ObjectUnsubscribedError';\n        return this;\n    }\n    ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n    return ObjectUnsubscribedErrorImpl;\n})();\nexports.ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentFactoryResolver,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  Type,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\n\nimport {\n  DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n  DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX,\n  DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n  DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n  DYNAMIC_FORM_CONTROL_TYPE_GROUP,\n  DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n  DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n  DYNAMIC_FORM_CONTROL_TYPE_SELECT,\n  DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA,\n  DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n  DynamicDatePickerModel,\n  DynamicFormArrayGroupModel,\n  DynamicFormArrayModel,\n  DynamicFormComponentService,\n  DynamicFormControl,\n  DynamicFormControlContainerComponent,\n  DynamicFormControlEvent,\n  DynamicFormControlEventType,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicFormLayoutService,\n  DynamicFormRelationService,\n  DynamicFormValidationService,\n  DynamicTemplateDirective,\n} from '@ng-dynamic-forms/core';\nimport {\n  DynamicNGBootstrapCalendarComponent,\n  DynamicNGBootstrapCheckboxComponent,\n  DynamicNGBootstrapCheckboxGroupComponent,\n  DynamicNGBootstrapInputComponent,\n  DynamicNGBootstrapRadioGroupComponent,\n  DynamicNGBootstrapSelectComponent,\n  DynamicNGBootstrapTextAreaComponent,\n  DynamicNGBootstrapTimePickerComponent\n} from '@ng-dynamic-forms/ui-ng-bootstrap';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ReorderableRelationship } from './existing-metadata-list-element/existing-metadata-list-element.component';\n\nimport { DYNAMIC_FORM_CONTROL_TYPE_ONEBOX } from './models/onebox/dynamic-onebox.model';\nimport { DYNAMIC_FORM_CONTROL_TYPE_SCROLLABLE_DROPDOWN } from './models/scrollable-dropdown/dynamic-scrollable-dropdown.model';\nimport { DYNAMIC_FORM_CONTROL_TYPE_TAG } from './models/tag/dynamic-tag.model';\nimport { DYNAMIC_FORM_CONTROL_TYPE_DSDATEPICKER } from './models/date-picker/date-picker.model';\nimport { DYNAMIC_FORM_CONTROL_TYPE_LOOKUP } from './models/lookup/dynamic-lookup.model';\nimport { DynamicListCheckboxGroupModel } from './models/list/dynamic-list-checkbox-group.model';\nimport { DynamicListRadioGroupModel } from './models/list/dynamic-list-radio-group.model';\nimport { hasNoValue, hasValue, isNotEmpty, isNotUndefined } from '../../../empty.util';\nimport { DYNAMIC_FORM_CONTROL_TYPE_LOOKUP_NAME } from './models/lookup/dynamic-lookup-name.model';\nimport { DsDynamicTagComponent } from './models/tag/dynamic-tag.component';\nimport { DsDatePickerComponent } from './models/date-picker/date-picker.component';\nimport { DsDynamicListComponent } from './models/list/dynamic-list.component';\nimport { DsDynamicOneboxComponent } from './models/onebox/dynamic-onebox.component';\nimport { DsDynamicScrollableDropdownComponent } from './models/scrollable-dropdown/dynamic-scrollable-dropdown.component';\nimport { DsDynamicLookupComponent } from './models/lookup/dynamic-lookup.component';\nimport { DsDynamicFormGroupComponent } from './models/form-group/dynamic-form-group.component';\nimport { DsDynamicFormArrayComponent } from './models/array-group/dynamic-form-array.component';\nimport { DsDynamicRelationGroupComponent } from './models/relation-group/dynamic-relation-group.components';\nimport { DsDatePickerInlineComponent } from './models/date-picker-inline/dynamic-date-picker-inline.component';\nimport { DYNAMIC_FORM_CONTROL_TYPE_CUSTOM_SWITCH } from './models/custom-switch/custom-switch.model';\nimport { CustomSwitchComponent } from './models/custom-switch/custom-switch.component';\nimport { find, map, startWith, switchMap, take } from 'rxjs/operators';\nimport { combineLatest as observableCombineLatest, Observable, Subscription } from 'rxjs';\nimport { SearchResult } from '../../../search/models/search-result.model';\nimport { DSpaceObject } from '../../../../core/shared/dspace-object.model';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { RelationshipService } from '../../../../core/data/relationship.service';\nimport { SelectableListService } from '../../../object-list/selectable-list/selectable-list.service';\nimport { DsDynamicDisabledComponent } from './models/disabled/dynamic-disabled.component';\nimport { DYNAMIC_FORM_CONTROL_TYPE_DISABLED } from './models/disabled/dynamic-disabled.model';\nimport { DsDynamicLookupRelationModalComponent } from './relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport {\n  getAllSucceededRemoteData,\n  getFirstSucceededRemoteData,\n  getFirstSucceededRemoteDataPayload,\n  getPaginatedListPayload,\n  getRemoteDataPayload\n} from '../../../../core/shared/operators';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { Item } from '../../../../core/shared/item.model';\nimport { ItemDataService } from '../../../../core/data/item-data.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../../app.reducer';\nimport { SubmissionObjectDataService } from '../../../../core/submission/submission-object-data.service';\nimport { SubmissionObject } from '../../../../core/submission/models/submission-object.model';\nimport { PaginatedList } from '../../../../core/data/paginated-list.model';\nimport { ItemSearchResult } from '../../../object-collection/shared/item-search-result.model';\nimport { Relationship } from '../../../../core/shared/item-relationships/relationship.model';\nimport { Collection } from '../../../../core/shared/collection.model';\nimport { MetadataValue, VIRTUAL_METADATA_PREFIX } from '../../../../core/shared/metadata.models';\nimport { FormService } from '../../form.service';\nimport { SelectableListState } from '../../../object-list/selectable-list/selectable-list.reducer';\nimport { SubmissionService } from '../../../../submission/submission.service';\nimport { followLink } from '../../../utils/follow-link-config.model';\nimport { paginatedRelationsToItems } from '../../../../item-page/simple/item-types/shared/item-relationships-utils';\nimport { RelationshipOptions } from '../models/relationship-options.model';\nimport { FormBuilderService } from '../form-builder.service';\nimport { DYNAMIC_FORM_CONTROL_TYPE_RELATION_GROUP } from './ds-dynamic-form-constants';\nimport { FormFieldMetadataValueObject } from '../models/form-field-metadata-value.model';\n\nexport function dsDynamicFormControlMapFn(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n  switch (model.type) {\n    case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n      return DsDynamicFormArrayComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n      return DynamicNGBootstrapCheckboxComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n      return (model instanceof DynamicListCheckboxGroupModel) ? DsDynamicListComponent : DynamicNGBootstrapCheckboxGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n      const datepickerModel = model as DynamicDatePickerModel;\n\n      return datepickerModel.inline ? DynamicNGBootstrapCalendarComponent : DsDatePickerInlineComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n      return DsDynamicFormGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n      return DynamicNGBootstrapInputComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n      return (model instanceof DynamicListRadioGroupModel) ? DsDynamicListComponent : DynamicNGBootstrapRadioGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n      return DynamicNGBootstrapSelectComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n      return DynamicNGBootstrapTextAreaComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n      return DynamicNGBootstrapTimePickerComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_ONEBOX:\n      return DsDynamicOneboxComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_SCROLLABLE_DROPDOWN:\n      return DsDynamicScrollableDropdownComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_TAG:\n      return DsDynamicTagComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_RELATION_GROUP:\n      return DsDynamicRelationGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_DSDATEPICKER:\n      return DsDatePickerComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_LOOKUP:\n      return DsDynamicLookupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_LOOKUP_NAME:\n      return DsDynamicLookupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_DISABLED:\n      return DsDynamicDisabledComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_CUSTOM_SWITCH:\n      return CustomSwitchComponent;\n\n    default:\n      return null;\n  }\n}\n\n@Component({\n  selector: 'ds-dynamic-form-control-container',\n  styleUrls: ['./ds-dynamic-form-control-container.component.scss'],\n  templateUrl: './ds-dynamic-form-control-container.component.html',\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class DsDynamicFormControlContainerComponent extends DynamicFormControlContainerComponent implements OnInit, OnChanges, OnDestroy {\n  @ContentChildren(DynamicTemplateDirective) contentTemplateList: QueryList<DynamicTemplateDirective>;\n  // tslint:disable-next-line:no-input-rename\n  @Input('templates') inputTemplateList: QueryList<DynamicTemplateDirective>;\n\n  @Input() formId: string;\n  @Input() asBootstrapFormGroup = false;\n  @Input() bindId = true;\n  @Input() context: any | null = null;\n  @Input() group: FormGroup;\n  @Input() hostClass: string[];\n  @Input() hasErrorMessaging = false;\n  @Input() layout = null as DynamicFormLayout;\n  @Input() model: any;\n  relationshipValue$: Observable<ReorderableRelationship>;\n  isRelationship: boolean;\n  modalRef: NgbModalRef;\n  item: Item;\n  item$: Observable<Item>;\n  collection: Collection;\n  listId: string;\n  searchConfig: string;\n  value: MetadataValue;\n  /**\n   * List of subscriptions to unsubscribe from\n   */\n  private subs: Subscription[] = [];\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('ngbEvent') customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n  @ViewChild('componentViewContainer', { read: ViewContainerRef, static: true }) componentViewContainerRef: ViewContainerRef;\n\n  private showErrorMessagesPreviousStage: boolean;\n\n  get componentType(): Type<DynamicFormControl> | null {\n    return dsDynamicFormControlMapFn(this.model);\n  }\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected dynamicFormComponentService: DynamicFormComponentService,\n    protected layoutService: DynamicFormLayoutService,\n    protected validationService: DynamicFormValidationService,\n    protected translateService: TranslateService,\n    protected relationService: DynamicFormRelationService,\n    private modalService: NgbModal,\n    private relationshipService: RelationshipService,\n    private selectableListService: SelectableListService,\n    private itemService: ItemDataService,\n    private zone: NgZone,\n    private store: Store<AppState>,\n    private submissionObjectService: SubmissionObjectDataService,\n    private ref: ChangeDetectorRef,\n    private formService: FormService,\n    private formBuilderService: FormBuilderService,\n    private submissionService: SubmissionService\n  ) {\n    super(ref, componentFactoryResolver, layoutService, validationService, dynamicFormComponentService, relationService);\n  }\n\n  /**\n   * Sets up the necessary variables for when this control can be used to add relationships to the submitted item\n   */\n  ngOnInit(): void {\n    this.isRelationship = hasValue(this.model.relationship);\n    const isWrapperAroundRelationshipList = hasValue(this.model.relationshipConfig);\n\n    if (this.isRelationship || isWrapperAroundRelationshipList) {\n      const config = this.model.relationshipConfig || this.model.relationship;\n      const relationshipOptions = Object.assign(new RelationshipOptions(), config);\n      this.listId = `list-${this.model.submissionId}-${relationshipOptions.relationshipType}`;\n      this.setItem();\n\n      if (isWrapperAroundRelationshipList || !this.model.repeatable) {\n        const subscription = this.selectableListService.getSelectableList(this.listId).pipe(\n          find((list: SelectableListState) => hasNoValue(list)),\n          switchMap(() => this.item$.pipe(take(1))),\n          switchMap((item) => {\n            const relationshipsRD$ = this.relationshipService.getItemRelationshipsByLabel(item,\n              relationshipOptions.relationshipType,\n              undefined,\n              true,\n              true,\n              followLink('leftItem'),\n              followLink('rightItem'),\n              followLink('relationshipType')\n            );\n\n            relationshipsRD$.pipe(\n              getFirstSucceededRemoteDataPayload(),\n              getPaginatedListPayload()\n            ).subscribe((relationships: Relationship[]) => {\n              // set initial namevariants for pre-existing relationships\n              relationships.forEach((relationship: Relationship) => {\n                const relationshipMD: MetadataValue = item.firstMetadata(relationshipOptions.metadataField, { authority: `${VIRTUAL_METADATA_PREFIX}${relationship.id}` });\n                const nameVariantMD: MetadataValue = item.firstMetadata(this.model.metadataFields, { authority: `${VIRTUAL_METADATA_PREFIX}${relationship.id}` });\n                if (hasValue(relationshipMD) && isNotEmpty(relationshipMD.value) && hasValue(nameVariantMD) && isNotEmpty(nameVariantMD.value)) {\n                  this.relationshipService.setNameVariant(this.listId, relationshipMD.value, nameVariantMD.value);\n                }\n              });\n            });\n\n            return relationshipsRD$.pipe(\n              paginatedRelationsToItems(item.uuid),\n              getFirstSucceededRemoteData(),\n              map((items: RemoteData<PaginatedList<Item>>) => items.payload.page.map((i) => Object.assign(new ItemSearchResult(), { indexableObject: i }))),\n            );\n          })\n        ).subscribe((relatedItems: SearchResult<Item>[]) => this.selectableListService.select(this.listId, relatedItems));\n        this.subs.push(subscription);\n      }\n\n      if (hasValue(this.model.metadataValue)) {\n        this.value = Object.assign(new FormFieldMetadataValueObject(), this.model.metadataValue);\n      } else {\n        this.value = Object.assign(new FormFieldMetadataValueObject(), this.model.value);\n      }\n\n      if (hasValue(this.value) && this.value.isVirtual) {\n        const relationship$ = this.relationshipService.findById(this.value.virtualValue, true, true, followLink('leftItem'), followLink('rightItem'), followLink('relationshipType'))\n          .pipe(\n            getAllSucceededRemoteData(),\n            getRemoteDataPayload());\n        this.relationshipValue$ = observableCombineLatest([this.item$.pipe(take(1)), relationship$]).pipe(\n          switchMap(([item, relationship]: [Item, Relationship]) =>\n            relationship.leftItem.pipe(\n              getAllSucceededRemoteData(),\n              getRemoteDataPayload(),\n              map((leftItem: Item) => {\n                return new ReorderableRelationship(relationship, leftItem.uuid !== item.uuid, this.relationshipService, this.store, this.model.submissionId);\n              }),\n            )\n          ),\n          startWith(undefined)\n        );\n      }\n    }\n  }\n\n  get isCheckbox(): boolean {\n    return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX || this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CUSTOM_SWITCH;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes && !this.isRelationship && hasValue(this.group.get(this.model.id))) {\n      super.ngOnChanges(changes);\n      if (this.model && this.model.placeholder) {\n        this.model.placeholder = this.translateService.instant(this.model.placeholder);\n      }\n    }\n  }\n\n  ngDoCheck() {\n    if (isNotUndefined(this.showErrorMessagesPreviousStage) && this.showErrorMessagesPreviousStage !== this.showErrorMessages) {\n      this.showErrorMessagesPreviousStage = this.showErrorMessages;\n      this.forceShowErrorDetection();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.showErrorMessagesPreviousStage = this.showErrorMessages;\n  }\n\n  /**\n   * Since Form Control Components created dynamically have 'OnPush' change detection strategy,\n   * changes are not propagated. So use this method to force an update\n   */\n  protected forceShowErrorDetection() {\n    if (this.showErrorMessages) {\n      this.destroyFormControlComponent();\n      this.createFormControlComponent();\n    }\n  }\n\n  onChangeLanguage(event) {\n    if (isNotEmpty((this.model as any).value)) {\n      this.onChange(event);\n    }\n  }\n\n  hasRelationship() {\n    return isNotEmpty(this.model) && this.model.hasOwnProperty('relationship') && isNotEmpty(this.model.relationship);\n  }\n\n  isVirtual() {\n    const value: FormFieldMetadataValueObject = this.model.metadataValue;\n    return isNotEmpty(value) && value.isVirtual;\n  }\n\n  public hasResultsSelected(): Observable<boolean> {\n    return this.model.value.pipe(map((list: SearchResult<DSpaceObject>[]) => isNotEmpty(list)));\n  }\n\n  /**\n   * Open a modal where the user can select relationships to be added to item being submitted\n   */\n  openLookup() {\n    this.modalRef = this.modalService.open(DsDynamicLookupRelationModalComponent, {\n      size: 'lg'\n    });\n\n    if (hasValue(this.model.value)) {\n      this.focus.emit({\n        $event: new Event('focus'),\n        context: this.context,\n        control: this.control,\n        model: this.model,\n        type: DynamicFormControlEventType.Focus\n      } as DynamicFormControlEvent);\n\n      this.change.emit({\n        $event: new Event('change'),\n        context: this.context,\n        control: this.control,\n        model: this.model,\n        type: DynamicFormControlEventType.Change\n      } as DynamicFormControlEvent);\n    }\n\n    this.submissionService.dispatchSave(this.model.submissionId);\n\n    const modalComp = this.modalRef.componentInstance;\n\n    if (hasValue(this.model.value) && !this.model.readOnly) {\n      if (typeof this.model.value === 'string') {\n        modalComp.query = this.model.value;\n      } else if (typeof this.model.value.value === 'string') {\n        modalComp.query = this.model.value.value;\n      }\n    }\n\n    modalComp.repeatable = this.model.repeatable;\n    modalComp.listId = this.listId;\n    modalComp.relationshipOptions = this.model.relationship;\n    modalComp.label = this.model.relationship.relationshipType;\n    modalComp.metadataFields = this.model.metadataFields;\n    modalComp.item = this.item;\n    modalComp.collection = this.collection;\n    modalComp.submissionId = this.model.submissionId;\n  }\n\n  /**\n   * Callback for the remove event,\n   * remove the current control from its array\n   */\n  onRemove(): void {\n    const arrayContext: DynamicFormArrayModel = (this.context as DynamicFormArrayGroupModel).context;\n    const path = this.formBuilderService.getPath(arrayContext);\n    const formArrayControl = this.group.root.get(path) as FormArray;\n    this.formBuilderService.removeFormArrayGroup(this.context.index, formArrayControl, arrayContext);\n    if (this.model.parent.context.groups.length === 0) {\n      this.formBuilderService.addFormArrayGroup(formArrayControl, arrayContext);\n    }\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n  get hasHint(): boolean {\n    return isNotEmpty(this.model.hint) && this.model.hint !== '&nbsp;';\n  }\n\n  /**\n   *  Initialize this.item$ based on this.model.submissionId\n   */\n  private setItem() {\n    const submissionObject$ = this.submissionObjectService\n      .findById(this.model.submissionId, true, true, followLink('item'), followLink('collection')).pipe(\n        getAllSucceededRemoteData(),\n        getRemoteDataPayload()\n      );\n\n    this.item$ = submissionObject$.pipe(switchMap((submissionObject: SubmissionObject) => (submissionObject.item as Observable<RemoteData<Item>>).pipe(getAllSucceededRemoteData(), getRemoteDataPayload())));\n    const collection$ = submissionObject$.pipe(switchMap((submissionObject: SubmissionObject) => (submissionObject.collection as Observable<RemoteData<Collection>>).pipe(getAllSucceededRemoteData(), getRemoteDataPayload())));\n\n    this.subs.push(this.item$.subscribe((item) => this.item = item));\n    this.subs.push(collection$.subscribe((collection) => this.collection = collection));\n\n  }\n}\n","<div [class.form-group]=\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\"\n     [formGroup]=\"group\"\n     [ngClass]=\"[getClass('element', 'container'), getClass('grid', 'container')]\">\n  <label *ngIf=\"!isCheckbox && hasLabel\"\n         [id]=\"'label_' + model.id\"\n         [for]=\"id\"\n         [innerHTML]=\"(model.required && model.label) ? (model.label | translate) + ' *' : (model.label | translate)\"\n         [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n  <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n  <!--    Should be *ngIf instead of class d-none, but that breaks the #componentViewContainer reference-->\n  <div [ngClass]=\"{'form-row': model.hasLanguages || isRelationship,\n                      'd-none': value?.isVirtual && (model.hasSelectableMetadata || context?.index > 0)}\">\n    <div [ngClass]=\"getClass('grid', 'control')\">\n      <div>\n        <ng-container #componentViewContainer></ng-container>\n      </div>\n\n      <small *ngIf=\"hasHint && ((!model.repeatable && (isRelationship === false || value?.value === null)) || (model.repeatable === true && context?.index === context?.context?.groups?.length - 1)) && (!showErrorMessages || errorMessages.length === 0)\"\n             class=\"text-muted ds-hint\" [innerHTML]=\"model.hint | translate\" [ngClass]=\"getClass('element', 'hint')\"></small>\n      <!-- In case of repeatable fields show empty space for all elements except the first -->\n      <div *ngIf=\"context?.index !== null\n              && (!showErrorMessages || errorMessages.length === 0)\" class=\"clearfix w-100 mb-2\"></div>\n\n      <div *ngIf=\"showErrorMessages\" [id]=\"id + '_errors'\"\n           [ngClass]=\"[getClass('element', 'errors'), getClass('grid', 'errors')]\">\n        <small *ngFor=\"let message of errorMessages\" class=\"invalid-feedback d-block\">{{ message | translate: model.validators }}</small>\n      </div>\n\n    </div>\n    <div *ngIf=\"model.languageCodes && model.languageCodes.length > 0\" class=\"col-xs-2\" >\n      <select\n        #language=\"ngModel\"\n        [disabled]=\"model.readOnly\"\n        [(ngModel)]=\"model.language\"\n        class=\"form-control\"\n        (blur)=\"onBlur($event)\"\n        (change)=\"onChangeLanguage($event)\"\n        [ngModelOptions]=\"{standalone: true}\"\n        required>\n        <option *ngFor=\"let lang of model.languageCodes\" [value]=\"lang.code\">{{lang.display}}</option>\n      </select>\n    </div>\n    <div *ngIf=\"isRelationship\" class=\"col-auto text-center\">\n      <button class=\"btn btn-secondary\"\n              type=\"button\"\n              ngbTooltip=\"{{'form.lookup-help' | translate}}\"\n              placement=\"top\"\n              (click)=\"openLookup(); $event.stopPropagation();\"><i class=\"fa fa-search\"></i>\n      </button>\n    </div>\n  </div>\n  <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n  <ng-container *ngIf=\"value?.isVirtual\">\n    <ds-existing-metadata-list-element\n      *ngIf=\"model.hasSelectableMetadata\"\n      [reoRel]=\"relationshipValue$ | async\"\n      [submissionItem]=\"item$ | async\"\n      [listId]=\"listId\"\n      [metadataFields]=\"model.metadataFields\"\n      [submissionId]=\"model.submissionId\"\n      [relationshipOptions]=\"model.relationship\"\n      (remove)=\"onRemove()\"\n    >\n    </ds-existing-metadata-list-element>\n    <ds-existing-relation-list-element\n      *ngIf=\"!model.hasSelectableMetadata\"\n      [ngClass]=\"{'d-block pb-2 pt-2': !context?.index}\"\n      [reoRel]=\"relationshipValue$ | async\"\n      [submissionItem]=\"item$ | async\"\n      [listId]=\"listId\"\n      [metadataFields]=\"model.metadataFields\"\n      [submissionId]=\"model.submissionId\"\n      [relationshipOptions]=\"model.relationship\"\n    >\n    </ds-existing-relation-list-element>\n    <small *ngIf=\"hasHint && (model.repeatable === false || context?.index === context?.context?.groups?.length - 1) && (!showErrorMessages || errorMessages.length === 0)\"\n           class=\"text-muted ds-hint\" [innerHTML]=\"model.hint | translate\" [ngClass]=\"getClass('element', 'hint')\"></small>\n    <div class=\"clearfix w-100 mb-2\"></div>\n  </ng-container>\n  <ng-content></ng-content>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport {\n  DynamicFormControlComponent,\n  DynamicFormLayoutService,\n  DynamicFormValidationService\n} from '@ng-dynamic-forms/core';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf } from 'rxjs';\n\nimport { VocabularyService } from '../../../../../core/submission/vocabularies/vocabulary.service';\nimport { isNotEmpty } from '../../../../empty.util';\nimport { FormFieldMetadataValueObject } from '../../models/form-field-metadata-value.model';\nimport { VocabularyEntry } from '../../../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { DsDynamicInputModel } from './ds-dynamic-input.model';\nimport { PageInfo } from '../../../../../core/shared/page-info.model';\n\n/**\n * An abstract class to be extended by form components that handle vocabulary\n */\n@Component({\n  selector: 'ds-dynamic-vocabulary',\n  template: ''\n})\nexport abstract class DsDynamicVocabularyComponent extends DynamicFormControlComponent {\n\n  @Input() abstract group: FormGroup;\n  @Input() abstract model: DsDynamicInputModel;\n\n  @Output() abstract blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() abstract change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() abstract focus: EventEmitter<any> = new EventEmitter<any>();\n\n  public abstract pageInfo: PageInfo;\n\n  protected constructor(protected vocabularyService: VocabularyService,\n                        protected layoutService: DynamicFormLayoutService,\n                        protected validationService: DynamicFormValidationService\n  ) {\n    super(layoutService, validationService);\n  }\n\n  /**\n   * Sets the current value with the given value.\n   * @param value The value to set.\n   * @param init Representing if is init value or not.\n   */\n  public abstract setCurrentValue(value: any, init?: boolean);\n\n  /**\n   * Retrieves the init form value from model\n   */\n  getInitValueFromModel(): Observable<FormFieldMetadataValueObject> {\n    let initValue$: Observable<FormFieldMetadataValueObject>;\n    if (isNotEmpty(this.model.value) && (this.model.value instanceof FormFieldMetadataValueObject)) {\n      let initEntry$: Observable<VocabularyEntry>;\n      if (this.model.value.hasAuthority()) {\n        initEntry$ = this.vocabularyService.getVocabularyEntryByID(this.model.value.authority, this.model.vocabularyOptions);\n      } else {\n        initEntry$ = this.vocabularyService.getVocabularyEntryByValue(this.model.value.value, this.model.vocabularyOptions);\n      }\n      initValue$ = initEntry$.pipe(map((initEntry: VocabularyEntry) => {\n        if (isNotEmpty(initEntry)) {\n          // Integrate FormFieldMetadataValueObject with retrieved information\n          return new FormFieldMetadataValueObject(\n            initEntry.value,\n            null,\n            initEntry.authority,\n            initEntry.display,\n            (this.model.value as any).place,\n            null,\n            initEntry.otherInformation || null\n          );\n        } else {\n          return this.model.value as any;\n        }\n      }));\n    } else if (isNotEmpty(this.model.value) && (this.model.value instanceof VocabularyEntry)) {\n      initValue$ = observableOf(\n        new FormFieldMetadataValueObject(\n          this.model.value.value,\n          null,\n          this.model.value.authority,\n          this.model.value.display,\n          0,\n          null,\n          this.model.value.otherInformation || null\n        )\n      );\n    } else {\n      initValue$ = observableOf(new FormFieldMetadataValueObject(this.model.value));\n    }\n    return initValue$;\n  }\n\n  /**\n   * Emits a blur event containing a given value.\n   * @param event The value to emit.\n   */\n  onBlur(event: Event) {\n    this.blur.emit(event);\n  }\n\n  /**\n   * Emits a focus event containing a given value.\n   * @param event The value to emit.\n   */\n  onFocus(event) {\n    this.focus.emit(event);\n  }\n\n  /**\n   * Emits a change event and updates model value.\n   * @param updateValue\n   */\n  dispatchUpdate(updateValue: any) {\n    this.model.value = updateValue;\n    this.change.emit(updateValue);\n  }\n\n  /**\n   * Update the page info object\n   * @param elementsPerPage\n   * @param currentPage\n   * @param totalElements\n   * @param totalPages\n   */\n  protected updatePageInfo(elementsPerPage: number, currentPage: number, totalElements?: number, totalPages?: number) {\n    this.pageInfo = Object.assign(new PageInfo(), {\n      elementsPerPage: elementsPerPage,\n      currentPage: currentPage,\n      totalElements: totalElements,\n      totalPages: totalPages\n    });\n  }\n}\n","import { Subscriber } from '../Subscriber';\nexport function mapTo(value) {\n    return (source) => source.lift(new MapToOperator(value));\n}\nclass MapToOperator {\n    constructor(value) {\n        this.value = value;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    }\n}\nclass MapToSubscriber extends Subscriber {\n    constructor(destination, value) {\n        super(destination);\n        this.value = value;\n    }\n    _next(x) {\n        this.destination.next(this.value);\n    }\n}\n//# sourceMappingURL=mapTo.js.map","<ds-search *ngIf=\"this.relationship.searchConfiguration && context\"\n           [configuration]=\"this.relationship.searchConfiguration\"\n           [context]=\"context\"\n           [fixedFilterQuery]=\"this.relationship.filter\"\n           [inPlaceSearch]=\"true\"\n           [linkType]=\"linkTypes.ExternalLink\"\n           [searchFormPlaceholder]=\"'submission.sections.describe.relationship-lookup.search-tab.search-form.placeholder'\"\n           [selectable]=\"true\"\n           [selectionConfig]=\"{ repeatable: repeatable, listId: listId }\"\n           [showViewModes]=\"false\"\n           (resultFound)=\"onResultFound($event)\"\n           (deselectObject)=\"deselectObject.emit($event)\"\n           (selectObject)=\"selectObject.emit($event)\">\n  <div additionalSearchOptions *ngIf=\"repeatable\" class=\"position-absolute\">\n    <div class=\"input-group mb-3\">\n      <div class=\"input-group-prepend\">\n        <div class=\"input-group-text\">\n          <!-- In theory we don't need separate checkboxes for this,\n               but I wasn't able to get this to work correctly without them.\n               Checkboxes that are in the indeterminate state always switch to checked when clicked\n               This seemed like the cleanest and clearest solution to solve this issue for now. -->\n\n          <input *ngIf=\"!allSelected && !(someSelected$ | async)\"\n                 type=\"checkbox\"\n                 [indeterminate]=\"false\"\n                 (change)=\"selectAll()\">\n          <input *ngIf=\"!allSelected && (someSelected$ | async)\"\n                 type=\"checkbox\"\n                 [indeterminate]=\"true\"\n                 (change)=\"deselectAll()\">\n          <input *ngIf=\"allSelected\" type=\"checkbox\"\n                 [checked]=\"true\"\n                 (change)=\"deselectAll()\">\n        </div>\n      </div>\n      <div ngbDropdown class=\"input-group-append\">\n        <button *ngIf=\"selectAllLoading\" type=\"button\"\n                class=\"btn btn-outline-secondary rounded-right\">\n                            <span class=\"spinner-border spinner-border-sm\" role=\"status\"\n                                  aria-hidden=\"true\"></span>\n          <span class=\"sr-only\">{{ ('submission.sections.describe.relationship-lookup.search-tab.loading' | translate) }}</span>\n        </button>\n        <button id=\"resultdropdown\" type=\"button\"\n                ngbDropdownToggle\n                class=\"btn btn-outline-secondary dropdown-toggle-split\"\n                data-toggle=\"dropdown\" aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n                [hidden]=\"selectAllLoading\">\n          <span class=\"sr-only\">{{ ('submission.sections.describe.relationship-lookup.toggle-dropdown' | translate) }}</span>\n        </button>\n        <div ngbDropdownMenu aria-labelledby=\"resultdropdown\" *ngVar=\"(resultsRD$ | async) as resultsRD\">\n          <button class=\"dropdown-item\"\n                  (click)=\"selectPage(resultsRD?.page)\">{{ ('submission.sections.describe.relationship-lookup.search-tab.select-page' | translate) }}</button>\n          <button class=\"dropdown-item\"\n                  (click)=\"deselectPage(resultsRD?.page)\">{{ ('submission.sections.describe.relationship-lookup.search-tab.deselect-page' | translate) }}</button>\n          <button class=\"dropdown-item\" (click)=\"selectAll()\">{{ ('submission.sections.describe.relationship-lookup.search-tab.select-all' | translate) }}</button>\n          <button class=\"dropdown-item\" (click)=\"deselectAll()\">{{ ('submission.sections.describe.relationship-lookup.search-tab.deselect-all' | translate) }}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</ds-search>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../../../../../core/shared/search/search-configuration.service';\nimport { Item } from '../../../../../../core/shared/item.model';\nimport { SearchResult } from '../../../../../search/models/search-result.model';\nimport { PaginatedList } from '../../../../../../core/data/paginated-list.model';\nimport { Observable } from 'rxjs';\nimport { RelationshipOptions } from '../../../models/relationship-options.model';\nimport { PaginationComponentOptions } from '../../../../../pagination/pagination-component-options.model';\nimport { ListableObject } from '../../../../../object-collection/shared/listable-object.model';\nimport { SearchService } from '../../../../../../core/shared/search/search.service';\nimport { SelectableListService } from '../../../../../object-list/selectable-list/selectable-list.service';\nimport { hasValue } from '../../../../../empty.util';\nimport { map, mapTo, switchMap, take, tap } from 'rxjs/operators';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport { CollectionElementLinkType } from '../../../../../object-collection/collection-element-link.type';\nimport { Context } from '../../../../../../core/shared/context.model';\nimport { LookupRelationService } from '../../../../../../core/data/lookup-relation.service';\nimport { PaginationService } from '../../../../../../core/pagination/pagination.service';\nimport { RelationshipService } from '../../../../../../core/data/relationship.service';\nimport { RelationshipType } from '../../../../../../core/shared/item-relationships/relationship-type.model';\n\nimport { Relationship } from '../../../../../../core/shared/item-relationships/relationship.model';\nimport { SearchObjects } from '../../../../../search/models/search-objects.model';\nimport { DSpaceObject } from '../../../../../../core/shared/dspace-object.model';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\n\n@Component({\n  selector: 'ds-dynamic-lookup-relation-search-tab',\n  styleUrls: ['./dynamic-lookup-relation-search-tab.component.scss'],\n  templateUrl: './dynamic-lookup-relation-search-tab.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ]\n})\n\n/**\n * Tab for inside the lookup model that represents the items that can be used as a relationship in this submission\n */\nexport class DsDynamicLookupRelationSearchTabComponent implements OnInit, OnDestroy {\n  /**\n   * Options for searching related items\n   */\n  @Input() relationship: RelationshipOptions;\n\n  /**\n   * The ID of the list to add/remove selected items to/from\n   */\n  @Input() listId: string;\n  @Input() query: string;\n\n  /**\n   * Is the selection repeatable?\n   */\n  @Input() repeatable: boolean;\n\n  /**\n   * The list of selected items\n   */\n  @Input() selection$: Observable<ListableObject[]>;\n\n  /**\n   * The context to display lists\n   */\n  @Input() context: Context;\n\n  /**\n   * The type of relationship\n   */\n  @Input() relationshipType: RelationshipType;\n\n  /**\n   * The item being viewed\n   */\n  @Input() item: Item;\n\n  /**\n   * Check if is left type or right type\n   */\n  @Input() isLeft: boolean;\n\n  /**\n   * Check if is left type or right type\n   */\n  @Input() toRemove: SearchResult<Item>[];\n\n\n  /**\n   * Check if is being utilized by edit relationship component\n   */\n  @Input() isEditRelationship: boolean;\n\n  /**\n   * Send an event to deselect an object from the list\n   */\n  @Output() deselectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * Send an event to select an object from the list\n   */\n  @Output() selectObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * Search results\n   */\n  resultsRD$: BehaviorSubject<SearchObjects<DSpaceObject>> = new BehaviorSubject<SearchObjects<DSpaceObject>>(null);\n\n  /**\n   * Are all results selected?\n   */\n  allSelected: boolean;\n\n  /**\n   * Are some results selected?\n   */\n  someSelected$: Observable<boolean>;\n\n  /**\n   * Is it currently loading to select all results?\n   */\n  selectAllLoading: boolean;\n\n  /**\n   * Subscription to unsubscribe from\n   */\n  subscription;\n\n  /**\n   * The initial pagination to use\n   */\n  initialPagination = {\n    page: 1,\n    pageSize: 5\n  };\n\n  /**\n   * The type of links to display\n   */\n  linkTypes = CollectionElementLinkType;\n\n  /**\n   * Emits an event with the current search result entries\n   */\n  @Output() resultFound: EventEmitter<SearchObjects<DSpaceObject>> = new EventEmitter<SearchObjects<DSpaceObject>>();\n\n  constructor(\n    private searchService: SearchService,\n    private selectableListService: SelectableListService,\n    public searchConfigService: SearchConfigurationService,\n    public lookupRelationService: LookupRelationService,\n    private relationshipService: RelationshipService,\n    private paginationService: PaginationService\n  ) {\n  }\n\n  /**\n   * Sets up the pagination and fixed query parameters\n   */\n  ngOnInit(): void {\n    this.resetRoute();\n  }\n\n  /**\n   * Method to reset the route when the window is opened to make sure no strange pagination issues appears\n   */\n  resetRoute() {\n    this.paginationService.updateRoute(this.searchConfigService.paginationID, this.initialPagination);\n  }\n\n  /**\n   * Selects a page in the store\n   * @param page The page to select\n   */\n  selectPage(page: SearchResult<DSpaceObject>[]) {\n    this.selection$\n      .pipe(take(1))\n      .subscribe((selection: SearchResult<Item>[]) => {\n        const filteredPage = page.filter((pageItem) => selection.findIndex((selected) => selected.equals(pageItem)) < 0);\n        this.selectObject.emit(...filteredPage);\n      });\n    this.selectableListService.select(this.listId, page);\n  }\n\n  /**\n   * Deselects a page in the store\n   * @param page the page to deselect\n   */\n  deselectPage(page: SearchResult<DSpaceObject>[]) {\n    this.allSelected = false;\n    this.selection$\n      .pipe(take(1))\n      .subscribe((selection: SearchResult<Item>[]) => {\n        const filteredPage = page.filter((pageItem) => selection.findIndex((selected) => selected.equals(pageItem)) >= 0);\n        this.deselectObject.emit(...filteredPage);\n      });\n    this.selectableListService.deselect(this.listId, page);\n  }\n\n  /**\n   * Select all items that were found using the current search query\n   */\n  selectAll() {\n    this.allSelected = true;\n    this.selectAllLoading = true;\n    const fullPagination = Object.assign(new PaginationComponentOptions(), {\n      currentPage: 1,\n      pageSize: 9999\n    });\n    const fullSearchConfig = Object.assign(this.lookupRelationService.searchConfig, { pagination: fullPagination });\n    const results$ = this.searchService.search<Item>(fullSearchConfig);\n    results$.pipe(\n      getFirstSucceededRemoteData(),\n      map((resultsRD) => resultsRD.payload.page),\n      tap(() => this.selectAllLoading = false),\n      switchMap((results) => this.selection$.pipe(\n        take(1),\n        tap((selection: SearchResult<Item>[]) => {\n          const filteredResults = results.filter((pageItem) => selection.findIndex((selected) => selected.equals(pageItem)) < 0);\n          this.selectObject.emit(...filteredResults);\n        }),\n        mapTo(results)\n      ))\n    ).subscribe((results) => {\n        this.selectableListService.select(this.listId, results);\n    });\n  }\n\n  /**\n   * setSelectedIds select all the items from the results that have relationship\n   * @param idOfItems the uuid of items that are being checked\n   * @param resultListOfItems the list of results of the items\n   */\n  setSelectedIds(idOfItems: string[], resultListOfItems: SearchResult<DSpaceObject>[]) {\n    let relationType = this.relationshipType.rightwardType;\n    if ( this.isLeft ) {\n      relationType = this.relationshipType.leftwardType;\n    }\n    this.relationshipService.searchByItemsAndType( this.relationshipType.id, this.item.uuid, relationType ,idOfItems ).pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n      ).subscribe( (res: PaginatedList<Relationship>) => {\n\n        let selectableObject = res.page.map( (relationship: any) => {\n\n          let arrUrl = [];\n          if ( this.isLeft ) {\n            arrUrl = relationship._links.rightItem.href.split('/');\n          } else {\n            arrUrl = relationship._links.leftItem.href.split('/');\n          }\n          const uuid = arrUrl[ arrUrl.length - 1 ];\n\n          return this.getRelatedItem(uuid, resultListOfItems);\n        });\n\n        selectableObject = selectableObject.filter( (selObject) => {\n          return !this.getIfInRemove(selObject.indexableObject.uuid);\n        });\n\n        if ( selectableObject.length > 0 ) {\n          this.selectableListService.select(this.listId, selectableObject);\n        }\n    });\n  }\n\n  /**\n   * Deselect all items\n   */\n  deselectAll() {\n    this.allSelected = false;\n    this.selection$\n      .pipe(take(1))\n      .subscribe((selection: SearchResult<DSpaceObject>[]) => this.deselectObject.emit(...selection));\n    this.selectableListService.deselectAll(this.listId);\n  }\n\n  getRelatedItem(uuid: string, resultList: SearchResult<DSpaceObject>[]) {\n    return resultList.find( (resultItem) => {\n      return resultItem.indexableObject.uuid === uuid;\n    });\n  }\n\n  getIfInRemove(uuid: string) {\n    return !!this.toRemove.find( (searchResult) => searchResult.indexableObject.uuid === uuid);\n  }\n\n  ngOnDestroy(): void {\n    if (hasValue(this.subscription)) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  onResultFound($event: SearchObjects<DSpaceObject>) {\n    this.resultsRD$.next($event);\n    this.resultFound.emit($event);\n    if (this.isEditRelationship ) {\n      const idOfItems = $event.page.map( itemSearchResult => {\n        return itemSearchResult.indexableObject.uuid;\n      });\n      this.setSelectedIds(idOfItems, $event.page);\n    }\n  }\n}\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport {\n  DynamicCheckboxModel,\n  DynamicFormControlComponent,\n  DynamicFormLayoutService,\n  DynamicFormValidationService\n} from '@ng-dynamic-forms/core';\nimport { findKey } from 'lodash';\n\nimport { hasValue, isNotEmpty } from '../../../../../empty.util';\nimport { DynamicListCheckboxGroupModel } from './dynamic-list-checkbox-group.model';\nimport { FormBuilderService } from '../../../form-builder.service';\nimport { DynamicListRadioGroupModel } from './dynamic-list-radio-group.model';\nimport { VocabularyService } from '../../../../../../core/submission/vocabularies/vocabulary.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport { PaginatedList } from '../../../../../../core/data/paginated-list.model';\nimport { VocabularyEntry } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { PageInfo } from '../../../../../../core/shared/page-info.model';\n\nexport interface ListItem {\n  id: string;\n  label: string;\n  value: boolean;\n  index: number;\n}\n\n/**\n * Component representing a list input field\n */\n@Component({\n  selector: 'ds-dynamic-list',\n  styleUrls: ['./dynamic-list.component.scss'],\n  templateUrl: './dynamic-list.component.html'\n})\nexport class DsDynamicListComponent extends DynamicFormControlComponent implements OnInit {\n\n  @Input() group: FormGroup;\n  @Input() model: any;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  public items: ListItem[][] = [];\n  protected optionsList: VocabularyEntry[];\n\n  constructor(private vocabularyService: VocabularyService,\n              private cdr: ChangeDetectorRef,\n              private formBuilderService: FormBuilderService,\n              protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(layoutService, validationService);\n  }\n\n  /**\n   * Initialize the component, setting up the field options\n   */\n  ngOnInit() {\n    if (this.model.vocabularyOptions && hasValue(this.model.vocabularyOptions.name)) {\n      this.setOptionsFromVocabulary();\n    }\n  }\n\n  /**\n   * Emits a blur event containing a given value.\n   * @param event The value to emit.\n   */\n  onBlur(event: Event) {\n    this.blur.emit(event);\n  }\n\n  /**\n   * Emits a focus event containing a given value.\n   * @param event The value to emit.\n   */\n  onFocus(event: Event) {\n    this.focus.emit(event);\n  }\n\n  /**\n   * Updates model value with the current value\n   * @param event The change event.\n   */\n  onChange(event: Event) {\n    const target = event.target as any;\n    if (this.model.repeatable) {\n      // Target tabindex coincide with the array index of the value into the authority list\n      const entry: VocabularyEntry = this.optionsList[target.tabIndex];\n      if (target.checked) {\n        this.model.valueUpdates.next(entry);\n      } else {\n        const newValue = [];\n        this.model.value\n          .filter((item) => item.value !== entry.value)\n          .forEach((item) => newValue.push(item));\n        this.model.valueUpdates.next(newValue);\n      }\n    } else {\n      (this.model as DynamicListRadioGroupModel).value = this.optionsList[target.value];\n    }\n    this.change.emit(event);\n  }\n\n  /**\n   * Setting up the field options from vocabulary\n   */\n  protected setOptionsFromVocabulary() {\n    if (this.model.vocabularyOptions.name && this.model.vocabularyOptions.name.length > 0) {\n      const listGroup = this.group.controls[this.model.id] as FormGroup;\n      const pageInfo: PageInfo = new PageInfo({\n        elementsPerPage: 9999, currentPage: 1\n      } as PageInfo);\n      this.vocabularyService.getVocabularyEntries(this.model.vocabularyOptions, pageInfo).pipe(\n        getFirstSucceededRemoteDataPayload()\n      ).subscribe((entries: PaginatedList<VocabularyEntry>) => {\n        let groupCounter = 0;\n        let itemsPerGroup = 0;\n        let tempList: ListItem[] = [];\n        this.optionsList = entries.page;\n        // Make a list of available options (checkbox/radio) and split in groups of 'model.groupLength'\n        entries.page.forEach((option, key) => {\n          const value = option.authority || option.value;\n          const checked: boolean = isNotEmpty(findKey(\n            this.model.value,\n            (v) => v.value === option.value));\n\n          const item: ListItem = {\n            id: value,\n            label: option.display,\n            value: checked,\n            index: key\n          };\n          if (this.model.repeatable) {\n            this.formBuilderService.addFormGroupControl(listGroup, (this.model as DynamicListCheckboxGroupModel), new DynamicCheckboxModel(item));\n          } else {\n            (this.model as DynamicListRadioGroupModel).options.push({\n              label: item.label,\n              value: option\n            });\n          }\n          tempList.push(item);\n          itemsPerGroup++;\n          this.items[groupCounter] = tempList;\n          if (itemsPerGroup === this.model.groupLength) {\n            groupCounter++;\n            itemsPerGroup = 0;\n            tempList = [];\n          }\n        });\n        this.cdr.markForCheck();\n      });\n\n    }\n  }\n\n}\n","<div [formGroup]=\"group\">\n  <div *ngIf=\"model.repeatable\"\n       class=\"form-row\"\n       [attr.tabindex]=\"model.tabIndex\"\n       [id]=\"id\"\n       [formGroupName]=\"model.id\"\n       [ngClass]=\"model.layout.element?.control\">\n\n    <div *ngFor=\"let columnItems of items\" class=\"col-sm ml-3\">\n\n      <div  *ngFor=\"let item of columnItems\" class=\"custom-control custom-checkbox\">\n\n          <input type=\"checkbox\" class=\"custom-control-input\"\n                 [attr.aria-labelledby]=\"'label_' + model.id\"\n                 [attr.tabindex]=\"item.index\"\n                 [checked]=\"item.value\"\n                 [id]=\"item.id\"\n                 [formControlName]=\"item.id\"\n                 [name]=\"model.name\"\n                 [required]=\"model.required\"\n                 [value]=\"item.value\"\n                 (blur)=\"onBlur($event)\"\n                 (change)=\"onChange($event)\"\n                 (focus)=\"onFocus($event)\"/>\n        <label class=\"custom-control-label\"\n               [class.disabled]=\"model.disabled\"\n               [ngClass]=\"model.layout.element?.control\"\n               [for]=\"item.id\">\n          <span [ngClass]=\"model.layout.element?.label\" [innerHTML]=\"item.label\"></span>\n        </label>\n      </div>\n      <br>\n    </div>\n\n  </div>\n\n  <div *ngIf=\"!model.repeatable\"\n       class=\"form-row\"\n       ngbRadioGroup\n       [attr.tabindex]=\"model.tabIndex\"\n       [id]=\"id\"\n       [ngClass]=\"model.layout.element?.control\"\n       (change)=\"onChange($event)\">\n\n    <div *ngFor=\"let columnItems of items\" class=\"col-sm ml-3\">\n\n      <div  *ngFor=\"let item of columnItems\" class=\"custom-control custom-radio\">\n        <label class=\"custom-control-label\"\n               [class.disabled]=\"model.disabled\"\n               [ngClass]=\"model.layout.element?.control\">\n          <input type=\"radio\" class=\"custom-control-input\"\n                 [checked]=\"item.value\"\n                 [id]=\"item.id\"\n                 [name]=\"model.id\"\n                 [required]=\"model.required\"\n                 [value]=\"item.index\"\n                 (blur)=\"onBlur($event)\"\n                 (focus)=\"onFocus($event)\"/>\n          <span [ngClass]=\"model.layout.element?.label\" [innerHTML]=\"item.label\"></span>\n        </label>\n      </div>\n      <br>\n    </div>\n\n  </div>\n</div>\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { Component, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormArrayComponent,\n  DynamicFormControlCustomEvent,\n  DynamicFormControlEvent,\n  DynamicFormControlLayout,\n  DynamicFormLayout,\n  DynamicFormLayoutService,\n  DynamicFormValidationService,\n  DynamicTemplateDirective\n} from '@ng-dynamic-forms/core';\nimport { Relationship } from '../../../../../../core/shared/item-relationships/relationship.model';\nimport { hasValue } from '../../../../../empty.util';\nimport { DynamicRowArrayModel } from '../ds-dynamic-row-array-model';\n\n@Component({\n  selector: 'ds-dynamic-form-array',\n  templateUrl: './dynamic-form-array.component.html',\n  styleUrls: ['./dynamic-form-array.component.scss']\n})\nexport class DsDynamicFormArrayComponent extends DynamicFormArrayComponent {\n\n  @Input() formLayout: DynamicFormLayout;\n  @Input() group: FormGroup;\n  @Input() layout: DynamicFormControlLayout;\n  @Input() model: DynamicRowArrayModel;// DynamicRow?\n  @Input() templates: QueryList<DynamicTemplateDirective> | undefined;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('ngbEvent') customEvent: EventEmitter<DynamicFormControlCustomEvent> = new EventEmitter();\n\n  /* tslint:enable:no-output-rename */\n\n  constructor(protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService,\n  ) {\n    super(layoutService, validationService);\n  }\n\n  moveSelection(event: CdkDragDrop<Relationship>) {\n\n    // prevent propagating events generated releasing on the same position\n    if (event.previousIndex === event.currentIndex) {\n      return;\n    }\n\n    this.model.moveGroup(event.previousIndex, event.currentIndex - event.previousIndex);\n    const prevIndex = event.previousIndex;\n    const index = event.currentIndex;\n\n    if (hasValue(this.model.groups[index]) && hasValue((this.control as any).controls[index])) {\n      this.onCustomEvent({\n        previousIndex: prevIndex,\n        index,\n        arrayModel: this.model,\n        model: this.model.groups[index].group[0],\n        control: (this.control as any).controls[index]\n      }, 'move');\n    }\n  }\n\n  update(event: any, index: number) {\n    const $event = Object.assign({}, event, {\n      context: { index: index - 1}\n    });\n\n    this.onChange($event);\n  }\n\n  /**\n   * If the drag feature is disabled for this DynamicRowArrayModel.\n   */\n  get dragDisabled(): boolean {\n    return this.model.groups.length === 1 || !this.model.isDraggable;\n  }\n}\n","<ng-container [formGroup]=\"group\">\n    <div [id]=\"id\"\n         [formArrayName]=\"model.id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n      <!-- Draggable Container -->\n      <div cdkDropList cdkDropListLockAxis=\"y\" (cdkDropListDropped)=\"moveSelection($event)\">\n        <!-- Draggable Items -->\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\"\n             role=\"group\"\n             [formGroupName]=\"idx\"\n             [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\"\n             cdkDrag\n             cdkDragHandle\n             [cdkDragDisabled]=\"dragDisabled\"\n             [cdkDragPreviewClass]=\"'ds-submission-reorder-dragging'\">\n          <!-- Item content -->\n          <div class=\"drag-handle\" [class.drag-disable]=\"dragDisabled\" tabindex=\"0\">\n            <i class=\"drag-icon fas fa-grip-vertical fa-fw\" [class.drag-disable]=\"dragDisabled\" ></i>\n          </div>\n          <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n          <ds-dynamic-form-control-container *ngFor=\"let _model of groupModel.group\"\n                                             [bindId]=\"false\"\n                                             [formGroup]=\"group\"\n                                             [context]=\"groupModel\"\n                                             [group]=\"control.get([idx])\"\n                                             [hidden]=\"_model.hidden\"\n                                             [layout]=\"formLayout\"\n                                             [model]=\"_model\"\n                                             [templates]=\"templates\"\n                                             [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\"\n                                             (dfBlur)=\"onBlur($event)\"\n                                             (dfChange)=\"onChange($event)\"\n                                             (dfFocus)=\"onFocus($event)\"\n                                             (ngbEvent)=\"onCustomEvent($event, null, true)\"></ds-dynamic-form-control-container>\n\n          <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n        </div>\n      </div>\n\n\n\n    </div>\n\n</ng-container>\n","import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, tap } from 'rxjs/operators';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\nimport { DynamicFormLayoutService, DynamicFormValidationService } from '@ng-dynamic-forms/core';\n\nimport { VocabularyEntry } from '../../../../../../core/submission/vocabularies/models/vocabulary-entry.model';\nimport { DynamicScrollableDropdownModel } from './dynamic-scrollable-dropdown.model';\nimport { PageInfo } from '../../../../../../core/shared/page-info.model';\nimport { isEmpty } from '../../../../../empty.util';\nimport { VocabularyService } from '../../../../../../core/submission/vocabularies/vocabulary.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../../../../../core/shared/operators';\nimport {\n  PaginatedList,\n  buildPaginatedList\n} from '../../../../../../core/data/paginated-list.model';\nimport { DsDynamicVocabularyComponent } from '../dynamic-vocabulary.component';\nimport { FormFieldMetadataValueObject } from '../../../models/form-field-metadata-value.model';\n\n/**\n * Component representing a dropdown input field\n */\n@Component({\n  selector: 'ds-dynamic-scrollable-dropdown',\n  styleUrls: ['./dynamic-scrollable-dropdown.component.scss'],\n  templateUrl: './dynamic-scrollable-dropdown.component.html'\n})\nexport class DsDynamicScrollableDropdownComponent extends DsDynamicVocabularyComponent implements OnInit {\n  @Input() bindId = true;\n  @Input() group: FormGroup;\n  @Input() model: DynamicScrollableDropdownModel;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  public currentValue: Observable<string>;\n  public loading = false;\n  public pageInfo: PageInfo;\n  public optionsList: any;\n\n  constructor(protected vocabularyService: VocabularyService,\n              protected cdr: ChangeDetectorRef,\n              protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(vocabularyService, layoutService, validationService);\n  }\n\n  /**\n   * Initialize the component, setting up the init form value\n   */\n  ngOnInit() {\n    this.updatePageInfo(this.model.maxOptions, 1);\n    this.vocabularyService.getVocabularyEntries(this.model.vocabularyOptions, this.pageInfo).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      catchError(() => observableOf(buildPaginatedList(\n        new PageInfo(),\n        []\n        ))\n      ))\n      .subscribe((list: PaginatedList<VocabularyEntry>) => {\n        this.optionsList = list.page;\n        if (this.model.value) {\n          this.setCurrentValue(this.model.value, true);\n        }\n\n        this.updatePageInfo(\n          list.pageInfo.elementsPerPage,\n          list.pageInfo.currentPage,\n          list.pageInfo.totalElements,\n          list.pageInfo.totalPages\n        );\n        this.cdr.detectChanges();\n      });\n\n    this.group.get(this.model.id).valueChanges.pipe(distinctUntilChanged())\n      .subscribe((value) => {\n        this.setCurrentValue(value);\n      });\n  }\n\n  /**\n   * Converts an item from the result list to a `string` to display in the `<input>` field.\n   */\n  inputFormatter = (x: VocabularyEntry): string => x.display || x.value;\n\n  /**\n   * Opens dropdown menu\n   * @param sdRef The reference of the NgbDropdown.\n   */\n  openDropdown(sdRef: NgbDropdown) {\n    if (!this.model.readOnly) {\n      this.group.markAsUntouched();\n      sdRef.open();\n    }\n  }\n\n  /**\n   * Loads any new entries\n   */\n  onScroll() {\n    if (!this.loading && this.pageInfo.currentPage <= this.pageInfo.totalPages) {\n      this.loading = true;\n      this.updatePageInfo(\n        this.pageInfo.elementsPerPage,\n        this.pageInfo.currentPage + 1,\n        this.pageInfo.totalElements,\n        this.pageInfo.totalPages\n      );\n      this.vocabularyService.getVocabularyEntries(this.model.vocabularyOptions, this.pageInfo).pipe(\n        getFirstSucceededRemoteDataPayload(),\n        catchError(() => observableOf(buildPaginatedList(\n          new PageInfo(),\n          []\n          ))\n        ),\n        tap(() => this.loading = false))\n        .subscribe((list: PaginatedList<VocabularyEntry>) => {\n          this.optionsList = this.optionsList.concat(list.page);\n          this.updatePageInfo(\n            list.pageInfo.elementsPerPage,\n            list.pageInfo.currentPage,\n            list.pageInfo.totalElements,\n            list.pageInfo.totalPages\n          );\n          this.cdr.detectChanges();\n        });\n    }\n  }\n\n  /**\n   * Emits a change event and set the current value with the given value.\n   * @param event The value to emit.\n   */\n  onSelect(event) {\n    this.group.markAsDirty();\n    this.dispatchUpdate(event);\n    this.setCurrentValue(event);\n  }\n\n  /**\n   * Sets the current value with the given value.\n   * @param value The value to set.\n   * @param init Representing if is init value or not.\n   */\n  setCurrentValue(value: any, init = false): void {\n    let result: Observable<string>;\n\n    if (init) {\n      result = this.getInitValueFromModel().pipe(\n        map((formValue: FormFieldMetadataValueObject) => formValue.display)\n      );\n    } else {\n      if (isEmpty(value)) {\n        result = observableOf('');\n      } else if (typeof value === 'string') {\n        result = observableOf(value);\n      } else {\n        result = observableOf(value.display);\n      }\n    }\n\n    this.currentValue = result;\n  }\n\n}\n","<div #sdRef=\"ngbDropdown\" ngbDropdown display=\"dynamic\" placement=\"bottom-right\" class=\"w-100\">\n  <div class=\"position-relative right-addon\"\n       role=\"combobox\"\n       [attr.aria-label]=\"model.label\"\n       [attr.aria-owns]=\"'combobox_' + id + '_listbox'\">\n    <i ngbDropdownToggle class=\"position-absolute scrollable-dropdown-toggle\"\n       aria-hidden=\"true\"></i>\n    <input class=\"form-control\"\n           [attr.aria-controls]=\"'combobox_' + id + '_listbox'\"\n           [attr.aria-activedescendant]=\"'combobox_' + id + '_selected'\"\n           [attr.aria-label]=\"model.placeholder\"\n           [attr.autoComplete]=\"model.autoComplete\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [class.scrollable-dropdown-input]=\"!model.readOnly\"\n           [id]=\"id\"\n           [name]=\"model.name\"\n           [readonly]=\"true\"\n           [type]=\"model.inputType\"\n           [value]=\"(currentValue | async)\"\n           (blur)=\"onBlur($event)\"\n           (click)=\"$event.stopPropagation(); openDropdown(sdRef);\"\n           (focus)=\"onFocus($event)\"\n           (keypress)=\"$event.preventDefault()\">\n  </div>\n\n  <div ngbDropdownMenu\n       class=\"dropdown-menu scrollable-dropdown-menu w-100\"\n       aria-haspopup=\"true\"\n       aria-expanded=\"false\"\n       [attr.aria-label]=\"model.placeholder\">\n    <div class=\"scrollable-menu\"\n         role=\"listbox\"\n         [id]=\"'combobox_' + id + '_listbox'\"\n         [attr.aria-label]=\"model.placeholder\"\n         infiniteScroll\n         [infiniteScrollDistance]=\"2\"\n         [infiniteScrollThrottle]=\"50\"\n         (scrolled)=\"onScroll()\"\n         [scrollWindow]=\"false\">\n\n      <button class=\"dropdown-item disabled\" *ngIf=\"optionsList && optionsList.length == 0\">{{'form.no-results' | translate}}</button>\n      <button class=\"dropdown-item collection-item text-truncate\" *ngFor=\"let listEntry of optionsList\"\n              (click)=\"onSelect(listEntry); sdRef.close()\" (mousedown)=\"onSelect(listEntry); sdRef.close()\"\n              title=\"{{ listEntry.display }}\" role=\"option\"\n              [attr.id]=\"listEntry.display == (currentValue|async) ? ('combobox_' + id + '_selected') : null\">\n        {{inputFormatter(listEntry)}}\n      </button>\n      <div class=\"scrollable-dropdown-loading text-center\" *ngIf=\"loading\"><p>{{'form.loading' | translate}}</p></div>\n    </div>\n\n  </div>\n</div>\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"./Observable\");\nvar Subscriber_1 = require(\"./Subscriber\");\nvar Subscription_1 = require(\"./Subscription\");\nvar ObjectUnsubscribedError_1 = require(\"./util/ObjectUnsubscribedError\");\nvar SubjectSubscription_1 = require(\"./SubjectSubscription\");\nvar rxSubscriber_1 = require(\"../internal/symbol/rxSubscriber\");\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","import { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\n\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  DynamicFormArrayModel,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicFormLayout,\n} from '@ng-dynamic-forms/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { findIndex } from 'lodash';\n\nimport { FormBuilderService } from './builder/form-builder.service';\nimport { hasValue, isNotEmpty, isNotNull, isNull } from '../empty.util';\nimport { FormService } from './form.service';\nimport { FormEntry, FormError } from './form.reducer';\nimport { FormFieldMetadataValueObject } from './builder/models/form-field-metadata-value.model';\n\n/**\n * The default form component.\n */\n@Component({\n  exportAs: 'formComponent',\n  selector: 'ds-form',\n  styleUrls: ['form.component.scss'],\n  templateUrl: 'form.component.html'\n})\nexport class FormComponent implements OnDestroy, OnInit {\n\n  private formErrors: FormError[] = [];\n  private formValid: boolean;\n\n  /**\n   * A boolean that indicate if to display form's submit button\n   */\n  @Input() displaySubmit = true;\n\n  /**\n   * A boolean that indicate if to display form's cancel button\n   */\n  @Input() displayCancel = true;\n\n  /**\n   * A boolean that indicate if to emit a form change event\n   */\n  @Input() emitChange = true;\n\n  /**\n   * The form unique ID\n   */\n  @Input() formId: string;\n\n  /**\n   * i18n key for the submit button\n   */\n  @Input() submitLabel = 'form.submit';\n\n  /**\n   * i18n key for the cancel button\n   */\n  @Input() cancelLabel = 'form.cancel';\n\n  /**\n   * An array of DynamicFormControlModel type\n   */\n  @Input() formModel: DynamicFormControlModel[];\n  @Input() parentFormModel: DynamicFormGroupModel | DynamicFormGroupModel[];\n  @Input() formGroup: FormGroup;\n  @Input() formLayout = null as DynamicFormLayout;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('ngbEvent') customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n  @Output() addArrayItem: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output() removeArrayItem: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n  /**\n   * An event fired when form is valid and submitted .\n   * Event's payload equals to the form content.\n   */\n  @Output() cancel: EventEmitter<Observable<any>> = new EventEmitter<Observable<any>>();\n\n  /**\n   * An event fired when form is valid and submitted .\n   * Event's payload equals to the form content.\n   */\n  @Output() submitForm: EventEmitter<Observable<any>> = new EventEmitter<Observable<any>>();\n\n  /**\n   * Reference to NgbModal\n   */\n  modalRef: NgbModalRef;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  constructor(private formService: FormService,\n              protected changeDetectorRef: ChangeDetectorRef,\n              private formBuilderService: FormBuilderService) {\n  }\n\n  /**\n   * Method provided by Angular. Invoked after the view has been initialized.\n   */\n\n  /*ngAfterViewChecked(): void {\n    this.subs.push(this.formGroup.valueChanges\n      .filter((formGroup) => this.formGroup.dirty)\n      .subscribe(() => {\n        // Dispatch a FormChangeAction if the user has changed the value in the UI\n        this.store.dispatch(new FormChangeAction(this.formId, this.formGroup.value));\n        this.formGroup.markAsPristine();\n      }));\n  }*/\n\n  private getFormGroup(): FormGroup {\n    if (!!this.parentFormModel) {\n      return this.formGroup.parent as FormGroup;\n    }\n\n    return this.formGroup;\n  }\n\n  private getFormGroupValue() {\n    return this.getFormGroup().value;\n  }\n\n  private getFormGroupValidStatus() {\n    return this.getFormGroup().valid;\n  }\n\n  /**\n   * Method provided by Angular. Invoked after the constructor\n   */\n  ngOnInit() {\n    if (!this.formGroup) {\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n\n    } else {\n      this.formModel.forEach((model) => {\n        if (this.parentFormModel) {\n          this.formBuilderService.addFormGroupControl(this.formGroup, this.parentFormModel, model);\n        }\n      });\n    }\n\n    this.formService.initForm(this.formId, this.formModel, this.getFormGroupValidStatus());\n\n    // TODO: take a look to the following method:\n    // this.keepSync();\n\n    this.formValid = this.getFormGroupValidStatus();\n\n    this.subs.push(this.formGroup.statusChanges.pipe(\n      filter(() => this.formValid !== this.getFormGroupValidStatus()))\n      .subscribe(() => {\n        this.formService.setStatusChanged(this.formId, this.getFormGroupValidStatus());\n        this.formValid = this.getFormGroupValidStatus();\n      }));\n\n    this.subs.push(\n      this.formService.getForm(this.formId).pipe(\n        filter((formState: FormEntry) => !!formState && (isNotEmpty(formState.errors) || isNotEmpty(this.formErrors))),\n        map((formState) => formState.errors),\n        distinctUntilChanged())\n        .subscribe((errors: FormError[]) => {\n          const { formGroup, formModel } = this;\n          errors\n            .filter((error: FormError) => findIndex(this.formErrors, {\n              fieldId: error.fieldId,\n              fieldIndex: error.fieldIndex\n            }) === -1)\n            .forEach((error: FormError) => {\n              const { fieldId } = error;\n              const { fieldIndex } = error;\n              let field: AbstractControl;\n              if (!!this.parentFormModel) {\n                field = this.formBuilderService.getFormControlById(fieldId, formGroup.parent as FormGroup, formModel, fieldIndex);\n              } else {\n                field = this.formBuilderService.getFormControlById(fieldId, formGroup, formModel, fieldIndex);\n              }\n\n              if (field) {\n                const model: DynamicFormControlModel = this.formBuilderService.findById(fieldId, formModel);\n                this.formService.addErrorToField(field, model, error.message);\n                this.changeDetectorRef.detectChanges();\n\n              }\n            });\n\n          this.formErrors\n            .filter((error: FormError) => findIndex(errors, {\n              fieldId: error.fieldId,\n              fieldIndex: error.fieldIndex\n            }) === -1)\n            .forEach((error: FormError) => {\n              const { fieldId } = error;\n              const { fieldIndex } = error;\n              let field: AbstractControl;\n              if (!!this.parentFormModel) {\n                field = this.formBuilderService.getFormControlById(fieldId, formGroup.parent as FormGroup, formModel, fieldIndex);\n              } else {\n                field = this.formBuilderService.getFormControlById(fieldId, formGroup, formModel, fieldIndex);\n              }\n\n              if (field) {\n                const model: DynamicFormControlModel = this.formBuilderService.findById(fieldId, formModel);\n                this.formService.removeErrorFromField(field, model, error.message);\n              }\n            });\n          this.formErrors = errors;\n          this.changeDetectorRef.detectChanges();\n        })\n    );\n  }\n\n  /**\n   * Method provided by Angular. Invoked when the instance is destroyed\n   */\n  ngOnDestroy() {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n    this.formService.removeForm(this.formId);\n  }\n\n  /**\n   * Method to check if the form status is valid or not\n   */\n  public isValid(): Observable<boolean> {\n    return this.formService.isValid(this.formId);\n  }\n\n  /**\n   * Method to keep synchronized form controls values with form state\n   */\n  private keepSync(): void {\n    this.subs.push(this.formService.getFormData(this.formId)\n      .subscribe((stateFormData) => {\n        if (!Object.is(stateFormData, this.formGroup.value) && this.formGroup) {\n          this.formGroup.setValue(stateFormData);\n        }\n      }));\n  }\n\n  onBlur(event: DynamicFormControlEvent): void {\n    this.blur.emit(event);\n    const control: FormControl = event.control;\n    const fieldIndex: number = (event.context && event.context.index) ? event.context.index : 0;\n    if (control.valid) {\n      this.formService.removeError(this.formId, event.model.name, fieldIndex);\n    } else {\n      this.formService.addControlErrors(control, this.formId, event.model.name, fieldIndex);\n    }\n  }\n\n  onCustomEvent(event: any) {\n    this.customEvent.emit(event);\n  }\n\n  onFocus(event: DynamicFormControlEvent): void {\n    this.formService.setTouched(this.formId, this.formModel, event);\n    this.focus.emit(event);\n  }\n\n  onChange(event: DynamicFormControlEvent): void {\n    this.formService.changeForm(this.formId, this.formModel);\n    this.formGroup.markAsPristine();\n\n    if (this.emitChange) {\n      this.change.emit(event);\n    }\n\n    const control: FormControl = event.control;\n    const fieldIndex: number = (event.context && event.context.index) ? event.context.index : 0;\n    if (control.valid) {\n      this.formService.removeError(this.formId, event.model.id, fieldIndex);\n    }\n  }\n\n  /**\n   * Method called on submit.\n   * Emit a new submit Event whether the form is valid, mark fields with error otherwise\n   */\n  onSubmit(): void {\n    if (this.getFormGroupValidStatus()) {\n      this.submitForm.emit(this.formService.getFormData(this.formId));\n    } else {\n      this.formService.validateAllFormFields(this.formGroup);\n    }\n  }\n\n  /**\n   * Method to reset form fields\n   */\n  reset(): void {\n    this.formGroup.reset();\n    this.cancel.emit();\n  }\n\n  isItemReadOnly(arrayContext: DynamicFormArrayModel, index: number): boolean {\n    const context = arrayContext.groups[index];\n    const model = context.group[0] as any;\n    return model.readOnly;\n  }\n\n  removeItem($event, arrayContext: DynamicFormArrayModel, index: number): void {\n    const formArrayControl = this.formGroup.get(this.formBuilderService.getPath(arrayContext)) as FormArray;\n    const event = this.getEvent($event, arrayContext, index, 'remove');\n    if (this.formBuilderService.isQualdropGroup(event.model as DynamicFormControlModel)) {\n      // In case of qualdrop value remove event must be dispatched before removing the control from array\n      this.removeArrayItem.emit(event);\n    }\n    this.formBuilderService.removeFormArrayGroup(index, formArrayControl, arrayContext);\n    this.formService.changeForm(this.formId, this.formModel);\n    if (!this.formBuilderService.isQualdropGroup(event.model as DynamicFormControlModel)) {\n      // dispatch remove event for any field type except for qualdrop value\n      this.removeArrayItem.emit(event);\n    }\n  }\n\n  insertItem($event, arrayContext: DynamicFormArrayModel, index: number): void {\n    const formArrayControl = this.formGroup.get(this.formBuilderService.getPath(arrayContext)) as FormArray;\n    this.formBuilderService.insertFormArrayGroup(index, formArrayControl, arrayContext);\n    this.addArrayItem.emit(this.getEvent($event, arrayContext, index, 'add'));\n    this.formService.changeForm(this.formId, this.formModel);\n  }\n\n  isVirtual(arrayContext: DynamicFormArrayModel, index: number) {\n    const context = arrayContext.groups[index];\n    const value: FormFieldMetadataValueObject = (context.group[0] as any).metadataValue;\n    return isNotEmpty(value) && value.isVirtual;\n  }\n\n  protected getEvent($event: any, arrayContext: DynamicFormArrayModel, index: number, type: string): DynamicFormControlEvent {\n    const context = arrayContext.groups[index];\n    const itemGroupModel = context.context;\n    let group = this.formGroup.get(itemGroupModel.id) as FormGroup;\n    if (isNull(group)) {\n      for (const key of Object.keys(this.formGroup.controls)) {\n        group = this.formGroup.controls[key].get(itemGroupModel.id) as FormGroup;\n        if (isNotNull(group)) {\n          break;\n        }\n      }\n    }\n    const model = context.group[0] as DynamicFormControlModel;\n    const control = group.controls[index] as FormControl;\n    return { $event, context, control, group, model, type };\n  }\n}\n","<div class=\"container-fluid\">\n  <form class=\"form-horizontal\" [formGroup]=\"formGroup\">\n\n    <ds-dynamic-form\n      [formId]=\"formId\"\n      [formGroup]=\"formGroup\"\n      [formModel]=\"formModel\"\n      [formLayout]=\"formLayout\"\n      (change)=\"$event.stopPropagation();\"\n      (dfBlur)=\"onBlur($event)\"\n      (dfChange)=\"onChange($event)\"\n      (dfFocus)=\"onFocus($event)\"\n      (ngbEvent)=\"onCustomEvent($event)\">\n      <ng-template modelType=\"ARRAY\" let-group let-index=\"index\" let-context=\"context\">\n        <!--Array with repeatable items-->\n        <div *ngIf=\"(!context.notRepeatable) && !isVirtual(context, index)\"\n             class=\"col-xs-2 d-flex flex-column justify-content-sm-start align-items-end\">\n            <button type=\"button\" class=\"btn btn-secondary\" role=\"button\"\n                    title=\"{{'form.remove' | translate}}\"\n                    attr.aria-label=\"{{'form.remove' | translate}}\"\n                    (click)=\"removeItem($event, context, index)\"\n                    [disabled]=\"group.context.groups.length === 1 || isItemReadOnly(context, index)\">\n              <span><i class=\"fas fa-trash\" aria-hidden=\"true\"></i></span>\n            </button>\n        </div>\n        <div *ngIf=\"(!context.notRepeatable) && index === (group.context.groups.length - 1)\" class=\"clearfix pl-4 w-100\">\n          <div class=\"btn-group\" role=\"group\">\n            <button type=\"button\" role=\"button\" class=\"ds-form-add-more btn btn-link\"\n                    title=\"{{'form.add' | translate}}\"\n                    attr.aria-label=\"{{'form.add' | translate}}\"\n                    [disabled]=\"isItemReadOnly(context, index)\"\n                    (click)=\"insertItem($event, group.context, group.context.groups.length)\">\n              <span><i class=\"fas fa-plus\"></i> {{'form.add' | translate}}</span>\n            </button>\n          </div>\n        </div>\n\n        <!--Array with non repeatable items - Only discard button-->\n        <div *ngIf=\"context.notRepeatable && context.showButtons && group.context.groups.length > 1\"\n             class=\"col-xs-2 d-flex flex-column justify-content-sm-start align-items-end\">\n          <div class=\"btn-group\" role=\"button\">\n            <button type=\"button\" class=\"btn btn-secondary\"\n                    title=\"{{'form.discard' | translate}}\"\n                    attr.aria-label=\"{{'form.discard' | translate}}\"\n                    (click)=\"removeItem($event, context, index)\"\n                    [disabled]=\"group.context.groups.length === 1 || isItemReadOnly(context, index)\">\n              <span>{{'form.discard' | translate}}</span>\n            </button>\n          </div>\n        </div>\n      </ng-template>\n\n    </ds-dynamic-form>\n        <ng-content select=\"[additional]\"></ng-content>\n        <ng-content *ngIf=\"!displaySubmit && !displayCancel\"></ng-content>\n\n    <div *ngIf=\"displaySubmit || displayCancel\">\n      <hr>\n      <div class=\"form-group row\">\n        <div class=\"col text-right\">\n          <ng-content select=\"[before]\"></ng-content>\n            <button *ngIf=\"displayCancel\" type=\"reset\" class=\"btn btn-outline-secondary\" (click)=\"reset()\">\n              <i class=\"fa fa-times\"></i> {{cancelLabel | translate}}\n            </button>\n            <ng-content select=\"[between]\"></ng-content>\n            <button *ngIf=\"displaySubmit\" type=\"submit\" class=\"btn btn-primary\" (click)=\"onSubmit()\"\n                    [disabled]=\"!(isValid() | async)\"><i class=\"fas fa-save\"></i> {{submitLabel | translate}}\n            </button>\n            <ng-content select=\"[after]\"></ng-content>\n        </div>\n      </div>\n    </div>\n\n  </form>\n\n</div>\n","import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, ViewChildren, forwardRef, ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, HostBinding, ViewContainerRef, NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgbDatepickerConfig, NgbDatepicker, NgbRatingConfig, NgbRating, NgbTimepickerConfig, NgbTimepicker, NgbButtonsModule, NgbDatepickerModule, NgbRatingModule, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';\nimport { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicFormGroupComponent, DynamicFormControlContainerComponent, DynamicFormComponentService, DynamicFormRelationService, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_RATING, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayComponent, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport { CommonModule } from '@angular/common';\nimport { TextMaskModule } from 'angular2-text-mask';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ng-dynamic-forms/core';\nimport * as ɵngcc2 from '@ng-bootstrap/ng-bootstrap';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from 'angular2-text-mask';\n\nconst _c0 = function (a0, a1) { return [a0, a1]; };\nfunction DynamicNGBootstrapCheckboxGroupComponent_label_4_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 3);\n    ɵngcc0.ɵɵtext(1, \"\\n\\n            \");\n    ɵngcc0.ɵɵelementStart(2, \"input\", 4);\n    ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapCheckboxGroupComponent_label_4_Template_input_blur_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onBlur($event); })(\"change\", function DynamicNGBootstrapCheckboxGroupComponent_label_4_Template_input_change_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const checkboxModel_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onCheckboxChange($event, checkboxModel_r1); })(\"focus\", function DynamicNGBootstrapCheckboxGroupComponent_label_4_Template_input_focus_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(3, \"span\", 5);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const checkboxModel_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"hidden\", checkboxModel_r1.hidden)(\"ngClass\", ctx_r0.getClass(\"element\", \"control\", checkboxModel_r1));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"checked\", checkboxModel_r1.checked)(\"formControlName\", checkboxModel_r1.id)(\"id\", ctx_r0.getCheckboxId(checkboxModel_r1))(\"name\", checkboxModel_r1.name)(\"required\", checkboxModel_r1.required)(\"tabindex\", checkboxModel_r1.tabIndex)(\"value\", checkboxModel_r1.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.getClass(\"element\", \"label\", checkboxModel_r1))(\"innerHTML\", checkboxModel_r1.label, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DynamicNGBootstrapDatePickerComponent_img_9_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"img\", 7);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r1.model.toggleIcon, ɵngcc0.ɵɵsanitizeUrl);\n} }\nfunction DynamicNGBootstrapDatePickerComponent_span_11_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.model.toggleLabel);\n} }\nfunction DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_4_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"dynamic-ng-bootstrap-form-control\", 3);\n    ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onBlur($event); })(\"change\", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onChange($event); })(\"focus\", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); })(\"ngbEvent\", function DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_ngbEvent_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onCustomEvent($event, null, true); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _model_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"asBootstrapFormGroup\", true)(\"group\", ctx_r0.control)(\"hidden\", _model_r1.hidden)(\"layout\", ctx_r0.formLayout)(\"model\", _model_r1)(\"templates\", ctx_r0.templates)(\"hostClass\", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx_r0.getClass(\"element\", \"children\"), ctx_r0.getClass(\"grid\", \"children\")));\n} }\nfunction DynamicNGBootstrapInputComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵtext(1, \"\\n        \");\n    ɵngcc0.ɵɵelement(2, \"span\", 6);\n    ɵngcc0.ɵɵtext(3, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r0.model.prefix, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DynamicNGBootstrapInputComponent_div_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtext(1, \"\\n        \");\n    ɵngcc0.ɵɵelement(2, \"span\", 6);\n    ɵngcc0.ɵɵtext(3, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r1.model.suffix, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DynamicNGBootstrapInputComponent_datalist_8_option_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"option\", 10);\n    ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", option_r4);\n} }\nfunction DynamicNGBootstrapInputComponent_datalist_8_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"datalist\", 8);\n    ɵngcc0.ɵɵtext(1, \"\\n\\n        \");\n    ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapInputComponent_datalist_8_option_2_Template, 2, 1, \"option\", 9);\n    ɵngcc0.ɵɵpipe(3, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r2.model.listId);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(3, 2, ctx_r2.model.list$));\n} }\nconst _c1 = function (a0, a1) { return { mask: a0, showMask: a1 }; };\nfunction DynamicNGBootstrapRadioGroupComponent_legend_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"legend\", 4);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r0.model.legend, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DynamicNGBootstrapRadioGroupComponent_label_6_Template(rf, ctx) { if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 5);\n    ɵngcc0.ɵɵtext(1, \"\\n\\n            \");\n    ɵngcc0.ɵɵelementStart(2, \"input\", 6);\n    ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapRadioGroupComponent_label_6_Template_input_blur_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onBlur($event); })(\"focus\", function DynamicNGBootstrapRadioGroupComponent_label_6_Template_input_focus_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(3, \"span\", 4);\n    ɵngcc0.ɵɵtext(4, \"\\n        \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(5, _c0, ctx_r1.getClass(\"element\", \"option\"), ctx_r1.getClass(\"grid\", \"option\")));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", option_r2.disabled)(\"name\", ctx_r1.model.name)(\"value\", option_r2.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", option_r2.label, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DynamicNGBootstrapSelectComponent_option_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"option\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"disabled\", option_r1.disabled)(\"ngValue\", option_r1.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(option_r1.label);\n} }\nconst _c2 = [\"componentViewContainer\"];\nfunction DynamicNGBootstrapFormControlContainerComponent_label_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\", 7);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"for\", ctx_r0.id)(\"innerHTML\", ctx_r0.model.label, ɵngcc0.ɵɵsanitizeHtml)(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c0, ctx_r0.getClass(\"element\", \"label\"), ctx_r0.getClass(\"grid\", \"label\")));\n} }\nfunction DynamicNGBootstrapFormControlContainerComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction DynamicNGBootstrapFormControlContainerComponent_small_11_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"small\", 8);\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r3.hint, ɵngcc0.ɵɵsanitizeHtml)(\"ngClass\", ctx_r3.getClass(\"element\", \"hint\"));\n} }\nfunction DynamicNGBootstrapFormControlContainerComponent_div_13_small_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"small\", 10);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const message_r7 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(message_r7);\n} }\nfunction DynamicNGBootstrapFormControlContainerComponent_div_13_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵtext(1, \"\\n            \");\n    ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormControlContainerComponent_div_13_small_2_Template, 2, 1, \"small\", 9);\n    ɵngcc0.ɵɵtext(3, \"\\n        \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r4.getClass(\"element\", \"errors\"), ctx_r4.getClass(\"grid\", \"errors\")));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r4.errorMessages);\n} }\nfunction DynamicNGBootstrapFormControlContainerComponent_ng_container_16_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nconst _c3 = function (a0, a1, a2) { return [a0, a1, a2]; };\nconst _c4 = [\"*\"];\nfunction DynamicNGBootstrapFormArrayComponent_div_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction DynamicNGBootstrapFormArrayComponent_div_4_dynamic_ng_bootstrap_form_control_4_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"dynamic-ng-bootstrap-form-control\", 6);\n    ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapFormArrayComponent_div_4_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onBlur($event); })(\"change\", function DynamicNGBootstrapFormArrayComponent_div_4_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onChange($event); })(\"focus\", function DynamicNGBootstrapFormArrayComponent_div_4_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onFocus($event); })(\"ngbEvent\", function DynamicNGBootstrapFormArrayComponent_div_4_dynamic_ng_bootstrap_form_control_4_Template_dynamic_ng_bootstrap_form_control_ngbEvent_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onCustomEvent($event, null, true); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _model_r6 = ctx.$implicit;\n    const ctx_r12 = ɵngcc0.ɵɵnextContext();\n    const groupModel_r1 = ctx_r12.$implicit;\n    const idx_r2 = ctx_r12.index;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"context\", groupModel_r1)(\"group\", ctx_r4.array.at(idx_r2))(\"hidden\", _model_r6.hidden)(\"layout\", ctx_r4.formLayout)(\"model\", _model_r6)(\"templates\", ctx_r4.templates)(\"hostClass\", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx_r4.getClass(\"element\", \"children\"), ctx_r4.getClass(\"grid\", \"children\")));\n} }\nfunction DynamicNGBootstrapFormArrayComponent_div_4_ng_container_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction DynamicNGBootstrapFormArrayComponent_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵtext(1, \"\\n\\n            \");\n    ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormArrayComponent_div_4_ng_container_2_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵtext(3, \"\\n\\n            \");\n    ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapFormArrayComponent_div_4_dynamic_ng_bootstrap_form_control_4_Template, 1, 10, \"dynamic-ng-bootstrap-form-control\", 5);\n    ɵngcc0.ɵɵtext(5, \"\\n\\n            \");\n    ɵngcc0.ɵɵtemplate(6, DynamicNGBootstrapFormArrayComponent_div_4_ng_container_6_Template, 1, 0, \"ng-container\", 4);\n    ɵngcc0.ɵɵtext(7, \"\\n\\n        \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const groupModel_r1 = ctx.$implicit;\n    const idx_r2 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"formGroupName\", idx_r2)(\"ngClass\", ɵngcc0.ɵɵpureFunction2(7, _c0, ctx_r0.getClass(\"element\", \"group\"), ctx_r0.getClass(\"grid\", \"group\")));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.startTemplate == null ? null : ctx_r0.startTemplate.templateRef)(\"ngTemplateOutletContext\", groupModel_r1);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", groupModel_r1.group);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.endTemplate == null ? null : ctx_r0.endTemplate.templateRef)(\"ngTemplateOutletContext\", groupModel_r1);\n} }\nfunction DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"dynamic-ng-bootstrap-form-control\", 1);\n    ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onBlur($event); })(\"change\", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onChange($event); })(\"focus\", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_focus_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFocus($event); })(\"ngbEvent\", function DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template_dynamic_ng_bootstrap_form_control_ngbEvent_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onCustomEvent($event, ctx_r6.ngbEvent); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const controlModel_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"group\", ctx_r0.group)(\"hidden\", controlModel_r1.hidden)(\"layout\", ctx_r0.layout)(\"model\", controlModel_r1)(\"templates\", ctx_r0.templates);\n} }\nclass DynamicNGBootstrapCalendarComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService, config) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.config = config;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapCalendarComponent.ɵfac = function DynamicNGBootstrapCalendarComponent_Factory(t) { return new (t || DynamicNGBootstrapCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbDatepickerConfig)); };\nDynamicNGBootstrapCalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapCalendarComponent, selectors: [[\"dynamic-ng-bootstrap-calendar\"]], viewQuery: function DynamicNGBootstrapCalendarComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NgbDatepicker, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbCalendar = _t.first);\n    } }, inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [[3, \"formGroup\"], [3, \"displayMonths\", \"firstDayOfWeek\", \"formControlName\", \"id\", \"maxDate\", \"minDate\", \"navigation\", \"ngClass\", \"outsideDays\", \"showWeekdays\", \"showWeekNumbers\", \"startDate\", \"select\"]], template: function DynamicNGBootstrapCalendarComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"ngb-datepicker\", 1);\n        ɵngcc0.ɵɵlistener(\"select\", function DynamicNGBootstrapCalendarComponent_Template_ngb_datepicker_select_2_listener($event) { return ctx.onChange($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(3, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(4, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"displayMonths\", ctx.model.getAdditional(\"displayMonths\", ctx.config[\"displayMonths\"]))(\"firstDayOfWeek\", ctx.model.getAdditional(\"firstDayOfWeek\", ctx.config[\"firstDayOfWeek\"]))(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"maxDate\", ctx.model.max)(\"minDate\", ctx.model.min)(\"navigation\", ctx.model.getAdditional(\"navigation\", ctx.config[\"navigation\"]))(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"outsideDays\", ctx.model.getAdditional(\"outsideDays\", ctx.config[\"outsideDays\"]))(\"showWeekdays\", ctx.model.getAdditional(\"showWeekdays\", ctx.config[\"showWeekdays\"]))(\"showWeekNumbers\", ctx.model.getAdditional(\"showWeekNumbers\", ctx.config[\"showWeekNumbers\"]))(\"startDate\", ctx.model.focusedDate);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbDatepicker, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapCalendarComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService },\n    { type: NgbDatepickerConfig }\n];\nDynamicNGBootstrapCalendarComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }],\n    ngbCalendar: [{ type: ViewChild, args: [NgbDatepicker, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapCalendarComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-calendar\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <ngb-datepicker [displayMonths]=\\\"model.getAdditional('displayMonths', config['displayMonths'])\\\"\\n                    [firstDayOfWeek]=\\\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\\\"\\n                    [formControlName]=\\\"model.id\\\"\\n                    [id]=\\\"id\\\"\\n                    [maxDate]=\\\"model.max\\\"\\n                    [minDate]=\\\"model.min\\\"\\n                    [navigation]=\\\"model.getAdditional('navigation', config['navigation'])\\\"\\n                    [ngClass]=\\\"getClass('element', 'control')\\\"\\n                    [outsideDays]=\\\"model.getAdditional('outsideDays', config['outsideDays'])\\\"\\n                    [showWeekdays]=\\\"model.getAdditional('showWeekdays', config['showWeekdays'])\\\"\\n                    [showWeekNumbers]=\\\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\\\"\\n                    [startDate]=\\\"model.focusedDate\\\"\\n                    (select)=\\\"onChange($event)\\\"></ngb-datepicker>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbDatepickerConfig }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], ngbCalendar: [{\n            type: ViewChild,\n            args: [NgbDatepicker, { static: true }]\n        }] }); })();\n\nclass DynamicNGBootstrapCheckboxComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapCheckboxComponent.ɵfac = function DynamicNGBootstrapCheckboxComponent_Factory(t) { return new (t || DynamicNGBootstrapCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapCheckboxComponent, selectors: [[\"dynamic-ng-bootstrap-checkbox\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 19, consts: [[1, \"form-check\", 3, \"formGroup\"], [1, \"form-check-label\"], [\"type\", \"checkbox\", 1, \"form-check-input\", 3, \"checked\", \"formControlName\", \"id\", \"indeterminate\", \"name\", \"ngClass\", \"required\", \"tabindex\", \"value\", \"blur\", \"change\", \"focus\"], [3, \"innerHTML\", \"ngClass\"]], template: function DynamicNGBootstrapCheckboxComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"label\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n        \");\n        ɵngcc0.ɵɵelementStart(4, \"input\", 2);\n        ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapCheckboxComponent_Template_input_blur_4_listener($event) { return ctx.onBlur($event); })(\"change\", function DynamicNGBootstrapCheckboxComponent_Template_input_change_4_listener($event) { return ctx.onChange($event); })(\"focus\", function DynamicNGBootstrapCheckboxComponent_Template_input_focus_4_listener($event) { return ctx.onFocus($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(5, \"span\", 3);\n        ɵngcc0.ɵɵtext(6, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(7, \"\\n\\n\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(8, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.model.disabled);\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵproperty(\"checked\", ctx.model.checked)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"indeterminate\", ctx.model.indeterminate)(\"name\", ctx.model.name)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"required\", ctx.model.required)(\"tabindex\", ctx.model.tabIndex)(\"value\", ctx.model.value);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.model.label, ɵngcc0.ɵɵsanitizeHtml)(\"ngClass\", ɵngcc0.ɵɵpureFunction2(16, _c0, ctx.getClass(\"element\", \"label\"), ctx.getClass(\"grid\", \"label\")));\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.CheckboxRequiredValidator, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2 });\nDynamicNGBootstrapCheckboxComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapCheckboxComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapCheckboxComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-checkbox\",\n                template: \"<div [formGroup]=\\\"group\\\" class=\\\"form-check\\\" [class.disabled]=\\\"model.disabled\\\">\\n\\n    <label class=\\\"form-check-label\\\">\\n\\n        <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\"\\n               [checked]=\\\"model.checked\\\"\\n               [class.is-invalid]=\\\"showErrorMessages\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [id]=\\\"id\\\"\\n               [indeterminate]=\\\"model.indeterminate\\\"\\n               [name]=\\\"model.name\\\"\\n               [ngClass]=\\\"getClass('element', 'control')\\\"\\n               [required]=\\\"model.required\\\"\\n               [tabindex]=\\\"model.tabIndex\\\"\\n               [value]=\\\"model.value\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (change)=\\\"onChange($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/><span [innerHTML]=\\\"model.label\\\"\\n                                                [ngClass]=\\\"[getClass('element', 'label'), getClass('grid', 'label')]\\\"></span>\\n    </label>\\n\\n</div>\\n\",\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapCheckboxGroupComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n    getCheckboxId(model) {\n        return this.layoutService.getElementId(model);\n    }\n    onCheckboxChange($event, model) {\n        this.onChange($event);\n        model.value = $event.target.checked;\n    }\n}\nDynamicNGBootstrapCheckboxGroupComponent.ɵfac = function DynamicNGBootstrapCheckboxGroupComponent_Factory(t) { return new (t || DynamicNGBootstrapCheckboxGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapCheckboxGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapCheckboxGroupComponent, selectors: [[\"dynamic-ng-bootstrap-checkbox-group\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 5, consts: [[3, \"formGroup\"], [\"data-toggle\", \"buttons\", 1, \"btn-group\", \"btn-group-toggle\", 3, \"formGroupName\", \"id\", \"ngClass\"], [\"ngbButtonLabel\", \"\", 3, \"hidden\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [\"ngbButtonLabel\", \"\", 3, \"hidden\", \"ngClass\"], [\"type\", \"checkbox\", \"ngbButton\", \"\", 3, \"checked\", \"formControlName\", \"id\", \"name\", \"required\", \"tabindex\", \"value\", \"blur\", \"change\", \"focus\"], [3, \"ngClass\", \"innerHTML\"]], template: function DynamicNGBootstrapCheckboxGroupComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapCheckboxGroupComponent_label_4_Template, 4, 11, \"label\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(7, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"formGroupName\", ctx.model.id)(\"id\", ctx.id)(\"ngClass\", ctx.getClass(\"element\", \"control\"));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.model.group);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.FormGroupName, ɵngcc4.NgClass, ɵngcc4.NgForOf, ɵngcc2.NgbButtonLabel, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.CheckboxRequiredValidator, ɵngcc2.NgbCheckBox, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapCheckboxGroupComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapCheckboxGroupComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapCheckboxGroupComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-checkbox-group\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div class=\\\"btn-group btn-group-toggle\\\" data-toggle=\\\"buttons\\\"\\n         [formGroupName]=\\\"model.id\\\"\\n         [id]=\\\"id\\\"\\n         [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <label *ngFor=\\\"let checkboxModel of model.group\\\" ngbButtonLabel\\n               [hidden]=\\\"checkboxModel.hidden\\\"\\n               [ngClass]=\\\"getClass('element', 'control', checkboxModel)\\\">\\n\\n            <input type=\\\"checkbox\\\" ngbButton\\n                   [checked]=\\\"checkboxModel.checked\\\"\\n                   [formControlName]=\\\"checkboxModel.id\\\"\\n                   [id]=\\\"getCheckboxId(checkboxModel)\\\"\\n                   [name]=\\\"checkboxModel.name\\\"\\n                   [required]=\\\"checkboxModel.required\\\"\\n                   [tabindex]=\\\"checkboxModel.tabIndex\\\"\\n                   [value]=\\\"checkboxModel.value\\\"\\n                   (blur)=\\\"onBlur($event)\\\"\\n                   (change)=\\\"onCheckboxChange($event, checkboxModel)\\\"\\n                   (focus)=\\\"onFocus($event)\\\"/><span [ngClass]=\\\"getClass('element', 'label', checkboxModel)\\\"\\n                                                    [innerHTML]=\\\"checkboxModel.label\\\"></span></label>\\n    </div>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapDatePickerComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService, config) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.config = config;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapDatePickerComponent.ɵfac = function DynamicNGBootstrapDatePickerComponent_Factory(t) { return new (t || DynamicNGBootstrapDatePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbDatepickerConfig)); };\nDynamicNGBootstrapDatePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapDatePickerComponent, selectors: [[\"dynamic-ng-bootstrap-datepicker\"]], viewQuery: function DynamicNGBootstrapDatePickerComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NgbDatepicker, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbDatePicker = _t.first);\n    } }, inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", customEvent: \"customEvent\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 16, vars: 20, consts: [[1, \"input-group\", 3, \"formGroup\"], [\"ngbDatepicker\", \"\", 1, \"form-control\", 3, \"displayMonths\", \"firstDayOfWeek\", \"formControlName\", \"id\", \"maxDate\", \"minDate\", \"name\", \"navigation\", \"ngClass\", \"outsideDays\", \"placeholder\", \"placement\", \"showWeekdays\", \"showWeekNumbers\", \"startDate\", \"blur\", \"dateSelect\", \"closed\", \"change\", \"focus\"], [\"datepicker\", \"ngbDatepicker\"], [1, \"input-group-append\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [\"style\", \"cursor: pointer;\", 3, \"src\", 4, \"ngIf\"], [4, \"ngIf\"], [2, \"cursor\", \"pointer\", 3, \"src\"]], template: function DynamicNGBootstrapDatePickerComponent_Template(rf, ctx) { if (rf & 1) {\n        const _r3 = ɵngcc0.ɵɵgetCurrentView();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapDatePickerComponent_Template_input_blur_2_listener($event) { return ctx.onBlur($event); })(\"dateSelect\", function DynamicNGBootstrapDatePickerComponent_Template_input_dateSelect_2_listener($event) { return ctx.onCustomEvent($event, \"dateSelect\"); })(\"closed\", function DynamicNGBootstrapDatePickerComponent_Template_input_closed_2_listener($event) { return ctx.onCustomEvent($event, \"closed\"); })(\"change\", function DynamicNGBootstrapDatePickerComponent_Template_input_change_2_listener($event) { return ctx.onChange($event); })(\"focus\", function DynamicNGBootstrapDatePickerComponent_Template_input_focus_2_listener($event) { return ctx.onFocus($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(4, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(5, \"div\", 3);\n        ɵngcc0.ɵɵtext(6, \"\\n\\n        \");\n        ɵngcc0.ɵɵelementStart(7, \"button\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function DynamicNGBootstrapDatePickerComponent_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r3); const _r0 = ɵngcc0.ɵɵreference(3); return _r0.toggle(); });\n        ɵngcc0.ɵɵtext(8, \"\\n\\n            \");\n        ɵngcc0.ɵɵtemplate(9, DynamicNGBootstrapDatePickerComponent_img_9_Template, 1, 1, \"img\", 5);\n        ɵngcc0.ɵɵtext(10, \"\\n            \");\n        ɵngcc0.ɵɵtemplate(11, DynamicNGBootstrapDatePickerComponent_span_11_Template, 2, 1, \"span\", 6);\n        ɵngcc0.ɵɵtext(12, \"\\n\\n        \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(13, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(14, \"\\n\\n\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(15, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵproperty(\"displayMonths\", ctx.model.getAdditional(\"displayMonths\", ctx.config[\"displayMonths\"]))(\"firstDayOfWeek\", ctx.model.getAdditional(\"firstDayOfWeek\", ctx.config[\"firstDayOfWeek\"]))(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"maxDate\", ctx.model.max)(\"minDate\", ctx.model.min)(\"name\", ctx.model.name)(\"navigation\", ctx.model.getAdditional(\"navigation\", ctx.config[\"navigation\"]))(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"outsideDays\", ctx.model.getAdditional(\"outsideDays\", ctx.config[\"outsideDays\"]))(\"placeholder\", ctx.model.placeholder)(\"placement\", ctx.model.getAdditional(\"placement\", \"bottom-left\"))(\"showWeekdays\", ctx.model.getAdditional(\"showWeekdays\", ctx.config[\"showWeekdays\"]))(\"showWeekNumbers\", ctx.model.getAdditional(\"showWeekNumbers\", ctx.config[\"showWeekNumbers\"]))(\"startDate\", ctx.model.focusedDate);\n        ɵngcc0.ɵɵadvance(7);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model.toggleIcon);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model.toggleLabel);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbInputDatepicker, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass, ɵngcc4.NgIf], encapsulation: 2 });\nDynamicNGBootstrapDatePickerComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService },\n    { type: NgbDatepickerConfig }\n];\nDynamicNGBootstrapDatePickerComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    customEvent: [{ type: Output }],\n    focus: [{ type: Output }],\n    ngbDatePicker: [{ type: ViewChild, args: [NgbDatepicker,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapDatePickerComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-datepicker\",\n                template: \"<div [formGroup]=\\\"group\\\" class=\\\"input-group\\\">\\n\\n    <input ngbDatepicker class=\\\"form-control\\\" #datepicker=\\\"ngbDatepicker\\\"\\n           [class.is-invalid]=\\\"showErrorMessages\\\"\\n           [displayMonths]=\\\"model.getAdditional('displayMonths', config['displayMonths'])\\\"\\n           [firstDayOfWeek]=\\\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [maxDate]=\\\"model.max\\\"\\n           [minDate]=\\\"model.min\\\"\\n           [name]=\\\"model.name\\\"\\n           [navigation]=\\\"model.getAdditional('navigation', config['navigation'])\\\"\\n           [ngClass]=\\\"getClass('element', 'control')\\\"\\n           [outsideDays]=\\\"model.getAdditional('outsideDays', config['outsideDays'])\\\"\\n           [placeholder]=\\\"model.placeholder\\\"\\n           [placement]=\\\"model.getAdditional('placement', 'bottom-left')\\\"\\n           [showWeekdays]=\\\"model.getAdditional('showWeekdays', config['showWeekdays'])\\\"\\n           [showWeekNumbers]=\\\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\\\"\\n           [startDate]=\\\"model.focusedDate\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (dateSelect)=\\\"onCustomEvent($event, 'dateSelect')\\\"\\n           (closed)=\\\"onCustomEvent($event, 'closed')\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\">\\n\\n    <div class=\\\"input-group-append\\\">\\n\\n        <button class=\\\"btn btn-outline-secondary\\\" type=\\\"button\\\" (click)=\\\"datepicker.toggle()\\\">\\n\\n            <img *ngIf=\\\"model.toggleIcon\\\" [src]=\\\"model.toggleIcon\\\" style=\\\"cursor: pointer;\\\"/>\\n            <span *ngIf=\\\"model.toggleLabel\\\">{{ model.toggleLabel }}</span>\\n\\n        </button>\\n\\n    </div>\\n\\n</div>\\n\",\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbDatepickerConfig }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], customEvent: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], ngbDatePicker: [{\n            type: ViewChild,\n            args: [NgbDatepicker]\n        }] }); })();\n\nclass DynamicNGBootstrapFormGroupComponent extends DynamicFormGroupComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapFormGroupComponent.ɵfac = function DynamicNGBootstrapFormGroupComponent_Factory(t) { return new (t || DynamicNGBootstrapFormGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapFormGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormGroupComponent, selectors: [[\"dynamic-ng-bootstrap-form-group\"]], viewQuery: function DynamicNGBootstrapFormGroupComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DynamicNGBootstrapFormControlContainerComponent, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.components = _t);\n    } }, inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\", templates: \"templates\" }, outputs: { blur: \"blur\", change: \"change\", customEvent: \"customEvent\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 5, consts: [[3, \"formGroup\"], [\"role\", \"group\", 3, \"formGroupName\", \"id\", \"ngClass\"], [3, \"asBootstrapFormGroup\", \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"ngbEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"asBootstrapFormGroup\", \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"ngbEvent\"]], template: function DynamicNGBootstrapFormGroupComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapFormGroupComponent_dynamic_ng_bootstrap_form_control_4_Template, 1, 10, \"dynamic-ng-bootstrap-form-control\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(7, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"formGroupName\", ctx.model.id)(\"id\", ctx.id)(\"ngClass\", ctx.getClass(\"element\", \"control\"));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.model.group);\n    } }, directives: function () { return [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.FormGroupName, ɵngcc4.NgClass, ɵngcc4.NgForOf, DynamicNGBootstrapFormControlContainerComponent]; }, encapsulation: 2 });\nDynamicNGBootstrapFormGroupComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapFormGroupComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    templates: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    customEvent: [{ type: Output }],\n    focus: [{ type: Output }],\n    components: [{ type: ViewChildren, args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent),] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormGroupComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-form-group\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div role=\\\"group\\\" [formGroupName]=\\\"model.id\\\" [id]=\\\"id\\\" [ngClass]=\\\"getClass('element','control')\\\">\\n\\n        <dynamic-ng-bootstrap-form-control *ngFor=\\\"let _model of model.group\\\"\\n                                           [asBootstrapFormGroup]=\\\"true\\\"\\n                                           [group]=\\\"control\\\"\\n                                           [hidden]=\\\"_model.hidden\\\"\\n                                           [layout]=\\\"formLayout\\\"\\n                                           [model]=\\\"_model\\\"\\n                                           [templates]=\\\"templates\\\"\\n                                           [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                           (blur)=\\\"onBlur($event)\\\"\\n                                           (change)=\\\"onChange($event)\\\"\\n                                           (focus)=\\\"onFocus($event)\\\"\\n                                           (ngbEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-ng-bootstrap-form-control>\\n    </div>\\n\\n</ng-container>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], customEvent: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], templates: [{\n            type: Input\n        }], components: [{\n            type: ViewChildren,\n            args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent)]\n        }] }); })();\n\nclass DynamicNGBootstrapInputComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapInputComponent.ɵfac = function DynamicNGBootstrapInputComponent_Factory(t) { return new (t || DynamicNGBootstrapInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapInputComponent, selectors: [[\"dynamic-ng-bootstrap-input\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 37, consts: [[3, \"formGroup\"], [\"class\", \"input-group-prepend\", 4, \"ngIf\"], [3, \"autocomplete\", \"autofocus\", \"dynamicList\", \"formControlName\", \"id\", \"maxlength\", \"minlength\", \"name\", \"ngClass\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"spellcheck\", \"tabindex\", \"textMask\", \"type\", \"blur\", \"change\", \"focus\"], [\"class\", \"input-group-append\", 4, \"ngIf\"], [3, \"id\", 4, \"ngIf\"], [1, \"input-group-prepend\"], [1, \"input-group-text\", 3, \"innerHTML\"], [1, \"input-group-append\"], [3, \"id\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]], template: function DynamicNGBootstrapInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapInputComponent_div_2_Template, 4, 1, \"div\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(4, \"input\", 2);\n        ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapInputComponent_Template_input_blur_4_listener($event) { return ctx.onBlur($event); })(\"change\", function DynamicNGBootstrapInputComponent_Template_input_change_4_listener($event) { return ctx.onChange($event); })(\"focus\", function DynamicNGBootstrapInputComponent_Template_input_focus_4_listener($event) { return ctx.onFocus($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(5, \"\\n\\n    \");\n        ɵngcc0.ɵɵtemplate(6, DynamicNGBootstrapInputComponent_div_6_Template, 4, 1, \"div\", 3);\n        ɵngcc0.ɵɵtext(7, \"\\n\\n    \");\n        ɵngcc0.ɵɵtemplate(8, DynamicNGBootstrapInputComponent_datalist_8_Template, 4, 4, \"datalist\", 4);\n        ɵngcc0.ɵɵtext(9, \"\\n\\n\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(10, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"input-group\", ctx.model.prefix || ctx.model.suffix);\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model.prefix);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"form-control\", ctx.model.inputType !== \"file\")(\"form-control-file\", ctx.model.inputType === \"file\")(\"is-invalid\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵproperty(\"autocomplete\", ctx.model.autoComplete)(\"autofocus\", ctx.model.autoFocus)(\"dynamicList\", ctx.model.listId)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"maxlength\", ctx.model.maxLength)(\"minlength\", ctx.model.minLength)(\"name\", ctx.model.name)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"pattern\", ctx.model.pattern)(\"placeholder\", ctx.model.placeholder)(\"readonly\", ctx.model.readOnly)(\"required\", ctx.model.required)(\"spellcheck\", ctx.model.spellCheck)(\"tabindex\", ctx.model.tabIndex)(\"textMask\", ɵngcc0.ɵɵpureFunction2(34, _c1, ctx.model.mask || false, ctx.model.mask && !ctx.model.placeholder))(\"type\", ctx.model.inputType);\n        ɵngcc0.ɵɵattribute(\"accept\", ctx.model.accept)(\"max\", ctx.model.max)(\"min\", ctx.model.min)(\"multiple\", ctx.model.multiple)(\"step\", ctx.model.step);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model.suffix);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model.hasList);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc4.NgIf, ɵngcc3.DefaultValueAccessor, ɵngcc1.DynamicListDirective, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc3.MaxLengthValidator, ɵngcc3.MinLengthValidator, ɵngcc4.NgClass, ɵngcc3.PatternValidator, ɵngcc3.RequiredValidator, ɵngcc5.MaskedInputDirective, ɵngcc4.NgForOf, ɵngcc3.NgSelectOption, ɵngcc3.ɵangular_packages_forms_forms_z], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });\nDynamicNGBootstrapInputComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapInputComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapInputComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-input\",\n                template: \"<div [formGroup]=\\\"group\\\" [class.input-group]=\\\"model.prefix || model.suffix\\\">\\n\\n    <div *ngIf=\\\"model.prefix\\\" class=\\\"input-group-prepend\\\">\\n        <span class=\\\"input-group-text\\\" [innerHTML]=\\\"model.prefix\\\"></span>\\n    </div>\\n\\n    <input [attr.accept]=\\\"model.accept\\\"\\n           [attr.max]=\\\"model.max\\\"\\n           [attr.min]=\\\"model.min\\\"\\n           [attr.multiple]=\\\"model.multiple\\\"\\n           [attr.step]=\\\"model.step\\\"\\n           [autocomplete]=\\\"model.autoComplete\\\"\\n           [autofocus]=\\\"model.autoFocus\\\"\\n           [class.form-control]=\\\"model.inputType !== 'file'\\\"\\n           [class.form-control-file]=\\\"model.inputType === 'file'\\\"\\n           [class.is-invalid]=\\\"showErrorMessages\\\"\\n           [dynamicList]=\\\"model.listId\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [maxlength]=\\\"model.maxLength\\\"\\n           [minlength]=\\\"model.minLength\\\"\\n           [name]=\\\"model.name\\\"\\n           [ngClass]=\\\"getClass('element', 'control')\\\"\\n           [pattern]=\\\"model.pattern\\\"\\n           [placeholder]=\\\"model.placeholder\\\"\\n           [readonly]=\\\"model.readOnly\\\"\\n           [required]=\\\"model.required\\\"\\n           [spellcheck]=\\\"model.spellCheck\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [textMask]=\\\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\\\"\\n           [type]=\\\"model.inputType\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/>\\n\\n    <div *ngIf=\\\"model.suffix\\\" class=\\\"input-group-append\\\">\\n        <span class=\\\"input-group-text\\\" [innerHTML]=\\\"model.suffix\\\"></span>\\n    </div>\\n\\n    <datalist *ngIf=\\\"model.hasList\\\" [id]=\\\"model.listId\\\">\\n\\n        <option *ngFor=\\\"let option of model.list$ | async\\\" [value]=\\\"option\\\">\\n\\n    </datalist>\\n\\n</div>\\n\",\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapRadioGroupComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapRadioGroupComponent.ɵfac = function DynamicNGBootstrapRadioGroupComponent_Factory(t) { return new (t || DynamicNGBootstrapRadioGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapRadioGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapRadioGroupComponent, selectors: [[\"dynamic-ng-bootstrap-radio-group\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 9, consts: [[3, \"formGroup\"], [\"ngbRadioGroup\", \"\", \"role\", \"radiogroup\", 1, \"btn-group\", \"btn-group-toggle\", 3, \"formControlName\", \"id\", \"ngClass\", \"tabindex\", \"change\"], [3, \"innerHTML\", 4, \"ngIf\"], [\"ngbButtonLabel\", \"\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"], [\"ngbButtonLabel\", \"\", 3, \"ngClass\"], [\"type\", \"radio\", \"ngbButton\", \"\", 3, \"disabled\", \"name\", \"value\", \"blur\", \"focus\"]], template: function DynamicNGBootstrapRadioGroupComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵlistener(\"change\", function DynamicNGBootstrapRadioGroupComponent_Template_div_change_2_listener($event) { return ctx.onChange($event); });\n        ɵngcc0.ɵɵtext(3, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapRadioGroupComponent_legend_4_Template, 1, 1, \"legend\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(6, DynamicNGBootstrapRadioGroupComponent_label_6_Template, 5, 8, \"label\", 3);\n        ɵngcc0.ɵɵpipe(7, \"async\");\n        ɵngcc0.ɵɵtext(8, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(9, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(10, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"tabindex\", ctx.model.tabIndex);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.model.legend);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(7, 7, ctx.model.options$));\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbRadioGroup, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc2.NgbButtonLabel, ɵngcc2.NgbRadio], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapRadioGroupComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapRadioGroupComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapRadioGroupComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-radio-group\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div ngbRadioGroup class=\\\"btn-group btn-group-toggle\\\" role=\\\"radiogroup\\\"\\n         [formControlName]=\\\"model.id\\\"\\n         [id]=\\\"id\\\"\\n         [ngClass]=\\\"getClass('element', 'control')\\\"\\n         [tabindex]=\\\"model.tabIndex\\\"\\n         (change)=\\\"onChange($event)\\\">\\n\\n        <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n        <label *ngFor=\\\"let option of model.options$ | async\\\" ngbButtonLabel\\n               [ngClass]=\\\"[getClass('element', 'option'), getClass('grid', 'option')]\\\">\\n\\n            <input type=\\\"radio\\\" ngbButton\\n                   [disabled]=\\\"option.disabled\\\"\\n                   [name]=\\\"model.name\\\"\\n                   [value]=\\\"option.value\\\"\\n                   (blur)=\\\"onBlur($event)\\\"\\n                   (focus)=\\\"onFocus($event)\\\"/><span [innerHTML]=\\\"option.label\\\"></span>\\n        </label>\\n\\n    </div>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapRatingComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService, config) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.config = config;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapRatingComponent.ɵfac = function DynamicNGBootstrapRatingComponent_Factory(t) { return new (t || DynamicNGBootstrapRatingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbRatingConfig)); };\nDynamicNGBootstrapRatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapRatingComponent, selectors: [[\"dynamic-ng-bootstrap-rating\"]], viewQuery: function DynamicNGBootstrapRatingComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NgbRating, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbRating = _t.first);\n    } }, inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", customEvent: \"customEvent\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 6, consts: [[3, \"formGroup\"], [3, \"formControlName\", \"id\", \"max\", \"ngClass\", \"resettable\", \"hover\", \"leave\", \"rateChange\"]], template: function DynamicNGBootstrapRatingComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"ngb-rating\", 1);\n        ɵngcc0.ɵɵlistener(\"hover\", function DynamicNGBootstrapRatingComponent_Template_ngb_rating_hover_2_listener($event) { return ctx.onCustomEvent($event, \"hover\"); })(\"leave\", function DynamicNGBootstrapRatingComponent_Template_ngb_rating_leave_2_listener($event) { return ctx.onCustomEvent($event, \"leave\"); })(\"rateChange\", function DynamicNGBootstrapRatingComponent_Template_ngb_rating_rateChange_2_listener($event) { return ctx.onChange($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(3, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(4, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"max\", ctx.model.max)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"resettable\", ctx.model.getAdditional(\"resettable\", ctx.config[\"resettable\"]));\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbRating, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapRatingComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService },\n    { type: NgbRatingConfig }\n];\nDynamicNGBootstrapRatingComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    customEvent: [{ type: Output }],\n    focus: [{ type: Output }],\n    ngbRating: [{ type: ViewChild, args: [NgbRating, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapRatingComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-rating\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <ngb-rating [formControlName]=\\\"model.id\\\"\\n                [id]=\\\"id\\\"\\n                [max]=\\\"model.max\\\"\\n                [ngClass]=\\\"getClass('element', 'control')\\\"\\n                [resettable]=\\\"model.getAdditional('resettable', config['resettable'])\\\"\\n                (hover)=\\\"onCustomEvent($event, 'hover')\\\"\\n                (leave)=\\\"onCustomEvent($event, 'leave')\\\"\\n                (rateChange)=\\\"onChange($event)\\\"></ngb-rating>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbRatingConfig }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], customEvent: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], ngbRating: [{\n            type: ViewChild,\n            args: [NgbRating, { static: true }]\n        }] }); })();\n\nclass DynamicNGBootstrapSelectComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapSelectComponent.ɵfac = function DynamicNGBootstrapSelectComponent_Factory(t) { return new (t || DynamicNGBootstrapSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapSelectComponent, selectors: [[\"dynamic-ng-bootstrap-select\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 13, consts: [[3, \"formGroup\"], [1, \"form-control\", 3, \"compareWith\", \"formControlName\", \"id\", \"name\", \"ngClass\", \"required\", \"tabindex\", \"blur\", \"change\", \"focus\"], [3, \"disabled\", \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [3, \"disabled\", \"ngValue\"]], template: function DynamicNGBootstrapSelectComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"select\", 1);\n        ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapSelectComponent_Template_select_blur_2_listener($event) { return ctx.onBlur($event); })(\"change\", function DynamicNGBootstrapSelectComponent_Template_select_change_2_listener($event) { return ctx.onChange($event); })(\"focus\", function DynamicNGBootstrapSelectComponent_Template_select_focus_2_listener($event) { return ctx.onFocus($event); });\n        ɵngcc0.ɵɵtext(3, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapSelectComponent_option_4_Template, 2, 3, \"option\", 2);\n        ɵngcc0.ɵɵpipe(5, \"async\");\n        ɵngcc0.ɵɵtext(6, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(7, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(8, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵproperty(\"compareWith\", ctx.model.compareWithFn)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"name\", ctx.model.name)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"required\", ctx.model.required)(\"tabindex\", ctx.model.tabIndex);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(5, 11, ctx.model.options$));\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.SelectControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass, ɵngcc3.RequiredValidator, ɵngcc4.NgForOf, ɵngcc3.NgSelectOption, ɵngcc3.ɵangular_packages_forms_forms_z], pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });\nDynamicNGBootstrapSelectComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapSelectComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapSelectComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-select\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <select class=\\\"form-control\\\"\\n            [class.is-invalid]=\\\"showErrorMessages\\\"\\n            [compareWith]=\\\"model.compareWithFn\\\"\\n            [formControlName]=\\\"model.id\\\"\\n            [id]=\\\"id\\\"\\n            [name]=\\\"model.name\\\"\\n            [ngClass]=\\\"getClass('element', 'control')\\\"\\n            [required]=\\\"model.required\\\"\\n            [tabindex]=\\\"model.tabIndex\\\"\\n            (blur)=\\\"onBlur($event)\\\"\\n            (change)=\\\"onChange($event)\\\"\\n            (focus)=\\\"onFocus($event)\\\">\\n\\n        <option *ngFor=\\\"let option of model.options$ | async\\\"\\n                [disabled]=\\\"option.disabled\\\"\\n                [ngValue]=\\\"option.value\\\">{{ option.label }}</option>\\n\\n    </select>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapSwitchComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapSwitchComponent.ɵfac = function DynamicNGBootstrapSwitchComponent_Factory(t) { return new (t || DynamicNGBootstrapSwitchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapSwitchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapSwitchComponent, selectors: [[\"dynamic-ng-bootstrap-switch\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 12, consts: [[1, \"custom-control\", \"custom-switch\", 3, \"formGroup\"], [\"type\", \"checkbox\", 1, \"custom-control-input\", 3, \"formControlName\", \"id\", \"name\", \"ngClass\", \"required\", \"tabindex\", \"value\", \"blur\", \"change\", \"focus\"], [1, \"custom-control-label\", 3, \"for\", \"innerHTML\"]], template: function DynamicNGBootstrapSwitchComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"input\", 1);\n        ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapSwitchComponent_Template_input_blur_2_listener($event) { return ctx.onBlur($event); })(\"change\", function DynamicNGBootstrapSwitchComponent_Template_input_change_2_listener($event) { return ctx.onChange($event); })(\"focus\", function DynamicNGBootstrapSwitchComponent_Template_input_focus_2_listener($event) { return ctx.onFocus($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(3, \"\\n\\n    \");\n        ɵngcc0.ɵɵelement(4, \"label\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n\\n\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵproperty(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"name\", ctx.model.name)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"required\", ctx.model.required)(\"tabindex\", ctx.model.tabIndex)(\"value\", ctx.model.value);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.id)(\"innerHTML\", ctx.model.label, ɵngcc0.ɵɵsanitizeHtml);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.CheckboxRequiredValidator, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2 });\nDynamicNGBootstrapSwitchComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapSwitchComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapSwitchComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-switch\",\n                template: \"<div [formGroup]=\\\"group\\\" class=\\\"custom-control custom-switch\\\">\\n\\n    <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\"\\n           [class.is-invalid]=\\\"showErrorMessages\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [name]=\\\"model.name\\\"\\n           [ngClass]=\\\"getClass('element', 'control')\\\"\\n           [required]=\\\"model.required\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [value]=\\\"model.value\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\">\\n\\n    <label class=\\\"custom-control-label\\\" [for]=\\\"id\\\" [innerHTML]=\\\"model.label\\\"></label>\\n\\n</div>\\n\\n\",\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapTextAreaComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapTextAreaComponent.ɵfac = function DynamicNGBootstrapTextAreaComponent_Factory(t) { return new (t || DynamicNGBootstrapTextAreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapTextAreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapTextAreaComponent, selectors: [[\"dynamic-ng-bootstrap-textarea\"]], inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 17, consts: [[3, \"formGroup\"], [1, \"form-control\", 3, \"cols\", \"formControlName\", \"id\", \"maxlength\", \"minlength\", \"name\", \"ngClass\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"spellcheck\", \"tabindex\", \"wrap\", \"blur\", \"change\", \"focus\"]], template: function DynamicNGBootstrapTextAreaComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"textarea\", 1);\n        ɵngcc0.ɵɵlistener(\"blur\", function DynamicNGBootstrapTextAreaComponent_Template_textarea_blur_2_listener($event) { return ctx.onBlur($event); })(\"change\", function DynamicNGBootstrapTextAreaComponent_Template_textarea_change_2_listener($event) { return ctx.onChange($event); })(\"focus\", function DynamicNGBootstrapTextAreaComponent_Template_textarea_focus_2_listener($event) { return ctx.onFocus($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(3, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(4, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵproperty(\"cols\", ctx.model.cols)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"maxlength\", ctx.model.maxLength)(\"minlength\", ctx.model.minLength)(\"name\", ctx.model.name)(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"placeholder\", ctx.model.placeholder)(\"readonly\", ctx.model.readOnly)(\"required\", ctx.model.required)(\"rows\", ctx.model.rows)(\"spellcheck\", ctx.model.spellCheck)(\"tabindex\", ctx.model.tabIndex)(\"wrap\", ctx.model.wrap);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc3.MaxLengthValidator, ɵngcc3.MinLengthValidator, ɵngcc4.NgClass, ɵngcc3.RequiredValidator], encapsulation: 2 });\nDynamicNGBootstrapTextAreaComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapTextAreaComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapTextAreaComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-textarea\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <textarea class=\\\"form-control\\\"\\n              [class.is-invalid]=\\\"showErrorMessages\\\"\\n              [cols]=\\\"model.cols\\\"\\n              [formControlName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [maxlength]=\\\"model.maxLength\\\"\\n              [minlength]=\\\"model.minLength\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"getClass('element', 'control')\\\"\\n              [placeholder]=\\\"model.placeholder\\\"\\n              [readonly]=\\\"model.readOnly\\\"\\n              [required]=\\\"model.required\\\"\\n              [rows]=\\\"model.rows\\\"\\n              [spellcheck]=\\\"model.spellCheck\\\"\\n              [tabindex]=\\\"model.tabIndex\\\"\\n              [wrap]=\\\"model.wrap\\\"\\n              (blur)=\\\"onBlur($event)\\\"\\n              (change)=\\\"onChange($event)\\\"\\n              (focus)=\\\"onFocus($event)\\\"></textarea>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }] }); })();\n\nclass DynamicNGBootstrapTimePickerComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService, config) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.config = config;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapTimePickerComponent.ɵfac = function DynamicNGBootstrapTimePickerComponent_Factory(t) { return new (t || DynamicNGBootstrapTimePickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgbTimepickerConfig)); };\nDynamicNGBootstrapTimePickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapTimePickerComponent, selectors: [[\"dynamic-ng-bootstrap-timepicker\"]], viewQuery: function DynamicNGBootstrapTimePickerComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NgbTimepicker, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ngbTimePicker = _t.first);\n    } }, inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 11, consts: [[3, \"formGroup\"], [3, \"id\", \"formControlName\", \"hourStep\", \"meridian\", \"minuteStep\", \"ngClass\", \"seconds\", \"secondStep\", \"size\", \"spinners\"]], template: function DynamicNGBootstrapTimePickerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelement(2, \"ngb-timepicker\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(4, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"formControlName\", ctx.model.id)(\"hourStep\", ctx.model.getAdditional(\"hourStep\", ctx.config[\"hourStep\"]))(\"meridian\", ctx.model.meridian)(\"minuteStep\", ctx.model.getAdditional(\"minuteStep\", ctx.config[\"minuteStep\"]))(\"ngClass\", ctx.getClass(\"element\", \"control\"))(\"seconds\", ctx.model.showSeconds)(\"secondStep\", ctx.model.getAdditional(\"secondStep\", ctx.config[\"secondStep\"]))(\"size\", ctx.model.getAdditional(\"size\", ctx.config[\"size\"]))(\"spinners\", ctx.model.getAdditional(\"spinners\", ctx.config[\"spinners\"]));\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc2.NgbTimepicker, ɵngcc3.NgControlStatus, ɵngcc3.FormControlName, ɵngcc4.NgClass], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapTimePickerComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService },\n    { type: NgbTimepickerConfig }\n];\nDynamicNGBootstrapTimePickerComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }],\n    ngbTimePicker: [{ type: ViewChild, args: [NgbTimepicker, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapTimePickerComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-timepicker\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <ngb-timepicker [id]=\\\"id\\\"\\n                    [formControlName]=\\\"model.id\\\"\\n                    [hourStep]=\\\"model.getAdditional('hourStep', config['hourStep'])\\\"\\n                    [meridian]=\\\"model.meridian\\\"\\n                    [minuteStep]=\\\"model.getAdditional('minuteStep', config['minuteStep'])\\\"\\n                    [ngClass]=\\\"getClass('element', 'control')\\\"\\n                    [seconds]=\\\"model.showSeconds\\\"\\n                    [secondStep]=\\\"model.getAdditional('secondStep', config['secondStep'])\\\"\\n                    [size]=\\\"model.getAdditional('size', config['size'])\\\"\\n                    [spinners]=\\\"model.getAdditional('spinners', config['spinners'])\\\"></ngb-timepicker>\\n\\n</ng-container>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc2.NgbTimepickerConfig }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], ngbTimePicker: [{\n            type: ViewChild,\n            args: [NgbTimepicker, { static: true }]\n        }] }); })();\n\nclass DynamicNGBootstrapFormControlContainerComponent extends DynamicFormControlContainerComponent {\n    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {\n        super(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService);\n        this.changeDetectorRef = changeDetectorRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.componentService = componentService;\n        this.relationService = relationService;\n        this.klass = \"\";\n        this.asBootstrapFormGroup = true;\n        this.context = null;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.customEvent = new EventEmitter();\n    }\n    get componentType() {\n        return this.componentService.getCustomComponentType(this.model) || ngBootstrapUIFormControlMapFn(this.model);\n    }\n}\nDynamicNGBootstrapFormControlContainerComponent.ɵfac = function DynamicNGBootstrapFormControlContainerComponent_Factory(t) { return new (t || DynamicNGBootstrapFormControlContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormComponentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormRelationService)); };\nDynamicNGBootstrapFormControlContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormControlContainerComponent, selectors: [[\"dynamic-ng-bootstrap-form-control\"]], contentQueries: function DynamicNGBootstrapFormControlContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DynamicTemplateDirective, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplateList = _t);\n    } }, viewQuery: function DynamicNGBootstrapFormControlContainerComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 3, ViewContainerRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.componentViewContainerRef = _t.first);\n    } }, hostVars: 2, hostBindings: function DynamicNGBootstrapFormControlContainerComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.klass);\n    } }, inputs: { asBootstrapFormGroup: \"asBootstrapFormGroup\", context: \"context\", group: \"group\", hostClass: \"hostClass\", inputTemplateList: [\"templates\", \"inputTemplateList\"], layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\", customEvent: \"ngbEvent\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 21, vars: 16, consts: [[3, \"formGroup\", \"ngClass\"], [3, \"for\", \"innerHTML\", \"ngClass\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\"], [\"componentViewContainer\", \"\"], [\"class\", \"text-muted\", 3, \"innerHTML\", \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [3, \"for\", \"innerHTML\", \"ngClass\"], [1, \"text-muted\", 3, \"innerHTML\", \"ngClass\"], [\"class\", \"invalid-feedback d-block\", 4, \"ngFor\", \"ngForOf\"], [1, \"invalid-feedback\", \"d-block\"]], template: function DynamicNGBootstrapFormControlContainerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵtemplate(2, DynamicNGBootstrapFormControlContainerComponent_label_2_Template, 1, 6, \"label\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n    \");\n        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapFormControlContainerComponent_ng_container_4_Template, 1, 0, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(6, \"div\", 3);\n        ɵngcc0.ɵɵtext(7, \"\\n\\n        \");\n        ɵngcc0.ɵɵelementContainer(8, null, 4);\n        ɵngcc0.ɵɵtext(10, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(11, DynamicNGBootstrapFormControlContainerComponent_small_11_Template, 1, 2, \"small\", 5);\n        ɵngcc0.ɵɵtext(12, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(13, DynamicNGBootstrapFormControlContainerComponent_div_13_Template, 4, 5, \"div\", 6);\n        ɵngcc0.ɵɵtext(14, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(15, \"\\n\\n    \");\n        ɵngcc0.ɵɵtemplate(16, DynamicNGBootstrapFormControlContainerComponent_ng_container_16_Template, 1, 0, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(17, \"\\n\\n    \");\n        ɵngcc0.ɵɵprojection(18);\n        ɵngcc0.ɵɵtext(19, \"\\n\\n\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(20, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"form-group\", ctx.model.type !== \"GROUP\" && ctx.asBootstrapFormGroup || ctx.getClass(\"element\", \"container\").includes(\"form-group\"));\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group)(\"ngClass\", ɵngcc0.ɵɵpureFunction3(12, _c3, \"ng-dynamic-forms-\" + ctx.model.type.toLowerCase(), ctx.getClass(\"element\", \"container\"), ctx.getClass(\"grid\", \"container\")));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isCheckbox && ctx.hasLabel);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.startTemplate == null ? null : ctx.startTemplate.templateRef)(\"ngTemplateOutletContext\", ctx.model);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.getClass(\"grid\", \"control\"));\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasHint);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showErrorMessages);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.endTemplate == null ? null : ctx.endTemplate.templateRef)(\"ngTemplateOutletContext\", ctx.model);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc4.NgClass, ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet, ɵngcc4.NgForOf], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapFormControlContainerComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ComponentFactoryResolver },\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService },\n    { type: DynamicFormComponentService },\n    { type: DynamicFormRelationService }\n];\nDynamicNGBootstrapFormControlContainerComponent.propDecorators = {\n    contentTemplateList: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],\n    klass: [{ type: HostBinding, args: [\"class\",] }],\n    asBootstrapFormGroup: [{ type: Input }],\n    context: [{ type: Input }],\n    group: [{ type: Input }],\n    hostClass: [{ type: Input }],\n    inputTemplateList: [{ type: Input, args: [\"templates\",] }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }],\n    customEvent: [{ type: Output, args: [\"ngbEvent\",] }],\n    componentViewContainerRef: [{ type: ViewChild, args: [\"componentViewContainer\", { read: ViewContainerRef, static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormControlContainerComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-form-control\",\n                template: \"<div [class.form-group]=\\\"(model.type !== 'GROUP' && asBootstrapFormGroup) || getClass('element', 'container').includes('form-group')\\\"\\n     [formGroup]=\\\"group\\\"\\n     [ngClass]=\\\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\\\">\\n\\n    <label *ngIf=\\\"!isCheckbox && hasLabel\\\"\\n           [for]=\\\"id\\\"\\n           [innerHTML]=\\\"model.label\\\"\\n           [ngClass]=\\\"[getClass('element', 'label'), getClass('grid', 'label')]\\\"></label>\\n\\n    <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <div [ngClass]=\\\"getClass('grid', 'control')\\\">\\n\\n        <ng-container #componentViewContainer></ng-container>\\n\\n        <small *ngIf=\\\"hasHint\\\" class=\\\"text-muted\\\" [innerHTML]=\\\"hint\\\" [ngClass]=\\\"getClass('element', 'hint')\\\"></small>\\n\\n        <div *ngIf=\\\"showErrorMessages\\\" [ngClass]=\\\"[getClass('element', 'errors'), getClass('grid', 'errors')]\\\">\\n            <small *ngFor=\\\"let message of errorMessages\\\" class=\\\"invalid-feedback d-block\\\">{{ message }}</small>\\n        </div>\\n\\n    </div>\\n\\n    <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-content></ng-content>\\n\\n</div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }, { type: ɵngcc1.DynamicFormComponentService }, { type: ɵngcc1.DynamicFormRelationService }]; }, { klass: [{\n            type: HostBinding,\n            args: [\"class\"]\n        }], asBootstrapFormGroup: [{\n            type: Input\n        }], context: [{\n            type: Input\n        }], blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], customEvent: [{\n            type: Output,\n            args: [\"ngbEvent\"]\n        }], contentTemplateList: [{\n            type: ContentChildren,\n            args: [DynamicTemplateDirective]\n        }], group: [{\n            type: Input\n        }], hostClass: [{\n            type: Input\n        }], inputTemplateList: [{\n            type: Input,\n            args: [\"templates\"]\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], componentViewContainerRef: [{\n            type: ViewChild,\n            args: [\"componentViewContainer\", { read: ViewContainerRef, static: true }]\n        }] }); })();\nfunction ngBootstrapUIFormControlMapFn(model) {\n    switch (model.type) {\n        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n            return DynamicNGBootstrapFormArrayComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n            return DynamicNGBootstrapCheckboxComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n            return DynamicNGBootstrapCheckboxGroupComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n            const datePickerModel = model;\n            return datePickerModel.inline ? DynamicNGBootstrapCalendarComponent : DynamicNGBootstrapDatePickerComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n            return DynamicNGBootstrapFormGroupComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n            return DynamicNGBootstrapInputComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n            return DynamicNGBootstrapRadioGroupComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n            return DynamicNGBootstrapRatingComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n            return DynamicNGBootstrapSelectComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n            return DynamicNGBootstrapSwitchComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n            return DynamicNGBootstrapTextAreaComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n            return DynamicNGBootstrapTimePickerComponent;\n        default:\n            return null;\n    }\n}\n\nclass DynamicNGBootstrapFormArrayComponent extends DynamicFormArrayComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicNGBootstrapFormArrayComponent.ɵfac = function DynamicNGBootstrapFormArrayComponent_Factory(t) { return new (t || DynamicNGBootstrapFormArrayComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormLayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormValidationService)); };\nDynamicNGBootstrapFormArrayComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormArrayComponent, selectors: [[\"dynamic-ng-bootstrap-form-array\"]], viewQuery: function DynamicNGBootstrapFormArrayComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DynamicNGBootstrapFormControlContainerComponent, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.components = _t);\n    } }, inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\", templates: \"templates\" }, outputs: { blur: \"blur\", change: \"change\", customEvent: \"customEvent\", focus: \"focus\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 5, consts: [[3, \"formGroup\"], [3, \"formArrayName\", \"id\", \"ngClass\"], [\"role\", \"group\", 3, \"formGroupName\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"group\", 3, \"formGroupName\", \"ngClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"context\", \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"ngbEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"context\", \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"ngbEvent\"]], template: function DynamicNGBootstrapFormArrayComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\\n        \");\n        ɵngcc0.ɵɵtemplate(4, DynamicNGBootstrapFormArrayComponent_div_4_Template, 8, 10, \"div\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n\\n\");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(7, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.group);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"formArrayName\", ctx.model.id)(\"id\", ctx.id)(\"ngClass\", ctx.getClass(\"element\", \"control\"));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.model.groups);\n    } }, directives: [ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc3.FormArrayName, ɵngcc4.NgClass, ɵngcc4.NgForOf, ɵngcc3.FormGroupName, ɵngcc4.NgTemplateOutlet, DynamicNGBootstrapFormControlContainerComponent], encapsulation: 2 });\nDynamicNGBootstrapFormArrayComponent.ctorParameters = () => [\n    { type: DynamicFormLayoutService },\n    { type: DynamicFormValidationService }\n];\nDynamicNGBootstrapFormArrayComponent.propDecorators = {\n    formLayout: [{ type: Input }],\n    group: [{ type: Input }],\n    layout: [{ type: Input }],\n    model: [{ type: Input }],\n    templates: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    customEvent: [{ type: Output }],\n    focus: [{ type: Output }],\n    components: [{ type: ViewChildren, args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent),] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormArrayComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-form-array\",\n                template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div [formArrayName]=\\\"model.id\\\" [id]=\\\"id\\\" [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <div *ngFor=\\\"let groupModel of model.groups; let idx = index\\\" role=\\\"group\\\"\\n             [formGroupName]=\\\"idx\\\" [ngClass]=\\\"[getClass('element', 'group'), getClass('grid', 'group')]\\\">\\n\\n            <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n            <dynamic-ng-bootstrap-form-control *ngFor=\\\"let _model of groupModel.group\\\"\\n                                               [context]=\\\"groupModel\\\"\\n                                               [group]=\\\"array.at(idx)\\\"\\n                                               [hidden]=\\\"_model.hidden\\\"\\n                                               [layout]=\\\"formLayout\\\"\\n                                               [model]=\\\"_model\\\"\\n                                               [templates]=\\\"templates\\\"\\n                                               [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                               (blur)=\\\"onBlur($event)\\\"\\n                                               (change)=\\\"onChange($event)\\\"\\n                                               (focus)=\\\"onFocus($event)\\\"\\n                                               (ngbEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-ng-bootstrap-form-control>\\n\\n            <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n        </div>\\n\\n    </div>\\n\\n</ng-container>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc1.DynamicFormLayoutService }, { type: ɵngcc1.DynamicFormValidationService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], customEvent: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], formLayout: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], templates: [{\n            type: Input\n        }], components: [{\n            type: ViewChildren,\n            args: [forwardRef(() => DynamicNGBootstrapFormControlContainerComponent)]\n        }] }); })();\n\nclass DynamicNGBootstrapFormComponent extends DynamicFormComponent {\n    constructor(changeDetectorRef, componentService) {\n        super(changeDetectorRef, componentService);\n        this.changeDetectorRef = changeDetectorRef;\n        this.componentService = componentService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n        this.ngbEvent = new EventEmitter();\n    }\n}\nDynamicNGBootstrapFormComponent.ɵfac = function DynamicNGBootstrapFormComponent_Factory(t) { return new (t || DynamicNGBootstrapFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DynamicFormComponentService)); };\nDynamicNGBootstrapFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DynamicNGBootstrapFormComponent, selectors: [[\"dynamic-ng-bootstrap-form\"]], contentQueries: function DynamicNGBootstrapFormComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DynamicTemplateDirective, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templates = _t);\n    } }, viewQuery: function DynamicNGBootstrapFormComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DynamicNGBootstrapFormControlContainerComponent, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.components = _t);\n    } }, inputs: { group: \"group\", model: \"model\", layout: \"layout\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\", ngbEvent: \"ngbEvent\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [[3, \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"blur\", \"change\", \"focus\", \"ngbEvent\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"blur\", \"change\", \"focus\", \"ngbEvent\"]], template: function DynamicNGBootstrapFormComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, DynamicNGBootstrapFormComponent_dynamic_ng_bootstrap_form_control_0_Template, 1, 5, \"dynamic-ng-bootstrap-form-control\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.model)(\"ngForTrackBy\", ctx.trackByFn);\n    } }, directives: [ɵngcc4.NgForOf, DynamicNGBootstrapFormControlContainerComponent], encapsulation: 2, changeDetection: 0 });\nDynamicNGBootstrapFormComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: DynamicFormComponentService }\n];\nDynamicNGBootstrapFormComponent.propDecorators = {\n    group: [{ type: Input }],\n    model: [{ type: Input }],\n    layout: [{ type: Input }],\n    blur: [{ type: Output }],\n    change: [{ type: Output }],\n    focus: [{ type: Output }],\n    ngbEvent: [{ type: Output }],\n    templates: [{ type: ContentChildren, args: [DynamicTemplateDirective,] }],\n    components: [{ type: ViewChildren, args: [DynamicNGBootstrapFormControlContainerComponent,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicNGBootstrapFormComponent, [{\n        type: Component,\n        args: [{\n                selector: \"dynamic-ng-bootstrap-form\",\n                template: \"<dynamic-ng-bootstrap-form-control *ngFor=\\\"let controlModel of model; trackBy: trackByFn\\\"\\n                                   [group]=\\\"group\\\"\\n                                   [hidden]=\\\"controlModel.hidden\\\"\\n                                   [layout]=\\\"layout\\\"\\n                                   [model]=\\\"controlModel\\\"\\n                                   [templates]=\\\"templates\\\"\\n                                   (blur)=\\\"onBlur($event)\\\"\\n                                   (change)=\\\"onChange($event)\\\"\\n                                   (focus)=\\\"onFocus($event)\\\"\\n                                   (ngbEvent)=\\\"onCustomEvent($event, ngbEvent)\\\"></dynamic-ng-bootstrap-form-control>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.DynamicFormComponentService }]; }, { blur: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], focus: [{\n            type: Output\n        }], ngbEvent: [{\n            type: Output\n        }], group: [{\n            type: Input\n        }], model: [{\n            type: Input\n        }], layout: [{\n            type: Input\n        }], templates: [{\n            type: ContentChildren,\n            args: [DynamicTemplateDirective]\n        }], components: [{\n            type: ViewChildren,\n            args: [DynamicNGBootstrapFormControlContainerComponent]\n        }] }); })();\n\nclass DynamicFormsNGBootstrapUIModule {\n}\nDynamicFormsNGBootstrapUIModule.ɵfac = function DynamicFormsNGBootstrapUIModule_Factory(t) { return new (t || DynamicFormsNGBootstrapUIModule)(); };\nDynamicFormsNGBootstrapUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DynamicFormsNGBootstrapUIModule });\nDynamicFormsNGBootstrapUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            NgbButtonsModule,\n            NgbDatepickerModule,\n            NgbRatingModule,\n            NgbTimepickerModule,\n            TextMaskModule,\n            DynamicFormsCoreModule\n        ], DynamicFormsCoreModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicFormsNGBootstrapUIModule, { declarations: function () { return [DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        NgbButtonsModule,\n        NgbDatepickerModule,\n        NgbRatingModule,\n        NgbTimepickerModule,\n        TextMaskModule,\n        DynamicFormsCoreModule]; }, exports: function () { return [DynamicFormsCoreModule, DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicFormsNGBootstrapUIModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    NgbButtonsModule,\n                    NgbDatepickerModule,\n                    NgbRatingModule,\n                    NgbTimepickerModule,\n                    TextMaskModule,\n                    DynamicFormsCoreModule\n                ],\n                declarations: [\n                    DynamicNGBootstrapCalendarComponent,\n                    DynamicNGBootstrapCheckboxComponent,\n                    DynamicNGBootstrapCheckboxGroupComponent,\n                    DynamicNGBootstrapDatePickerComponent,\n                    DynamicNGBootstrapFormArrayComponent,\n                    DynamicNGBootstrapFormComponent,\n                    DynamicNGBootstrapFormControlContainerComponent,\n                    DynamicNGBootstrapFormGroupComponent,\n                    DynamicNGBootstrapInputComponent,\n                    DynamicNGBootstrapRadioGroupComponent,\n                    DynamicNGBootstrapRatingComponent,\n                    DynamicNGBootstrapSelectComponent,\n                    DynamicNGBootstrapSwitchComponent,\n                    DynamicNGBootstrapTextAreaComponent,\n                    DynamicNGBootstrapTimePickerComponent\n                ],\n                entryComponents: [\n                    DynamicNGBootstrapCalendarComponent,\n                    DynamicNGBootstrapCheckboxComponent,\n                    DynamicNGBootstrapCheckboxGroupComponent,\n                    DynamicNGBootstrapDatePickerComponent,\n                    DynamicNGBootstrapFormArrayComponent,\n                    DynamicNGBootstrapFormGroupComponent,\n                    DynamicNGBootstrapInputComponent,\n                    DynamicNGBootstrapRadioGroupComponent,\n                    DynamicNGBootstrapRatingComponent,\n                    DynamicNGBootstrapSelectComponent,\n                    DynamicNGBootstrapSwitchComponent,\n                    DynamicNGBootstrapTextAreaComponent,\n                    DynamicNGBootstrapTimePickerComponent\n                ],\n                exports: [\n                    DynamicFormsCoreModule,\n                    DynamicNGBootstrapCalendarComponent,\n                    DynamicNGBootstrapCheckboxComponent,\n                    DynamicNGBootstrapCheckboxGroupComponent,\n                    DynamicNGBootstrapDatePickerComponent,\n                    DynamicNGBootstrapFormArrayComponent,\n                    DynamicNGBootstrapFormComponent,\n                    DynamicNGBootstrapFormControlContainerComponent,\n                    DynamicNGBootstrapFormGroupComponent,\n                    DynamicNGBootstrapInputComponent,\n                    DynamicNGBootstrapRadioGroupComponent,\n                    DynamicNGBootstrapRatingComponent,\n                    DynamicNGBootstrapSelectComponent,\n                    DynamicNGBootstrapSwitchComponent,\n                    DynamicNGBootstrapTextAreaComponent,\n                    DynamicNGBootstrapTimePickerComponent\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DynamicFormsNGBootstrapUIModule, DynamicNGBootstrapCalendarComponent, DynamicNGBootstrapCheckboxComponent, DynamicNGBootstrapCheckboxGroupComponent, DynamicNGBootstrapDatePickerComponent, DynamicNGBootstrapFormArrayComponent, DynamicNGBootstrapFormComponent, DynamicNGBootstrapFormControlContainerComponent, DynamicNGBootstrapFormGroupComponent, DynamicNGBootstrapInputComponent, DynamicNGBootstrapRadioGroupComponent, DynamicNGBootstrapRatingComponent, DynamicNGBootstrapSelectComponent, DynamicNGBootstrapSwitchComponent, DynamicNGBootstrapTextAreaComponent, DynamicNGBootstrapTimePickerComponent, ngBootstrapUIFormControlMapFn };\n\n//# sourceMappingURL=ui-ng-bootstrap.js.map","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService } from '@ng-dynamic-forms/core';\n\nimport { DynamicDisabledModel } from './dynamic-disabled.model';\n\n/**\n * Component representing a simple disabled input field\n */\n@Component({\n  selector: 'ds-dynamic-disabled',\n  templateUrl: './dynamic-disabled.component.html'\n})\n/**\n * Component for displaying a form input with a disabled property\n */\nexport class DsDynamicDisabledComponent extends DynamicFormControlComponent {\n\n  @Input() formId: string;\n  @Input() group: FormGroup;\n  @Input() model: DynamicDisabledModel;\n  modelValuesString = '';\n\n  @Output() blur: EventEmitter<any> = new EventEmitter<any>();\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @Output() focus: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService\n  ) {\n    super(layoutService, validationService);\n  }\n}\n","<div>\n    <div class=\"form-row align-items-center\">\n        <div class=\"col\">\n          <input class=\"form-control\"\n                 [class.is-invalid]=\"showErrorMessages\"\n                 [id]=\"id\"\n                 [name]=\"model.name\"\n                 [value]=\"modelValuesString\"\n                 [disabled]=\"model.disabled\"\n                 [type]=\"model.inputType\"\n                 [placeholder]=\"model.placeholder | translate\"\n                 [readonly]=\"model.readOnly\">\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormControlComponent,\n  DynamicFormControlCustomEvent,\n  DynamicFormControlEvent,\n  DynamicFormControlLayout,\n  DynamicFormGroupModel, DynamicFormLayout,\n  DynamicFormLayoutService,\n  DynamicFormValidationService,\n  DynamicTemplateDirective\n} from '@ng-dynamic-forms/core';\n\n@Component({\n  selector: 'ds-dynamic-form-group',\n  templateUrl: './dynamic-form-group.component.html',\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class DsDynamicFormGroupComponent extends DynamicFormControlComponent {\n\n  @Input() formLayout: DynamicFormLayout;\n  @Input() group: FormGroup;\n  @Input() layout: DynamicFormControlLayout;\n  @Input() model: DynamicFormGroupModel;\n  @Input() templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('ngbEvent') customEvent: EventEmitter<DynamicFormControlCustomEvent> = new EventEmitter();\n  /* tslint:enable:no-output-rename */\n\n  constructor(protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService) {\n\n    super(layoutService, validationService);\n  }\n\n}\n","<ng-container [formGroup]=\"group\">\n\n  <div role=\"group\" [formGroupName]=\"model.id\" [id]=\"id\" [ngClass]=\"getClass('element','control')\">\n\n    <ds-dynamic-form-control-container *ngFor=\"let _model of model.group\"\n                                       [group]=\"control\"\n                                       [hasErrorMessaging]=\"model.hasErrorMessages\"\n                                       [hidden]=\"_model.hidden\"\n                                       [layout]=\"formLayout\"\n                                       [model]=\"_model\"\n                                       [templates]=\"templates\"\n                                       [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\"\n                                       (dfBlur)=\"onBlur($event)\"\n                                       (dfChange)=\"onChange($event)\"\n                                       (dfFocus)=\"onFocus($event)\"\n                                       (ngbEvent)=\"onCustomEvent($event, null, true)\"></ds-dynamic-form-control-container>\n  </div>\n</ng-container>\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { NgbDatepicker, NgbDatepickerConfig } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  DynamicDatePickerModel,\n  DynamicFormControlComponent,\n  DynamicFormControlLayout,\n  DynamicFormLayoutService,\n  DynamicFormValidationService\n} from '@ng-dynamic-forms/core';\n\n@Component({\n  selector: 'ds-dynamic-date-picker-inline',\n  templateUrl: './dynamic-date-picker-inline.component.html'\n})\nexport class DsDatePickerInlineComponent extends DynamicFormControlComponent {\n\n  @Input() bindId = true;\n  @Input() group: FormGroup;\n  @Input() layout: DynamicFormControlLayout;\n  @Input() model: DynamicDatePickerModel;\n\n  @Output() blur: EventEmitter<any> = new EventEmitter();\n  @Output() change: EventEmitter<any> = new EventEmitter();\n  @Output() focus: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild(NgbDatepicker) ngbDatePicker: NgbDatepicker;\n\n  constructor(protected layoutService: DynamicFormLayoutService,\n              protected validationService: DynamicFormValidationService,\n              public config: NgbDatepickerConfig) {\n\n    super(layoutService, validationService);\n  }\n}\n","<div [formGroup]=\"group\" class=\"input-group\">\n\n    <input ngbDatepicker class=\"form-control\" #datepicker=\"ngbDatepicker\"\n           [attr.aria-labelledby]=\"'label_' + model.id\"\n           [class.is-invalid]=\"showErrorMessages\"\n           [displayMonths]=\"model.getAdditional('displayMonths', config['displayMonths'])\"\n           [id]=\"id\"\n           [firstDayOfWeek]=\"model.getAdditional('firstDayOfWeek', config['firstDayOfWeek'])\"\n           [formControlName]=\"model.id\"\n           [maxDate]=\"model.max\"\n           [minDate]=\"model.min\"\n           [name]=\"model.name\"\n           [navigation]=\"model.getAdditional('navigation', config['navigation'])\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [outsideDays]=\"model.getAdditional('outsideDays', config['outsideDays'])\"\n           [placeholder]=\"model.placeholder\"\n           [placement]=\"model.getAdditional('placement', 'bottom-left')\"\n           [showWeekdays]=\"model.getAdditional('showWeekdays', config['showWeekdays'])\"\n           [showWeekNumbers]=\"model.getAdditional('showWeekNumbers', config['showWeekNumbers'])\"\n           [startDate]=\"model.focusedDate\"\n           (blur)=\"onBlur($event)\"\n           (dateSelect)=\"onChange($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\">\n\n    <div class=\"input-group-append\">\n\n        <button class=\"btn btn-outline-secondary\"\n                type=\"button\"\n                [attr.aria-labelledby]=\"'label_' + model.id\"\n                [class.disabled]=\"model.disabled\"\n                [disabled]=\"model.disabled\"\n                (click)=\"datepicker.toggle()\">\n\n            <i *ngIf=\"model.toggleIcon\" class=\"{{model.toggleIcon}}\" aria-hidden=\"true\"></i>\n            <span *ngIf=\"model.toggleLabel\">{{ model.toggleLabel }}</span>\n\n        </button>\n\n    </div>\n\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { DynamicNGBootstrapCheckboxComponent } from '@ng-dynamic-forms/ui-ng-bootstrap';\nimport { DynamicFormLayoutService, DynamicFormValidationService } from '@ng-dynamic-forms/core';\n\nimport { DynamicCustomSwitchModel } from './custom-switch.model';\n\n@Component({\n  selector: 'ds-custom-switch',\n  styleUrls: ['./custom-switch.component.scss'],\n  templateUrl: './custom-switch.component.html',\n})\n/**\n * Component displaying a custom switch usable in dynamic forms\n * Extends from bootstrap's checkbox component but displays a switch instead\n */\nexport class CustomSwitchComponent extends DynamicNGBootstrapCheckboxComponent {\n  /**\n   * Use the model's ID for the input element\n   */\n  @Input() bindId = true;\n\n  /**\n   * The formgroup containing this component\n   */\n  @Input() group: FormGroup;\n\n  /**\n   * The model used for displaying the switch\n   */\n  @Input() model: DynamicCustomSwitchModel;\n\n  /**\n   * Emit an event when the input is selected\n   */\n  @Output() selected = new EventEmitter<number>();\n\n  /**\n   * Emit an event when the input value is removed\n   */\n  @Output() remove = new EventEmitter<number>();\n\n  /**\n   * Emit an event when the input is blurred out\n   */\n  @Output() blur = new EventEmitter<any>();\n\n  /**\n   * Emit an event when the input value changes\n   */\n  @Output() change = new EventEmitter<any>();\n\n  /**\n   * Emit an event when the input is focused\n   */\n  @Output() focus = new EventEmitter<any>();\n\n  constructor(layoutService: DynamicFormLayoutService, validationService: DynamicFormValidationService) {\n    super(layoutService, validationService);\n  }\n}\n","<div [formGroup]=\"group\" class=\"form-check custom-control custom-switch\" [class.disabled]=\"model.disabled\">\n  <input type=\"checkbox\" class=\"form-check-input custom-control-input\"\n         [checked]=\"model.checked\"\n         [class.is-invalid]=\"showErrorMessages\"\n         [id]=\"id\"\n         [formControlName]=\"model.id\"\n         [indeterminate]=\"model.indeterminate\"\n         [name]=\"model.name\"\n         [ngClass]=\"getClass('element', 'control')\"\n         [required]=\"model.required\"\n         [tabindex]=\"model.tabIndex\"\n         [value]=\"model.value\"\n         (blur)=\"onBlur($event)\"\n         (change)=\"onChange($event)\"\n         (focus)=\"onFocus($event)\"/>\n  <label class=\"form-check-label custom-control-label\" [for]=\"bindId && model.id\">\n    <span [innerHTML]=\"model.label\"\n          [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></span>\n  </label>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { DynamicFormArrayGroupModel } from '@ng-dynamic-forms/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { AppState } from '../../../../../app.reducer';\nimport { RelationshipService } from '../../../../../core/data/relationship.service';\nimport { Relationship } from '../../../../../core/shared/item-relationships/relationship.model';\nimport { Item } from '../../../../../core/shared/item.model';\nimport { ItemMetadataRepresentation } from '../../../../../core/shared/metadata-representation/item/item-metadata-representation.model';\nimport { MetadataRepresentation } from '../../../../../core/shared/metadata-representation/metadata-representation.model';\nimport { MetadataValue } from '../../../../../core/shared/metadata.models';\nimport { getAllSucceededRemoteData, getRemoteDataPayload } from '../../../../../core/shared/operators';\nimport { hasValue, isNotEmpty } from '../../../../empty.util';\nimport { ItemSearchResult } from '../../../../object-collection/shared/item-search-result.model';\nimport { SelectableListService } from '../../../../object-list/selectable-list/selectable-list.service';\nimport { FormFieldMetadataValueObject } from '../../models/form-field-metadata-value.model';\nimport { RelationshipOptions } from '../../models/relationship-options.model';\nimport { DynamicConcatModel } from '../models/ds-dynamic-concat.model';\nimport { RemoveRelationshipAction } from '../relation-lookup-modal/relationship.actions';\nimport { SubmissionService } from '../../../../../submission/submission.service';\nimport { SubmissionObjectEntry } from '../../../../../submission/objects/submission-objects.reducer';\n\n// tslint:disable:max-classes-per-file\n/**\n * Abstract class that defines objects that can be reordered\n */\nexport abstract class Reorderable {\n\n  constructor(public oldIndex?: number, public newIndex?: number) {\n  }\n\n  /**\n   * Return the id for this Reorderable\n   */\n  abstract getId(): string;\n\n  /**\n   * Return the place metadata for this Reorderable\n   */\n  abstract getPlace(): number;\n\n  /**\n   * Update the Reorderable\n   */\n  update(): void {\n    this.oldIndex = this.newIndex;\n  }\n\n  /**\n   * Returns true if the oldIndex of this Reorderable\n   * differs from the newIndex\n   */\n  get hasMoved(): boolean {\n    return this.oldIndex !== this.newIndex;\n  }\n}\n\n/**\n * A Reorderable representation of a FormFieldMetadataValue\n */\nexport class ReorderableFormFieldMetadataValue extends Reorderable {\n\n  constructor(\n    public metadataValue: FormFieldMetadataValueObject,\n    public model: DynamicConcatModel,\n    public control: FormControl,\n    public group: DynamicFormArrayGroupModel,\n    oldIndex?: number,\n    newIndex?: number\n  ) {\n    super(oldIndex, newIndex);\n    this.metadataValue = metadataValue;\n  }\n\n  /**\n   * Return the id for this Reorderable\n   */\n  getId(): string {\n    if (hasValue(this.metadataValue.authority)) {\n      return this.metadataValue.authority;\n    } else {\n      // can't use UUIDs, they're generated client side\n      return this.metadataValue.value;\n    }\n  }\n\n  /**\n   * Return the place metadata for this Reorderable\n   */\n  getPlace(): number {\n    return this.metadataValue.place;\n  }\n\n}\n\n/**\n * Represents a single relationship that can be reordered in a list of multiple relationships\n */\nexport class ReorderableRelationship extends Reorderable {\n\n  constructor(\n    public relationship: Relationship,\n    public useLeftItem: boolean,\n    protected relationshipService: RelationshipService,\n    protected store: Store<AppState>,\n    protected submissionID: string,\n    oldIndex?: number,\n    newIndex?: number) {\n    super(oldIndex, newIndex);\n    this.relationship = relationship;\n    this.useLeftItem = useLeftItem;\n  }\n\n  /**\n   * Return the id for this Reorderable\n   */\n  getId(): string {\n    return this.relationship.id;\n  }\n\n  /**\n   * Return the place metadata for this Reorderable\n   */\n  getPlace(): number {\n    if (this.useLeftItem) {\n      return this.relationship.rightPlace;\n    } else {\n      return this.relationship.leftPlace;\n    }\n  }\n}\n\n/**\n * Represents a single existing relationship value as metadata in submission\n */\n@Component({\n  selector: 'ds-existing-metadata-list-element',\n  templateUrl: './existing-metadata-list-element.component.html',\n  styleUrls: ['./existing-metadata-list-element.component.scss']\n})\nexport class ExistingMetadataListElementComponent implements OnInit, OnChanges, OnDestroy   {\n  @Input() listId: string;\n  @Input() submissionItem: Item;\n  @Input() reoRel: ReorderableRelationship;\n  @Input() metadataFields: string[];\n  @Input() relationshipOptions: RelationshipOptions;\n  @Input() submissionId: string;\n  metadataRepresentation$: BehaviorSubject<MetadataRepresentation> = new BehaviorSubject<MetadataRepresentation>(undefined);\n  relatedItem: Item;\n  @Output() remove: EventEmitter<any> = new EventEmitter();\n  /**\n   * List of subscriptions to unsubscribe from\n   */\n  private subs: Subscription[] = [];\n\n  constructor(\n    private selectableListService: SelectableListService,\n    private store: Store<AppState>,\n    private submissionService: SubmissionService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.ngOnChanges();\n  }\n\n  /**\n   * Change callback for the component\n   */\n  ngOnChanges() {\n    if (hasValue(this.reoRel)) {\n      const item$ = this.reoRel.useLeftItem ?\n        this.reoRel.relationship.leftItem : this.reoRel.relationship.rightItem;\n      this.subs.push(item$.pipe(\n        getAllSucceededRemoteData(),\n        getRemoteDataPayload(),\n        filter((item: Item) => hasValue(item) && isNotEmpty(item.uuid))\n      ).subscribe((item: Item) => {\n        this.relatedItem = item;\n        const relationMD: MetadataValue = this.submissionItem.firstMetadata(this.relationshipOptions.metadataField, { value: this.relatedItem.uuid });\n        if (hasValue(relationMD)) {\n          const metadataRepresentationMD: MetadataValue = this.submissionItem.firstMetadata(this.metadataFields, { authority: relationMD.authority });\n\n          const nextValue = Object.assign(\n            new ItemMetadataRepresentation(metadataRepresentationMD),\n            this.relatedItem\n          );\n          this.metadataRepresentation$.next(nextValue);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Removes the selected relationship from the list\n   */\n  removeSelection() {\n    this.submissionService.dispatchSave(this.submissionId);\n    this.submissionService.getSubmissionObject(this.submissionId).pipe(\n      filter((state: SubmissionObjectEntry) => !state.savePending && !state.isLoading),\n      take(1)).subscribe(() => {\n      this.selectableListService.deselectSingle(this.listId, Object.assign(new ItemSearchResult(), { indexableObject: this.relatedItem }));\n      this.store.dispatch(new RemoveRelationshipAction(this.submissionItem, this.relatedItem, this.relationshipOptions.relationshipType, this.submissionId));\n      this.remove.emit();\n    });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.subs\n      .filter((sub) => hasValue(sub))\n      .forEach((sub) => sub.unsubscribe());\n  }\n\n}\n\n// tslint:enable:max-classes-per-file\n","<div class=\"d-flex\">\n    <span class=\"mr-auto text-contents\">\n        <ng-container *ngIf=\"!(metadataRepresentation$ | async)\">\n            <ds-loading [showMessage]=\"false\"></ds-loading>\n        </ng-container>\n        <ng-container *ngIf=\"(metadataRepresentation$ | async)\">\n            <ds-metadata-representation-loader [mdRepresentation]=\"metadataRepresentation$ | async\"></ds-metadata-representation-loader>\n        </ng-container>\n    </span>\n    <button type=\"button\" class=\"btn btn-secondary\"\n            title=\"{{'form.remove' | translate}}\"\n            (click)=\"removeSelection()\">\n        <i class=\"fas fa-trash\" aria-hidden=\"true\"></i>\n    </button>\n</div>\n","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { NgbActiveModal, NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { ExternalSourceEntry } from '../../../../../../../core/shared/external-source-entry.model';\nimport { MetadataValue } from '../../../../../../../core/shared/metadata.models';\nimport { Metadata } from '../../../../../../../core/shared/metadata.utils';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../../../../../../core/data/remote-data';\nimport { PaginatedList } from '../../../../../../../core/data/paginated-list.model';\nimport { SearchResult } from '../../../../../../search/models/search-result.model';\nimport { Item } from '../../../../../../../core/shared/item.model';\nimport { RelationshipOptions } from '../../../../models/relationship-options.model';\nimport { LookupRelationService } from '../../../../../../../core/data/lookup-relation.service';\nimport { PaginatedSearchOptions } from '../../../../../../search/models/paginated-search-options.model';\nimport { CollectionElementLinkType } from '../../../../../../object-collection/collection-element-link.type';\nimport { Context } from '../../../../../../../core/shared/context.model';\nimport { SelectableListService } from '../../../../../../object-list/selectable-list/selectable-list.service';\nimport { ListableObject } from '../../../../../../object-collection/shared/listable-object.model';\nimport { ItemDataService } from '../../../../../../../core/data/item-data.service';\nimport { PaginationComponentOptions } from '../../../../../../pagination/pagination-component-options.model';\nimport { getFirstSucceededRemoteData, getRemoteDataPayload } from '../../../../../../../core/shared/operators';\nimport { switchMap, take } from 'rxjs/operators';\nimport { ItemSearchResult } from '../../../../../../object-collection/shared/item-search-result.model';\nimport { NotificationsService } from '../../../../../../notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ItemType } from '../../../../../../../core/shared/item-relationships/item-type.model';\nimport { SubmissionImportExternalCollectionComponent } from '../../../../../../../submission/import-external/import-external-collection/submission-import-external-collection.component';\nimport { CollectionListEntry } from '../../../../../../collection-dropdown/collection-dropdown.component';\n\n/**\n * The possible types of import for the external entry\n */\nexport enum ImportType {\n  None = 'None',\n  LocalEntity = 'LocalEntity',\n  LocalAuthority = 'LocalAuthority',\n  NewEntity = 'NewEntity',\n  NewAuthority = 'NewAuthority'\n}\n\n@Component({\n  selector: 'ds-external-source-entry-import-modal',\n  styleUrls: ['./external-source-entry-import-modal.component.scss'],\n  templateUrl: './external-source-entry-import-modal.component.html'\n})\n/**\n * Component to display a modal window for importing an external source entry\n * Shows information about the selected entry and a selectable list of local entities and authorities with similar names\n * and the ability to add one of those results to the selection instead of the external entry.\n * The other option is to import the external entry as a new entity or authority into the repository.\n */\nexport class ExternalSourceEntryImportModalComponent implements OnInit {\n  /**\n   * The prefix for every i18n key within this modal\n   */\n  labelPrefix = 'submission.sections.describe.relationship-lookup.external-source.import-modal.';\n\n  /**\n   * The label to use for all messages (added to the end of relevant i18n keys)\n   */\n  label: string;\n\n  /**\n   * The external source entry\n   */\n  externalSourceEntry: ExternalSourceEntry;\n\n  /**\n   * The item in submission\n   */\n  item: Item;\n\n  /**\n   * The current relationship-options used for filtering results\n   */\n  relationship: RelationshipOptions;\n\n  /**\n   * The metadata value for the entry's uri\n   */\n  uri: MetadataValue;\n\n  /**\n   * Local entities with a similar name\n   */\n  localEntitiesRD$: Observable<RemoteData<PaginatedList<SearchResult<Item>>>>;\n\n  /**\n   * Search options to use for fetching similar results\n   */\n  searchOptions: PaginatedSearchOptions;\n\n  /**\n   * The type of link to render in listable elements\n   */\n  linkTypes = CollectionElementLinkType;\n\n  /**\n   * The context we're currently in (submission)\n   */\n  context = Context.EntitySearchModalWithNameVariants;\n\n  /**\n   * List ID for selecting local entities\n   */\n  entityListId = 'external-source-import-entity';\n\n  /**\n   * List ID for selecting local authorities\n   */\n  authorityListId = 'external-source-import-authority';\n\n  /**\n   * ImportType enum\n   */\n  importType = ImportType;\n\n  /**\n   * The type of import the user currently has selected\n   */\n  selectedImportType = ImportType.None;\n\n  /**\n   * The selected local entity\n   */\n  selectedEntity: ListableObject;\n\n  /**\n   * The selected local authority\n   */\n  selectedAuthority: ListableObject;\n\n  /**\n   * An object has been imported, send it to the parent component\n   */\n  importedObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * Should it display the ability to import the entry as an authority?\n   */\n  authorityEnabled = false;\n\n  /**\n   * The entity types compatible with the given external source\n   */\n  relatedEntityType: ItemType;\n\n  /**\n   * The modal for the collection selection\n   */\n  modalRef: NgbModalRef;\n\n  constructor(public modal: NgbActiveModal,\n              public lookupRelationService: LookupRelationService,\n              private modalService: NgbModal,\n              private selectService: SelectableListService,\n              private itemService: ItemDataService,\n              private notificationsService: NotificationsService,\n              private translateService: TranslateService) {\n  }\n\n  ngOnInit(): void {\n    this.uri = Metadata.first(this.externalSourceEntry.metadata, 'dc.identifier.uri');\n    const pagination = Object.assign(new PaginationComponentOptions(), { id: 'external-entry-import', pageSize: 5 });\n    this.searchOptions = Object.assign(new PaginatedSearchOptions({ query: this.externalSourceEntry.value, pagination: pagination }));\n    this.localEntitiesRD$ = this.lookupRelationService.getLocalResults(this.relationship, this.searchOptions);\n  }\n\n  /**\n   * Close the window\n   */\n  close() {\n    this.modal.close();\n  }\n\n  /**\n   * Perform the import of the external entry\n   */\n  import() {\n    switch (this.selectedImportType) {\n      case ImportType.LocalEntity : {\n        this.importLocalEntity();\n        break;\n      }\n      case ImportType.NewEntity : {\n        this.importNewEntity();\n        break;\n      }\n      case ImportType.LocalAuthority : {\n        this.importLocalAuthority();\n        break;\n      }\n      case ImportType.NewAuthority : {\n        this.importNewAuthority();\n        break;\n      }\n    }\n    this.selectedImportType = ImportType.None;\n    this.deselectAllLists();\n    this.close();\n  }\n\n  /**\n   * Import the selected local entity\n   */\n  importLocalEntity() {\n    if (this.selectedEntity !== undefined) {\n      this.notificationsService.success(this.translateService.get(this.labelPrefix + this.label + '.added.local-entity'));\n      this.importedObject.emit(this.selectedEntity);\n    }\n  }\n\n  /**\n   * Create and import a new entity from the external entry\n   */\n  importNewEntity() {\n    this.modalRef = this.modalService.open(SubmissionImportExternalCollectionComponent, {\n      size: 'lg',\n    });\n    this.modalRef.componentInstance.entityType = this.relatedEntityType.label;\n\n    this.modalRef.componentInstance.selectedEvent.pipe(\n      switchMap((collectionListEntry: CollectionListEntry) => {\n        return this.itemService.importExternalSourceEntry(this.externalSourceEntry, collectionListEntry.collection.id).pipe(\n          getFirstSucceededRemoteData(),\n          getRemoteDataPayload(),\n          take(1)\n        );\n      })\n    ).subscribe((item: Item) => {\n      this.lookupRelationService.removeLocalResultsCache();\n      const searchResult = Object.assign(new ItemSearchResult(), {\n        indexableObject: item\n      });\n      this.notificationsService.success(this.translateService.get(this.labelPrefix + this.label + '.added.new-entity'));\n      this.modalRef.close();\n      this.importedObject.emit(searchResult);\n    });\n  }\n\n  /**\n   * Import the selected local authority\n   */\n  importLocalAuthority() {\n    // TODO: Implement ability to import local authorities\n  }\n\n  /**\n   * Create and import a new authority from the external entry\n   */\n  importNewAuthority() {\n    // TODO: Implement ability to import new authorities\n  }\n\n  /**\n   * Deselected a local entity\n   */\n  deselectEntity() {\n    this.selectedEntity = undefined;\n    if (this.selectedImportType === ImportType.LocalEntity) {\n      this.selectedImportType = ImportType.None;\n    }\n  }\n\n  /**\n   * Selected a local entity\n   * @param entity\n   */\n  selectEntity(entity) {\n    this.selectedEntity = entity;\n    this.selectedImportType = ImportType.LocalEntity;\n  }\n\n  /**\n   * Selected/deselected the new entity option\n   */\n  selectNewEntity() {\n    if (this.selectedImportType === ImportType.NewEntity) {\n      this.selectedImportType = ImportType.None;\n    } else {\n      this.selectedImportType = ImportType.NewEntity;\n      this.deselectAllLists();\n    }\n  }\n\n  /**\n   * Deselected a local authority\n   */\n  deselectAuthority() {\n    this.selectedAuthority = undefined;\n    if (this.selectedImportType === ImportType.LocalAuthority) {\n      this.selectedImportType = ImportType.None;\n    }\n  }\n\n  /**\n   * Selected a local authority\n   * @param authority\n   */\n  selectAuthority(authority) {\n    this.selectedAuthority = authority;\n    this.selectedImportType = ImportType.LocalAuthority;\n  }\n\n  /**\n   * Selected/deselected the new authority option\n   */\n  selectNewAuthority() {\n    if (this.selectedImportType === ImportType.NewAuthority) {\n      this.selectedImportType = ImportType.None;\n    } else {\n      this.selectedImportType = ImportType.NewAuthority;\n      this.deselectAllLists();\n    }\n  }\n\n  /**\n   * Deselect every element from both entity and authority lists\n   */\n  deselectAllLists() {\n    this.selectService.deselectAll(this.entityListId);\n    this.selectService.deselectAll(this.authorityListId);\n  }\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title\" id=\"modal-title\">{{ (labelPrefix + label + '.title') | translate }}</h4>\n  <button type=\"button\" class=\"close\" aria-label=\"Close button\" aria-describedby=\"modal-title\"\n          (click)=\"modal.dismiss()\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</div>\n<div class=\"modal-body\">\n  <h4>{{ (labelPrefix + 'head.' + externalSourceEntry.externalSource | translate) }}</h4>\n  <div id=\"external-source-entry-information\" class=\"mb-3\">\n    <div><span>{{externalSourceEntry.display}}</span></div>\n    <div *ngIf=\"uri\"><a href=\"{{uri.value}}\">{{uri.value}}</a></div>\n  </div>\n\n  <h4>{{ (labelPrefix + 'select' | translate) }}</h4>\n\n  <div id=\"external-source-entry-entities\" class=\"mb-3\">\n    <h5 class=\"font-weight-bold\">{{ (labelPrefix + 'entities' | translate) }}</h5>\n\n    <ds-search-results *ngIf=\"(localEntitiesRD$ | async)?.payload?.page?.length > 0\"\n                       [searchResults]=\"(localEntitiesRD$ | async)\"\n                       [sortConfig]=\"this.lookupRelationService.searchConfig?.sort\"\n                       [searchConfig]=\"this.lookupRelationService.searchConfig\"\n                       [selectable]=\"true\"\n                       [disableHeader]=\"true\"\n                       [hidePaginationDetail]=\"true\"\n                       [selectionConfig]=\"{ repeatable: false, listId: entityListId }\"\n                       [linkType]=\"linkTypes.ExternalLink\"\n                       [context]=\"context\"\n                       (deselectObject)=\"deselectEntity()\"\n                       (selectObject)=\"selectEntity($event)\">\n    </ds-search-results>\n    <div class=\"ml-4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"new-entity\" id=\"new-entity\" value=\"new-entity\" (click)=\"selectNewEntity()\" [checked]=\"selectedImportType === importType.NewEntity\" />\n      <label class=\"form-check-label\" for=\"new-entity\">{{ (labelPrefix + 'entities.new' | translate) }}</label>\n    </div>\n  </div>\n  <div id=\"external-source-entry-authority\" *ngIf=\"authorityEnabled\">\n    <h5 class=\"font-weight-bold\">{{ (labelPrefix + 'authority' | translate) }}</h5>\n\n    <div class=\"ml-4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"new-authority\" id=\"new-authority\" value=\"new-authority\" (click)=\"selectNewAuthority()\" [checked]=\"selectedImportType === importType.NewAuthority\" />\n      <label class=\"form-check-label\" for=\"new-authority\">{{ (labelPrefix + 'authority.new' | translate) }}</label>\n    </div>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <div>\n    <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"close()\">{{ (labelPrefix + 'cancel' | translate) }}</button>\n  </div>\n  <div>\n    <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"selectedImportType === importType.None\" (click)=\"import()\">{{ (labelPrefix + 'import' | translate) }}</button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { SEARCH_CONFIG_SERVICE } from '../../../../../../my-dspace-page/my-dspace-page.component';\nimport { SearchConfigurationService } from '../../../../../../core/shared/search/search-configuration.service';\nimport { Router } from '@angular/router';\nimport { ExternalSourceService } from '../../../../../../core/data/external-source.service';\nimport { RemoteData } from '../../../../../../core/data/remote-data';\nimport { PaginatedList } from '../../../../../../core/data/paginated-list.model';\nimport { ExternalSourceEntry } from '../../../../../../core/shared/external-source-entry.model';\nimport { ExternalSource } from '../../../../../../core/shared/external-source.model';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { PaginatedSearchOptions } from '../../../../../search/models/paginated-search-options.model';\nimport { Context } from '../../../../../../core/shared/context.model';\nimport { ListableObject } from '../../../../../object-collection/shared/listable-object.model';\nimport { fadeIn, fadeInOut } from '../../../../../animations/fade';\nimport { PaginationComponentOptions } from '../../../../../pagination/pagination-component-options.model';\nimport { RelationshipOptions } from '../../../models/relationship-options.model';\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { ExternalSourceEntryImportModalComponent } from './external-source-entry-import-modal/external-source-entry-import-modal.component';\nimport { hasValue } from '../../../../../empty.util';\nimport { SelectableListService } from '../../../../../object-list/selectable-list/selectable-list.service';\nimport { Item } from '../../../../../../core/shared/item.model';\nimport { Collection } from '../../../../../../core/shared/collection.model';\nimport { PaginationService } from '../../../../../../core/pagination/pagination.service';\nimport { Observable, Subscription } from 'rxjs';\nimport { ItemType } from '../../../../../../core/shared/item-relationships/item-type.model';\nimport { getFirstCompletedRemoteData } from '../../../../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-dynamic-lookup-relation-external-source-tab',\n  styleUrls: ['./dynamic-lookup-relation-external-source-tab.component.scss'],\n  templateUrl: './dynamic-lookup-relation-external-source-tab.component.html',\n  providers: [\n    {\n      provide: SEARCH_CONFIG_SERVICE,\n      useClass: SearchConfigurationService\n    }\n  ],\n  animations: [\n    fadeIn,\n    fadeInOut\n  ]\n})\n/**\n * Component rendering the tab content of an external source during submission lookup\n * Shows a list of entries matching the current search query with the option to import them into the repository\n */\nexport class DsDynamicLookupRelationExternalSourceTabComponent implements OnInit, OnDestroy {\n  /**\n   * The label to use for all messages (added to the end of relevant i18n keys)\n   */\n  @Input() label: string;\n\n  /**\n   * The ID of the list to add/remove selected items to/from\n   */\n  @Input() listId: string;\n\n  /**\n   * The item in submission\n   */\n  @Input() item: Item;\n\n  /**\n   * The collection the user is submitting an item into\n   */\n  @Input() collection: Collection;\n\n  /**\n   * The relationship-options for the current lookup\n   */\n  @Input() relationship: RelationshipOptions;\n\n  /**\n   * The context to displaying lists for\n   */\n  @Input() context: Context;\n  @Input() repeatable: boolean;\n  /**\n   * Emit an event when an object has been imported (or selected from similar local entries)\n   */\n  @Output() importedObject: EventEmitter<ListableObject> = new EventEmitter<ListableObject>();\n\n  /**\n   * The initial pagination options\n   */\n  initialPagination = Object.assign(new PaginationComponentOptions(), {\n    id: 'spc',\n    pageSize: 5\n  });\n\n  /**\n   * The current pagination options\n   */\n  currentPagination$: Observable<PaginationComponentOptions>;\n\n  /**\n   * The external source we're selecting entries for\n   */\n  @Input() externalSource: ExternalSource;\n\n  /**\n   * The displayed list of entries\n   */\n  entriesRD$: Observable<RemoteData<PaginatedList<ExternalSourceEntry>>>;\n\n  /**\n   * Config to use for the import buttons\n   */\n  importConfig;\n\n  /**\n   * The modal for importing the entry\n   */\n  modalRef: NgbModalRef;\n\n  /**\n   * Subscription to the modal's importedObject event-emitter\n   */\n  importObjectSub: Subscription;\n\n  /**\n   * The entity types compatible with the given external source\n   */\n  relatedEntityType: ItemType;\n\n  constructor(private router: Router,\n              public searchConfigService: SearchConfigurationService,\n              private externalSourceService: ExternalSourceService,\n              private modalService: NgbModal,\n              private selectableListService: SelectableListService,\n              private paginationService: PaginationService\n  ) {\n  }\n\n  /**\n   * Get the entries for the selected external source\n   */\n  ngOnInit(): void {\n    this.externalSource.entityTypes.pipe(\n      getFirstCompletedRemoteData(),\n      map((entityTypesRD: RemoteData<PaginatedList<ItemType>>) => {\n        return (entityTypesRD.hasSucceeded && entityTypesRD.payload.totalElements > 0) ? entityTypesRD.payload.page[0] : null;\n      })\n    ).subscribe((entityType: ItemType) => {\n      this.relatedEntityType = entityType;\n    });\n\n    this.resetRoute();\n    this.entriesRD$ = this.searchConfigService.paginatedSearchOptions.pipe(\n      switchMap((searchOptions: PaginatedSearchOptions) =>\n        this.externalSourceService.getExternalSourceEntries(this.externalSource.id, searchOptions).pipe(startWith(undefined)))\n    );\n    this.currentPagination$ = this.paginationService.getCurrentPagination(this.searchConfigService.paginationID, this.initialPagination);\n    this.importConfig = {\n      buttonLabel: 'submission.sections.describe.relationship-lookup.external-source.import-button-title.' + this.label\n    };\n  }\n\n  /**\n   * Start the import of an entry by opening up an import modal window\n   * @param entry The entry to import\n   */\n  import(entry) {\n    this.modalRef = this.modalService.open(ExternalSourceEntryImportModalComponent, {\n      size: 'lg',\n      container: 'ds-dynamic-lookup-relation-modal'\n    });\n    const modalComp = this.modalRef.componentInstance;\n    modalComp.externalSourceEntry = entry;\n    modalComp.item = this.item;\n    modalComp.collection = this.collection;\n    modalComp.relationship = this.relationship;\n    modalComp.label = this.label;\n    modalComp.relatedEntityType = this.relatedEntityType;\n    this.importObjectSub = modalComp.importedObject.subscribe((object) => {\n      this.selectableListService.selectSingle(this.listId, object);\n      this.importedObject.emit(object);\n    });\n  }\n\n  /**\n   * Unsubscribe from open subscriptions\n   */\n  ngOnDestroy(): void {\n    if (hasValue(this.importObjectSub)) {\n      this.importObjectSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Method to reset the route when the tab is opened to make sure no strange pagination issues appears\n   */\n  resetRoute() {\n    this.paginationService.updateRoute(this.searchConfigService.paginationID, {\n      page: 1,\n      pageSize: 5\n    });\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-4\">\n    <h3>{{ 'submission.sections.describe.relationship-lookup.selection-tab.settings' | translate}}</h3>\n    <ds-page-size-selector></ds-page-size-selector>\n  </div>\n  <div class=\"col-8\">\n    <ds-search-form [query]=\"(searchConfigService.paginatedSearchOptions | async)?.query\"\n                    [inPlaceSearch]=\"true\"\n                    [searchPlaceholder]=\"'submission.sections.describe.relationship-lookup.selection-tab.search-form.placeholder' | translate\">\n    </ds-search-form>\n    <div>\n      <h3>{{ 'submission.sections.describe.relationship-lookup.selection-tab.title.' + externalSource.id | translate}}</h3>\n      <ng-container *ngVar=\"(entriesRD$ | async) as entriesRD\">\n        <ds-viewable-collection *ngIf=\"entriesRD?.hasSucceeded && !entriesRD?.isLoading && entriesRD?.payload?.page?.length > 0\" @fadeIn\n                                [objects]=\"entriesRD\"\n                                [selectionConfig]=\"{ repeatable: repeatable, listId: listId }\"\n                                [config]=\"(currentPagination$ |async)\"\n                                [hideGear]=\"true\"\n                                [context]=\"context\"\n                                [importable]=\"true\"\n                                [importConfig]=\"importConfig\"\n                                (importObject)=\"import($event)\">\n        </ds-viewable-collection>\n        <ds-loading *ngIf=\"!entriesRD || entriesRD?.isLoading\"\n                    message=\"{{'loading.search-results' | translate}}\"></ds-loading>\n        <ds-error   *ngIf=\"entriesRD?.hasFailed && (!entriesRD?.errorMessage || entriesRD?.statusCode != 400)\"\n                    message=\"{{'error.search-results' | translate}}\"></ds-error>\n        <div *ngIf=\"entriesRD?.payload?.page?.length == 0 || entriesRD?.statusCode == 400\" id=\"empty-external-entry-list\">\n          {{ 'search.results.empty' | translate }}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"]}