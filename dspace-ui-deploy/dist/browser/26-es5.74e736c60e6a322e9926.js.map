{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/login\\-page\\/login\\-page\\.component$ namespace object","webpack:///src/app/login-page/login-page.component.ts","webpack:///src/app/login-page/login-page.component.html","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/login-page/themed-login-page.component.ts","webpack:///src/app/login-page/login-page.module.ts","webpack:///src/app/login-page/login-page-routing.module.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","constructor","breadcrumbService","resolve","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","map","webpackAsyncContext","req","__webpack_require__","o","Promise","then","e","code","ids","id","keys","Object","module","exports","LoginPageComponent","store","ngOnInit","queryParamsObs","queryParams","authenticated","select","sub","pipe","params","token","expired","subscribe","auth","authToken","dispatch","ngOnDestroy","unsubscribe","I18nBreadcrumbsService","getBreadcrumbs","ThemedLoginPageComponent","LoginPageModule","LoginPageRoutingModule","getComponentName","importThemedComponent","themeName","importUnthemedComponent","forChild","path","pathMatch","component","breadcrumb","title","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","var map = {\n\t\"./custom/app/login-page/login-page.component\": [\n\t\t\"ammI\",\n\t\t63\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"or6x\";\nmodule.exports = webpackAsyncContext;","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { combineLatest as observableCombineLatest, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { AppState } from '../app.reducer';\nimport {\n  AddAuthenticationMessageAction,\n  AuthenticatedAction,\n  AuthenticationSuccessAction,\n  ResetAuthenticationMessagesAction\n} from '../core/auth/auth.actions';\nimport { hasValue, isNotEmpty } from '../shared/empty.util';\nimport { AuthTokenInfo } from '../core/auth/models/auth-token-info.model';\nimport { isAuthenticated } from '../core/auth/selectors';\n\n/**\n * This component represents the login page\n */\n@Component({\n  selector: 'ds-login-page',\n  styleUrls: ['./login-page.component.scss'],\n  templateUrl: './login-page.component.html'\n})\nexport class LoginPageComponent implements OnDestroy, OnInit {\n\n  /**\n   * Subscription to unsubscribe onDestroy\n   * @type {Subscription}\n   */\n  sub: Subscription;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ActivatedRoute} route\n   * @param {Store<AppState>} store\n   */\n  constructor(private route: ActivatedRoute,\n              private store: Store<AppState>) {}\n\n  /**\n   * Initialize instance variables\n   */\n  ngOnInit() {\n    const queryParamsObs = this.route.queryParams;\n    const authenticated = this.store.select(isAuthenticated);\n    this.sub = observableCombineLatest(queryParamsObs, authenticated).pipe(\n      filter(([params, auth]) => isNotEmpty(params.token) || isNotEmpty(params.expired)),\n      take(1)\n    ).subscribe(([params, auth]) => {\n      const token = params.token;\n      let authToken: AuthTokenInfo;\n      if (!auth) {\n        if (isNotEmpty(token)) {\n          authToken = new AuthTokenInfo(token);\n          this.store.dispatch(new AuthenticatedAction(authToken));\n        } else if (isNotEmpty(params.expired)) {\n          this.store.dispatch(new AddAuthenticationMessageAction('auth.messages.expired'));\n        }\n      } else {\n        if (isNotEmpty(token)) {\n          authToken = new AuthTokenInfo(token);\n          this.store.dispatch(new AuthenticationSuccessAction(authToken));\n        }\n      }\n    });\n  }\n\n  /**\n   * Unsubscribe from subscription\n   */\n  ngOnDestroy() {\n    if (hasValue(this.sub)) {\n      this.sub.unsubscribe();\n    }\n    // Clear all authentication messages when leaving login page\n    this.store.dispatch(new ResetAuthenticationMessagesAction());\n  }\n}\n","<div class=\"container w-100 h-100\">\n  <div class=\"text-center mt-5 row justify-content-center\">\n    <div>\n      <img class=\"mb-4 login-logo\" src=\"assets/images/dspace-logo.png\" alt=\"{{'repository.image.logo' | translate}}\">\n      <h1 class=\"h3 mb-0 font-weight-normal\">{{\"login.form.header\" | translate}}</h1>\n      <ds-log-in\n      [isStandalonePage]=\"true\"></ds-log-in>\n    </div>\n  </div>\n</div>\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../shared/theme-support/themed.component';\nimport { LoginPageComponent } from './login-page.component';\n\n/**\n * Themed wrapper for LoginPageComponent\n */\n@Component({\n  selector: 'ds-themed-login-page',\n  styleUrls: [],\n  templateUrl: './../shared/theme-support/themed.component.html'\n})\nexport class ThemedLoginPageComponent extends ThemedComponent<LoginPageComponent> {\n  protected getComponentName(): string {\n    return 'LoginPageComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../themes/${themeName}/app/login-page/login-page.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./login-page.component`);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { LoginPageComponent } from './login-page.component';\nimport { LoginPageRoutingModule } from './login-page-routing.module';\nimport { ThemedLoginPageComponent } from './themed-login-page.component';\n\n@NgModule({\n  imports: [\n    LoginPageRoutingModule,\n    CommonModule,\n    SharedModule,\n  ],\n  declarations: [\n    LoginPageComponent,\n    ThemedLoginPageComponent\n  ]\n})\nexport class LoginPageModule {\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { I18nBreadcrumbsService } from '../core/breadcrumbs/i18n-breadcrumbs.service';\nimport { ThemedLoginPageComponent } from './themed-login-page.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      { path: '', pathMatch: 'full', component: ThemedLoginPageComponent, resolve: { breadcrumb: I18nBreadcrumbResolver }, data: { breadcrumbKey: 'login', title: 'login.title' } }\n    ])\n  ],\n  providers: [\n    I18nBreadcrumbResolver,\n    I18nBreadcrumbsService\n  ]\n})\nexport class LoginPageRoutingModule {\n}\n","<ng-template #vcr></ng-template>\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}