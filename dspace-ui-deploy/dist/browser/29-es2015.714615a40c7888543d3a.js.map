{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/process-page/form/process-form.component.html","webpack:///src/app/process-page/form/process-form.component.ts","webpack:///src/app/process-page/new/new-process.component.html","webpack:///src/app/process-page/new/new-process.component.ts","webpack:///src/app/process-page/overview/process-overview.component.html","webpack:///src/app/process-page/overview/process-overview.component.ts","webpack:///src/app/process-page/process-page.resolver.ts","webpack:///src/app/process-page/detail/process-detail-field/process-detail-field.component.ts","webpack:///src/app/process-page/detail/process-detail-field/process-detail-field.component.html","webpack:///src/app/process-page/detail/process-detail.component.html","webpack:///src/app/process-page/detail/process-detail.component.ts","webpack:///src/app/process-page/process-breadcrumbs.service.ts","webpack:///src/app/process-page/process-breadcrumb.resolver.ts","webpack:///src/app/process-page/process-page-routing.module.ts","webpack:///src/app/process-page/form/scripts-select/scripts-select.component.html","webpack:///src/app/process-page/form/scripts-select/scripts-select.component.ts","webpack:///src/app/process-page/scripts/script-parameter-type.model.ts","webpack:///src/app/process-page/form/script-help/script-help.component.html","webpack:///src/app/process-page/form/script-help/script-help.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/string-value-input/string-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/string-value-input/string-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/date-value-input/date-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/date-value-input/date-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/file-value-input/file-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/file-value-input/file-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/boolean-value-input/boolean-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/boolean-value-input/boolean-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/parameter-value-input.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-value-input/parameter-value-input.component.ts","webpack:///src/app/process-page/form/process-parameters/parameter-select/parameter-select.component.html","webpack:///src/app/process-page/form/process-parameters/parameter-select/parameter-select.component.ts","webpack:///src/app/process-page/form/process-parameters/process-parameters.component.html","webpack:///src/app/process-page/form/process-parameters/process-parameters.component.ts","webpack:///src/app/process-page/process-page.module.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","constructor","breadcrumbService","resolve","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","ProcessFormComponent","scriptService","notificationsService","translationService","requestService","router","selectedScript","undefined","process","parameters","files","missingParameters","ngOnInit","submitForm","form","validateForm","isRequiredMissing","stringParameters","map","parameter","name","value","checkValue","invoke","id","pipe","g","subscribe","rd","hasSucceeded","title","get","content","success","sendBack","error","processParameter","valid","Object","keys","controls","forEach","invalid","markAsDirty","setParams","param","requiredParams","filter","mandatory","rp","includes","push","length","removeByHrefSubstring","navigateByUrl","controlContainerFactory","controlContainer","NewProcessComponent","processService","linkService","snapshot","queryParams","fromExisting$","findById","script$","resolveLink","switchMap","script","ProcessOverviewComponent","paginationService","ePersonService","config","assign","elementsPerPage","pageConfig","pageSize","dateFormat","setProcesses","processesRD$","getFindListOptions","findAll","getEpersonName","eperson","ngOnDestroy","clearPagination","ProcessPageResolver","params","ProcessDetailFieldComponent","ProcessDetailComponent","bitstreamDataService","nameService","zone","authService","http","AlertTypeEnum","outputLogs$","BehaviorSubject","showOutputLogs","retrievingOutputLogs$","processRD$","filesRD$","getFiles","processId","getFileName","bitstream","getName","showProcessOutputLogs","console","log","next","runOutsideAngular","processOutputRD$","findByHref","_links","output","href","outputLogFileUrl$","tap","processOutputFileRD","statusCode","run","processOutput","payload","getShortlivedToken","take","token","toString","getTextFile","finalize","logs","filename","responseType","isProcessFinished","processStatus","COMPLETED","FAILED","ProcessBreadcrumbsService","getBreadcrumbs","scriptName","ProcessBreadcrumbResolver","object","substr","indexOf","ProcessPageRoutingModule","forChild","path","breadcrumb","canActivate","children","component","ScriptsSelectComponent","select","EventEmitter","scripts$","paginatedList","page","routeSub","distinctUntilChanged","scripts","find","_selectedScript","emit","navigate","unsubscribe","provide","ControlContainer","useFactory","deps","Optional","NgForm","ScriptParameterType","STRING","DATE","BOOLEAN","FILE","OUTPUT","ScriptHelpComponent","parameterTypes","ValueInputComponent","updateValue","StringValueInputComponent","initialValue","setValue","DateValueInputComponent","FileValueInputComponent","setFile","fileObject","BooleanValueInputComponent","ParameterValueInputComponent","removeParameter","ParameterSelectComponent","parameterValue","changeParameter","selectedScriptParameter","selectedParameter","selectedParameterValue","ProcessParametersComponent","updateParameters","initialParams","parameterValues","ngOnChanges","changes","initParameters","initializeParameter","updateParameter","index","addParameter","i","ProcessPageModule","I18nBreadcrumbsService","Breadcrumb","text"],"mappings":"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","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <h2 class=\"col-12\">\n            {{headerKey | translate}}\n        </h2>\n        <div class=\"col-12 col-md-6\">\n            <form #form=\"ngForm\" (ngSubmit)=\"submitForm(form)\">\n                <ds-scripts-select [script]=\"selectedScript\" (select)=\"selectedScript = $event; parameters = undefined\"></ds-scripts-select>\n                <ds-process-parameters [initialParams]=\"parameters\" [script]=\"selectedScript\" (updateParameters)=\"parameters = $event\"></ds-process-parameters>\n                <button [routerLink]=\"['/processes']\" class=\"btn btn-light float-left\">{{ 'process.new.cancel' | translate }}</button>\n                <button type=\"submit\" class=\"btn btn-light float-right\">{{ 'process.new.submit' | translate }}</button>\n            </form>\n        </div>\n        <div class=\"col-12 col-md-6\">\n            <ds-script-help [script]=\"selectedScript\"></ds-script-help>\n        </div>\n    </div>\n\n    <div *ngIf=\"missingParameters.length > 0\" class=\"mt-3 alert alert-danger validation-error\">\n        {{'process.new.parameter.required.missing' | translate}}\n        <ul>\n            <li *ngFor=\"let missing of missingParameters\">{{missing}}</li>\n        </ul>\n    </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Script } from '../scripts/script.model';\nimport { Process } from '../processes/process.model';\nimport { ProcessParameter } from '../processes/process-parameter.model';\nimport { ScriptDataService } from '../../core/data/processes/script-data.service';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { ScriptParameter } from '../scripts/script-parameter.model';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RequestService } from '../../core/data/request.service';\nimport { Router } from '@angular/router';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { getProcessListRoute } from '../process-page-routing.paths';\nimport { isEmpty } from '../../shared/empty.util';\n\n/**\n * Component to create a new script\n */\n@Component({\n  selector: 'ds-process-form',\n  templateUrl: './process-form.component.html',\n  styleUrls: ['./process-form.component.scss'],\n})\nexport class ProcessFormComponent implements OnInit {\n  /**\n   * The currently selected script\n   */\n  @Input() public selectedScript: Script = undefined;\n\n  /**\n   * The process to create\n   */\n  @Input() public process: Process = undefined;\n\n  /**\n   * The parameter values to use to start the process\n   */\n  @Input() public parameters: ProcessParameter[] = [];\n\n  /**\n   * Optional files that are used as parameter values\n   */\n  public files: File[] = [];\n\n  /**\n   * Message key for the header of the form\n   */\n  @Input() public headerKey: string;\n\n  /**\n   * Contains the missing parameters on submission\n   */\n  public missingParameters = [];\n\n  constructor(\n    private scriptService: ScriptDataService,\n    private notificationsService: NotificationsService,\n    private translationService: TranslateService,\n    private requestService: RequestService,\n    private router: Router) {\n  }\n\n  ngOnInit(): void {\n    this.process = new Process();\n  }\n\n  /**\n   * Validates the form, sets the parameters to correct values and invokes the script with the correct parameters\n   * @param form\n   */\n  submitForm(form: NgForm) {\n    if (isEmpty(this.parameters)) {\n      this.parameters = [];\n    }\n    if (!this.validateForm(form) || this.isRequiredMissing()) {\n      return;\n    }\n\n    const stringParameters: ProcessParameter[] = this.parameters.map((parameter: ProcessParameter) => {\n        return {\n          name: parameter.name,\n          value: this.checkValue(parameter)\n        };\n      }\n    );\n    this.scriptService.invoke(this.selectedScript.id, stringParameters, this.files)\n      .pipe(getFirstCompletedRemoteData())\n      .subscribe((rd: RemoteData<Process>) => {\n        if (rd.hasSucceeded) {\n          const title = this.translationService.get('process.new.notification.success.title');\n          const content = this.translationService.get('process.new.notification.success.content');\n          this.notificationsService.success(title, content);\n          this.sendBack();\n        } else {\n          const title = this.translationService.get('process.new.notification.error.title');\n          const content = this.translationService.get('process.new.notification.error.content');\n          this.notificationsService.error(title, content);\n        }\n      });\n  }\n\n  /**\n   * Checks whether the parameter values are files\n   * Replaces file parameters by strings and stores the files in a separate list\n   * @param processParameter The parameter value to check\n   */\n  private checkValue(processParameter: ProcessParameter): string {\n    if (typeof processParameter.value === 'object') {\n      this.files = [...this.files, processParameter.value];\n      return processParameter.value.name;\n    }\n    return processParameter.value;\n  }\n\n  /**\n   * Validates the form\n   * Returns false if the form is invalid\n   * Returns true if the form is valid\n   * @param form The NgForm object to validate\n   */\n  private validateForm(form: NgForm) {\n    let valid = true;\n    Object.keys(form.controls).forEach((key) => {\n      if (form.controls[key].invalid) {\n        form.controls[key].markAsDirty();\n        valid = false;\n      }\n    });\n    return valid;\n  }\n\n  private isRequiredMissing() {\n    this.missingParameters = [];\n    const setParams: string[] = this.parameters\n      .map((param) => param.name);\n    const requiredParams: ScriptParameter[] = this.selectedScript.parameters.filter((param) => param.mandatory);\n    for (const rp of requiredParams) {\n      if (!setParams.includes(rp.name)) {\n        this.missingParameters.push(rp.name);\n      }\n    }\n    return this.missingParameters.length > 0;\n  }\n\n  private sendBack() {\n    this.requestService.removeByHrefSubstring('/processes');\n    /* should subscribe on the previous method to know the action is finished and then navigate,\n    will fix this when the removeByHrefSubstring changes are merged */\n    this.router.navigateByUrl(getProcessListRoute());\n  }\n}\n\nexport function controlContainerFactory(controlContainer?: ControlContainer) {\n  return controlContainer;\n}\n","<ng-container *ngIf=\"fromExisting$ && (fromExisting$ | async)\">\n    <ds-process-form *ngVar=\"fromExisting$ | async as process\" headerKey=\"process.new.header\" [selectedScript]=\"script$ | async\" [parameters]=\"process.parameters\"></ds-process-form>\n</ng-container>\n<ng-container *ngIf=\"!fromExisting$ || !(fromExisting$ | async)\">\n    <ds-process-form headerKey=\"process.new.header\"></ds-process-form>\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { Process } from '../processes/process.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProcessDataService } from '../../core/data/processes/process-data.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { LinkService } from '../../core/cache/builders/link.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\nimport { Script } from '../scripts/script.model';\n\n/**\n * Component to create a new script\n */\n@Component({\n  selector: 'ds-new-process',\n  templateUrl: './new-process.component.html',\n  styleUrls: ['./new-process.component.scss'],\n})\nexport class NewProcessComponent implements OnInit {\n  /**\n   * Emits preselected process if there is one\n   */\n  fromExisting$?: Observable<Process>;\n  /**\n   * Emits preselected script if there is one\n   */\n  script$?: Observable<Script>;\n\n  constructor(private route: ActivatedRoute, private processService: ProcessDataService, private linkService: LinkService) {\n  }\n\n  /**\n   * If there's an id parameter, use this the process with this identifier as presets for the form\n   */\n  ngOnInit() {\n    const id = this.route.snapshot.queryParams.id;\n    if (id) {\n      this.fromExisting$ = this.processService.findById(id).pipe(getFirstSucceededRemoteDataPayload());\n      this.script$ = this.fromExisting$.pipe(\n        map((process: Process) => this.linkService.resolveLink<Process>(process, followLink('script'))),\n        switchMap((process: Process) => process.script),\n        getFirstSucceededRemoteDataPayload()\n      );\n    }\n  }\n}\n","<div class=\"container\">\n    <div class=\"d-flex\">\n        <h2 class=\"flex-grow-1\">{{'process.overview.title' | translate}}</h2>\n        <button class=\"btn btn-lg btn-success \" routerLink=\"/processes/new\"><i class=\"fas fa-plus pr-2\"></i>{{'process.overview.new' | translate}}</button>\n    </div>\n    <ds-pagination *ngIf=\"(processesRD$ | async)?.payload?.totalElements > 0\"\n                   [paginationOptions]=\"pageConfig\"\n                   [pageInfoState]=\"(processesRD$ | async)?.payload\"\n                   [collectionSize]=\"(processesRD$ | async)?.payload?.totalElements\"\n                   [hideGear]=\"true\"\n                   [hidePagerWhenSinglePage]=\"true\">\n        <div class=\"table-responsive\">\n            <table class=\"table table-striped table-hover\">\n                <thead>\n                <tr>\n                    <th scope=\"col\">{{'process.overview.table.id' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.name' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.user' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.start' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.finish' | translate}}</th>\n                    <th scope=\"col\">{{'process.overview.table.status' | translate}}</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let process of (processesRD$ | async)?.payload?.page\">\n                    <td><a [routerLink]=\"['/processes/', process.processId]\">{{process.processId}}</a></td>\n                    <td><a [routerLink]=\"['/processes/', process.processId]\">{{process.scriptName}}</a></td>\n                    <td *ngVar=\"(getEpersonName(process.userId) | async) as ePersonName\">{{ePersonName}}</td>\n                    <td>{{process.startTime | date:dateFormat:'UTC'}}</td>\n                    <td>{{process.endTime | date:dateFormat:'UTC'}}</td>\n                    <td>{{process.processStatus}}</td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </ds-pagination>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { Process } from '../processes/process.model';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { FindListOptions } from '../../core/data/request.models';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ProcessDataService } from '../../core/data/processes/process-data.service';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-process-overview',\n  templateUrl: './process-overview.component.html',\n})\n/**\n * Component displaying a list of all processes in a paginated table\n */\nexport class ProcessOverviewComponent implements OnInit {\n\n  /**\n   * List of all processes\n   */\n  processesRD$: Observable<RemoteData<PaginatedList<Process>>>;\n\n  /**\n   * The current pagination configuration for the page used by the FindAll method\n   */\n  config: FindListOptions = Object.assign(new FindListOptions(), {\n    elementsPerPage: 20\n  });\n\n  /**\n   * The current pagination configuration for the page\n   */\n  pageConfig: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'po',\n    pageSize: 20\n  });\n\n  /**\n   * Date format to use for start and end time of processes\n   */\n  dateFormat = 'yyyy-MM-dd HH:mm:ss';\n\n  constructor(protected processService: ProcessDataService,\n              protected paginationService: PaginationService,\n              protected ePersonService: EPersonDataService) {\n  }\n\n  ngOnInit(): void {\n    this.setProcesses();\n  }\n\n  /**\n   * Send a request to fetch all processes for the current page\n   */\n  setProcesses() {\n    this.processesRD$ = this.paginationService.getFindListOptions(this.pageConfig.id, this.config).pipe(\n      switchMap((config) => this.processService.findAll(config))\n    );\n  }\n\n  /**\n   * Get the name of an EPerson by ID\n   * @param id  ID of the EPerson\n   */\n  getEpersonName(id: string): Observable<string> {\n    return this.ePersonService.findById(id).pipe(\n      getFirstSucceededRemoteDataPayload(),\n      map((eperson: EPerson) => eperson.name)\n    );\n  }\n  ngOnDestroy(): void {\n    this.paginationService.clearPagination(this.pageConfig.id);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Observable } from 'rxjs';\nimport { Process } from './processes/process.model';\nimport { followLink } from '../shared/utils/follow-link-config.model';\nimport { ProcessDataService } from '../core/data/processes/process-data.service';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific process before the route is activated\n */\n@Injectable()\nexport class ProcessPageResolver implements Resolve<RemoteData<Process>> {\n  constructor(private processService: ProcessDataService) {\n  }\n\n  /**\n   * Method for resolving a process based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Process>> Emits the found process based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Process>> {\n    return this.processService.findById(route.params.id, false, true, followLink('script')).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ds-process-detail-field',\n  templateUrl: './process-detail-field.component.html',\n})\n/**\n * A component displaying a single detail about a DSpace Process\n */\nexport class ProcessDetailFieldComponent {\n  /**\n   * I18n message for the header\n   */\n  @Input() title: string;\n}\n","<h4 class=\"mt-4\">{{title | translate}}</h4>\n<ng-content></ng-content>\n","<div class=\"container\" *ngVar=\"(processRD$ | async)?.payload as process\">\n    <div class=\"d-flex\">\n        <h2 class=\"flex-grow-1\">{{'process.detail.title' | translate:{id: process?.processId, name: process?.scriptName} }}</h2>\n        <div>\n            <button class=\"btn btn-lg btn-success \" routerLink=\"/processes/new\" [queryParams]=\"{id: process?.processId}\"><i class=\"fas fa-plus pr-2\"></i>{{'process.detail.create' | translate}}</button>\n        </div>\n    </div>\n    <ds-process-detail-field id=\"process-name\" [title]=\"'process.detail.script'\">\n        <div>{{ process?.scriptName }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"process?.parameters && process?.parameters?.length > 0\" id=\"process-arguments\" [title]=\"'process.detail.arguments'\">\n        <div *ngFor=\"let argument of process?.parameters\">{{ argument?.name }} {{ argument?.value }}</div>\n    </ds-process-detail-field>\n\n    <div *ngVar=\"(filesRD$ | async)?.payload?.page as files\">\n        <ds-process-detail-field *ngIf=\"files && files?.length > 0\" id=\"process-files\" [title]=\"'process.detail.output-files'\">\n          <ds-file-download-link *ngFor=\"let file of files; let last=last;\" [bitstream]=\"file\">\n            <span>{{getFileName(file)}}</span>\n            <span>({{(file?.sizeBytes) | dsFileSize }})</span>\n          </ds-file-download-link>\n        </ds-process-detail-field>\n    </div>\n\n    <ds-process-detail-field *ngIf=\"process && process.startTime\" id=\"process-start-time\" [title]=\"'process.detail.start-time' | translate\">\n        <div>{{ process.startTime | date:dateFormat:'UTC' }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"process && process.endTime\" id=\"process-end-time\" [title]=\"'process.detail.end-time' | translate\">\n        <div>{{ process.endTime | date:dateFormat:'UTC' }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"process && process.processStatus\" id=\"process-status\" [title]=\"'process.detail.status' | translate\">\n        <div>{{ process.processStatus }}</div>\n    </ds-process-detail-field>\n\n    <ds-process-detail-field *ngIf=\"isProcessFinished(process)\" id=\"process-output\" [title]=\"'process.detail.output'\">\n      <button *ngIf=\"!showOutputLogs && process?._links?.output?.href != undefined\" id=\"showOutputButton\" class=\"btn btn-primary\" (click)=\"showProcessOutputLogs()\">\n        {{ 'process.detail.logs.button' | translate }}\n      </button>\n      <ds-loading *ngIf=\"retrievingOutputLogs$ | async\" class=\"ds-loading\" message=\"{{ 'process.detail.logs.loading' | translate }}\"></ds-loading>\n      <pre class=\"font-weight-bold text-secondary bg-light p-3\"\n           *ngIf=\"showOutputLogs && (outputLogs$ | async)?.length > 0\">{{ (outputLogs$ | async) }}</pre>\n      <p id=\"no-output-logs-message\" *ngIf=\"(!(retrievingOutputLogs$ | async) && showOutputLogs)\n      && !(outputLogs$ | async) || (outputLogs$ | async)?.length == 0 || !process._links.output\">\n        {{ 'process.detail.logs.none' | translate }}\n      </p>\n    </ds-process-detail-field>\n\n    <div style=\"text-align: right;\">\n      <a class=\"btn btn-outline-secondary mt-3\" [routerLink]=\"'/processes'\">{{'process.detail.back' | translate}}</a>\n    </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Component, NgZone, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { finalize, map, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { BitstreamDataService } from '../../core/data/bitstream-data.service';\nimport { PaginatedList } from '../../core/data/paginated-list.model';\nimport { ProcessDataService } from '../../core/data/processes/process-data.service';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { Bitstream } from '../../core/shared/bitstream.model';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport {\n  getFirstSucceededRemoteDataPayload,\n  redirectOn4xx,\n  getFirstSucceededRemoteData\n} from '../../core/shared/operators';\nimport { URLCombiner } from '../../core/url-combiner/url-combiner';\nimport { AlertType } from '../../shared/alert/aletr-type';\nimport { hasValue } from '../../shared/empty.util';\nimport { ProcessStatus } from '../processes/process-status.model';\nimport { Process } from '../processes/process.model';\n\n@Component({\n  selector: 'ds-process-detail',\n  templateUrl: './process-detail.component.html',\n})\n/**\n * A component displaying detailed information about a DSpace Process\n */\nexport class ProcessDetailComponent implements OnInit {\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * The Process's Remote Data\n   */\n  processRD$: Observable<RemoteData<Process>>;\n\n  /**\n   * The Process's Output Files\n   */\n  filesRD$: Observable<RemoteData<PaginatedList<Bitstream>>>;\n\n  /**\n   * File link that contain the output logs with auth token\n   */\n  outputLogFileUrl$: Observable<string>;\n\n  /**\n   * The Process's Output logs\n   */\n  outputLogs$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  /**\n   * Boolean on whether or not to show the output logs\n   */\n  showOutputLogs;\n  /**\n   * When it's retrieving the output logs from backend, to show loading component\n   */\n  retrievingOutputLogs$: BehaviorSubject<boolean>;\n\n  /**\n   * Date format to use for start and end time of processes\n   */\n  dateFormat = 'yyyy-MM-dd HH:mm:ss ZZZZ';\n\n  constructor(protected route: ActivatedRoute,\n              protected router: Router,\n              protected processService: ProcessDataService,\n              protected bitstreamDataService: BitstreamDataService,\n              protected nameService: DSONameService,\n              private zone: NgZone,\n              protected authService: AuthService,\n              protected http: HttpClient) {\n  }\n\n  /**\n   * Initialize component properties\n   * Display a 404 if the process doesn't exist\n   */\n  ngOnInit(): void {\n    this.showOutputLogs = false;\n    this.retrievingOutputLogs$ = new BehaviorSubject<boolean>(false);\n    this.processRD$ = this.route.data.pipe(\n      map((data) => {\n        return data.process as RemoteData<Process>;\n      }),\n      redirectOn4xx(this.router, this.authService)\n    );\n\n    this.filesRD$ = this.processRD$.pipe(\n      getFirstSucceededRemoteDataPayload(),\n      switchMap((process: Process) => this.processService.getFiles(process.processId))\n    );\n  }\n\n  /**\n   * Get the name of a bitstream\n   * @param bitstream\n   */\n  getFileName(bitstream: Bitstream) {\n    return bitstream instanceof DSpaceObject ? this.nameService.getName(bitstream) : 'unknown';\n  }\n\n  /**\n   * Retrieves the process logs, while setting the loading subject to true.\n   * Sets the outputLogs when retrieved and sets the showOutputLogs boolean to show them and hide the button.\n   */\n  showProcessOutputLogs() {\n    console.log('showProcessOutputLogs');\n    this.retrievingOutputLogs$.next(true);\n    this.zone.runOutsideAngular(() => {\n      const processOutputRD$: Observable<RemoteData<Bitstream>> = this.processRD$.pipe(\n        getFirstSucceededRemoteDataPayload(),\n        switchMap((process: Process) => {\n          return this.bitstreamDataService.findByHref(process._links.output.href, false);\n        })\n      );\n      this.outputLogFileUrl$ = processOutputRD$.pipe(\n        getFirstSucceededRemoteData(),\n        tap((processOutputFileRD: RemoteData<Bitstream>) => {\n          if (processOutputFileRD.statusCode === 204) {\n            this.zone.run(() => this.retrievingOutputLogs$.next(false));\n            this.showOutputLogs = true;\n          }\n        }),\n        switchMap((processOutput: RemoteData<Bitstream>) => {\n          const url = processOutput.payload._links.content.href;\n          return this.authService.getShortlivedToken().pipe(take(1),\n            map((token: string) => {\n              return hasValue(token) ? new URLCombiner(url, `?authentication-token=${token}`).toString() : url;\n            }));\n        })\n      );\n    });\n     this.outputLogFileUrl$.pipe(take(1),\n      switchMap((url: string) => {\n        return this.getTextFile(url);\n      }),\n      finalize(() => this.zone.run(() => this.retrievingOutputLogs$.next(false)))\n    ).subscribe((logs: string) => {\n       this.outputLogs$.next(logs);\n     });\n  }\n\n  getTextFile(filename: string): Observable<string> {\n    // The Observable returned by get() is of type Observable<string>\n    // because a text response was specified.\n    // There's no need to pass a <string> type parameter to get().\n    return this.http.get(filename, { responseType: 'text' })\n      .pipe(\n        finalize(() => {\n          this.showOutputLogs = true;\n        }),\n      );\n  }\n\n  /**\n   * Whether or not the given process has Completed or Failed status\n   * @param process Process to check if completed or failed\n   */\n  isProcessFinished(process: Process): boolean {\n    return (hasValue(process) && hasValue(process.processStatus) &&\n      (process.processStatus.toString() === ProcessStatus[ProcessStatus.COMPLETED].toString()\n        || process.processStatus.toString() === ProcessStatus[ProcessStatus.FAILED].toString()));\n  }\n\n}\n","import { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { BreadcrumbsProviderService } from '../core/breadcrumbs/breadcrumbsProviderService';\nimport { Breadcrumb } from '../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { Process } from './processes/process.model';\n\n/**\n * Service to calculate process breadcrumbs for a single part of the route\n */\n@Injectable()\nexport class ProcessBreadcrumbsService implements BreadcrumbsProviderService<Process> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: Process, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key.processId + ' - ' + key.scriptName, url)]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Process } from './processes/process.model';\nimport { followLink } from '../shared/utils/follow-link-config.model';\nimport { ProcessDataService } from '../core/data/processes/process-data.service';\nimport { BreadcrumbConfig } from '../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../core/shared/operators';\nimport { ProcessBreadcrumbsService } from './process-breadcrumbs.service';\n\n/**\n * This class represents a resolver that requests a specific process before the route is activated\n */\n@Injectable()\nexport class ProcessBreadcrumbResolver implements Resolve<BreadcrumbConfig<Process>> {\n  constructor(protected breadcrumbService: ProcessBreadcrumbsService, private processService: ProcessDataService) {\n  }\n\n  /**\n   * Method for resolving a process based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Process>> Emits the found process based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<BreadcrumbConfig<Process>> {\n    const id = route.params.id;\n\n    return this.processService.findById(route.params.id, true, false, followLink('script')).pipe(\n      getFirstSucceededRemoteData(),\n      getRemoteDataPayload(),\n      map((object: Process) => {\n        const fullPath = state.url;\n        const url = fullPath.substr(0, fullPath.indexOf(id)) + id;\n        return { provider: this.breadcrumbService, key: object, url: url };\n      })\n    );\n  }\n}\n","import { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { NewProcessComponent } from './new/new-process.component';\nimport { ProcessOverviewComponent } from './overview/process-overview.component';\nimport { ProcessPageResolver } from './process-page.resolver';\nimport { ProcessDetailComponent } from './detail/process-detail.component';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { ProcessBreadcrumbResolver } from './process-breadcrumb.resolver';\nimport { AuthenticatedGuard } from '../core/auth/authenticated.guard';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        resolve: { breadcrumb: I18nBreadcrumbResolver },\n        data: { breadcrumbKey: 'process.overview' },\n        canActivate: [AuthenticatedGuard],\n        children: [\n          {\n            path: '',\n            component: ProcessOverviewComponent,\n            data: { title: 'process.overview.title' },\n          },\n          {\n            path: 'new',\n            component: NewProcessComponent,\n            resolve: { breadcrumb: I18nBreadcrumbResolver },\n            data: { title: 'process.new.title', breadcrumbKey: 'process.new' }\n          },\n          {\n            path: ':id',\n            component: ProcessDetailComponent,\n            resolve: {\n              process: ProcessPageResolver,\n              breadcrumb: ProcessBreadcrumbResolver\n            }\n          }\n        ]\n      },\n\n    ])\n  ],\n  providers: [\n    ProcessPageResolver\n  ]\n})\nexport class ProcessPageRoutingModule {\n\n}\n","<div class=\"form-group\" *ngIf=\"scripts$ | async\">\n    <label for=\"process-script\">{{'process.new.select-script' | translate}}</label>\n    <select required id=\"process-script\"\n            class=\"form-control\"\n            name=\"script\"\n            [(ngModel)]=\"selectedScript\"\n            #script=\"ngModel\">\n        <option [ngValue]=\"undefined\">{{'process.new.select-script.placeholder' | translate}}</option>\n        <option *ngFor=\"let script of scripts$ | async\" [ngValue]=\"script.id\">\n            {{script.name}}\n        </option>\n    </select>\n\n    <div *ngIf=\"script.invalid && (script.dirty || script.touched)\"\n         class=\"alert alert-danger validation-error\">\n        <div *ngIf=\"script.errors.required\">\n            {{'process.new.select-script.required' | translate}}\n        </div>\n    </div>\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Optional, Output } from '@angular/core';\nimport { ScriptDataService } from '../../../core/data/processes/script-data.service';\nimport { Script } from '../../scripts/script.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap, take } from 'rxjs/operators';\nimport { getRemoteDataPayload, getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { hasNoValue, hasValue } from '../../../shared/empty.util';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../process-form.component';\n\nconst SCRIPT_QUERY_PARAMETER = 'script';\n\n/**\n * Component used to select a script\n */\n@Component({\n  selector: 'ds-scripts-select',\n  templateUrl: './scripts-select.component.html',\n  styleUrls: ['./scripts-select.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class ScriptsSelectComponent implements OnInit, OnDestroy {\n  /**\n   * Emits the selected script when the selection changes\n   */\n  @Output() select: EventEmitter<Script> = new EventEmitter<Script>();\n  /**\n   * All available scripts\n   */\n  scripts$: Observable<Script[]>;\n  private _selectedScript: Script;\n  private routeSub: Subscription;\n\n  constructor(\n    private scriptService: ScriptDataService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n  }\n\n  /**\n   * Sets all available scripts\n   * Checks if the route contains a script ID and auto selects this scripts\n   */\n  ngOnInit() {\n    this.scripts$ = this.scriptService.findAll({ elementsPerPage: 9999 })\n      .pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload(),\n        map((paginatedList: PaginatedList<Script>) => paginatedList.page)\n      );\n\n    this.routeSub = this.route.queryParams\n      .pipe(\n        filter((params: Params) => hasNoValue(params.id)),\n        map((params: Params) => params[SCRIPT_QUERY_PARAMETER]),\n        distinctUntilChanged(),\n        switchMap((id: string) =>\n          this.scripts$\n            .pipe(\n              take(1),\n              map((scripts) =>\n                scripts.find((script) => script.id === id)\n              )\n            )\n        )\n      ).subscribe((script: Script) => {\n        this._selectedScript = script;\n        this.select.emit(script);\n      });\n  }\n\n  /**\n   * Returns the identifier of the selected script\n   */\n  get selectedScript(): string {\n    return this._selectedScript ? this._selectedScript.id : undefined;\n  }\n\n  /**\n   * Sets the currently selected script by navigating to the correct route using the scripts ID\n   * @param value The identifier of the script\n   */\n  set selectedScript(value: string) {\n    this.router.navigate([],\n      {\n        queryParams: { [SCRIPT_QUERY_PARAMETER]: value },\n      }\n    );\n  }\n\n  @Input()\n  set script(value: Script) {\n     this._selectedScript = value;\n  }\n\n  ngOnDestroy(): void {\n    if (hasValue(this.routeSub)) {\n      this.routeSub.unsubscribe();\n    }\n  }\n}\n","/**\n * List of parameter types used for scripts\n */\nexport enum ScriptParameterType {\n  STRING = 'String',\n  DATE = 'date',\n  BOOLEAN = 'boolean',\n  FILE = 'InputStream',\n  OUTPUT = 'OutputStream'\n}\n","<div class=\"text-secondary\">\n  <h3>{{script?.name}}</h3>\n  <span>{{script?.description}}</span>\n\n  <table class=\"table-borderless mt-3\">\n    <tr *ngFor=\"let param of script?.parameters\">\n      <td class=\"align-top text-nowrap\">{{param.name}} {{param.nameLong}}\n        <ng-container *ngTemplateOutlet=\"type; context: param\"></ng-container>\n      </td>\n      <td>{{param.description}}</td>\n    </tr>\n  </table>\n</div>\n\n<ng-template #type let-type=\"type\">\n    <ng-container [ngSwitch]=\"type\">\n        <span *ngSwitchCase=\"parameterTypes.DATE\"><{{'process.new.parameter.type.value' | translate}}></span>\n        <span *ngSwitchCase=\"parameterTypes.STRING\"><{{'process.new.parameter.type.value' | translate}}></span>\n        <span *ngSwitchCase=\"parameterTypes.OUTPUT\"><{{'process.new.parameter.type.value' | translate}}></span>\n        <span *ngSwitchCase=\"parameterTypes.FILE\"><{{'process.new.parameter.type.file' | translate}}></span>\n    </ng-container>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { Script } from '../../scripts/script.model';\nimport { ScriptParameterType } from '../../scripts/script-parameter-type.model';\n\n/**\n * Components that represents a help section for the script use and parameters\n */\n@Component({\n  selector: 'ds-script-help',\n  templateUrl: './script-help.component.html',\n  styleUrls: ['./script-help.component.scss']\n})\nexport class ScriptHelpComponent {\n  /**\n   * The current script to show the help information for\n   */\n  @Input() script: Script;\n\n  /**\n   * The available script parameter types\n   */\n  parameterTypes = ScriptParameterType;\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Abstract class that represents value input components\n */\n@Component({\n  selector: 'ds-value-input',\n  template: ''\n})\nexport abstract class ValueInputComponent<T> {\n  @Input() index: number;\n  /**\n   * Used by the subclasses to emit the value when it's updated\n   */\n  @Output() updateValue: EventEmitter<T> = new EventEmitter<T>();\n}\n","<input required #string=\"ngModel\" type=\"text\" name=\"string-value-{{index}}\" class=\"form-control\" id=\"string-value-{{index}}\" [ngModel]=\"value\" (ngModelChange)=\"setValue($event)\"/>\n<div *ngIf=\"string.invalid && (string.dirty || string.touched)\"\n     class=\"alert alert-danger validation-error\">\n    <div *ngIf=\"string.errors.required\">\n        {{'process.new.parameter.string.required' | translate}}\n    </div>\n</div>\n","import { Component, Optional, Input } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the user inputted value of a string parameter\n */\n@Component({\n  selector: 'ds-string-value-input',\n  templateUrl: './string-value-input.component.html',\n  styleUrls: ['./string-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class StringValueInputComponent extends ValueInputComponent<string> {\n  /**\n   * The current value of the string\n   */\n  value: string;\n\n  /**\n   * Initial value of the field\n   */\n  @Input() initialValue;\n\n  ngOnInit() {\n    this.value = this.initialValue;\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.updateValue.emit(value);\n  }\n}\n","<input required #string=\"ngModel\" type=\"text\" class=\"form-control\" name=\"date-value-{{index}}\" id=\"date-value-{{index}}\" [ngModel]=\"value\" (ngModelChange)=\"setValue($event)\"/>\n<div *ngIf=\"string.invalid && (string.dirty || string.touched)\"\n     class=\"alert alert-danger validation-error\">\n    <div *ngIf=\"string.errors.required\">\n        {{'process.new.parameter.string.required' | translate}}\n    </div>\n</div>\n","import { Component, Input, Optional } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the user inputted value of a date parameter\n */\n@Component({\n  selector: 'ds-date-value-input',\n  templateUrl: './date-value-input.component.html',\n  styleUrls: ['./date-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class DateValueInputComponent extends ValueInputComponent<string> {\n  /**\n   * The current value of the date string\n   */\n  value: string;\n\n  /**\n   * Initial value of the field\n   */\n  @Input() initialValue;\n\n  ngOnInit() {\n    this.value = this.initialValue;\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.updateValue.emit(value);\n  }\n}\n","<label for=\"file-upload-{{index}}\" class=\"d-flex align-items-center m-0\">\n    <span class=\"btn btn-light\">\n        {{'process.new.parameter.file.upload-button' | translate}}\n    </span>\n    <span class=\"file-name ml-1\">{{fileObject?.name}}</span>\n</label>\n<input requireFile #file=\"ngModel\" type=\"file\" name=\"file-upload-{{index}}\" id=\"file-upload-{{index}}\" class=\"form-control-file d-none\" [ngModel]=\"fileObject\" (ngModelChange)=\"setFile($event)\"/>\n<div *ngIf=\"file.invalid && (file.dirty || file.touched)\"\n     class=\"alert alert-danger validation-error\">\n    <div *ngIf=\"file.errors.required\">\n        {{'process.new.parameter.file.required' | translate}}\n    </div>\n</div>\n","import { Component, Optional } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the user inputted value of a file parameter\n */\n@Component({\n  selector: 'ds-file-value-input',\n  templateUrl: './file-value-input.component.html',\n  styleUrls: ['./file-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class FileValueInputComponent extends ValueInputComponent<File> {\n  /**\n   * The current value of the file\n   */\n  fileObject: File;\n  setFile(files) {\n    this.fileObject = files.length > 0 ? files[0] : undefined;\n    this.updateValue.emit(this.fileObject);\n  }\n}\n","import { Component, OnInit, Optional } from '@angular/core';\nimport { ValueInputComponent } from '../value-input.component';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../../process-form.component';\n\n/**\n * Represents the value of a boolean parameter\n */\n@Component({\n  selector: 'ds-boolean-value-input',\n  templateUrl: './boolean-value-input.component.html',\n  styleUrls: ['./boolean-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class BooleanValueInputComponent extends ValueInputComponent<boolean> implements OnInit {\n  ngOnInit() {\n    this.updateValue.emit(true);\n  }\n}\n","<input type=\"hidden\" value=\"true\" name=\"boolean-value-{{index}}\" id=\"boolean-value-{{index}}\"/>\n","<div [ngSwitch]=\"parameter?.type\">\n  <ds-string-value-input *ngSwitchCase=\"parameterTypes.STRING\" [initialValue]=\"initialValue\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-string-value-input>\n  <ds-string-value-input *ngSwitchCase=\"parameterTypes.OUTPUT\" [initialValue]=\"initialValue\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-string-value-input>\n  <ds-date-value-input *ngSwitchCase=\"parameterTypes.DATE\" [initialValue]=\"initialValue\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-date-value-input>\n  <ds-file-value-input *ngSwitchCase=\"parameterTypes.FILE\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-file-value-input>\n  <ds-boolean-value-input *ngSwitchCase=\"parameterTypes.BOOLEAN\" (updateValue)=\"updateValue.emit($event)\" [index]=\"index\"></ds-boolean-value-input>\n</div>\n","import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';\nimport { ScriptParameterType } from '../../../scripts/script-parameter-type.model';\nimport { ScriptParameter } from '../../../scripts/script-parameter.model';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../process-form.component';\n\n/**\n * Component that renders the correct parameter value input based the script parameter's type\n */\n@Component({\n  selector: 'ds-parameter-value-input',\n  templateUrl: './parameter-value-input.component.html',\n  styleUrls: ['./parameter-value-input.component.scss'],\n  viewProviders: [ { provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]] } ]\n})\nexport class ParameterValueInputComponent {\n  @Input() index: number;\n\n  /**\n   * The current script parameter\n   */\n  @Input() parameter: ScriptParameter;\n\n  /**\n   * Initial value for input\n   */\n  @Input() initialValue: any;\n  /**\n   * Emits the value of the input when its updated\n   */\n  @Output() updateValue: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The available script parameter types\n   */\n  parameterTypes = ScriptParameterType;\n}\n","<div class=\"form-row mb-2 mx-0\">\n    <select id=\"process-parameters\"\n            class=\"form-control col\"\n            name=\"parameter-{{index}}\"\n            [(ngModel)]=\"selectedParameter\"\n            #param=\"ngModel\">\n        <option [ngValue]=\"undefined\">Add a parameter...</option>\n        <option *ngFor=\"let param of parameters\" [ngValue]=\"param.name\">\n            {{param.nameLong || param.name}}\n        </option>\n    </select>\n    <ds-parameter-value-input [initialValue]=\"parameterValue.value\" [parameter]=\"selectedScriptParameter\" (updateValue)=\"selectedParameterValue = $event\" class=\"d-block col\" [index]=\"index\"></ds-parameter-value-input>\n    <button *ngIf=\"removable\" class=\"btn btn-light col-1 remove-button\" (click)=\"removeParameter.emit(parameterValue);\"><span class=\"fas fa-trash\"></span></button>\n    <span *ngIf=\"!removable\" class=\"col-1\"></span>\n</div>\n\n","import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';\nimport { ProcessParameter } from '../../../processes/process-parameter.model';\nimport { ScriptParameter } from '../../../scripts/script-parameter.model';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { controlContainerFactory } from '../../process-form.component';\n\n/**\n * Component to select a single parameter for a process\n */\n@Component({\n  selector: 'ds-parameter-select',\n  templateUrl: './parameter-select.component.html',\n  styleUrls: ['./parameter-select.component.scss'],\n  viewProviders: [{\n    provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]]\n  }]\n})\nexport class ParameterSelectComponent {\n  @Input() index: number;\n\n  /**\n   * The current parameter value of the selected parameter\n   */\n  @Input() parameterValue: ProcessParameter = new ProcessParameter();\n\n  /**\n   * The available script parameters for the script\n   */\n  @Input() parameters: ScriptParameter[];\n\n  /**\n   * Whether or not this selected parameter can be removed from the list\n   */\n  @Input() removable: boolean;\n\n  /**\n   * Emits the parameter value when it's removed\n   */\n  @Output() removeParameter: EventEmitter<ProcessParameter> = new EventEmitter<ProcessParameter>();\n\n  /**\n   * Emits the updated parameter value when it changes\n   */\n  @Output() changeParameter: EventEmitter<ProcessParameter> = new EventEmitter<ProcessParameter>();\n\n  /**\n   * Returns the script parameter based on the currently selected name\n   */\n  get selectedScriptParameter(): ScriptParameter {\n    return this.parameters.find((parameter: ScriptParameter) => parameter.name === this.selectedParameter);\n  }\n\n  /**\n   * Return the currently selected parameter name\n   */\n  get selectedParameter(): string {\n    return this.parameterValue ? this.parameterValue.name : undefined;\n  }\n\n  /**\n   * Sets the currently selected parameter based on the provided parameter name\n   * Emits the new value from the changeParameter output\n   * @param value The parameter name to set\n   */\n  set selectedParameter(value: string) {\n    this.parameterValue.name = value;\n    this.selectedParameterValue = undefined;\n    this.changeParameter.emit(this.parameterValue);\n  }\n\n  /**\n   * Returns the currently selected parameter value\n   */\n  get selectedParameterValue(): any {\n    return this.parameterValue ? this.parameterValue.value : undefined;\n  }\n\n  /**\n   * Sets the currently selected value for the parameter\n   * Emits the new value from the changeParameter output\n   * @param value The parameter value to set\n   */\n  set selectedParameterValue(value: any) {\n    this.parameterValue.value = value;\n    this.changeParameter.emit(this.parameterValue);\n  }\n}\n","<div class=\"form-group\" *ngIf=\"script\">\n    <label>{{'process.new.select-parameters' | translate}}</label>\n    <ds-parameter-select\n            *ngFor=\"let value of parameterValues; let i = index; let last = last\"\n            [parameters]=\"script.parameters\"\n            [parameterValue]=\"value\"\n            [removable]=\"!last\"\n            [index]=\"i\"\n            (removeParameter)=\"removeParameter(i)\"\n            (changeParameter)=\"updateParameter($event, i)\"></ds-parameter-select>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, Optional, Output, SimpleChanges } from '@angular/core';\nimport { Script } from '../../scripts/script.model';\nimport { ProcessParameter } from '../../processes/process-parameter.model';\nimport { hasValue } from '../../../shared/empty.util';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport { ScriptParameter } from '../../scripts/script-parameter.model';\nimport { controlContainerFactory } from '../process-form.component';\n\n/**\n * Component that represents the selected list of parameters for a script\n */\n@Component({\n  selector: 'ds-process-parameters',\n  templateUrl: './process-parameters.component.html',\n  styleUrls: ['./process-parameters.component.scss'],\n  viewProviders: [{\n    provide: ControlContainer,\n    useFactory: controlContainerFactory,\n    deps: [[new Optional(), NgForm]]\n  }]\n})\nexport class ProcessParametersComponent implements OnChanges {\n  /**\n   * The currently selected script\n   */\n  @Input() script: Script;\n\n  /**\n   * Initial parameters on load\n   */\n  @Input() initialParams: ProcessParameter[];\n  /**\n   * Emits the parameter values when they're updated\n   */\n  @Output() updateParameters: EventEmitter<ProcessParameter[]> = new EventEmitter();\n\n  /**\n   * The current parameter values\n   */\n  parameterValues: ProcessParameter[];\n\n  ngOnInit() {\n    if (hasValue(this.initialParams)) {\n      this.parameterValues = this.initialParams;\n    }\n  }\n\n  /**\n   * Makes sure the parameters are reset when the script changes\n   * @param changes\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.script) {\n      this.initParameters();\n    }\n  }\n\n  /**\n   * Empties the parameter values\n   * Initializes the first parameter value\n   */\n  initParameters() {\n    if (hasValue(this.initialParams)) {\n      this.parameterValues = this.initialParams;\n    } else {\n      this.parameterValues = [];\n      this.initializeParameter();\n    }\n  }\n\n  /**\n   * Updates a single parameter value using its new value and index\n   * Adds a new parameter when the last of the parameter values is changed\n   * @param processParameter The new value of the parameter\n   * @param index The index of the parameter\n   */\n  updateParameter(processParameter: ProcessParameter, index: number) {\n    this.parameterValues[index] = processParameter;\n    if (index === this.parameterValues.length - 1) {\n      this.addParameter();\n    }\n    this.updateParameters.emit(this.parameterValues.filter((param: ProcessParameter) => hasValue(param.name)));\n  }\n\n  /**\n   * Removes a parameter value from the list\n   * @param index The index of the parameter to remove\n   */\n  removeParameter(index: number) {\n    this.parameterValues = this.parameterValues.filter((value, i) => i !== index);\n    this.updateParameters.emit(this.parameterValues.filter((param: ProcessParameter) => hasValue(param.name)));\n  }\n\n  /**\n   * Initializes parameter values based on the selected script\n   */\n  initializeParameter() {\n    if (hasValue(this.script)) {\n      this.parameterValues = this.script.parameters\n        .filter((param) => param.mandatory)\n        .map(\n          (parameter: ScriptParameter) => Object.assign(new ProcessParameter(), { name: parameter.name })\n        );\n    }\n    this.addParameter();\n  }\n\n  /**\n   * Adds an empty parameter value to the end of the list\n   */\n  addParameter() {\n    this.parameterValues = [...this.parameterValues, new ProcessParameter()];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { ProcessPageRoutingModule } from './process-page-routing.module';\nimport { NewProcessComponent } from './new/new-process.component';\nimport { ScriptsSelectComponent } from './form/scripts-select/scripts-select.component';\nimport { ScriptHelpComponent } from './form/script-help/script-help.component';\nimport { ParameterSelectComponent } from './form/process-parameters/parameter-select/parameter-select.component';\nimport { ProcessParametersComponent } from './form/process-parameters/process-parameters.component';\nimport { StringValueInputComponent } from './form/process-parameters/parameter-value-input/string-value-input/string-value-input.component';\nimport { ParameterValueInputComponent } from './form/process-parameters/parameter-value-input/parameter-value-input.component';\nimport { FileValueInputComponent } from './form/process-parameters/parameter-value-input/file-value-input/file-value-input.component';\nimport { BooleanValueInputComponent } from './form/process-parameters/parameter-value-input/boolean-value-input/boolean-value-input.component';\nimport { DateValueInputComponent } from './form/process-parameters/parameter-value-input/date-value-input/date-value-input.component';\nimport { ProcessOverviewComponent } from './overview/process-overview.component';\nimport { ProcessDetailComponent } from './detail/process-detail.component';\nimport { ProcessDetailFieldComponent } from './detail/process-detail-field/process-detail-field.component';\nimport { ProcessBreadcrumbsService } from './process-breadcrumbs.service';\nimport { ProcessBreadcrumbResolver } from './process-breadcrumb.resolver';\nimport { ProcessFormComponent } from './form/process-form.component';\n\n@NgModule({\n  imports: [\n    ProcessPageRoutingModule,\n    SharedModule,\n  ],\n  declarations: [\n    NewProcessComponent,\n    ScriptsSelectComponent,\n    ScriptHelpComponent,\n    ParameterSelectComponent,\n    ProcessParametersComponent,\n    StringValueInputComponent,\n    ParameterValueInputComponent,\n    FileValueInputComponent,\n    BooleanValueInputComponent,\n    DateValueInputComponent,\n    ProcessOverviewComponent,\n    ProcessDetailComponent,\n    ProcessDetailFieldComponent,\n    ProcessFormComponent\n  ],\n  providers: [\n    ProcessBreadcrumbResolver,\n    ProcessBreadcrumbsService\n  ]\n})\n\nexport class ProcessPageModule {\n\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}