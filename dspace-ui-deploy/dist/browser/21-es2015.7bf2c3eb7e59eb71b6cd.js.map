{"version":3,"sources":["webpack:///src/themes lazy ^\\.\\/.*\\/app\\/forgot\\-password\\/forgot\\-password\\-email\\/forgot\\-email\\.component$ namespace object","webpack:///src/app/core/resolving/resolver.actions.ts","webpack:///src/app/forgot-password/forgot-password-form/themed-forgot-password-form.component.ts","webpack:///src/app/shared/theme-support/themed.component.html","webpack:///src/app/forgot-password/forgot-password-email/themed-forgot-email.component.ts","webpack:///src/app/forgot-password/forgot-password-routing.module.ts","webpack:///src/app/forgot-password/forgot-password.module.ts","webpack:///src/themes lazy ^\\.\\/.*\\/app\\/forgot\\-password\\/forgot\\-password\\-form\\/forgot\\-password\\-form\\.component$ namespace object","webpack:///src/app/core/data/registration-response-parsing.service.ts","webpack:///src/app/core/data/eperson-registration.service.ts","webpack:///src/app/forgot-password/forgot-password-email/forgot-email.component.ts","webpack:///src/app/forgot-password/forgot-password-email/forgot-email.component.html","webpack:///src/app/item-page/item.resolver.ts","webpack:///src/app/forgot-password/forgot-password-form/forgot-password-form.component.ts","webpack:///src/app/forgot-password/forgot-password-form/forgot-password-form.component.html","webpack:///src/app/item-page/item-page.resolver.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","ResolverActionTypes","RESOLVED","ResolvedAction","constructor","url","dso","type","this","payload","ThemedForgotPasswordFormComponent","getComponentName","importThemedComponent","themeName","importUnthemedComponent","ThemedForgotEmailComponent","ForgotPasswordRoutingModule","forChild","path","component","data","title","registration","ForgotPasswordModule","ProfilePageModule","RegistrationResponseParsingService","parse","request","assign","statusCode","undefined","EpersonRegistrationService","requestService","rdbService","halService","linkPath","searchByTokenPath","getRegistrationEndpoint","getEndpoint","getTokenSearchEndpoint","token","pipe","filter","href","registerEmail","email","requestId","generateRequestId","find","send","subscribe","buildFromRequestUUID","g","searchByToken","href$","getResponseParser","buildSingle","skipWhile","rd","isStale","restResponse","user","ForgotEmailComponent","ITEM_PAGE_LINKS_TO_FOLLOW","ItemResolver","itemService","store","router","route","state","itemRD$","findById","params","itemRD","dispatch","ForgotPasswordFormComponent","ePersonDataService","translateService","notificationsService","isInValid","NOTIFICATIONS_PREFIX","ngOnInit","registration$","setInValid","$event","setPasswordValue","password","submit","patchPasswordWithToken","response","hasSucceeded","success","instant","navigate","error","errorMessage","ItemPageResolver","super","itemRoute","thisRoute","startsWith","itemId","uuid","subRoute","substring","indexOf","length","navigateByUrl"],"mappings":"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","file":"x","sourcesContent":["var map = {\n\t\"./custom/app/forgot-password/forgot-password-email/forgot-email.component\": [\n\t\t\"6KPR\",\n\t\t51\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"/RQ2\";\nmodule.exports = webpackAsyncContext;","import { type } from '../../shared/ngrx/type';\nimport { Action } from '@ngrx/store';\nimport { DSpaceObject } from '../shared/dspace-object.model';\n\nexport const ResolverActionTypes = {\n  RESOLVED: type('dspace/resolver/RESOLVED')\n};\n\n/**\n * An action that indicates a route object has been resolved.\n *\n * It isn't used in a reducer for now. Its purpose is to be able to be notified that an object\n * has been resolved in an effect.\n */\nexport class ResolvedAction implements Action {\n  type = ResolverActionTypes.RESOLVED;\n  payload: {\n    url: string,\n    dso: DSpaceObject\n  };\n\n  constructor(url: string, dso: DSpaceObject) {\n    this.payload = { url, dso };\n  }\n}\n\nexport type ResolverAction = ResolvedAction;\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { ForgotPasswordFormComponent } from './forgot-password-form.component';\n\n/**\n * Themed wrapper for ForgotPasswordFormComponent\n */\n@Component({\n  selector: 'ds-themed-forgot-password-form',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedForgotPasswordFormComponent extends ThemedComponent<ForgotPasswordFormComponent> {\n  protected getComponentName(): string {\n    return 'ForgotPasswordFormComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/forgot-password/forgot-password-form/forgot-password-form.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./forgot-password-form.component`);\n  }\n}\n","<ng-template #vcr></ng-template>\n","import { Component } from '@angular/core';\nimport { ThemedComponent } from '../../shared/theme-support/themed.component';\nimport { ForgotEmailComponent } from './forgot-email.component';\n\n/**\n * Themed wrapper for ForgotEmailComponent\n */\n@Component({\n  selector: 'ds-themed-forgot-email',\n  styleUrls: [],\n  templateUrl: './../../shared/theme-support/themed.component.html'\n})\nexport class ThemedForgotEmailComponent extends ThemedComponent<ForgotEmailComponent> {\n  protected getComponentName(): string {\n    return 'ForgotEmailComponent';\n  }\n\n  protected importThemedComponent(themeName: string): Promise<any> {\n    return import(`../../../themes/${themeName}/app/forgot-password/forgot-password-email/forgot-email.component`);\n  }\n\n  protected importUnthemedComponent(): Promise<any> {\n    return import(`./forgot-email.component`);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ItemPageResolver } from '../item-page/item-page.resolver';\nimport { RegistrationResolver } from '../register-email-form/registration.resolver';\nimport { ThemedForgotPasswordFormComponent } from './forgot-password-form/themed-forgot-password-form.component';\nimport { ThemedForgotEmailComponent } from './forgot-password-email/themed-forgot-email.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ThemedForgotEmailComponent,\n        data: {title: 'forgot-password.title'},\n      },\n      {\n        path: ':token',\n        component: ThemedForgotPasswordFormComponent,\n        resolve: {registration: RegistrationResolver}\n      }\n    ])\n  ],\n  providers: [\n    RegistrationResolver,\n    ItemPageResolver,\n  ]\n})\n/**\n * This module defines the routing to the components related to the forgot password components.\n */\nexport class ForgotPasswordRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { ForgotEmailComponent } from './forgot-password-email/forgot-email.component';\nimport { ForgotPasswordRoutingModule } from './forgot-password-routing.module';\nimport { RegisterEmailFormModule } from '../register-email-form/register-email-form.module';\nimport { ForgotPasswordFormComponent } from './forgot-password-form/forgot-password-form.component';\nimport { ProfilePageModule } from '../profile-page/profile-page.module';\nimport { ThemedForgotPasswordFormComponent } from './forgot-password-form/themed-forgot-password-form.component';\nimport { ThemedForgotEmailComponent } from './forgot-password-email/themed-forgot-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    ForgotPasswordRoutingModule,\n    RegisterEmailFormModule,\n    ProfilePageModule,\n  ],\n  declarations: [\n    ForgotEmailComponent,\n    ThemedForgotEmailComponent,\n    ForgotPasswordFormComponent,\n    ThemedForgotPasswordFormComponent,\n  ],\n  providers: []\n})\n\n/**\n * Module related to the Forgot Password components\n */\nexport class ForgotPasswordModule {\n\n}\n","var map = {\n\t\"./custom/app/forgot-password/forgot-password-form/forgot-password-form.component\": [\n\t\t\"k2Tu\",\n\t\t52\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"Jjgi\";\nmodule.exports = webpackAsyncContext;","import { Injectable } from '@angular/core';\nimport {\n  ParsedResponse\n} from '../cache/response.models';\nimport { RawRestResponse } from '../dspace-rest/raw-rest-response.model';\nimport { ResponseParsingService } from './parsing.service';\nimport { RestRequest } from './request.models';\nimport { Registration } from '../shared/registration.model';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Parsing service responsible for parsing a Registration response\n */\nexport class RegistrationResponseParsingService implements ResponseParsingService {\n\n  parse(request: RestRequest, data: RawRestResponse): ParsedResponse {\n    const payload = data.payload;\n\n    const registration = Object.assign(new Registration(), payload);\n\n    return new ParsedResponse(data.statusCode, undefined, registration);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { RequestService } from './request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { GetRequest, PostRequest } from './request.models';\nimport { Observable } from 'rxjs';\nimport { filter, find, map, skipWhile } from 'rxjs/operators';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { Registration } from '../shared/registration.model';\nimport { getFirstCompletedRemoteData, getFirstSucceededRemoteData } from '../shared/operators';\nimport { ResponseParsingService } from './parsing.service';\nimport { GenericConstructor } from '../shared/generic-constructor';\nimport { RegistrationResponseParsingService } from './registration-response-parsing.service';\nimport { RemoteData } from './remote-data';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\n\n@Injectable(\n  {\n    providedIn: 'root',\n  }\n)\n/**\n * Service that will register a new email address and request a token\n */\nexport class EpersonRegistrationService {\n\n  protected linkPath = 'registrations';\n  protected searchByTokenPath = '/search/findByToken?token=';\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected halService: HALEndpointService,\n  ) {\n\n  }\n\n  /**\n   * Retrieves the Registration endpoint\n   */\n  getRegistrationEndpoint(): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Retrieves the endpoint to search by registration token\n   */\n  getTokenSearchEndpoint(token: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      map((href: string) => `${href}${this.searchByTokenPath}${token}`));\n  }\n\n  /**\n   * Register a new email address\n   * @param email\n   */\n  registerEmail(email: string): Observable<RemoteData<Registration>> {\n    const registration = new Registration();\n    registration.email = email;\n\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getRegistrationEndpoint();\n\n    href$.pipe(\n      find((href: string) => hasValue(href)),\n      map((href: string) => {\n        const request = new PostRequest(requestId, href, registration);\n        this.requestService.send(request);\n      })\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID<Registration>(requestId).pipe(\n      getFirstCompletedRemoteData()\n    );\n  }\n\n  /**\n   * Search a registration based on the provided token\n   * @param token\n   */\n  searchByToken(token: string): Observable<Registration> {\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getTokenSearchEndpoint(token).pipe(\n      find((href: string) => hasValue(href)),\n    );\n\n    href$.subscribe((href: string) => {\n      const request = new GetRequest(requestId, href);\n      Object.assign(request, {\n        getResponseParser(): GenericConstructor<ResponseParsingService> {\n          return RegistrationResponseParsingService;\n        }\n      });\n      this.requestService.send(request, true);\n    });\n\n    return this.rdbService.buildSingle<Registration>(href$).pipe(\n      skipWhile((rd: RemoteData<Registration>) => rd.isStale),\n      getFirstSucceededRemoteData(),\n      map((restResponse: RemoteData<Registration>) => {\n        return Object.assign(new Registration(), {\n          email: restResponse.payload.email, token: token, user: restResponse.payload.user\n        });\n      }),\n    );\n\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ds-forgot-email',\n  styleUrls: ['./forgot-email.component.scss'],\n  templateUrl: './forgot-email.component.html'\n})\n/**\n * Component responsible the forgot password email step\n */\nexport class ForgotEmailComponent {\n\n}\n","<ds-register-email-form\n    [MESSAGE_PREFIX]=\"'forgot-email.form'\">\n</ds-register-email-form>","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const ITEM_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Item>[] = [\n  followLink('owningCollection', {},\n    followLink('parentCommunity', {},\n      followLink('parentCommunity'))\n  ),\n  followLink('relationships'),\n  followLink('version', {}, followLink('versionhistory')),\n  followLink('thumbnail')\n];\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ItemResolver implements Resolve<RemoteData<Item>> {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    const itemRD$ = this.itemService.findById(route.params.id,\n      true,\n      false,\n      ...ITEM_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    itemRD$.subscribe((itemRD: RemoteData<Item>) => {\n      this.store.dispatch(new ResolvedAction(state.url, itemRD.payload));\n    });\n\n    return itemRD$;\n  }\n}\n","import { Component } from '@angular/core';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { Observable } from 'rxjs';\nimport { Registration } from '../../core/shared/registration.model';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthenticateAction } from '../../core/auth/auth.actions';\nimport { Store } from '@ngrx/store';\nimport { CoreState } from '../../core/core.reducers';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { getFirstCompletedRemoteData } from '../../core/shared/operators';\n\n@Component({\n  selector: 'ds-forgot-password-form',\n  styleUrls: ['./forgot-password-form.component.scss'],\n  templateUrl: './forgot-password-form.component.html'\n})\n/**\n * Component for a user to enter a new password for a forgot token.\n */\nexport class ForgotPasswordFormComponent {\n\n  registration$: Observable<Registration>;\n\n  token: string;\n  email: string;\n  user: string;\n\n  isInValid = true;\n  password: string;\n\n  /**\n   * Prefix for the notification messages of this component\n   */\n  NOTIFICATIONS_PREFIX = 'forgot-password.form.notification';\n\n  constructor(private ePersonDataService: EPersonDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private store: Store<CoreState>,\n              private router: Router,\n              private route: ActivatedRoute,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.registration$ = this.route.data.pipe(\n      map((data) => data.registration as Registration),\n    );\n    this.registration$.subscribe((registration: Registration) => {\n      this.email = registration.email;\n      this.token = registration.token;\n      this.user = registration.user;\n    });\n  }\n\n  setInValid($event: boolean) {\n    this.isInValid = $event;\n  }\n\n  setPasswordValue($event: string) {\n    this.password = $event;\n  }\n\n  /**\n   * Submits the password to the eperson service to be updated.\n   * The submission will not be made when the form is not valid.\n   */\n  submit() {\n    if (!this.isInValid) {\n      this.ePersonDataService.patchPasswordWithToken(this.user, this.token, this.password).pipe(\n        getFirstCompletedRemoteData()\n      ).subscribe((response: RemoteData<EPerson>) => {\n        if (response.hasSucceeded) {\n          this.notificationsService.success(\n            this.translateService.instant(this.NOTIFICATIONS_PREFIX + '.success.title'),\n            this.translateService.instant(this.NOTIFICATIONS_PREFIX + '.success.content')\n          );\n          this.store.dispatch(new AuthenticateAction(this.email, this.password));\n          this.router.navigate(['/home']);\n        } else {\n          this.notificationsService.error(\n            this.translateService.instant(this.NOTIFICATIONS_PREFIX + '.error.title'), response.errorMessage\n          );\n        }\n      });\n    }\n  }\n}\n","<div class=\"container\">\n    <h3 class=\"mb-4\">{{'forgot-password.form.head' | translate}}</h3>\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'forgot-password.form.identification.header' | translate}}</div>\n        <div class=\"card-body\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{'forgot-password.form.identification.email' | translate}}</label>\n                    <span id=\"email\">{{(registration$ |async).email}}</span></div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">{{'forgot-password.form.card.security' | translate}}</div>\n        <div class=\"card-body\">\n\n            <ds-profile-page-security-form\n                    [passwordCanBeEmpty]=\"false\"\n                    [FORM_PREFIX]=\"'forgot-password.form.'\"\n                    (isInvalid)=\"setInValid($event)\"\n                    (passwordValue)=\"setPasswordValue($event)\"\n            ></ds-profile-page-security-form>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <button\n                    [disabled]=\"isInValid\"\n                    class=\"btn btn-default btn-primary\"\n                    (click)=\"submit()\">{{'forgot-password.form.submit' | translate}}</button>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { ItemDataService } from '../core/data/item-data.service';\nimport { Item } from '../core/shared/item.model';\nimport { Store } from '@ngrx/store';\nimport { map } from 'rxjs/operators';\nimport { hasValue } from '../shared/empty.util';\nimport { getItemPageRoute } from './item-page-routing-paths';\nimport { ItemResolver } from './item.resolver';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated and will redirect to the\n * entity page\n */\n@Injectable()\nexport class ItemPageResolver extends ItemResolver {\n  constructor(\n    protected itemService: ItemDataService,\n    protected store: Store<any>,\n    protected router: Router\n  ) {\n    super(itemService, store, router);\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Item>> {\n    return super.resolve(route, state).pipe(\n      map((rd: RemoteData<Item>) => {\n        if (rd.hasSucceeded && hasValue(rd.payload)) {\n          const itemRoute = getItemPageRoute(rd.payload);\n          const thisRoute = state.url;\n          if (!thisRoute.startsWith(itemRoute)) {\n            const itemId = rd.payload.uuid;\n            const subRoute = thisRoute.substring(thisRoute.indexOf(itemId) + itemId.length, thisRoute.length);\n            this.router.navigateByUrl(itemRoute + subRoute);\n          }\n        }\n        return rd;\n      })\n    );\n  }\n}\n"]}