{"version":3,"sources":["webpack:///src/app/core/shared/bitstream-format-support-level.ts","webpack:///src/app/community-page/community-page.resolver.ts","webpack:///src/app/process-page/processes/process-status.model.ts","webpack:///src/app/register-email-form/register-email-form.module.ts","webpack:///src/app/register-email-form/register-email-form.component.ts","webpack:///src/app/register-email-form/register-email-form.component.html","webpack:///src/app/collection-page/collection-page.resolver.ts","webpack:///src/app/register-email-form/registration.resolver.ts","webpack:///src/app/shared/object-collection/shared/workflow-item-search-result.model.ts"],"names":["BitstreamFormatSupportLevel","Known","Unknown","Supported","COMMUNITY_PAGE_LINKS_TO_FOLLOW","CommunityPageResolver","constructor","communityService","store","resolve","route","state","communityRD$","this","findById","params","id","pipe","g","subscribe","communityRD","dispatch","url","payload","ProcessStatus","SCHEDULED","RUNNING","COMPLETED","FAILED","RegisterEmailFormModule","RegisterEmailFormComponent","epersonRegistrationService","notificationService","translateService","router","formBuilder","ngOnInit","form","group","email","FormControl","validators","Validators","required","pattern","register","invalid","registerEmail","value","response","hasSucceeded","success","get","MESSAGE_PREFIX","navigate","error","COLLECTION_PAGE_LINKS_TO_FOLLOW","CollectionPageResolver","collectionService","collectionRD$","collectionRD","RegistrationResolver","searchByToken","token","WorkflowItemSearchResult"],"mappings":"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","file":"x","sourcesContent":["export enum BitstreamFormatSupportLevel {\n  Known = 'KNOWN',\n  Unknown = 'UNKNOWN',\n  Supported = 'SUPPORTED'\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RemoteData } from '../core/data/remote-data';\nimport { Community } from '../core/shared/community.model';\nimport { CommunityDataService } from '../core/data/community-data.service';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\nimport { Store } from '@ngrx/store';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const COMMUNITY_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Community>[] = [\n  followLink('logo'),\n  followLink('subcommunities'),\n  followLink('collections'),\n  followLink('parentCommunity')\n];\n\n/**\n * This class represents a resolver that requests a specific community before the route is activated\n */\n@Injectable()\nexport class CommunityPageResolver implements Resolve<RemoteData<Community>> {\n  constructor(\n    private communityService: CommunityDataService,\n    private store: Store<any>\n  ) {\n  }\n\n  /**\n   * Method for resolving a community based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Community>> Emits the found community based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Community>> {\n    const communityRD$ = this.communityService.findById(\n      route.params.id,\n      true,\n      false,\n      ...COMMUNITY_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData(),\n    );\n\n    communityRD$.subscribe((communityRD: RemoteData<Community>) => {\n      this.store.dispatch(new ResolvedAction(state.url, communityRD.payload));\n    });\n\n    return communityRD$;\n  }\n}\n","/**\n * List of process statuses\n */\nexport enum ProcessStatus {\n  SCHEDULED,\n  RUNNING,\n  COMPLETED,\n  FAILED\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { RegisterEmailFormComponent } from './register-email-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n  ],\n  declarations: [\n    RegisterEmailFormComponent,\n  ],\n  providers: [],\n  exports: [\n    RegisterEmailFormComponent,\n  ]\n})\n\n/**\n * The module that contains the components related to the email registration\n */\nexport class RegisterEmailFormModule {\n\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { EpersonRegistrationService } from '../core/data/eperson-registration.service';\nimport { NotificationsService } from '../shared/notifications/notifications.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Registration } from '../core/shared/registration.model';\nimport { RemoteData } from '../core/data/remote-data';\n\n@Component({\n  selector: 'ds-register-email-form',\n  templateUrl: './register-email-form.component.html'\n})\n/**\n * Component responsible to render an email registration form.\n */\nexport class RegisterEmailFormComponent implements OnInit {\n\n  /**\n   * The form containing the mail address\n   */\n  form: FormGroup;\n\n  /**\n   * The message prefix\n   */\n  @Input()\n  MESSAGE_PREFIX: string;\n\n  constructor(\n    private epersonRegistrationService: EpersonRegistrationService,\n    private notificationService: NotificationsService,\n    private translateService: TranslateService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      email: new FormControl('', {\n        validators: [Validators.required,\n          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')\n        ],\n      })\n    });\n\n  }\n\n  /**\n   * Register an email address\n   */\n  register() {\n    if (!this.form.invalid) {\n      this.epersonRegistrationService.registerEmail(this.email.value).subscribe((response: RemoteData<Registration>) => {\n          if (response.hasSucceeded) {\n            this.notificationService.success(this.translateService.get(`${this.MESSAGE_PREFIX}.success.head`),\n              this.translateService.get(`${this.MESSAGE_PREFIX}.success.content`, {email: this.email.value}));\n            this.router.navigate(['/home']);\n          } else {\n            this.notificationService.error(this.translateService.get(`${this.MESSAGE_PREFIX}.error.head`),\n              this.translateService.get(`${this.MESSAGE_PREFIX}.error.content`, {email: this.email.value}));\n          }\n        }\n      );\n    }\n  }\n\n  get email() {\n    return this.form.get('email');\n  }\n\n}\n","<div class=\"container\">\n    <h2>{{MESSAGE_PREFIX + '.header'|translate}}</h2>\n    <p>{{MESSAGE_PREFIX + '.info' | translate}}</p>\n\n    <form [class]=\"'ng-invalid'\" [formGroup]=\"form\" (ngSubmit)=\"register()\">\n\n        <div class=\"form-group\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <label class=\"font-weight-bold\"\n                           for=\"email\">{{MESSAGE_PREFIX + '.email' | translate}}</label>\n                    <input [className]=\"(email.invalid) && (email.dirty || email.touched) ? 'form-control is-invalid' :'form-control'\"\n                           type=\"text\" id=\"email\" formControlName=\"email\"/>\n                    <div *ngIf=\"email.invalid && (email.dirty || email.touched)\"\n                         class=\"invalid-feedback show-feedback\">\n                    <span *ngIf=\"email.errors && email.errors.required\">\n                        {{ MESSAGE_PREFIX + '.email.error.required' | translate }}\n                    </span>\n                    <span *ngIf=\"email.errors && email.errors.pattern\">\n                        {{ MESSAGE_PREFIX + '.email.error.pattern' | translate }}\n                    </span>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    {{MESSAGE_PREFIX + '.email.hint' |translate}}\n                </div>\n\n            </div>\n\n        </div>\n    </form>\n    \n    <button class=\"btn btn-primary\"\n            [disabled]=\"form.invalid\"\n            (click)=\"register()\">{{MESSAGE_PREFIX + '.submit'| translate}}</button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Collection } from '../core/shared/collection.model';\nimport { Observable } from 'rxjs';\nimport { CollectionDataService } from '../core/data/collection-data.service';\nimport { RemoteData } from '../core/data/remote-data';\nimport { followLink, FollowLinkConfig } from '../shared/utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../core/shared/operators';\nimport { Store } from '@ngrx/store';\nimport { ResolvedAction } from '../core/resolving/resolver.actions';\n\n/**\n * The self links defined in this list are expected to be requested somewhere in the near future\n * Requesting them as embeds will limit the number of requests\n */\nexport const COLLECTION_PAGE_LINKS_TO_FOLLOW: FollowLinkConfig<Collection>[] = [\n  followLink('parentCommunity', {},\n    followLink('parentCommunity')\n  ),\n  followLink('logo')\n];\n\n/**\n * This class represents a resolver that requests a specific collection before the route is activated\n */\n@Injectable()\nexport class CollectionPageResolver implements Resolve<RemoteData<Collection>> {\n  constructor(\n    private collectionService: CollectionDataService,\n    private store: Store<any>\n  ) {\n  }\n\n  /**\n   * Method for resolving a collection based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Collection>> Emits the found collection based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<Collection>> {\n    const collectionRD$ = this.collectionService.findById(\n      route.params.id,\n      true,\n      false,\n      ...COLLECTION_PAGE_LINKS_TO_FOLLOW\n    ).pipe(\n      getFirstCompletedRemoteData()\n    );\n\n    collectionRD$.subscribe((collectionRD: RemoteData<Collection>) => {\n      this.store.dispatch(new ResolvedAction(state.url, collectionRD.payload));\n    });\n\n    return collectionRD$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { EpersonRegistrationService } from '../core/data/eperson-registration.service';\nimport { Registration } from '../core/shared/registration.model';\nimport { Observable } from 'rxjs';\n\n@Injectable()\n/**\n * Resolver to resolve a Registration object based on the provided token\n */\nexport class RegistrationResolver implements Resolve<Registration> {\n\n  constructor(private epersonRegistrationService: EpersonRegistrationService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Registration> {\n    const token = route.params.token;\n    return this.epersonRegistrationService.searchByToken(token);\n  }\n}\n","import { WorkflowItem } from '../../../core/submission/models/workflowitem.model';\nimport { SearchResult } from '../../search/models/search-result.model';\nimport { searchResultFor } from '../../search/search-result-element-decorator';\n\n/**\n * Represents a search result object of a WorkflowItem object\n */\n@searchResultFor(WorkflowItem)\nexport class WorkflowItemSearchResult extends SearchResult<WorkflowItem> {\n}\n"]}