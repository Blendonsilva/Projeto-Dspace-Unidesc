{"version":3,"sources":["webpack:///src/app/shared/resource-policies/resource-policies.component.ts","webpack:///src/app/shared/resource-policies/resource-policies.component.html","webpack:///src/app/shared/resource-policies/form/eperson-group-list/eperson-group-list.component.ts","webpack:///src/app/shared/resource-policies/form/eperson-group-list/eperson-group-list.component.html","webpack:///src/app/shared/resource-policies/edit/resource-policy-edit.component.ts","webpack:///src/app/shared/resource-policies/edit/resource-policy-edit.component.html","webpack:///src/app/shared/resource-policies/create/resource-policy-create.component.ts","webpack:///src/app/shared/resource-policies/create/resource-policy-create.component.html","webpack:///src/app/shared/resource-policies/resolvers/resource-policy.resolver.ts","webpack:///src/app/shared/resource-policies/form/eperson-group-list/group-search-box/group-search-box.component.ts","webpack:///src/app/shared/resource-policies/form/eperson-group-list/group-search-box/group-search-box.component.html","webpack:///src/app/shared/resource-policies/form/eperson-group-list/eperson-search-box/eperson-search-box.component.ts","webpack:///src/app/shared/resource-policies/form/eperson-group-list/eperson-search-box/eperson-search-box.component.html","webpack:///src/app/shared/resource-policies/resource-policies.module.ts","webpack:///src/app/core/resource-policy/models/policy-type.model.ts","webpack:///src/app/core/resource-policy/models/action-type.model.ts","webpack:///src/app/shared/resource-policies/form/resource-policy-form.model.ts","webpack:///src/app/shared/resource-policies/form/resource-policy-form.component.html","webpack:///src/app/shared/resource-policies/form/resource-policy-form.component.ts","webpack:///src/app/item-page/edit-item-page/edit-item-page.routing-paths.ts","webpack:///src/app/shared/resource-policies/resolvers/resource-policy-target.resolver.ts"],"names":["ResourcePoliciesComponent","constructor","cdr","dsoNameService","ePersonService","groupService","notificationsService","requestService","resourcePolicyService","route","router","translate","processingDelete$","resourcePoliciesEntries$","subs","ngOnInit","this","isActive","initResourcePolicyLIst","canDelete","value","pipe","entry","checked","acc","entries","deleteSelectedResourcePolicies","next","policiesToDelete","filter","push","delete","policy","id","results","length","subscribe","failureResults","result","success","get","error","setStaleByHrefSubstring","resourceUUID","formatDate","date","getEPersonName","eperson","getName","getGroupName","group","getResourcePolicies","asObservable","hasEPerson","hasGroup","searchByResource","payload","page","map","detectChanges","isProcessingDelete","redirectToResourcePolicyCreatePage","navigate","relativeTo","queryParams","policyTargetId","targetType","resourceType","redirectToResourcePolicyEditPage","policyId","redirectToGroupEditPage","findByHref","_links","href","groupUUID","selectAllCheckbox","event","target","forEach","selectCheckbox","policyEntry","ngOnDestroy","subscription","unsubscribe","EpersonGroupListComponent","parentInjector","paginationService","isListOfEPerson","select","EventEmitter","currentSearchQuery","currentSearchScope","paginationOptions","list$","entrySelectedId","provider","dataService","Injector","create","providers","parent","uniqueId","pageSize","initSelected","updateList","emitSelect","emit","getList","isSelected","selectedId","onSearch","searchEvent","query","scope","resetPage","pageConfigSub","getCurrentPagination","options","Object","assign","elementsPerPage","currentPage","search$","searchByScope","searchGroups","g","list","clearPagination","ResourcePolicyEditComponent","processing$","data","resourcePolicy","isProcessing","redirectToAuthorizationsPage","updateResourcePolicy","updatedObject","object","type","update","responseRD","hasSucceeded","ResourcePolicyCreateComponent","targetResourceUUID","resourcePolicyTarget","targetResourceName","createResourcePolicy","response$","uuid","ResourcePolicyResolver","resolve","state","queryParamMap","navigateByUrl","skipLocationChange","findById","GroupSearchBoxComponent","formBuilder","labelPrefix","search","searchForm","reset","submit","$event","stopImmediatePropagation","EpersonSearchBoxComponent","PROVIDERS","ResourcePoliciesModule","PolicyType","TYPE_SUBMISSION","TYPE_WORKFLOW","TYPE_INHERITED","TYPE_CUSTOM","ActionType","READ","WRITE","DELETE","ADD","REMOVE","WORKFLOW_STEP_1","WORKFLOW_STEP_2","WORKFLOW_STEP_3","WORKFLOW_ABORT","DEFAULT_BITSTREAM_READ","DEFAULT_ITEM_READ","ADMIN","WITHDRAWN_READ","policyTypeList","label","policyActionList","toString","RESOURCE_POLICY_FORM_NAME_CONFIG","metadataFields","repeatable","submissionId","hasSelectableMetadata","RESOURCE_POLICY_FORM_DESCRIPTION_CONFIG","rows","RESOURCE_POLICY_FORM_POLICY_TYPE_CONFIG","required","validators","errorMessages","RESOURCE_POLICY_FORM_ACTION_TYPE_CONFIG","RESOURCE_POLICY_FORM_DATE_GROUP_CONFIG","RESOURCE_POLICY_FORM_DATE_GROUP_LAYOUT","element","control","RESOURCE_POLICY_FORM_START_DATE_CONFIG","placeholder","inline","toggleIcon","RESOURCE_POLICY_FORM_START_DATE_LAYOUT","container","grid","host","RESOURCE_POLICY_FORM_END_DATE_CONFIG","RESOURCE_POLICY_FORM_END_DATE_LAYOUT","ResourcePolicyFormComponent","formService","resourcePolicyTargetName$","BehaviorSubject","formId","getUniqueId","formModel","buildResourcePolicyForm","canSetGrant","epersonRD$","groupRD$","dsoRD$","rdArr","find","rd","dsoRD","resourcePolicyGrant","getResourcePolicyTargetName","isFormValid","isValid","policyTypeConf","disabled","actionConf","startDateModel","endDateModel","dateGroupConfig","D","initModelsValue","model","startDate","endDate","hasOwnProperty","updateObjectSelected","isEPerson","resourcePolicyGrantType","onReset","onSubmit","getFormData","take","eventPayload","createResourcePolicyByFormData","name","description","policyType","action","start","end","ITEM_EDIT_WITHDRAW_PATH","ITEM_EDIT_REINSTATE_PATH","ITEM_EDIT_PRIVATE_PATH","ITEM_EDIT_PUBLIC_PATH","ITEM_EDIT_DELETE_PATH","ITEM_EDIT_MOVE_PATH","ITEM_EDIT_AUTHORIZATIONS_PATH","ResourcePolicyTargetResolver"],"mappings":"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","file":"x","sourcesContent":["import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BehaviorSubject, from as observableFrom, Observable, Subscription } from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilChanged,\n  filter,\n  map,\n  reduce,\n  scan,\n  startWith,\n  take\n} from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { ResourcePolicyService } from '../../core/resource-policy/resource-policy.service';\nimport {\n  getFirstSucceededRemoteDataPayload,\n  getFirstSucceededRemoteDataWithNotEmptyPayload,\n  getAllSucceededRemoteData\n} from '../../core/shared/operators';\nimport { ResourcePolicy } from '../../core/resource-policy/models/resource-policy.model';\nimport { DSONameService } from '../../core/breadcrumbs/dso-name.service';\nimport { Group } from '../../core/eperson/models/group.model';\nimport { GroupDataService } from '../../core/eperson/group-data.service';\nimport { hasValue, isEmpty, isNotEmpty } from '../empty.util';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { RequestService } from '../../core/data/request.service';\nimport { NotificationsService } from '../notifications/notifications.service';\nimport { dateToString, stringToNgbDateStruct } from '../date.util';\nimport { followLink } from '../utils/follow-link-config.model';\nimport { ACCESS_CONTROL_MODULE_PATH } from '../../app-routing-paths';\nimport { GROUP_EDIT_PATH } from '../../access-control/access-control-routing-paths';\n\ninterface ResourcePolicyCheckboxEntry {\n  id: string;\n  policy: ResourcePolicy;\n  checked: boolean;\n}\n\n@Component({\n  selector: 'ds-resource-policies',\n  styleUrls: ['./resource-policies.component.scss'],\n  templateUrl: './resource-policies.component.html'\n})\n/**\n * Component that shows the policies for given resource\n */\nexport class ResourcePoliciesComponent implements OnInit, OnDestroy {\n\n  /**\n   * The resource UUID\n   * @type {string}\n   */\n  @Input() public resourceUUID: string;\n\n  /**\n   * The resource type (e.g. 'item', 'bundle' etc) used as key to build automatically translation label\n   * @type {string}\n   */\n  @Input() public resourceType: string;\n\n  /**\n   * A boolean representing if component is active\n   * @type {boolean}\n   */\n  private isActive: boolean;\n\n  /**\n   * A boolean representing if a submission delete operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  private processingDelete$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The list of policies for given resource\n   * @type {BehaviorSubject<ResourcePolicyCheckboxEntry[]>}\n   */\n  private resourcePoliciesEntries$: BehaviorSubject<ResourcePolicyCheckboxEntry[]> =\n    new BehaviorSubject<ResourcePolicyCheckboxEntry[]>([]);\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {ChangeDetectorRef} cdr\n   * @param {DSONameService} dsoNameService\n   * @param {EPersonDataService} ePersonService\n   * @param {GroupDataService} groupService\n   * @param {NotificationsService} notificationsService\n   * @param {RequestService} requestService\n   * @param {ResourcePolicyService} resourcePolicyService\n   * @param {ActivatedRoute} route\n   * @param {Router} router\n   * @param {TranslateService} translate\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private dsoNameService: DSONameService,\n    private ePersonService: EPersonDataService,\n    private groupService: GroupDataService,\n    private notificationsService: NotificationsService,\n    private requestService: RequestService,\n    private resourcePolicyService: ResourcePolicyService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private translate: TranslateService\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the resource's policies\n   */\n  ngOnInit(): void {\n    this.isActive = true;\n    this.initResourcePolicyLIst();\n  }\n\n  /**\n   * Check if there are any selected resource's policies to be deleted\n   *\n   * @return {Observable<boolean>}\n   */\n  canDelete(): Observable<boolean> {\n    return observableFrom(this.resourcePoliciesEntries$.value).pipe(\n      filter((entry: ResourcePolicyCheckboxEntry) => entry.checked),\n      reduce((acc: any, value: any) => [...acc, value], []),\n      map((entries: ResourcePolicyCheckboxEntry[]) => isNotEmpty(entries)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Delete the selected resource's policies\n   */\n  deleteSelectedResourcePolicies(): void {\n    this.processingDelete$.next(true);\n    const policiesToDelete: ResourcePolicyCheckboxEntry[] = this.resourcePoliciesEntries$.value\n      .filter((entry: ResourcePolicyCheckboxEntry) => entry.checked);\n    this.subs.push(\n      observableFrom(policiesToDelete).pipe(\n        concatMap((entry: ResourcePolicyCheckboxEntry) => this.resourcePolicyService.delete(entry.policy.id)),\n        scan((acc: any, value: any) => [...acc, value], []),\n        filter((results: boolean[]) => results.length === policiesToDelete.length),\n        take(1),\n      ).subscribe((results: boolean[]) => {\n        const failureResults = results.filter((result: boolean) => !result);\n        if (isEmpty(failureResults)) {\n          this.notificationsService.success(null, this.translate.get('resource-policies.delete.success.content'));\n        } else {\n          this.notificationsService.error(null, this.translate.get('resource-policies.delete.failure.content'));\n        }\n        this.requestService.setStaleByHrefSubstring(this.resourceUUID);\n        this.processingDelete$.next(false);\n      })\n    );\n  }\n\n  /**\n   * Returns a date in simplified format (YYYY-MM-DD).\n   *\n   * @param date\n   * @return a string with formatted date\n   */\n  formatDate(date: string): string {\n    return isNotEmpty(date) ? dateToString(stringToNgbDateStruct(date)) : '';\n  }\n\n  /**\n   * Return the ePerson's name which the given policy is linked to\n   *\n   * @param policy The resource policy\n   */\n  getEPersonName(policy: ResourcePolicy): Observable<string> {\n    // TODO to be reviewed when https://github.com/DSpace/dspace-angular/issues/644 will be resolved\n    // return this.ePersonService.findByHref(policy._links.eperson.href).pipe(\n    return policy.eperson.pipe(\n      filter(() => this.isActive),\n      getFirstSucceededRemoteDataWithNotEmptyPayload(),\n      map((eperson: EPerson) => this.dsoNameService.getName(eperson)),\n      startWith('')\n    );\n  }\n\n  /**\n   * Return the group's name which the given policy is linked to\n   *\n   * @param policy The resource policy\n   */\n  getGroupName(policy: ResourcePolicy): Observable<string> {\n    // TODO to be reviewed when https://github.com/DSpace/dspace-angular/issues/644 will be resolved\n    // return this.groupService.findByHref(policy._links.group.href).pipe(\n    return policy.group.pipe(\n      filter(() => this.isActive),\n      getFirstSucceededRemoteDataWithNotEmptyPayload(),\n      map((group: Group) => this.dsoNameService.getName(group)),\n      startWith('')\n    );\n  }\n\n  /**\n   * Return all resource's policies\n   *\n   * @return an observable that emits all resource's policies\n   */\n  getResourcePolicies(): Observable<ResourcePolicyCheckboxEntry[]> {\n    return this.resourcePoliciesEntries$.asObservable();\n  }\n\n  /**\n   * Check whether the given policy is linked to a ePerson\n   *\n   * @param policy The resource policy\n   * @return an observable that emits true when the policy is linked to a ePerson, false otherwise\n   */\n  hasEPerson(policy): Observable<boolean> {\n    // TODO to be reviewed when https://github.com/DSpace/dspace-angular/issues/644 will be resolved\n    // return this.ePersonService.findByHref(policy._links.eperson.href).pipe(\n    return policy.eperson.pipe(\n      filter(() => this.isActive),\n      getFirstSucceededRemoteDataPayload(),\n      map((eperson: EPerson) => isNotEmpty(eperson)),\n      startWith(false)\n    );\n  }\n\n  /**\n   * Check whether the given policy is linked to a group\n   *\n   * @param policy The resource policy\n   * @return an observable that emits true when the policy is linked to a group, false otherwise\n   */\n  hasGroup(policy): Observable<boolean> {\n    // TODO to be reviewed when https://github.com/DSpace/dspace-angular/issues/644 will be resolved\n    // return this.groupService.findByHref(policy._links.group.href).pipe(\n    return policy.group.pipe(\n      filter(() => this.isActive),\n      getFirstSucceededRemoteDataPayload(),\n      map((group: Group) => isNotEmpty(group)),\n      startWith(false)\n    );\n  }\n\n  /**\n   * Initialize the resource's policies list\n   */\n  initResourcePolicyLIst() {\n    this.subs.push(this.resourcePolicyService.searchByResource(this.resourceUUID, null, false, true,\n      followLink('eperson'), followLink('group')).pipe(\n      filter(() => this.isActive),\n      getAllSucceededRemoteData()\n    ).subscribe((result) => {\n      const entries = result.payload.page.map((policy: ResourcePolicy) => ({\n        id: policy.id,\n        policy: policy,\n        checked: false\n      }));\n      this.resourcePoliciesEntries$.next(entries);\n      // TODO detectChanges still needed?\n      this.cdr.detectChanges();\n    }));\n  }\n\n  /**\n   * Return a boolean representing if a delete operation is pending\n   *\n   * @return {Observable<boolean>}\n   */\n  isProcessingDelete(): Observable<boolean> {\n    return this.processingDelete$.asObservable();\n  }\n\n  /**\n   * Redirect to resource policy creation page\n   */\n  redirectToResourcePolicyCreatePage(): void {\n    this.router.navigate([`./create`], {\n      relativeTo: this.route,\n      queryParams: {\n        policyTargetId: this.resourceUUID,\n        targetType: this.resourceType\n      }\n    });\n  }\n\n  /**\n   * Redirect to resource policy editing page\n   *\n   * @param policy The resource policy\n   */\n  redirectToResourcePolicyEditPage(policy: ResourcePolicy): void {\n    this.router.navigate([`./edit`], {\n      relativeTo: this.route,\n      queryParams: {\n        policyId: policy.id\n      }\n    });\n  }\n\n  /**\n   * Redirect to group edit page\n   *\n   * @param policy The resource policy\n   */\n  redirectToGroupEditPage(policy: ResourcePolicy): void {\n    this.subs.push(\n      this.groupService.findByHref(policy._links.group.href, false).pipe(\n        filter(() => this.isActive),\n        getFirstSucceededRemoteDataPayload(),\n        map((group: Group) => group.id)\n      ).subscribe((groupUUID) => {\n        this.router.navigate([ACCESS_CONTROL_MODULE_PATH, GROUP_EDIT_PATH, groupUUID]);\n      })\n    );\n  }\n\n  /**\n   * Select/unselect all checkbox in the list\n   */\n  selectAllCheckbox(event: any): void {\n    const checked = event.target.checked;\n    this.resourcePoliciesEntries$.value.forEach((entry: ResourcePolicyCheckboxEntry) => entry.checked = checked);\n  }\n\n  /**\n   * Select/unselect checkbox\n   */\n  selectCheckbox(policyEntry: ResourcePolicyCheckboxEntry, checked: boolean) {\n    policyEntry.checked = checked;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.isActive = false;\n    this.resourcePoliciesEntries$ = null;\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n\n}\n","<div *ngIf=\"(getResourcePolicies() | async)?.length > 0\" class=\"table-responsive\">\n  <table class=\"table table-striped table-bordered table-hover\">\n    <thead>\n      <tr>\n        <th colspan=\"10\">\n          <div class=\"d-flex justify-content-between align-items-center m-0\">\n            {{ 'resource-policies.table.headers.title.for.' + resourceType | translate }} {{resourceUUID}}\n            <div>\n              <button class=\"btn btn-danger float-right ml-1\"\n                      [disabled]=\"(!(canDelete() | async)) || (isProcessingDelete() | async)\"\n                      [title]=\"'resource-policies.delete.btn.title' | translate\"\n                      (click)=\"deleteSelectedResourcePolicies()\">\n                <span *ngIf=\"(isProcessingDelete() | async)\">\n                  <i class='fas fa-circle-notch fa-spin'></i> {{'submission.workflow.tasks.generic.processing' | translate}}\n                </span>\n                <span *ngIf=\"!(isProcessingDelete() | async)\">\n                  <i class='fas fa-trash-alt fa-fw'></i>\n                  {{'resource-policies.delete.btn' | translate}}\n                </span>\n              </button>\n              <button class=\"btn btn-success float-right\"\n                      [disabled]=\"(isProcessingDelete() | async)\"\n                      [title]=\"'resource-policies.add.for.' + resourceType | translate\"\n                      (click)=\"redirectToResourcePolicyCreatePage()\">\n                <i class='fas fa-plus'></i>\n                {{'resource-policies.add.button' | translate}}\n              </button>\n            </div>\n          </div>\n        </th>\n      </tr>\n      <tr class=\"text-center\">\n        <th>\n          <div class=\"custom-control custom-checkbox\">\n            <input type=\"checkbox\"\n                   class=\"custom-control-input\"\n                   [id]=\"'selectAll_' + resourceUUID\"\n                   (change)=\"selectAllCheckbox($event)\">\n            <label class=\"custom-control-label\" [for]=\"'selectAll_' + resourceUUID\"></label>\n          </div>\n        </th>\n        <th>{{'resource-policies.table.headers.id' | translate}}</th>\n        <th>{{'resource-policies.table.headers.name' | translate}}</th>\n        <th>{{'resource-policies.table.headers.policyType' | translate}}</th>\n        <th>{{'resource-policies.table.headers.action' | translate}}</th>\n        <th>{{'resource-policies.table.headers.eperson' | translate}}</th>\n        <th>{{'resource-policies.table.headers.group' | translate}}</th>\n        <th>{{'resource-policies.table.headers.date.start' | translate}}</th>\n        <th>{{'resource-policies.table.headers.date.end' | translate}}</th>\n        <th>{{'resource-policies.table.headers.edit' | translate}}</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let entry of (getResourcePolicies() | async); trackById\">\n        <td class=\"text-center\">\n          <div class=\"custom-control custom-checkbox\">\n            <input type=\"checkbox\"\n                   class=\"custom-control-input\"\n                   [id]=\"entry.id\"\n                   [ngModel]=\"entry.checked\"\n                   (ngModelChange)=\"selectCheckbox(entry, $event)\">\n            <label class=\"custom-control-label\" [for]=\"entry.id\"></label>\n          </div>\n        </td>\n        <th scope=\"row\">\n          {{entry.id}}\n        </th>\n        <td>{{entry.policy.name}}</td>\n        <td>{{entry.policy.policyType}}</td>\n        <td>{{entry.policy.action}}</td>\n        <td *ngIf=\"(hasEPerson(entry.policy) | async)\">\n          {{getEPersonName(entry.policy) | async}}\n        </td>\n        <td *ngIf=\"!(hasEPerson(entry.policy) | async)\"></td>\n        <td *ngIf=\"(hasGroup(entry.policy) | async)\">\n          {{getGroupName(entry.policy) | async}}\n        </td>\n        <td *ngIf=\"!(hasGroup(entry.policy) | async)\"></td>\n        <td>{{formatDate(entry.policy.startDate)}}</td>\n        <td>{{formatDate(entry.policy.endDate)}}</td>\n        <td class=\"text-center\">\n\n          <div class=\"btn-group edit-field\">\n            <button class=\"btn btn-outline-primary btn-sm\"\n                    [title]=\"'resource-policies.table.headers.edit.policy' | translate\"\n                    (click)=\"redirectToResourcePolicyEditPage(entry.policy)\">\n              <i class=\"fas fa-edit fa-fw\"></i>\n            </button>\n            <button *ngIf=\"(hasGroup(entry.policy) | async)\" class=\"btn btn-outline-primary btn-sm\"\n                    [title]=\"'resource-policies.table.headers.edit.group' | translate\"\n                    (click)=\"redirectToGroupEditPage(entry.policy)\">\n              <i class=\"fas fa-users fa-fw\"></i>\n            </button>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n","import { Component, EventEmitter, Injector, Input, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { uniqueId } from 'lodash';\n\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { PaginatedList } from '../../../../core/data/paginated-list.model';\nimport { DSpaceObject } from '../../../../core/shared/dspace-object.model';\nimport { PaginationComponentOptions } from '../../../pagination/pagination-component-options.model';\nimport { DataService } from '../../../../core/data/data.service';\nimport { hasValue, isNotEmpty } from '../../../empty.util';\nimport { FindListOptions } from '../../../../core/data/request.models';\nimport { DSONameService } from '../../../../core/breadcrumbs/dso-name.service';\nimport { getDataServiceFor } from '../../../../core/cache/builders/build-decorators';\nimport { EPERSON } from '../../../../core/eperson/models/eperson.resource-type';\nimport { GROUP } from '../../../../core/eperson/models/group.resource-type';\nimport { ResourceType } from '../../../../core/shared/resource-type';\nimport { EPersonDataService } from '../../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { fadeInOut } from '../../../animations/fade';\nimport { getFirstCompletedRemoteData } from '../../../../core/shared/operators';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\n\nexport interface SearchEvent {\n  scope: string;\n  query: string;\n}\n\n@Component({\n  selector: 'ds-eperson-group-list',\n  styleUrls: ['./eperson-group-list.component.scss'],\n  templateUrl: './eperson-group-list.component.html',\n  animations: [\n    fadeInOut\n  ]\n})\n/**\n * Component that shows a list of eperson or group\n */\nexport class EpersonGroupListComponent implements OnInit, OnDestroy {\n\n  /**\n   * A boolean representing id component should list eperson or group\n   */\n  @Input() isListOfEPerson = true;\n\n  /**\n   * The uuid of eperson or group initially selected\n   */\n  @Input() initSelected: string;\n\n  /**\n   * An event fired when a eperson or group is selected.\n   * Event's payload equals to DSpaceObject.\n   */\n  @Output() select: EventEmitter<DSpaceObject> = new EventEmitter<DSpaceObject>();\n\n  /**\n   * Current search query\n   */\n  public currentSearchQuery = '';\n\n  /**\n   * Current search scope\n   */\n  public currentSearchScope = 'metadata';\n\n  /**\n   * Pagination config used to display the list\n   */\n  public paginationOptions: PaginationComponentOptions = new PaginationComponentOptions();\n\n  /**\n   * The data service used to make request.\n   * It could be EPersonDataService or GroupDataService\n   */\n  private dataService: DataService<DSpaceObject>;\n\n  /**\n   * A list of eperson or group\n   */\n  private list$: BehaviorSubject<RemoteData<PaginatedList<DSpaceObject>>> = new BehaviorSubject<RemoteData<PaginatedList<DSpaceObject>>>({} as any);\n\n  /**\n   * The eperson or group's id selected\n   * @type {string}\n   */\n  private entrySelectedId: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  private pageConfigSub: Subscription;\n\n  /**\n   * Initialize instance variables and inject the properly DataService\n   *\n   * @param {DSONameService} dsoNameService\n   * @param {Injector} parentInjector\n   */\n  constructor(public dsoNameService: DSONameService, private parentInjector: Injector,\n              private paginationService: PaginationService) {\n  }\n\n  /**\n   * Initialize the component\n   */\n  ngOnInit(): void {\n    const resourceType: ResourceType = (this.isListOfEPerson) ? EPERSON : GROUP;\n    const provider = getDataServiceFor(resourceType);\n    this.dataService = Injector.create({\n      providers: [],\n      parent: this.parentInjector\n    }).get(provider);\n    this.paginationOptions.id = uniqueId('egl');\n    this.paginationOptions.pageSize = 5;\n\n    if (this.initSelected) {\n      this.entrySelectedId.next(this.initSelected);\n    }\n\n    this.updateList(this.currentSearchScope, this.currentSearchQuery);\n  }\n\n  /**\n   * Method called when an entry is selected.\n   * Emit a new select Event\n   *\n   * @param entry The eperson or group selected\n   */\n  emitSelect(entry: DSpaceObject): void {\n    this.select.emit(entry);\n    this.entrySelectedId.next(entry.id);\n  }\n\n  /**\n   * Return the list of eperson or group\n   */\n  getList(): Observable<RemoteData<PaginatedList<DSpaceObject>>> {\n    return this.list$.asObservable();\n  }\n\n  /**\n   * Return a boolean representing if a table row is selected\n   *\n   * @return {boolean}\n   */\n  isSelected(entry: DSpaceObject): Observable<boolean> {\n    return this.entrySelectedId.asObservable().pipe(\n      map((selectedId) => isNotEmpty(selectedId) && selectedId === entry.id)\n    );\n  }\n\n\n  /**\n   * Method called on search\n   */\n  onSearch(searchEvent: SearchEvent) {\n    this.currentSearchQuery = searchEvent.query;\n    this.currentSearchScope = searchEvent.scope;\n    this.paginationService.resetPage(this.paginationOptions.id);\n    this.updateList(this.currentSearchScope, this.currentSearchQuery);\n  }\n\n  /**\n   * Retrieve a paginate list of eperson or group\n   */\n  updateList(scope: string, query: string): void {\n    if (hasValue(this.pageConfigSub)) {\n      this.pageConfigSub.unsubscribe();\n    }\n    this.pageConfigSub = this.paginationService.getCurrentPagination(this.paginationOptions.id, this.paginationOptions)\n      .subscribe((paginationOptions) => {\n    const options: FindListOptions = Object.assign({}, new FindListOptions(), {\n          elementsPerPage: paginationOptions.pageSize,\n          currentPage: paginationOptions.currentPage\n    });\n\n    const search$: Observable<RemoteData<PaginatedList<DSpaceObject>>> = this.isListOfEPerson ?\n      (this.dataService as EPersonDataService).searchByScope(scope, query, options) :\n      (this.dataService as GroupDataService).searchGroups(query, options);\n\n    this.subs.push(search$.pipe(getFirstCompletedRemoteData())\n      .subscribe((list: RemoteData<PaginatedList<DSpaceObject>>) => {\n        if (hasValue(this.list$)) {\n          this.list$.next(list);\n        }\n      })\n    );\n      });\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.list$ = null;\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n    this.paginationService.clearPagination(this.paginationOptions.id);\n  }\n\n\n}\n","<div class=\"mt-3\" @fadeInOut>\n  <ds-eperson-search-box *ngIf=\"isListOfEPerson\" (search)=\"onSearch($event)\"></ds-eperson-search-box>\n  <ds-group-search-box *ngIf=\"!isListOfEPerson\" (search)=\"onSearch($event)\"></ds-group-search-box>\n\n  <ds-pagination *ngIf=\"(getList() | async)?.payload?.totalElements > 0\"\n                 [paginationOptions]=\"paginationOptions\"\n                 [collectionSize]=\"(getList() | async)?.payload?.totalElements\"\n                 [retainScrollPosition]=\"true\"\n                 [hideGear]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"groups\" class=\"table table-sm table-striped table-hover table-bordered\">\n        <thead>\n        <tr class=\"text-center\">\n          <th>{{'resource-policies.form.eperson-group-list.table.headers.id' | translate}}</th>\n          <th>{{'resource-policies.form.eperson-group-list.table.headers.name' | translate}}</th>\n          <th>{{'resource-policies.form.eperson-group-list.table.headers.action' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let entry of (getList() | async)?.payload?.page\"\n            [class.table-primary]=\"isSelected(entry) | async\">\n          <td>{{entry.id}}</td>\n          <td>{{dsoNameService.getName(entry)}}</td>\n          <td class=\"text-center\">\n            <button class=\"btn btn-sm btn-outline-primary\" (click)=\"emitSelect(entry)\">\n              {{'resource-policies.form.eperson-group-list.select.btn' | translate}}\n            </button>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { ResourcePolicyService } from '../../../core/resource-policy/resource-policy.service';\nimport { NotificationsService } from '../../notifications/notifications.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { ResourcePolicy } from '../../../core/resource-policy/models/resource-policy.model';\nimport { ResourcePolicyEvent } from '../form/resource-policy-form.component';\nimport { RESOURCE_POLICY } from '../../../core/resource-policy/models/resource-policy.resource-type';\nimport { ITEM_EDIT_AUTHORIZATIONS_PATH } from '../../../item-page/edit-item-page/edit-item-page.routing-paths';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-resource-policy-edit',\n  templateUrl: './resource-policy-edit.component.html'\n})\nexport class ResourcePolicyEditComponent implements OnInit {\n\n  /**\n   * The resource policy object to edit\n   */\n  public resourcePolicy: ResourcePolicy;\n\n  /**\n   * A boolean representing if a submission editing operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  private processing$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {NotificationsService} notificationsService\n   * @param {ResourcePolicyService} resourcePolicyService\n   * @param {ActivatedRoute} route\n   * @param {Router} router\n   * @param {TranslateService} translate\n   */\n  constructor(\n    private notificationsService: NotificationsService,\n    private resourcePolicyService: ResourcePolicyService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private translate: TranslateService) {\n  }\n\n  /**\n   * Initialize the component\n   */\n  ngOnInit(): void {\n    this.route.data.pipe(\n      map((data) => data),\n      take(1)\n    ).subscribe((data: any) => {\n      this.resourcePolicy = (data.resourcePolicy as RemoteData<ResourcePolicy>).payload;\n    });\n  }\n\n  /**\n   * Return a boolean representing if an operation is pending\n   *\n   * @return {Observable<boolean>}\n   */\n  isProcessing(): Observable<boolean> {\n    return this.processing$.asObservable();\n  }\n\n  /**\n   * Redirect to the authorizations page\n   */\n  redirectToAuthorizationsPage() {\n    this.router.navigate([`../../${ITEM_EDIT_AUTHORIZATIONS_PATH}`], { relativeTo: this.route });\n  }\n\n  /**\n   * Update a resource policy\n   *\n   * @param event The {{ResourcePolicyEvent}} emitted\n   */\n  updateResourcePolicy(event: ResourcePolicyEvent) {\n    this.processing$.next(true);\n    const updatedObject = Object.assign({}, event.object, {\n      id: this.resourcePolicy.id,\n      type: RESOURCE_POLICY.value,\n      _links: this.resourcePolicy._links\n    });\n    this.resourcePolicyService.update(updatedObject).pipe(\n      getFirstCompletedRemoteData(),\n    ).subscribe((responseRD: RemoteData<ResourcePolicy>) => {\n      this.processing$.next(false);\n      if (responseRD && responseRD.hasSucceeded) {\n        this.notificationsService.success(null, this.translate.get('resource-policies.edit.page.success.content'));\n        this.redirectToAuthorizationsPage();\n      } else {\n        this.notificationsService.error(null, this.translate.get('resource-policies.edit.page.failure.content'));\n      }\n    });\n  }\n}\n","<div class=\"container\">\n  <h4 class=\"mb-3\">{{'resource-policies.edit.page.heading' | translate}} {{resourcePolicy.id}}</h4>\n\n  <ds-resource-policy-form [resourcePolicy]=\"resourcePolicy\"\n                           [isProcessing]=\"isProcessing()\"\n                           (reset)=\"redirectToAuthorizationsPage()\"\n                           (submit)=\"updateResourcePolicy($event)\"></ds-resource-policy-form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { ResourcePolicyService } from '../../../core/resource-policy/resource-policy.service';\nimport { NotificationsService } from '../../notifications/notifications.service';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { ResourcePolicy } from '../../../core/resource-policy/models/resource-policy.model';\nimport { ResourcePolicyEvent } from '../form/resource-policy-form.component';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { ITEM_EDIT_AUTHORIZATIONS_PATH } from '../../../item-page/edit-item-page/edit-item-page.routing-paths';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n@Component({\n  selector: 'ds-resource-policy-create',\n  templateUrl: './resource-policy-create.component.html'\n})\nexport class ResourcePolicyCreateComponent implements OnInit {\n\n  /**\n   * The name of the resource target of the policy\n   */\n  public targetResourceName: string;\n\n  /**\n   * A boolean representing if a submission creation operation is pending\n   * @type {BehaviorSubject<boolean>}\n   */\n  private processing$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The uuid of the resource target of the policy\n   */\n  private targetResourceUUID: string;\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {DSONameService} dsoNameService\n   * @param {NotificationsService} notificationsService\n   * @param {ResourcePolicyService} resourcePolicyService\n   * @param {ActivatedRoute} route\n   * @param {Router} router\n   * @param {TranslateService} translate\n   */\n  constructor(\n    private dsoNameService: DSONameService,\n    private notificationsService: NotificationsService,\n    private resourcePolicyService: ResourcePolicyService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private translate: TranslateService) {\n  }\n\n  /**\n   * Initialize the component\n   */\n  ngOnInit(): void {\n    this.route.data.pipe(\n      map((data) => data),\n      take(1)\n    ).subscribe((data: any) => {\n      this.targetResourceUUID = (data.resourcePolicyTarget as RemoteData<DSpaceObject>).payload.id;\n      this.targetResourceName = this.dsoNameService.getName((data.resourcePolicyTarget as RemoteData<DSpaceObject>).payload);\n    });\n  }\n\n  /**\n   * Return a boolean representing if an operation is pending\n   *\n   * @return {Observable<boolean>}\n   */\n  isProcessing(): Observable<boolean> {\n    return this.processing$.asObservable();\n  }\n\n  /**\n   * Redirect to the authorizations page\n   */\n  redirectToAuthorizationsPage(): void {\n    this.router.navigate([`../../${ITEM_EDIT_AUTHORIZATIONS_PATH}`], { relativeTo: this.route });\n  }\n\n  /**\n   * Create a new resource policy\n   *\n   * @param event The {{ResourcePolicyEvent}} emitted\n   */\n  createResourcePolicy(event: ResourcePolicyEvent): void {\n    this.processing$.next(true);\n    let response$;\n    if (event.target.type === 'eperson') {\n      response$ = this.resourcePolicyService.create(event.object, this.targetResourceUUID, event.target.uuid);\n    } else {\n      response$ = this.resourcePolicyService.create(event.object, this.targetResourceUUID, null, event.target.uuid);\n    }\n    response$.pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((responseRD: RemoteData<ResourcePolicy>) => {\n      this.processing$.next(false);\n      if (responseRD.hasSucceeded) {\n        this.notificationsService.success(null, this.translate.get('resource-policies.create.page.success.content'));\n        this.redirectToAuthorizationsPage();\n      } else {\n        this.notificationsService.error(null, this.translate.get('resource-policies.create.page.failure.content'));\n      }\n    });\n  }\n}\n","<div class=\"container\">\n  <h4 class=\"mb-3\">{{'resource-policies.create.page.heading' | translate}} {{targetResourceName}}</h4>\n\n  <ds-resource-policy-form [isProcessing]=\"isProcessing()\"\n                           (reset)=\"redirectToAuthorizationsPage()\"\n                           (submit)=\"createResourcePolicy($event)\"></ds-resource-policy-form>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { isEmpty } from '../../empty.util';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { ResourcePolicy } from '../../../core/resource-policy/models/resource-policy.model';\nimport { ResourcePolicyService } from '../../../core/resource-policy/resource-policy.service';\nimport { followLink } from '../../utils/follow-link-config.model';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ResourcePolicyResolver implements Resolve<RemoteData<ResourcePolicy>> {\n\n  constructor(private resourcePolicyService: ResourcePolicyService, private router: Router) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<ResourcePolicy>> {\n    const policyId = route.queryParamMap.get('policyId');\n\n    if (isEmpty(policyId)) {\n      this.router.navigateByUrl('/404', { skipLocationChange: true });\n    }\n\n    return this.resourcePolicyService.findById(policyId, true, false, followLink('eperson'), followLink('group')).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { SearchEvent } from '../eperson-group-list.component';\n\n/**\n * A component used to show a search box for groups.\n */\n@Component({\n  selector: 'ds-group-search-box',\n  templateUrl: './group-search-box.component.html',\n})\nexport class GroupSearchBoxComponent {\n\n  labelPrefix = 'admin.access-control.groups.';\n\n  /**\n   * The search form\n   */\n  searchForm;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * An event fired when a search is triggred.\n   * Event's payload is a SearchEvent.\n   */\n  @Output() search: EventEmitter<SearchEvent> = new EventEmitter<SearchEvent>();\n\n  constructor(private formBuilder: FormBuilder) {\n    this.searchForm = this.formBuilder.group(({\n      query: '',\n    }));\n  }\n\n  /**\n   * Reset the search form\n   */\n  reset() {\n    this.searchForm = this.formBuilder.group(({\n      query: '',\n    }));\n  }\n\n  /**\n   * Emit a new search event\n   * @param data  Form data\n   */\n  submit(data: any) {\n    const event: SearchEvent = {\n      scope: '',\n      query: data.query\n    };\n    this.search.emit(event);\n  }\n}\n","<form class=\"d-flex justify-content-between\"\n      [formGroup]=\"searchForm\"\n      (ngSubmit)=\"submit(searchForm.value); $event.stopImmediatePropagation();\" >\n  <div class=\"flex-grow-1 mr-3\">\n    <div class=\"form-group input-group\">\n      <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n             class=\"form-control\" aria-label=\"Search input\">\n      <span class=\"input-group-append\">\n        <button type=\"submit\" class=\"search-button btn btn-primary\">\n          <i class=\"fas fa-search\"></i> {{ labelPrefix + 'search.button' | translate }}\n        </button>\n      </span>\n    </div>\n  </div>\n  <div>\n    <button type=\"button\" class=\"search-button btn btn-secondary\" (click)=\"submit(null); reset()\">\n      {{ labelPrefix + 'button.see-all' | translate }}\n    </button>\n  </div>\n</form>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { SearchEvent } from '../eperson-group-list.component';\nimport { isNotNull } from '../../../../empty.util';\n\n/**\n * A component used to show a search box for epersons.\n */\n@Component({\n  selector: 'ds-eperson-search-box',\n  templateUrl: './eperson-search-box.component.html',\n})\nexport class EpersonSearchBoxComponent {\n\n  labelPrefix = 'admin.access-control.epeople.';\n\n  /**\n   * The search form\n   */\n  searchForm;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * An event fired when a search is triggred.\n   * Event's payload is a SearchEvent.\n   */\n  @Output() search: EventEmitter<SearchEvent> = new EventEmitter<SearchEvent>();\n\n  constructor(private formBuilder: FormBuilder) {\n    this.searchForm = this.formBuilder.group(({\n      scope: 'metadata',\n      query: '',\n    }));\n  }\n\n  /**\n   * Reset the search form\n   */\n  reset() {\n    this.searchForm = this.formBuilder.group(({\n      scope: 'metadata',\n      query: '',\n    }));\n  }\n\n  /**\n   * Emit a new search event\n   * @param data  Form data\n   */\n  submit(data: any) {\n    const event: SearchEvent = {\n      scope: isNotNull(data) ? data.scope : 'metadata',\n      query: isNotNull(data) ? data.query : ''\n    };\n\n    this.search.emit(event);\n  }\n}\n","<form class=\"d-flex justify-content-between\"\n      [formGroup]=\"searchForm\"\n      (ngSubmit)=\"submit(searchForm.value); $event.stopImmediatePropagation();\" >\n  <div>\n    <select name=\"scope\" id=\"scope\" formControlName=\"scope\" class=\"form-control\" aria-label=\"Search scope\">\n      <option value=\"metadata\">{{labelPrefix + 'search.scope.metadata' | translate}}</option>\n      <option value=\"email\">{{labelPrefix + 'search.scope.email' | translate}}</option>\n    </select>\n  </div>\n  <div class=\"flex-grow-1 mr-3 ml-3\">\n    <div class=\"form-group input-group\">\n      <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n             class=\"form-control\" aria-label=\"Search input\">\n      <span class=\"input-group-append\">\n        <button type=\"submit\" class=\"search-button btn btn-primary\">\n          <i class=\"fas fa-search\"></i> {{ labelPrefix + 'search.button' | translate }}\n        </button>\n      </span>\n    </div>\n  </div>\n  <div>\n    <button type=\"button\" class=\"search-button btn btn-secondary\" (click)=\"submit(null); reset()\">\n      {{ labelPrefix + 'button.see-all' | translate }}\n    </button>\n  </div>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { ResourcePoliciesComponent } from './resource-policies.component';\nimport { ResourcePolicyFormComponent } from './form/resource-policy-form.component';\nimport { ResourcePolicyEditComponent } from './edit/resource-policy-edit.component';\nimport { ResourcePolicyCreateComponent } from './create/resource-policy-create.component';\nimport { FormModule } from '../form/form.module';\nimport { ResourcePolicyResolver } from './resolvers/resource-policy.resolver';\nimport { ResourcePolicyTargetResolver } from './resolvers/resource-policy-target.resolver';\nimport { EpersonGroupListComponent } from './form/eperson-group-list/eperson-group-list.component';\nimport { GroupSearchBoxComponent } from './form/eperson-group-list/group-search-box/group-search-box.component';\nimport { EpersonSearchBoxComponent } from './form/eperson-group-list/eperson-search-box/eperson-search-box.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { SharedModule } from '../shared.module';\n\nconst COMPONENTS = [\n  ResourcePoliciesComponent,\n  ResourcePolicyFormComponent,\n  ResourcePolicyEditComponent,\n  ResourcePolicyCreateComponent,\n  EpersonGroupListComponent,\n  EpersonSearchBoxComponent,\n  GroupSearchBoxComponent\n];\n\nconst PROVIDERS = [\n  ResourcePolicyResolver,\n  ResourcePolicyTargetResolver\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    NgbModule,\n    CommonModule,\n    FormModule,\n    TranslateModule,\n    SharedModule\n  ],\n  providers: [\n    ...PROVIDERS\n  ],\n  exports: [\n    ...COMPONENTS\n  ]\n})\nexport class ResourcePoliciesModule { }\n","/**\n * Enum representing the Policy Type of a Resource Policy\n */\nexport enum PolicyType {\n  /**\n   * A policy in place during the submission\n   */\n  TYPE_SUBMISSION = 'TYPE_SUBMISSION',\n\n  /**\n   * A policy in place during the approval workflow\n   */\n  TYPE_WORKFLOW = 'TYPE_WORKFLOW',\n\n  /**\n   * A policy that has been inherited from a container (the collection)\n   */\n  TYPE_INHERITED = 'TYPE_INHERITED',\n\n  /**\n   * A policy defined by the user during the submission or workflow phase\n   */\n  TYPE_CUSTOM = 'TYPE_CUSTOM',\n\n}\n","/**\n * Enum representing the Action Type of a Resource Policy\n */\nexport enum ActionType {\n  /**\n   * Action of reading, viewing or downloading something\n   */\n  READ = 'READ',\n\n  /**\n   * Action of modifying something\n   */\n  WRITE = 'WRITE',\n\n  /**\n   * Action of deleting something\n   */\n  DELETE = 'DELETE',\n\n  /**\n   * Action of adding something to a container\n   */\n  ADD = 'ADD',\n\n  /**\n   * Action of removing something from a container\n   */\n  REMOVE = 'REMOVE',\n\n  /**\n   * Action of performing workflow step 1\n   */\n  WORKFLOW_STEP_1 = 5,\n\n  /**\n   * Action of performing workflow step 2\n   */\n  WORKFLOW_STEP_2 = 6,\n\n  /**\n   *  Action of performing workflow step 3\n   */\n  WORKFLOW_STEP_3 = 7,\n\n  /**\n   *  Action of performing a workflow abort\n   */\n  WORKFLOW_ABORT = 8,\n\n  /**\n   * Default Read policies for Bitstreams submitted to container\n   */\n  DEFAULT_BITSTREAM_READ = 'DEFAULT_BITSTREAM_READ',\n\n  /**\n   *  Default Read policies for Items submitted to container\n   */\n  DEFAULT_ITEM_READ = 'DEFAULT_ITEM_READ',\n\n  /**\n   * Administrative actions\n   */\n  ADMIN = 'ADMIN',\n\n  /**\n   * Action of withdrawn reading\n   */\n  WITHDRAWN_READ = 'WITHDRAWN_READ'\n}\n","import {\n  DynamicDatePickerModelConfig,\n  DynamicFormControlLayout,\n  DynamicFormGroupModelConfig,\n  DynamicFormOptionConfig,\n  DynamicSelectModelConfig,\n} from '@ng-dynamic-forms/core';\n\nimport { DsDynamicInputModelConfig } from '../../form/builder/ds-dynamic-form-ui/models/ds-dynamic-input.model';\nimport { DsDynamicTextAreaModelConfig } from '../../form/builder/ds-dynamic-form-ui/models/ds-dynamic-textarea.model';\nimport { PolicyType } from '../../../core/resource-policy/models/policy-type.model';\nimport { ActionType } from '../../../core/resource-policy/models/action-type.model';\n\nconst policyTypeList: DynamicFormOptionConfig<any>[] = [\n  {\n    label: PolicyType.TYPE_SUBMISSION,\n    value: PolicyType.TYPE_SUBMISSION\n  },\n  {\n    label: PolicyType.TYPE_WORKFLOW,\n    value: PolicyType.TYPE_WORKFLOW\n  },\n  {\n    label: PolicyType.TYPE_INHERITED,\n    value: PolicyType.TYPE_INHERITED\n  },\n  {\n    label: PolicyType.TYPE_CUSTOM,\n    value: PolicyType.TYPE_CUSTOM\n  },\n];\n\nconst policyActionList: DynamicFormOptionConfig<any>[] = [\n  {\n    label: ActionType.READ.toString(),\n    value: ActionType.READ\n  },\n  {\n    label: ActionType.WRITE.toString(),\n    value: ActionType.WRITE\n  },\n  {\n    label: ActionType.REMOVE.toString(),\n    value: ActionType.REMOVE\n  },\n  {\n    label: ActionType.ADMIN.toString(),\n    value: ActionType.ADMIN\n  },\n  {\n    label: ActionType.DELETE.toString(),\n    value: ActionType.DELETE\n  },\n  {\n    label: ActionType.WITHDRAWN_READ.toString(),\n    value: ActionType.WITHDRAWN_READ\n  },\n  {\n    label: ActionType.DEFAULT_BITSTREAM_READ.toString(),\n    value: ActionType.DEFAULT_BITSTREAM_READ\n  },\n  {\n    label: ActionType.DEFAULT_ITEM_READ.toString(),\n    value: ActionType.DEFAULT_ITEM_READ\n  }\n];\n\nexport const RESOURCE_POLICY_FORM_NAME_CONFIG: DsDynamicInputModelConfig = {\n  id: 'name',\n  label: 'resource-policies.form.name.label',\n  metadataFields: [],\n  repeatable: false,\n  submissionId: '',\n  hasSelectableMetadata: false\n};\n\nexport const RESOURCE_POLICY_FORM_DESCRIPTION_CONFIG: DsDynamicTextAreaModelConfig = {\n  id: 'description',\n  label: 'resource-policies.form.description.label',\n  metadataFields: [],\n  repeatable: false,\n  rows: 10,\n  submissionId: '',\n  hasSelectableMetadata: false\n};\n\nexport const RESOURCE_POLICY_FORM_POLICY_TYPE_CONFIG: DynamicSelectModelConfig<any> = {\n  id: 'policyType',\n  label: 'resource-policies.form.policy-type.label',\n  options: policyTypeList,\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'resource-policies.form.policy-type.required'\n  }\n};\n\nexport const RESOURCE_POLICY_FORM_ACTION_TYPE_CONFIG: DynamicSelectModelConfig<any> = {\n  id: 'action',\n  label: 'resource-policies.form.action-type.label',\n  options: policyActionList,\n  required: true,\n  validators: {\n    required: null\n  },\n  errorMessages: {\n    required: 'resource-policies.form.action-type.required'\n  }\n};\n\nexport const RESOURCE_POLICY_FORM_DATE_GROUP_CONFIG: DynamicFormGroupModelConfig = {\n  id: 'date',\n  group: []\n};\nexport const RESOURCE_POLICY_FORM_DATE_GROUP_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    control: 'form-row',\n  }\n};\n\nexport const RESOURCE_POLICY_FORM_START_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'start',\n  label: 'resource-policies.form.date.start.label',\n  placeholder: 'resource-policies.form.date.start.label',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt'\n};\n\nexport const RESOURCE_POLICY_FORM_START_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'p-0',\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-md-6'\n  }\n};\n\nexport const RESOURCE_POLICY_FORM_END_DATE_CONFIG: DynamicDatePickerModelConfig = {\n  id: 'end',\n  label: 'resource-policies.form.date.end.label',\n  placeholder: 'resource-policies.form.date.end.label',\n  inline: false,\n  toggleIcon: 'far fa-calendar-alt'\n};\nexport const RESOURCE_POLICY_FORM_END_DATE_LAYOUT: DynamicFormControlLayout = {\n  element: {\n    container: 'p-0',\n    label: 'col-form-label'\n  },\n  grid: {\n    host: 'col-md-6'\n  }\n};\n","<div>\n  <ds-form *ngIf=\"formModel\"\n           #formRef=\"formComponent\"\n           [formId]=\"formId\"\n           [formModel]=\"formModel\"\n           [displaySubmit]=\"false\"\n           [displayCancel]=\"false\"></ds-form>\n  <div class=\"container-fluid\">\n    <label for=\"ResourcePolicyObject\">{{'resource-policies.form.eperson-group-list.label' | translate}}</label>\n    <input id=\"ResourcePolicyObject\" class=\"form-control mb-3\" type=\"text\" readonly [value]=\"resourcePolicyTargetName$ | async\">\n    <ng-container *ngIf=\"canSetGrant()\">\n      <ul ngbNav #nav=\"ngbNav\" class=\"nav-pills\">\n        <li ngbNavItem>\n          <a ngbNavLink>{{'resource-policies.form.eperson-group-list.tab.eperson' | translate}}</a>\n          <ng-template ngbNavContent>\n            <ds-eperson-group-list (select)=\"updateObjectSelected($event, true)\"></ds-eperson-group-list>\n          </ng-template>\n        </li>\n        <li ngbNavItem>\n          <a ngbNavLink>{{'resource-policies.form.eperson-group-list.tab.group' | translate}}</a>\n          <ng-template ngbNavContent>\n            <ds-eperson-group-list [isListOfEPerson]=\"false\"\n                                  (select)=\"updateObjectSelected($event, false)\"></ds-eperson-group-list>\n          </ng-template>\n        </li>\n      </ul>\n      <div [ngbNavOutlet]=\"nav\"></div>\n    </ng-container>\n    <div>\n      <hr>\n      <div class=\"form-group row\">\n\n        <div class=\"col text-right\">\n          <button type=\"reset\"\n                  class=\"btn btn-default\"\n                  [disabled]=\"(isProcessing | async)\"\n                  (click)=\"onReset()\">{{'form.cancel' | translate}}</button>\n          <button type=\"button\"\n                  class=\"btn btn-primary\"\n                  [disabled]=\"!(isFormValid() | async) || (isProcessing | async)\"\n                  (click)=\"onSubmit()\">\n            <span *ngIf=\"(isProcessing | async)\">\n                  <i class='fas fa-circle-notch fa-spin'></i> {{'submission.workflow.tasks.generic.processing' | translate}}\n                </span>\n            <span *ngIf=\"!(isProcessing | async)\">\n                  {{'form.submit' | translate}}\n                </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport {\n  Observable,\n  of as observableOf,\n  combineLatest as observableCombineLatest,\n  Subscription,\n  BehaviorSubject\n} from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  DynamicDatePickerModel,\n  DynamicFormControlModel,\n  DynamicFormGroupModel,\n  DynamicSelectModel\n} from '@ng-dynamic-forms/core';\n\nimport { ResourcePolicy } from '../../../core/resource-policy/models/resource-policy.model';\nimport { DsDynamicInputModel } from '../../form/builder/ds-dynamic-form-ui/models/ds-dynamic-input.model';\nimport {\n  RESOURCE_POLICY_FORM_ACTION_TYPE_CONFIG,\n  RESOURCE_POLICY_FORM_DATE_GROUP_CONFIG,\n  RESOURCE_POLICY_FORM_DATE_GROUP_LAYOUT,\n  RESOURCE_POLICY_FORM_DESCRIPTION_CONFIG,\n  RESOURCE_POLICY_FORM_END_DATE_CONFIG,\n  RESOURCE_POLICY_FORM_END_DATE_LAYOUT,\n  RESOURCE_POLICY_FORM_NAME_CONFIG,\n  RESOURCE_POLICY_FORM_POLICY_TYPE_CONFIG,\n  RESOURCE_POLICY_FORM_START_DATE_CONFIG,\n  RESOURCE_POLICY_FORM_START_DATE_LAYOUT\n} from './resource-policy-form.model';\nimport { DsDynamicTextAreaModel } from '../../form/builder/ds-dynamic-form-ui/models/ds-dynamic-textarea.model';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { DSONameService } from '../../../core/breadcrumbs/dso-name.service';\nimport { hasValue, isEmpty, isNotEmpty, hasValueOperator } from '../../empty.util';\nimport { FormService } from '../../form/form.service';\nimport { RESOURCE_POLICY } from '../../../core/resource-policy/models/resource-policy.resource-type';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { dateToISOFormat, stringToNgbDateStruct } from '../../date.util';\nimport { EPersonDataService } from '../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { getFirstSucceededRemoteData } from '../../../core/shared/operators';\nimport { RequestService } from '../../../core/data/request.service';\n\nexport interface ResourcePolicyEvent {\n  object: ResourcePolicy;\n  target: {\n    type: string,\n    uuid: string\n  };\n}\n\n@Component({\n  selector: 'ds-resource-policy-form',\n  templateUrl: './resource-policy-form.component.html',\n})\n/**\n * Component that show form for adding/editing a resource policy\n */\nexport class ResourcePolicyFormComponent implements OnInit, OnDestroy {\n\n  /**\n   * If given contains the resource policy to edit\n   * @type {ResourcePolicy}\n   */\n  @Input() resourcePolicy: ResourcePolicy;\n\n  /**\n   * A boolean representing if form submit operation is processing\n   * @type {boolean}\n   */\n  @Input() isProcessing: Observable<boolean> = observableOf(false);\n\n  /**\n   * An event fired when form is canceled.\n   * Event's payload is empty.\n   */\n  @Output() reset: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * An event fired when form is submitted.\n   * Event's payload equals to a new ResourcePolicy.\n   */\n  @Output() submit: EventEmitter<ResourcePolicyEvent> = new EventEmitter<ResourcePolicyEvent>();\n\n  /**\n   * The form id\n   * @type {string}\n   */\n  public formId: string;\n\n  /**\n   * The form model\n   * @type {DynamicFormControlModel[]}\n   */\n  public formModel: DynamicFormControlModel[];\n\n  /**\n   * The eperson or group that will be granted the permission\n   * @type {DSpaceObject}\n   */\n  public resourcePolicyGrant: DSpaceObject;\n\n  /**\n   * The type of the object that will be grant of the permission. It could be 'eperson' or 'group'\n   * @type {string}\n   */\n  public resourcePolicyGrantType: string;\n\n  /**\n   * The name of the eperson or group that will be granted the permission\n   * @type {BehaviorSubject<string>}\n   */\n  public resourcePolicyTargetName$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  /**\n   * A boolean representing if component is active\n   * @type {boolean}\n   */\n  private isActive: boolean;\n\n  /**\n   * Array to track all subscriptions and unsubscribe them onDestroy\n   * @type {Array}\n   */\n  private subs: Subscription[] = [];\n\n  /**\n   * Initialize instance variables\n   *\n   * @param {DSONameService} dsoNameService\n   * @param {EPersonDataService} ePersonService\n   * @param {FormService} formService\n   * @param {GroupDataService} groupService\n   * @param {RequestService} requestService\n   */\n  constructor(\n    private dsoNameService: DSONameService,\n    private ePersonService: EPersonDataService,\n    private formService: FormService,\n    private groupService: GroupDataService,\n    private requestService: RequestService,\n  ) {\n  }\n\n  /**\n   * Initialize the component, setting up the form model\n   */\n  ngOnInit(): void {\n    this.isActive = true;\n    this.formId = this.formService.getUniqueId('resource-policy-form');\n    this.formModel = this.buildResourcePolicyForm();\n\n    if (!this.canSetGrant()) {\n      const epersonRD$ = this.ePersonService.findByHref(this.resourcePolicy._links.eperson.href, false).pipe(\n        getFirstSucceededRemoteData()\n      );\n      const groupRD$ = this.groupService.findByHref(this.resourcePolicy._links.group.href, false).pipe(\n        getFirstSucceededRemoteData()\n      );\n      const dsoRD$: Observable<RemoteData<DSpaceObject>> = observableCombineLatest([epersonRD$, groupRD$]).pipe(\n        map((rdArr: RemoteData<DSpaceObject>[]) => {\n          return rdArr.find((rd: RemoteData<DSpaceObject>) => isNotEmpty(rd.payload));\n        }),\n        hasValueOperator(),\n      );\n      this.subs.push(\n        dsoRD$.pipe(\n          filter(() => this.isActive),\n        ).subscribe((dsoRD: RemoteData<DSpaceObject>) => {\n          this.resourcePolicyGrant = dsoRD.payload;\n          this.resourcePolicyTargetName$.next(this.getResourcePolicyTargetName());\n        })\n      );\n    }\n  }\n\n  /**\n   * Method to check if the form status is valid or not\n   *\n   * @return Observable that emits the form status\n   */\n  isFormValid(): Observable<boolean> {\n    return this.formService.isValid(this.formId).pipe(\n      map((isValid: boolean) => isValid && isNotEmpty(this.resourcePolicyGrant))\n    );\n  }\n\n  /**\n   * Initialize the form model\n   *\n   * @return the form models\n   */\n  private buildResourcePolicyForm(): DynamicFormControlModel[] {\n    const formModel: DynamicFormControlModel[] = [];\n    // TODO to be removed when https://jira.lyrasis.org/browse/DS-4477 will be implemented\n    const policyTypeConf = Object.assign({}, RESOURCE_POLICY_FORM_POLICY_TYPE_CONFIG, {\n      disabled: isNotEmpty(this.resourcePolicy)\n    });\n    // TODO to be removed when https://jira.lyrasis.org/browse/DS-4477 will be implemented\n    const actionConf = Object.assign({}, RESOURCE_POLICY_FORM_ACTION_TYPE_CONFIG, {\n      disabled: isNotEmpty(this.resourcePolicy)\n    });\n    formModel.push(\n      new DsDynamicInputModel(RESOURCE_POLICY_FORM_NAME_CONFIG),\n      new DsDynamicTextAreaModel(RESOURCE_POLICY_FORM_DESCRIPTION_CONFIG),\n      new DynamicSelectModel(policyTypeConf),\n      new DynamicSelectModel(actionConf)\n    );\n\n    const startDateModel = new DynamicDatePickerModel(\n      RESOURCE_POLICY_FORM_START_DATE_CONFIG,\n      RESOURCE_POLICY_FORM_START_DATE_LAYOUT\n    );\n    const endDateModel = new DynamicDatePickerModel(\n      RESOURCE_POLICY_FORM_END_DATE_CONFIG,\n      RESOURCE_POLICY_FORM_END_DATE_LAYOUT\n    );\n    const dateGroupConfig = Object.assign({}, RESOURCE_POLICY_FORM_DATE_GROUP_CONFIG, { group: [] });\n    dateGroupConfig.group.push(startDateModel, endDateModel);\n    formModel.push(new DynamicFormGroupModel(dateGroupConfig, RESOURCE_POLICY_FORM_DATE_GROUP_LAYOUT));\n\n    this.initModelsValue(formModel);\n    return formModel;\n  }\n\n  /**\n   * Setting up the form models value\n   *\n   * @return the form models\n   */\n  initModelsValue(formModel: DynamicFormControlModel[]): DynamicFormControlModel[] {\n    if (this.resourcePolicy) {\n      formModel.forEach((model: any) => {\n        if (model.id === 'date') {\n          if (hasValue(this.resourcePolicy.startDate)) {\n            model.get(0).value = stringToNgbDateStruct(this.resourcePolicy.startDate);\n          }\n          if (hasValue(this.resourcePolicy.endDate)) {\n            model.get(1).value = stringToNgbDateStruct(this.resourcePolicy.endDate);\n          }\n        } else {\n          if (this.resourcePolicy.hasOwnProperty(model.id) && this.resourcePolicy[model.id]) {\n            model.value = this.resourcePolicy[model.id];\n          }\n        }\n      });\n    }\n\n    return formModel;\n  }\n\n  /**\n   * Return a boolean representing If is possible to set policy grant\n   *\n   * @return true if is possible, false otherwise\n   */\n  canSetGrant(): boolean {\n    return isEmpty(this.resourcePolicy);\n  }\n\n  /**\n   * Return the name of the eperson or group that will be granted the permission\n   *\n   * @return the object name\n   */\n  getResourcePolicyTargetName(): string {\n    return isNotEmpty(this.resourcePolicyGrant) ? this.dsoNameService.getName(this.resourcePolicyGrant) : '';\n  }\n\n  /**\n   * Update reference to the eperson or group that will be granted the permission\n   */\n  updateObjectSelected(object: DSpaceObject, isEPerson: boolean): void {\n    this.resourcePolicyGrant = object;\n    this.resourcePolicyGrantType = isEPerson ? 'eperson' : 'group';\n  }\n\n  /**\n   * Method called on reset\n   * Emit a new reset Event\n   */\n  onReset(): void {\n    this.reset.emit();\n  }\n\n  /**\n   * Method called on submit.\n   * Emit a new submit Event whether the form is valid\n   */\n  onSubmit(): void {\n    this.formService.getFormData(this.formId).pipe(take(1))\n      .subscribe((data) => {\n        const eventPayload: ResourcePolicyEvent = Object.create({});\n        eventPayload.object = this.createResourcePolicyByFormData(data);\n        eventPayload.target = {\n          type: this.resourcePolicyGrantType,\n          uuid: this.resourcePolicyGrant.id\n        };\n        this.submit.emit(eventPayload);\n      });\n  }\n\n  /**\n   * Create e new ResourcePolicy by form data\n   *\n   * @return the new ResourcePolicy object\n   */\n  createResourcePolicyByFormData(data): ResourcePolicy {\n    const resourcePolicy = new ResourcePolicy();\n    resourcePolicy.name = (data.name) ? data.name[0].value : null;\n    resourcePolicy.description = (data.description) ? data.description[0].value : null;\n    resourcePolicy.policyType = (data.policyType) ? data.policyType[0].value : null;\n    resourcePolicy.action = (data.action) ? data.action[0].value : null;\n    resourcePolicy.startDate = (data.date && data.date.start) ? dateToISOFormat(data.date.start[0].value) : null;\n    resourcePolicy.endDate = (data.date && data.date.end) ? dateToISOFormat(data.date.end[0].value) : null;\n    resourcePolicy.type = RESOURCE_POLICY;\n\n    return resourcePolicy;\n  }\n\n  /**\n   * Unsubscribe from all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.isActive = false;\n    this.formModel = null;\n    this.subs\n      .filter((subscription) => hasValue(subscription))\n      .forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","export const ITEM_EDIT_WITHDRAW_PATH = 'withdraw';\nexport const ITEM_EDIT_REINSTATE_PATH = 'reinstate';\nexport const ITEM_EDIT_PRIVATE_PATH = 'private';\nexport const ITEM_EDIT_PUBLIC_PATH = 'public';\nexport const ITEM_EDIT_DELETE_PATH = 'delete';\nexport const ITEM_EDIT_MOVE_PATH = 'move';\nexport const ITEM_EDIT_AUTHORIZATIONS_PATH = 'authorizations';\n","import { Injectable, Injector } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { getDataServiceFor } from '../../../core/cache/builders/build-decorators';\nimport { ResourceType } from '../../../core/shared/resource-type';\nimport { DataService } from '../../../core/data/data.service';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport { isEmpty } from '../../empty.util';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { getFirstCompletedRemoteData } from '../../../core/shared/operators';\n\n/**\n * This class represents a resolver that requests a specific item before the route is activated\n */\n@Injectable()\nexport class ResourcePolicyTargetResolver implements Resolve<RemoteData<DSpaceObject>> {\n\n  /**\n   * The data service used to make request.\n   */\n  private dataService: DataService<DSpaceObject>;\n\n  constructor(private parentInjector: Injector, private router: Router) {\n  }\n\n  /**\n   * Method for resolving an item based on the parameters in the current route\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns Observable<<RemoteData<Item>> Emits the found item based on the parameters in the current route,\n   * or an error if something went wrong\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<RemoteData<DSpaceObject>> {\n    const targetType = route.queryParamMap.get('targetType');\n    const policyTargetId = route.queryParamMap.get('policyTargetId');\n\n    if (isEmpty(targetType) || isEmpty(policyTargetId)) {\n      this.router.navigateByUrl('/404', { skipLocationChange: true });\n    }\n\n    const provider = getDataServiceFor(new ResourceType(targetType));\n    this.dataService = Injector.create({\n      providers: [],\n      parent: this.parentInjector\n    }).get(provider);\n\n    return this.dataService.findById(policyTargetId).pipe(\n      getFirstCompletedRemoteData(),\n    );\n  }\n}\n"]}