{"version":3,"sources":["webpack:///src/app/core/breadcrumbs/i18n-breadcrumb.resolver.ts","webpack:///src/app/core/data/registration-response-parsing.service.ts","webpack:///src/app/core/data/eperson-registration.service.ts","webpack:///src/app/core/eperson/models/eperson-dto.model.ts","webpack:///src/app/access-control/epeople-registry/eperson-form/eperson-form.component.html","webpack:///src/app/access-control/epeople-registry/eperson-form/eperson-form.component.ts","webpack:///src/app/access-control/epeople-registry/eperson-form/validators/email-taken.validator.ts","webpack:///src/app/access-control/epeople-registry/epeople-registry.component.html","webpack:///src/app/access-control/epeople-registry/epeople-registry.component.ts","webpack:///src/app/access-control/group-registry/group-form/members-list/members-list.component.html","webpack:///src/app/access-control/group-registry/group-form/members-list/members-list.component.ts","webpack:///src/app/access-control/group-registry/group-form/subgroup-list/subgroups-list.component.html","webpack:///src/app/access-control/group-registry/group-form/subgroup-list/subgroups-list.component.ts","webpack:///src/app/access-control/group-registry/group-form/group-form.component.html","webpack:///src/app/access-control/group-registry/group-form/group-form.component.ts","webpack:///src/app/access-control/group-registry/group-form/validators/group-exists.validator.ts","webpack:///src/app/core/eperson/models/group-dto.model.ts","webpack:///src/app/access-control/group-registry/groups-registry.component.html","webpack:///src/app/access-control/group-registry/groups-registry.component.ts","webpack:///src/app/access-control/group-registry/group-page.guard.ts","webpack:///src/app/access-control/access-control-routing.module.ts","webpack:///src/app/access-control/access-control.module.ts","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.html","webpack:///src/app/shared/form/builder/ds-dynamic-form-ui/ds-dynamic-form.component.ts","webpack:///src/app/shared/form/form.module.ts","webpack:///src/app/access-control/access-control-routing-paths.ts","webpack:///src/app/core/breadcrumbs/i18n-breadcrumbs.service.ts","webpack:///src/app/breadcrumbs/breadcrumb/breadcrumb.model.ts"],"names":["I18nBreadcrumbResolver","constructor","breadcrumbService","resolve","route","state","key","data","breadcrumbKey","Error","url","fullPath","provider","this","RegistrationResponseParsingService","parse","request","payload","registration","Object","assign","statusCode","undefined","EpersonRegistrationService","requestService","rdbService","halService","linkPath","searchByTokenPath","getRegistrationEndpoint","getEndpoint","getTokenSearchEndpoint","token","pipe","filter","href","map","registerEmail","email","requestId","generateRequestId","find","send","subscribe","buildFromRequestUUID","g","searchByToken","href$","getResponseParser","buildSingle","skipWhile","rd","isStale","restResponse","user","EpersonDtoModel","groupsDataService","EPersonFormComponent","changeDetectorRef","epersonService","formBuilderService","translateService","notificationsService","authService","authorizationService","modalService","paginationService","epersonRegistrationService","labelPrefix","formId","messagePrefix","formLayout","firstName","grid","host","lastName","canLogIn","requireCertificate","submitForm","EventEmitter","cancelForm","subs","config","id","pageSize","currentPage","isImpersonated","push","getActiveEPerson","eperson","epersonInitial","isImpersonatingUser","ngOnInit","initialisePage","get","emailHint","label","name","validators","required","pattern","errorMessages","emailTaken","hint","value","formModel","formGroup","createFormGroup","groups","findAllByHref","_links","elementsPerPage","patchValue","firstMetadataValue","controls","setAsyncValidators","static","ePersonDataService","control","getEPersonByEmail","res","createValidator","emailValueChangeSubscribe","valueChanges","debounceTime","detectChanges","activeEPerson$","switchMap","getFindListOptions","findListOptions","canImpersonate$","isAuthorized","LoginOnBehalfOf","self","canDelete$","CanDelete","canReset$","onCancel","cancelEditEPerson","emit","onSubmit","take","ePerson","values","metadata","createNewEPerson","editEPerson","ePersonToCreate","create","hasSucceeded","success","error","showNotificationIfEmailInUse","editedEperson","updateEPerson","onPageChange","event","updateGroups","impersonate","delete","modalRef","open","componentInstance","dso","headerLabel","infoLabel","cancelLabel","confirmLabel","brandColor","confirmIcon","response","confirm","deleteEPerson","errorMessage","stopImpersonating","stopImpersonatingAndRefresh","resetPassword","ngOnDestroy","sub","forEach","unsubscribe","clearPagination","reset","removeByHrefSubstring","notificationSection","searchByScope","list","totalElements","options","EPeopleRegistryComponent","formBuilder","router","ePeople$","BehaviorSubject","b","ePeopleDto$","pageInfoState$","searching$","currentSearchQuery","currentSearchScope","searchForm","group","scope","query","next","isEPersonFormShown","search","epeople","pageInfo","combineLatest","page","authorized","epersonDtoModel","ableToDelete","dtos","findListOptionsSub","getCurrentPagination","navigate","getEPeoplePageRouterLink","queryParamsHandling","resetPage","peopleRD","isActive","activeEPerson","toggleEditEPerson","scrollToTop","cleanupSubscribes","smoothscroll","currentScroll","document","documentElement","scrollTop","body","window","requestAnimationFrame","scrollTo","clearFormAndResetResult","getBrowseEndpoint","setStaleByHrefSubstring","SubKey","ActiveGroup","MembersDTO","SearchResultsDTO","MembersListComponent","groupDataService","ePeopleSearchDtos","ePeopleMembersOfGroupDtos","configSearch","Map","set","getActiveGroup","activeGroup","groupBeingEdited","retrieveMembers","unsubFrom","currentPagination","epersons","hasFailed","cause","epersonListRD","member","isMemberOfGroup","isMember","memberOfGroup","paginatedListOfDTOs","possibleMember","mergeMap","listEPeopleInGroup","ePersonInList","length","has","deleteMemberFromGroup","showNotifications","addMemberToGroup","paginationOptions","searchDone","keys","messageSuffix","nameObject","clearLinkRequests","Members","SearchResults","SubgroupsListComponent","searchResults$","subGroups$","retrieveSubGroups","subgroups","isSubgroupOfGroup","possibleSubgroup","uuid","listTotalGroups","groupInList","isActiveGroup","deleteSubgroupFromGroup","subgroup","deleteSubGroupFromGroup","addSubgroupToGroup","addSubGroupToGroup","navigateByUrl","getGroupEditPageRouterLink","searchGroups","clearGroupLinkRequests","GroupFormComponent","dSpaceObjectDataService","groupName","groupDescription","AlertTypeEnum","params","groupId","setActiveGroup","canEdit$","hasLinkedDSO","groupCommunity","readOnly","groupExists","groupNameValueChangeSubscribe","getLinkedDSO","canEdit","linkedObject","clearAsyncValidators","insertFormGroupControl","setTimeout","permanent","disable","cancelEditGroup","getGroupRegistryRouterLink","createNewGroup","editGroup","groupToCreate","setActiveGroupWithLink","clearGroupsRequests","getGroupEditPageRouterLinkWithID","showNotificationIfNameInUse","operations","op","path","patch","findById","groupSelfLink","findByHref","object","catchError","getLinkedEditRolesRoute","type","GroupDtoModel","GroupsRegistryComponent","groupService","routeService","groupsDto$","deletedGroupsIds","loading$","searchSub","tap","updateRouteWithUrl","trim","AdministratorOf","isSiteAdmin","includes","canManageGroup$","getSubgroups","getMembers","canDelete","canManageGroup","members","groupDtoModel","ableToEdit","CanManageGroup","deleteGroup","paginationSub","GroupPageGuard","halEndpointService","super","groupsEndpoint","getFeatureIDs","getObjectUrl","groupsUrl","AccessControlRoutingModule","forChild","component","breadcrumb","title","canActivate","AccessControlModule","DsDynamicFormComponent","componentService","blur","change","focus","ngbEvent","FormModule","provide","useValue","GROUP_EDIT_PATH","getGroupEditRoute","toString","I18nBreadcrumbsService","getBreadcrumbs","Breadcrumb","text"],"mappings":"+FACA,sFAYO,Y,MAAMA,EACXC,YAAsBC,GAAA,KAAAA,oBAStBC,QAAQC,EAA+BC,GACrC,MAAMC,EAAMF,EAAMG,KAAKC,cACvB,GAAI,YAAWF,GACb,MAAM,IAAIG,MAAM,mDAAsDL,EAAMM,IAAM,+CAEpF,MAAMC,EAAW,YAAwBP,GACzC,MAAO,CAAEQ,SAAUC,KAAKX,kBAAmBI,IAAKA,EAAKI,IAAKC,I,6CAhBjDX,GAAsB,+B,sDAAtBA,EAAsB,QAAtBA,EAAsB,qBAFrB,S,GAEP,I,gMCEA,Y,MAAMc,EAEXC,MAAMC,EAAsBT,GAC1B,MAAMU,EAAUV,EAAKU,QAEfC,EAAeC,OAAOC,OAAO,IAAI,IAAgBH,GAEvD,OAAO,IAAI,IAAeV,EAAKc,gBAAYC,EAAWJ,I,6CAP7CJ,I,sDAAAA,EAAkC,QAAlCA,EAAkC,qBALjC,S,GAKP,G,wCCQA,Y,MAAMS,EAKXtB,YACYuB,EACAC,EACAC,GAFA,KAAAF,iBACA,KAAAC,aACA,KAAAC,aANF,KAAAC,SAAW,gBACX,KAAAC,kBAAoB,6BAa9BC,0BACE,OAAOhB,KAAKa,WAAWI,YAAYjB,KAAKc,UAM1CI,uBAAuBC,GACrB,OAAOnB,KAAKa,WAAWI,YAAYjB,KAAKc,UAAUM,KAChD,OAAAC,EAAA,GAAQC,GAAiB,YAAWA,IACpC,OAAAC,EAAA,GAAKD,GAAiB,GAAGA,IAAOtB,KAAKe,oBAAoBI,MAO7DK,cAAcC,GACZ,MAAMpB,EAAe,IAAI,IACzBA,EAAaoB,MAAQA,EAErB,MAAMC,EAAY1B,KAAKW,eAAegB,oBAYtC,OAVc3B,KAAKgB,0BAEbI,KACJ,OAAAQ,EAAA,GAAMN,GAAiB,YAASA,IAChC,OAAAC,EAAA,GAAKD,IACH,MAAMnB,EAAU,IAAI,IAAYuB,EAAWJ,EAAMjB,GACjDL,KAAKW,eAAekB,KAAK1B,MAE3B2B,YAEK9B,KAAKY,WAAWmB,qBAAmCL,GAAWN,KACnE,SAAAY,EAAA,IAQJC,cAAcd,GACZ,MAAMO,EAAY1B,KAAKW,eAAegB,oBAEhCO,EAAQlC,KAAKkB,uBAAuBC,GAAOC,KAC/C,OAAAQ,EAAA,GAAMN,GAAiB,YAASA,KAalC,OAVAY,EAAMJ,UAAWR,IACf,MAAMnB,EAAU,IAAI,IAAWuB,EAAWJ,GAC1ChB,OAAOC,OAAOJ,EAAS,CACrBgC,kBAAiB,IACR,IAGXnC,KAAKW,eAAekB,KAAK1B,GAAS,KAG7BH,KAAKY,WAAWwB,YAA0BF,GAAOd,KACtD,OAAAiB,EAAA,GAAWC,GAAiCA,EAAGC,SAC/C,cACA,OAAAhB,EAAA,GAAKiB,GACIlC,OAAOC,OAAO,IAAI,IAAgB,CACvCkB,MAAOe,EAAapC,QAAQqB,MAAON,MAAOA,EAAOsB,KAAMD,EAAapC,QAAQqC,U,6CAhFzE/B,GAA0B,yF,sDAA1BA,EAA0B,QAA1BA,EAA0B,qBANvB,S,GAMT,I,kPClBA,MAAMgC,G,yTCLb,kC,yBAGE,sEAAI,yB,qCAAyC,8BAC/C,+B,4CADM,yH,yBAIJ,sEAAI,yB,qCAAuC,8BAC7C,+B,4CADM,uH,0GAmBF,6CAA4G,qI,iCAC1G,uEAAkC,yB,qCACpC,8B,+CAFwD,4HACpB,gK,kEAEpC,6CAAuD,2IACrD,uEAAkC,yB,qCACpC,8B,MADoC,uK,qBAQxC,4C,KAAY,4C,qBAKV,4C,KAAY,4C,iGAqBN,sCACE,iFAAyB,yBAAY,8BACrC,iFAAyB,wCAAG,yIAASC,kBAAA,2BACuC,yBAAc,8BAAI,8BAC9F,iFAAyB,0B,kCAAyC,8BACpE,qE,yEAJ2B,mEAElB,0JAAqE,qEACnD,wJ,kEAvBjC,oDAOE,8I,kEAEA,8EACE,gFACE,+EACA,6EACE,mFAAqC,0B,sCAA2C,8BAChF,mFAAqC,0B,sCAA6C,8BAClF,mFAAqC,0B,sCAA8D,8BACrG,qEACA,qEACA,iFACA,oF,kCAMA,qEACF,mEACF,iEAEF,iE,yEA3BE,wDAA4B,kFAA5B,CAA4B,mHAA5B,CAA4B,cAA5B,CAA4B,8BAWe,6HACA,8HACA,+IAIjB,4J,yBAY5B,0CACE,yEAAK,yB,qCAAmD,8BACxD,yEACE,iFACgC,yB,sCAA6C,8BAC/E,iEACF,gE,6CALO,kIAEK,yJACwB,8H,yBAxCtC,uCACE,sEAAI,yB,qCAA0D,8BAE9D,qF,iCAEA,0F,kCA+BA,iF,kCAOF,8D,8DA1CM,yIAE+B,wGAGhC,oKA8BG,uKC9BD,Y,MAAMC,EA6HXxD,YACYyD,EACHC,EACAH,EACCI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACD1C,EACC2C,GAXE,KAAAT,oBACH,KAAAC,iBACA,KAAAH,oBACC,KAAAI,qBACA,KAAAC,mBACA,KAAAC,uBACA,KAAAC,cACA,KAAAC,uBACA,KAAAC,eACA,KAAAC,oBACD,KAAA1C,iBACC,KAAA2C,6BAvIV,KAAAC,YAAc,qCAKd,KAAAC,OAAS,eAKT,KAAAC,cAAgB,oCAoBhB,KAAAC,WAAgC,CAC9BC,UAAW,CACTC,KAAM,CACJC,KAAM,QAGVC,SAAU,CACRF,KAAM,CACJC,KAAM,QAGVpC,MAAO,CACLmC,KAAM,CACJC,KAAM,QAGVE,SAAU,CACRH,KAAM,CACJC,KAAM,gCAGVG,mBAAoB,CAClBJ,KAAM,CACJC,KAAM,iCAaF,KAAAI,WAAgC,IAAI,EAAAC,aAKpC,KAAAC,WAAgC,IAAI,EAAAD,aAqB9C,KAAAE,KAAuB,GAUvB,KAAAC,OAAqC/D,OAAOC,OAAO,IAAI,IAA8B,CACnF+D,GAAI,MACJC,SAAU,EACVC,YAAa,IAWf,KAAAC,gBAAiB,EAqBfzE,KAAKoE,KAAKM,KAAK1E,KAAK8C,eAAe6B,mBAAmB7C,UAAW8C,IAC/D5E,KAAK6E,eAAiBD,EAClB,YAASA,KACX5E,KAAKyE,eAAiBzE,KAAKkD,YAAY4B,oBAAoBF,EAAQN,QAKzES,WACE/E,KAAKgF,iBAMPA,iBAEE,YACEhF,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,2BAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,0BAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,uBAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,0BAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,oCAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,4BAClC3B,UAAUA,EAAE6B,EAAWG,EAAUrC,EAAOsC,EAAUC,EAAoBkB,MACtElF,KAAK2D,UAAY,IAAI,IAAkB,CACrCW,GAAI,YACJa,MAAOxB,EACPyB,KAAM,YACNC,WAAY,CACVC,SAAU,MAEZA,UAAU,IAEZtF,KAAK8D,SAAW,IAAI,IAAkB,CACpCQ,GAAI,WACJa,MAAOrB,EACPsB,KAAM,WACNC,WAAY,CACVC,SAAU,MAEZA,UAAU,IAEZtF,KAAKyB,MAAQ,IAAI,IAAkB,CACjC6C,GAAI,QACJa,MAAO1D,EACP2D,KAAM,QACNC,WAAY,CACVC,SAAU,KACVC,QAAS,6CAEXD,UAAU,EACVE,cAAe,CACbC,WAAY,8BACZF,QAAS,kCAEXG,KAAMR,IAERlF,KAAK+D,SAAW,IAAI,IAClB,CACEO,GAAI,WACJa,MAAOpB,EACPqB,KAAM,WACNO,MAA+B,MAAvB3F,KAAK6E,gBAAyB7E,KAAK6E,eAAed,WAE9D/D,KAAKgE,mBAAqB,IAAI,IAC5B,CACEM,GAAI,qBACJa,MAAOnB,EACPoB,KAAM,qBACNO,MAA+B,MAAvB3F,KAAK6E,gBAAyB7E,KAAK6E,eAAeb,qBAE9DhE,KAAK4F,UAAY,CACf5F,KAAK2D,UACL3D,KAAK8D,SACL9D,KAAKyB,MACLzB,KAAK+D,SACL/D,KAAKgE,oBAEPhE,KAAK6F,UAAY7F,KAAK+C,mBAAmB+C,gBAAgB9F,KAAK4F,WAC9D5F,KAAKoE,KAAKM,KAAK1E,KAAK8C,eAAe6B,mBAAmB7C,UAAW8C,IAChD,MAAXA,IACF5E,KAAK+F,OAAS/F,KAAK2C,kBAAkBqD,cAAcpB,EAAQqB,OAAOF,OAAOzE,KAAM,CAC7EkD,YAAa,EACb0B,gBAAiBlG,KAAKqE,OAAOE,YAGjCvE,KAAK6F,UAAUM,WAAW,CACxBxC,UAAsB,MAAXiB,EAAkBA,EAAQwB,mBAAmB,qBAAuB,GAC/EtC,SAAqB,MAAXc,EAAkBA,EAAQwB,mBAAmB,oBAAsB,GAC7E3E,MAAkB,MAAXmD,EAAkBA,EAAQnD,MAAQ,GACzCsC,SAAqB,MAAXa,GAAkBA,EAAQb,SACpCC,mBAA+B,MAAXY,GAAkBA,EAAQZ,qBAGhC,OAAZY,GAAsB5E,KAAK6F,UAAUQ,SAAS5E,QAChDzB,KAAK6F,UAAUQ,SAAS5E,MAAM6E,mBClRjC,MAMLC,uBAAuBC,GACrB,OAAQC,GACCD,EAAmBE,kBAAkBD,EAAQd,OACjDvE,KACC,cACA,OAAAG,EAAA,GAAIoF,GACOA,EAAIvG,QAAU,CAAEqF,YAAY,GAAS,SDsQuBmB,gBAAgB5G,KAAK8C,iBAC5F9C,KAAK6G,0BAA4B7G,KAAKyB,MAAMqF,aAAa1F,KAAK,OAAA2F,EAAA,GAAa,MAAMjF,UAAUA,KACzF9B,KAAK6C,kBAAkBmE,sBAK7B,MAAMC,EAAiBjH,KAAK8C,eAAe6B,mBAE3C3E,KAAK+F,OAASkB,EAAe7F,KAC3B,OAAA8F,EAAA,GAAWtC,GACF,YAAwB,CAAC,YAAaA,GAAU5E,KAAKqD,kBAAkB8D,mBAAmBnH,KAAKqE,OAAOC,GAAI,CAC/GE,YAAa,EACb0B,gBAAiBlG,KAAKqE,OAAOE,cAGjC,OAAA2C,EAAA,KAAYtC,EAASwC,KACJ,MAAXxC,EACK5E,KAAK2C,kBAAkBqD,cAAcpB,EAAQqB,OAAOF,OAAOzE,KAAM8F,GAAiB,GAAM,EAAM,YAAW,WAE3G,iBAAa3G,KAIxBT,KAAKqH,gBAAkBJ,EAAe7F,KACpC,OAAA8F,EAAA,GAAWtC,GACL,YAASA,GACJ5E,KAAKmD,qBAAqBmE,aAAa,IAAUC,gBAAiB3C,EAAQ4C,MAE1E,aAAa,KAI1BxH,KAAKyH,WAAaR,EAAe7F,KAC/B,OAAA8F,EAAA,GAAWtC,GAAY5E,KAAKmD,qBAAqBmE,aAAa,IAAUI,UAAW,YAAS9C,GAAWA,EAAQ4C,UAAO/G,KAExHT,KAAK2H,UAAY,aAAa,KAOlCC,WACE5H,KAAK8C,eAAe+E,oBACpB7H,KAAKmE,WAAW2D,OASlBC,WACE/H,KAAK8C,eAAe6B,mBAAmBvD,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAClDmG,IACC,MAAMC,EAAS,CACbC,SAAU,CACR,oBAAqB,CACnB,CACExC,MAAO3F,KAAK2D,UAAUgC,QAG1B,mBAAoB,CAClB,CACEA,MAAO3F,KAAK8D,SAAS6B,SAI3BlE,MAAOzB,KAAKyB,MAAMkE,MAClB5B,SAAU/D,KAAK+D,SAAS4B,MACxB3B,mBAAoBhE,KAAKgE,mBAAmB2B,OAE/B,MAAXsC,EACFjI,KAAKoI,iBAAiBF,GAEtBlI,KAAKqI,YAAYJ,EAASC,KAUlCE,iBAAiBF,GACf,MAAMI,EAAkBhI,OAAOC,OAAO,IAAI,IAAW2H,GAEpClI,KAAK8C,eAAeyF,OAAOD,GACnClH,KACP,SAAAY,EAAA,IACAF,UAAWQ,IACPA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,+BAAgC,CAAE6B,KAAMkD,EAAgBlD,QACvIpF,KAAKiE,WAAW6D,KAAKQ,KAErBtI,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,+BAAgC,CAAE6B,KAAMkD,EAAgBlD,QACrIpF,KAAKmE,WAAW2D,UAGpB9H,KAAK2I,6BAA6BL,EAAiB,WAQrDD,YAAYJ,EAAkBC,GAC5B,MAAMU,EAAgBtI,OAAOC,OAAO,IAAI,IAAW,CACjD+D,GAAI2D,EAAQ3D,GACZ6D,SAAU,CACR,oBAAqB,CACnB,CACExC,MAAQ3F,KAAK2D,UAAUgC,MAAQ3F,KAAK2D,UAAUgC,MAAQsC,EAAQ7B,mBAAmB,uBAGrF,mBAAoB,CAClB,CACET,MAAQ3F,KAAK8D,SAAS6B,MAAQ3F,KAAK8D,SAAS6B,MAAQsC,EAAQ7B,mBAAmB,uBAIrF3E,MAAQ,YAASyG,EAAOzG,OAASyG,EAAOzG,MAAQwG,EAAQxG,MACxDsC,SAAW,YAASmE,EAAOnE,UAAYmE,EAAOnE,SAAWkE,EAAQlE,SACjEC,mBAAqB,YAASkE,EAAOlE,oBAAsBkE,EAAOlE,mBAAqBiE,EAAQjE,mBAC/FiC,OAAQgC,EAAQhC,SAGDjG,KAAK8C,eAAe+F,cAAcD,GAC1CxH,KAAK,SAAAY,EAAA,IAA+BF,UAAWQ,IAClDA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,8BAA+B,CAAE6B,KAAMwD,EAAcxD,QACpIpF,KAAKiE,WAAW6D,KAAKc,KAErB5I,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,8BAA+B,CAAE6B,KAAMwD,EAAcxD,QAClIpF,KAAKmE,WAAW2D,UAIA,MAAhBI,EAAOzG,OAAiByG,EAAOzG,QAAUwG,EAAQxG,OACnDzB,KAAK2I,6BAA6BC,EAAe,UAQrDE,aAAaC,GACX/I,KAAKgJ,aAAa,CAChBxE,YAAauE,EACb7C,gBAAiBlG,KAAKqE,OAAOE,WAOjC0E,cACEjJ,KAAKkD,YAAY+F,YAAYjJ,KAAK6E,eAAeP,IACjDtE,KAAKyE,gBAAiB,EAOxByE,SACElJ,KAAK8C,eAAe6B,mBAAmBvD,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAW8C,IAC9D,MAAMuE,EAAWnJ,KAAKoD,aAAagG,KAAK,KACxCD,EAASE,kBAAkBC,IAAM1E,EACjCuE,EAASE,kBAAkBE,YAAc,2CACzCJ,EAASE,kBAAkBG,UAAY,yCACvCL,EAASE,kBAAkBI,YAAc,2CACzCN,EAASE,kBAAkBK,aAAe,4CAC1CP,EAASE,kBAAkBM,WAAa,SACxCR,EAASE,kBAAkBO,YAAc,eACzCT,EAASE,kBAAkBQ,SAASzI,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgI,IACvDA,GACE,YAASlF,EAAQN,KACnBtE,KAAK8C,eAAeiH,cAAcnF,GAASxD,KAAK,SAAAY,EAAA,IAA+BF,UAAWU,IACpFA,EAAagG,cACfxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,+BAAgC,CAAE6B,KAAMR,EAAQQ,QAC/HpF,KAAKiE,WAAW6D,QAEhB9H,KAAKiD,qBAAqByF,MAAM,wDAA0D9D,EAAQN,GAAK,eAAiB9B,EAAahC,WAAa,iBAAmBgC,EAAawH,cAEpLhK,KAAKmE,WAAW2D,aAW5BmC,oBACEjK,KAAKkD,YAAYgH,8BACjBlK,KAAKyE,gBAAiB,EAOxB0F,gBACM,YAASnK,KAAK6E,eAAepD,QAC/BzB,KAAKsD,2BAA2B9B,cAAcxB,KAAK6E,eAAepD,OAAOL,KAAK,SAAAY,EAAA,IAC3EF,UAAW+H,IACJA,EAASrB,aACXxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAI,8CAC1DjF,KAAKgD,iBAAiBiC,IAAI,oCAAqC,CAACxD,MAAOzB,KAAK6E,eAAepD,SAE7FzB,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAI,gCACxDjF,KAAKgD,iBAAiBiC,IAAI,kCAAmC,CAACxD,MAAOzB,KAAK6E,eAAepD,WAUvG2I,cACEpK,KAAK4H,WACL5H,KAAKoE,KAAK/C,OAAQgJ,GAAQ,YAASA,IAAMC,QAASD,GAAQA,EAAIE,eAC9DvK,KAAKqD,kBAAkBmH,gBAAgBxK,KAAKqE,OAAOC,IAC/C,YAAStE,KAAK6G,4BAChB7G,KAAK6G,0BAA0B0D,cAOnCE,QACEzK,KAAK8C,eAAe6B,mBAAmBvD,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAW8C,IAC9D5E,KAAKW,eAAe+J,sBAAsB9F,EAAQ4C,QAEpDxH,KAAKgF,iBASC2D,6BAA6BV,EAAkB0C,GAErD3K,KAAKoE,KAAKM,KAAK1E,KAAK8C,eAAe8H,cAAc,QAAS3C,EAAQxG,MAAO,CACvE+C,YAAa,EACb0B,gBAAiB,IAChB9E,KAAK,cAA+B,eACpCU,UAAW+I,IACNA,EAAKC,cAAgB,GACvB9K,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,gBAAkBoH,EAAsB,sBAAuB,CAC1IvF,KAAM6C,EAAQ7C,KACd3D,MAAOwG,EAAQxG,YASjBuH,aAAa+B,GACnB/K,KAAKoE,KAAKM,KAAK1E,KAAK8C,eAAe6B,mBAAmB7C,UAAW8C,IAC/D5E,KAAK+F,OAAS/F,KAAK2C,kBAAkBqD,cAAcpB,EAAQqB,OAAOF,OAAOzE,KAAMyJ,O,6CA9fxEnI,GAAoB,0d,mDAApBA,EAAoB,u6C,GAAA,MD9CjC,2C,iCAEA,8HAIA,8HAIA,6EAKS,0DAAc,EAAAmF,cACrB,2EACE,gFAAQ,qDAAS,EAAAH,cACyB,mCAAkC,0B,sCAAyC,8BACvH,+DACA,2EACE,gFAAkE,qDAAS,EAAAuC,mB,kCACzE,wEAA0B,0B,sCAC5B,8BACF,+DACA,4EACE,mFAGA,mFAGF,+DACA,+EAAsF,qDAAS,EAAAjB,Y,kCAC7F,uEAA6B,0B,sCAC/B,8BACF,6DAEA,qFAEA,gF,kCA4CA,gC,2EApFM,uGAAiD,aAAjD,CAAiD,cAU9C,yEAAiB,wBAAjB,CAAiB,wBAAjB,CAAiB,0BAAjB,CAAiB,oBAQsD,kIAG5C,iHACJ,2JAInB,gFAGA,+EAIwC,kHACpB,0JAIE,2EAE7B,sI,8HCMC,G,mEExCC,uCACE,oFACQ,wIAA8B,KACpC,4EACA,oFAAiC,yB,qCAA0C,8BAC7E,sEACF,qE,+CAFqC,0H,mEAKvC,sDAA4C,oIAAsB,mHACd,KAAO,+B,sBA+BzD,yC,kJAoBM,yC,iCAEE,oFAAI,yBAAyB,8BAC7B,oFAAI,yBAA2B,8BAC/B,oFAAI,0BAA4B,8BAChC,sFACE,4FACE,iGAA8B,yK,sCAG5B,yFACF,iFACA,iGAA8C,qK,sCAG5C,yFACF,iFACF,+EACF,6EACF,2E,8DAlBI,iIACE,2EACA,6EACA,8EAKQ,wMAKA,2MAFA,uD,0BA/BpB,oD,iCAQE,oFACE,sFACE,qFACA,kFACE,yFAAgB,0B,sCAAwC,8BACxD,yFAAgB,0B,sCAA0C,8BAC1D,yFAAgB,0B,sCAA2C,8BAC3D,sFAAI,0B,sCAA0C,8BAChD,2EACA,2EACA,uFACA,4F,kCAoBA,2EACF,yEACF,uEAEF,wE,+DAzCE,wDAA4B,iCAA5B,CAA4B,kGAA5B,CAA4B,cAA5B,CAA4B,8BAUN,0HACA,2HACA,4HACZ,2HAIqB,wI,0BA0BjC,0CACE,yB,qCACF,+B,6CADE,qJ,mEA5EJ,uCACE,+EAA2C,yB,qCAE3C,8BACA,iFAA+B,+JAC7B,+EACE,wFACE,2FAAyB,0B,sCAAqD,8BAC9E,2FAAsB,0B,sCAAkD,8BAC1E,yEACF,uEACA,oFACE,sFACE,qF,4EAGA,yFACE,6FACE,qFAA8B,0B,sCAChC,8BACF,2EACF,yEACF,uEACA,iFACE,yFAAQ,iJACwC,0B,sCAA8C,8BAChG,uEACF,qEAEA,6F,kCACA,iG,oEA6CA,uF,kCAGF,mE,iEA7E6C,8IAGrC,gFAGyB,sIACH,mIAOf,0IADoB,8GAIO,wJAOY,+HAIvC,6GAEV,qMA4CG,sJC7DP,a,MAAM8B,EAuDX5L,YAAoB0D,EACAE,EACAC,EACAE,EACA8H,EACAC,EACA9H,EACAC,EACD1C,GARC,KAAAmC,iBACA,KAAAE,mBACA,KAAAC,uBACA,KAAAE,uBACA,KAAA8H,cACA,KAAAC,SACA,KAAA9H,eACA,KAAAC,oBACD,KAAA1C,iBA7DnB,KAAA4C,YAAc,gCAKd,KAAA4H,SAAoD,IAAIC,EAAA,EAAgB,SAAAC,EAAA,CAA4B,IAAI,IAAY,KAKpH,KAAAC,YAA+D,IAAIF,EAAA,EAAgD,IAKnH,KAAAG,eAA4C,IAAIH,EAAA,OAA0B3K,GAK1E,KAAA+K,WAAuC,IAAIJ,EAAA,GAAyB,GAKpE,KAAA/G,OAAqC/D,OAAOC,OAAO,IAAI,IAA8B,CACnF+D,GAAI,MACJC,SAAU,EACVC,YAAa,IAuBf,KAAAJ,KAAuB,GAWrBpE,KAAKyL,mBAAqB,GAC1BzL,KAAK0L,mBAAqB,WAC1B1L,KAAK2L,WAAa3L,KAAKiL,YAAYW,MAAM,CACvCC,MAAO,WACPC,MAAO,KAIX/G,WACE/E,KAAKgF,iBAMPA,iBACEhF,KAAKwL,WAAWO,MAAK,GACrB/L,KAAKgM,oBAAqB,EAC1BhM,KAAKiM,OAAO,CAACJ,MAAO7L,KAAK0L,mBAAoBI,MAAO9L,KAAKyL,qBACzDzL,KAAKoE,KAAKM,KAAK1E,KAAK8C,eAAe6B,mBAAmB7C,UAAW8C,IAChD,MAAXA,GAAmBA,EAAQN,KAC7BtE,KAAKgM,oBAAqB,MAG9BhM,KAAKoE,KAAKM,KAAK1E,KAAKmL,SAAS/J,KAC3B,OAAA8F,EAAA,GAAWgF,GACLA,EAAQC,SAASrB,cAAgB,EAC5B,OAAAsB,EAAA,MAAiBF,EAAQG,KAAK9K,IAAKqD,GACjC5E,KAAKmD,qBAAqBmE,aAAa,IAAUI,UAAW,YAAS9C,GAAWA,EAAQ4C,UAAO/G,GAAWW,KAC/G,OAAAG,EAAA,GAAK+K,IACH,MAAMC,EAAmC,IAAI7J,EAG7C,OAFA6J,EAAgBC,aAAeF,EAC/BC,EAAgB3H,QAAUA,EACnB2H,OAGTnL,KAAK,OAAAG,EAAA,GAAKkL,GACL,SAAApB,EAAA,CAAmBa,EAAQC,SAAUM,KAIvC,CAACP,KAERpK,UAAW6D,IACf3F,KAAKwL,WAAWO,MAAK,GAAO/L,KAAKsL,YAAYS,KAAKpG,GAClD3F,KAAKuL,eAAeQ,KAAKpG,EAAMwG,aAQnCF,OAAOvM,GACLM,KAAKwL,WAAWO,MAAK,GACjB,YAAS/L,KAAK0M,qBAChB1M,KAAK0M,mBAAmBnC,cAE1BvK,KAAK0M,mBAAqB1M,KAAKqD,kBAAkBsJ,qBAAqB3M,KAAKqE,OAAOC,GAAItE,KAAKqE,QAAQjD,KACjG,OAAA8F,EAAA,GAAWE,IACP,MAAM0E,EAAgBpM,EAAKoM,MACrBD,EAAgBnM,EAAKmM,MAgB3B,OAfa,MAATC,GAAiB9L,KAAKyL,qBAAuBK,IAC/C9L,KAAKkL,OAAO0B,SAAS,CAAC5M,KAAK8C,eAAe+J,4BAA6B,CACrEC,oBAAqB,UAEvB9M,KAAKyL,mBAAqBK,EAC1B9L,KAAKqD,kBAAkB0J,UAAU/M,KAAKqE,OAAOC,KAElC,MAATuH,GAAiB7L,KAAK0L,qBAAuBG,IAC/C7L,KAAKkL,OAAO0B,SAAS,CAAC5M,KAAK8C,eAAe+J,4BAA6B,CACrEC,oBAAqB,UAEvB9M,KAAK0L,mBAAqBG,EAC1B7L,KAAKqD,kBAAkB0J,UAAU/M,KAAKqE,OAAOC,KAGxCtE,KAAK8C,eAAe8H,cAAc5K,KAAK0L,mBAAoB1L,KAAKyL,mBAAoB,CACzFjH,YAAa4C,EAAgB5C,YAC7B0B,gBAAiBkB,EAAgB7C,aAIvC,eACAzC,UAAWkL,IACThN,KAAKmL,SAASY,KAAKiB,EAAS5M,SAC5BJ,KAAKuL,eAAeQ,KAAKiB,EAAS5M,QAAQ+L,YAShDc,SAASrI,GACP,OAAO5E,KAAK2E,mBAAmBvD,KAC7B,OAAAG,EAAA,GAAK2L,GAAkBtI,IAAYsI,IAOvCvI,mBACE,OAAO3E,KAAK8C,eAAe6B,mBAO7BwI,kBAAkBlF,GAChBjI,KAAK2E,mBAAmBvD,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWoL,IAC3CjF,IAAYiF,GACdlN,KAAK8C,eAAe+E,oBACpB7H,KAAKgM,oBAAqB,IAE1BhM,KAAK8C,eAAeuF,YAAYJ,GAChCjI,KAAKgM,oBAAqB,KAG9BhM,KAAKoN,cAMPrD,cAAc9B,GACZ,GAAI,YAASA,EAAQ3D,IAAK,CACxB,MAAM6E,EAAWnJ,KAAKoD,aAAagG,KAAK,KACxCD,EAASE,kBAAkBC,IAAMrB,EACjCkB,EAASE,kBAAkBE,YAAc,2CACzCJ,EAASE,kBAAkBG,UAAY,yCACvCL,EAASE,kBAAkBI,YAAc,2CACzCN,EAASE,kBAAkBK,aAAe,4CAC1CP,EAASE,kBAAkBM,WAAa,SACxCR,EAASE,kBAAkBO,YAAc,eACzCT,EAASE,kBAAkBQ,SAASzI,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgI,IACvDA,GACE,YAAS7B,EAAQ3D,KACnBtE,KAAK8C,eAAeiH,cAAc9B,GAAS7G,KAAK,SAAAY,EAAA,IAA+BF,UAAWU,IACpFA,EAAagG,cACfxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKuD,YAAc,+BAAgC,CAAC6B,KAAM6C,EAAQ7C,QAC9HpF,KAAKyK,SAELzK,KAAKiD,qBAAqByF,MAAM,wDAA0DT,EAAQ3D,GAAK,eAAiB9B,EAAahC,WAAa,iBAAmBgC,EAAawH,mBAYhMI,cACEpK,KAAKqN,oBACLrN,KAAKqD,kBAAkBmH,gBAAgBxK,KAAKqE,OAAOC,IAIrD+I,oBACErN,KAAKoE,KAAK/C,OAAQgJ,GAAQ,YAASA,IAAMC,QAASD,GAAQA,EAAIE,eAGhE6C,eACE,SAAUE,IACR,MAAMC,EAAgBC,SAASC,gBAAgBC,WAAaF,SAASG,KAAKD,UACtEH,EAAgB,IAClBK,OAAOC,sBAAsBP,GAC7BM,OAAOE,SAAS,EAAGP,EAAiBA,EAAgB,IAJxD,GAYFQ,0BACE/N,KAAK2L,WAAWxF,WAAW,CACzB2F,MAAO,KAET9L,KAAKiM,OAAO,CAACH,MAAO,KAMtBrB,QACEzK,KAAK8C,eAAekL,oBAAoB5M,KACtC,OAAA4G,EAAA,GAAK,IACLlG,UAAWR,IACXtB,KAAKW,eAAesN,wBAAwB3M,GAAMF,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAUA,KACxE9B,KAAK8C,eAAe+E,oBACpB7H,KAAKgM,oBAAqB,O,6CArQrBhB,GAAwB,kW,mDAAxBA,EAAwB,+tDDhCrC,yCACE,yEACE,2EACE,6EACE,8EAA6B,yB,sCAAoC,8BAEjE,uFAOF,mEAEA,gGAGA,sFA+EF,iEACF,+DACF,6DACA,gC,MAhGqC,oHAEvB,oFASU,mFAGZ,sF,kTCcL,G,2PCyBO,6CACQ,kM,qCAGN,iFACF,0E,2FAFQ,gL,mEAIR,6CACQ,6L,qCAGN,iFACF,0E,2FAFQ,6K,mGApBd,sCACE,iFAAyB,yBAAsB,8BAC/C,iFAAyB,wCAAG,yIAASxE,mBAAA,qCACiC,yBAAwB,8BAAI,8BAClG,iFACE,0B,sCAAyG,kCACzG,0B,sCACF,8BACA,mFACE,sFACE,8FAOA,gGAMF,yEACF,uEACF,qE,8DAxB2B,2EAElB,0JAA+D,6EAEpE,4LACA,yMAIW,8EAOA,gF,0BAnCrB,oD,kEAOE,8EACE,gFACE,+EACA,6EACE,mFAAqC,0B,sCAA2C,8BAChF,mFAAqC,0B,sCAA6C,8BAClF,mFAAqC,0B,sCAAiD,8BACtF,mFAAyB,0B,sCAA6C,8BACxE,qEACA,qEACA,iFACA,sF,kCA0BA,qEACF,mEACF,iEAEF,kE,8DA/Ce,8DAAkC,qEAAlC,CAAkC,qGAAlC,CAAkC,cAAlC,CAAkC,8BAUJ,6HACA,8HACA,kIACZ,8HAIH,8I,0BAgC9B,0CAGE,yB,qCACF,+B,4CADE,4I,mEAuBI,sCACE,iFAAyB,yBAAsB,8BAC/C,iFAAyB,wCAAG,yIAASA,mBAAA,qCACiC,yBAAwB,8BAAI,8BAClG,iFACE,0B,sCAAyG,kCACzG,0B,sCACF,8BACA,mFACE,sFACE,2FAAQ,qK,sCAGN,mFACF,2EACF,yEACF,uEACF,qE,8DAhB2B,2EAElB,0JAA+D,6EAEpE,4LACA,yMAMU,+M,0BA9BpB,oD,kEAOE,8EACE,gFACE,+EACA,6EACE,mFAAqC,0B,sCAA2C,8BAChF,mFAAqC,0B,sCAA6C,8BAClF,mFAAqC,0B,sCAAiD,8BACtF,mFAAyB,0B,sCAA6C,8BACxE,qEACA,qEACA,iFACA,sF,kCAkBA,qEACF,mEACF,iEAEF,kE,8DAvCe,wDAA4B,6EAA5B,CAA4B,6GAA5B,CAA4B,cAA5B,CAA4B,8BAUE,6HACA,8HACA,kIACZ,8HAIH,sJ,0BAwB9B,0CAEE,yB,qCACF,+B,4CADE,kJCpGJ,IAAK0H,GAAL,SAAKA,G,OACH,IAAAC,YAAA,iBACA,IAAAC,WAAA,gBACA,IAAAC,iBAAA,sBAHGH,EAAL,CAIC,IASM,a,MAAMI,EAoDXlP,YAAoBmP,EACD/H,EACCxD,EACAC,EACAgI,EACA5H,EACA6H,GANA,KAAAqD,mBACD,KAAA/H,qBACC,KAAAxD,mBACA,KAAAC,uBACA,KAAAgI,cACA,KAAA5H,oBACA,KAAA6H,SAlDpB,KAAAsD,kBAAqE,IAAIpD,EAAA,OAAgD3K,GAIzH,KAAAgO,0BAA6E,IAAIrD,EAAA,OAAgD3K,GAKjI,KAAAiO,aAA2CpO,OAAOC,OAAO,IAAI,IAA8B,CACzF+D,GAAI,MACJC,SAAU,EACVC,YAAa,IAKf,KAAAH,OAAqC/D,OAAOC,OAAO,IAAI,IAA8B,CACnF+D,GAAI,KACJC,SAAU,EACVC,YAAa,IAMf,KAAAJ,KAAkC,IAAIuK,IAyBpC3O,KAAKyL,mBAAqB,GAC1BzL,KAAK0L,mBAAqB,WAG5B3G,WACE/E,KAAK2L,WAAa3L,KAAKiL,YAAYW,MAAM,CACvCC,MAAO,WACPC,MAAO,KAET9L,KAAKoE,KAAKwK,IAAIV,GAAOC,YAAanO,KAAKuO,iBAAiBM,iBAAiB/M,UAAWgN,IAC/D,MAAfA,IACF9O,KAAK+O,iBAAmBD,EACxB9O,KAAKgP,gBAAgBhP,KAAKqE,OAAOG,iBAW/BwK,gBAAgB3C,GACtBrM,KAAKiP,UAAUf,GAAOE,YACtBpO,KAAKoE,KAAKwK,IAAIV,GAAOE,WACnBpO,KAAKqD,kBAAkBsJ,qBAAqB3M,KAAKqE,OAAOC,GAAItE,KAAKqE,QAAQjD,KACvE,OAAA8F,EAAA,GAAWgI,GACFlP,KAAKwG,mBAAmBR,cAAchG,KAAK+O,iBAAiB9I,OAAOkJ,SAAS7N,KAAM,CACrFkD,YAAa0K,EAAkB1K,YAC/B0B,gBAAiBgJ,EAAkB3K,YAI3C,cACA,OAAAhD,EAAA,GAAKe,IACH,IAAIA,EAAG8M,UAGL,OAAO9M,EAFPtC,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,wBAAyB,CAAC4L,MAAO/M,EAAG0H,kBAKvH,OAAA9C,EAAA,GAAWoI,GACK,eAA2BA,EAAclP,QAAQiM,KAAK9K,IAAKgO,GAC7B,YACxCvP,KAAKwP,gBAAgBD,GAAUE,IAC7B,MAAMlD,EAAmC,IAAI7J,EAG7C,OAFA6J,EAAgB3H,QAAU2K,EAC1BhD,EAAgBmD,cAAgBD,EACzBlD,MAIAnL,KAAK,OAAAG,EAAA,GAAKkL,GACd,SAAApB,EAAA,CAAmBiE,EAAclP,QAAQ+L,SAAUM,OAG7D3K,UAAW6N,IACV3P,KAAKyO,0BAA0B1C,KAAK4D,MAQ1CH,gBAAgBI,GACd,OAAO5P,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,GACtD,OAAA6H,GAAA,GAAUjE,GACK,MAATA,EACK5L,KAAKwG,mBAAmBR,cAAc4F,EAAM3F,OAAOkJ,SAAS7N,KAAM,CACvEkD,YAAa,EACb0B,gBAAiB,OAChB,GACA9E,KACC,cACA,cACA,OAAAG,EAAA,GAAKuO,GAA+CA,EAAmBzD,KAAKhL,OAAQ0O,GAA2BA,EAAczL,KAAOsL,EAAetL,KACnJ,OAAA/C,EAAA,GAAK2K,GAAuBA,EAAQ8D,OAAS,IAE1C,aAAa,KAYpBf,UAAUxP,GACZO,KAAKoE,KAAK6L,IAAIxQ,KAChBO,KAAKoE,KAAKa,IAAIxF,GAAK8K,cACnBvK,KAAKoE,KAAK8E,OAAOzJ,IAQrByQ,sBAAsBjI,GACpBjI,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgN,IAC9D,GAAmB,MAAfA,EAAqB,CACvB,MAAMjF,EAAW7J,KAAKuO,iBAAiB2B,sBAAsBpB,EAAa7G,EAAQrD,SAClF5E,KAAKmQ,kBAAkB,eAAgBtG,EAAU5B,EAAQrD,QAAQQ,KAAM0J,GACvE9O,KAAKiM,OAAO,CAAEJ,MAAO7L,KAAK0L,mBAAoBI,MAAO9L,KAAKyL,0BAE1DzL,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,0CASrF2M,iBAAiBnI,GACfA,EAAQyH,eAAgB,EACxB1P,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgN,IAC9D,GAAmB,MAAfA,EAAqB,CACvB,MAAMjF,EAAW7J,KAAKuO,iBAAiB6B,iBAAiBtB,EAAa7G,EAAQrD,SAC7E5E,KAAKmQ,kBAAkB,YAAatG,EAAU5B,EAAQrD,QAAQQ,KAAM0J,QAEpE9O,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,0CASrFwI,OAAOvM,GACLM,KAAKiP,UAAUf,GAAOG,kBACtBrO,KAAKoE,KAAKwK,IAAIV,GAAOG,iBACnBrO,KAAKqD,kBAAkBsJ,qBAAqB3M,KAAK0O,aAAapK,GAAItE,KAAK0O,cAActN,KACnF,OAAA8F,EAAA,GAAWmJ,IAET,MAAMvE,EAAgBpM,EAAKoM,MACrBD,EAAgBnM,EAAKmM,MAiB3B,OAhBa,MAATC,GAAiB9L,KAAKyL,qBAAuBK,GAAS9L,KAAK+O,mBAC7D/O,KAAKkL,OAAO0B,SAAS,GAAI,CACvBE,oBAAqB,UAEvB9M,KAAKyL,mBAAqBK,EAC1B9L,KAAKqD,kBAAkB0J,UAAU/M,KAAK0O,aAAapK,KAExC,MAATuH,GAAiB7L,KAAK0L,qBAAuBG,GAAS7L,KAAK+O,mBAC7D/O,KAAKkL,OAAO0B,SAAS,GAAI,CACvBE,oBAAqB,UAEvB9M,KAAK0L,mBAAqBG,EAC1B7L,KAAKqD,kBAAkB0J,UAAU/M,KAAK0O,aAAapK,KAErDtE,KAAKsQ,YAAa,EAEXtQ,KAAKwG,mBAAmBoE,cAAc5K,KAAK0L,mBAAoB1L,KAAKyL,mBAAoB,CAC7FjH,YAAa6L,EAAkB7L,YAC/B0B,gBAAiBmK,EAAkB9L,aAGvC,cACA,OAAAhD,EAAA,GAAKe,IACH,IAAIA,EAAG8M,UAGL,OAAO9M,EAFPtC,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,wBAAyB,CAAC4L,MAAO/M,EAAG0H,kBAKvH,OAAA9C,EAAA,GAAWoI,GACK,eAA2BA,EAAclP,QAAQiM,KAAK9K,IAAKgO,GAC7B,YACxCvP,KAAKwP,gBAAgBD,GAAUE,IAC7B,MAAMlD,EAAmC,IAAI7J,EAG7C,OAFA6J,EAAgB3H,QAAU2K,EAC1BhD,EAAgBmD,cAAgBD,EACzBlD,MAIAnL,KAAK,OAAAG,EAAA,GAAKkL,GACd,SAAApB,EAAA,CAAmBiE,EAAclP,QAAQ+L,SAAUM,OAG7D3K,UAAW6N,IACV3P,KAAKwO,kBAAkBzC,KAAK4D,MAOpCvF,cACE,IAAK,MAAM3K,KAAOO,KAAKoE,KAAKmM,OAC1BvQ,KAAKiP,UAAUxP,GAEjBO,KAAKqD,kBAAkBmH,gBAAgBxK,KAAKqE,OAAOC,IACnDtE,KAAKqD,kBAAkBmH,gBAAgBxK,KAAK0O,aAAapK,IAU3D6L,kBAAkBK,EAAuB3G,EAAuC4G,EAAoB3B,GAClGjF,EAASzI,KAAK,SAAAY,EAAA,IAA+BF,UAAWQ,IAClDA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,yBAA2B+M,EAAe,CAAEpL,KAAMqL,KACnIzQ,KAAKwG,mBAAmBkK,kBAAkB5B,EAAY7I,OAAOkJ,SAAS7N,OAEtEtB,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,yBAA2B+M,EAAe,CAAEpL,KAAMqL,OAQvI1C,0BACE/N,KAAK2L,WAAWxF,WAAW,CACzB2F,MAAO,KAET9L,KAAKiM,OAAO,CAAEH,MAAO,M,6CA/RZwC,GAAoB,sR,mDAApBA,EAAoB,8nD,GAAA,MD5CjC,0CACE,wEAA+B,yB,qCAAuC,8BAEtE,0EAA2C,yB,qCAE3C,8BACA,2EAA+B,wDAAY,EAAArC,OAAA,uBACzC,2EACE,kFACE,oFAAyB,0B,sCAAwD,8BACjF,oFAAsB,0B,sCAAqD,8BAC7E,mEACF,iEACA,6EACE,+EACE,8EAEA,kFACI,yFACE,iFAA8B,0B,sCAAkD,8BACtF,qEACF,mEACF,iEACA,2EACE,mFAAQ,qDAAS,EAAA8B,6BACiB,0B,sCAAiD,8BACrF,iEACF,+DAEA,6F,kCAkDA,iF,kCAMA,0EAAI,0B,sCAA8C,8BAElD,6F,kCA0CA,iF,oEAKF,wEACA,gC,qCAtIiC,uHAEY,2IAGrC,gFAGyB,yIACH,sIASc,0IAMJ,kIAItB,uJAkDV,sKAMF,+HAEY,+JA0CV,uO,4SCrFD,G,wGCOO,6CACQ,oM,qCAGN,iFACF,0E,2FAFQ,wK,0BAIR,qCAA0C,yB,qCAA4D,+B,6CAA5D,0I,mEAE1C,6CACQ,+L,qCAGN,iFACF,0E,2FAFQ,qK,mGAnBd,sCACE,iFAAyB,yBAAY,8BACrC,iFAAyB,wCAAG,yIAASQ,iBAAA,2BACsC,yBAAc,8BAAI,8BAC7F,iFAAyB,0B,kCAAyC,8BAClE,mFACE,sFACE,8F,oEAOA,2F,kCAEA,gG,oEAMF,yEACF,uEACF,qE,yEAvB2B,mEAElB,2JAAoE,qEAClD,uJAGZ,6KAOL,mHAEK,gL,0BAlCrB,oD,kEAOE,8EACE,gFACE,+EACA,6EACE,mFAAqC,0B,sCAA2C,8BAChF,mFAAqC,0B,sCAA6C,8BAClF,mFAAqC,0B,sCAA8D,8BACnG,mFAAyB,0B,sCAA6C,8BACxE,qEACA,qEACA,iFACA,sF,kCAyBA,qEACF,mEACF,iEACF,gE,qEA7Ce,8DAAkC,2FAAlC,CAAkC,2HAAlC,CAAkC,cAAlC,CAAkC,8BAUJ,6HACA,8HACA,+IACZ,8HAIL,oK,0BA8B5B,0CAEE,yB,qCACF,+B,4CADE,4I,mEAuBI,sCACE,iFAAyB,yBAAY,8BACrC,iFAAyB,wCAAG,yIAASA,iBAAA,2BACsC,yBAAc,8BAAI,8BAC7F,iFAAyB,0B,kCAAyC,8BAClE,mFACE,sFACE,2FAAQ,uK,sCAGN,mFACF,2EACF,yEACF,uEACF,qE,yEAb2B,mEAElB,2JAAoE,qEAClD,uJAKb,sM,0BA3BpB,oD,kEAOE,8EACE,gFACE,+EACA,6EACE,mFAAqC,0B,sCAA2C,8BAChF,mFAAqC,0B,sCAA6C,8BAClF,mFAAqC,0B,sCAA8D,8BACnG,gFAAI,0B,sCAA6C,8BACnD,qEACA,qEACA,iFACA,sF,kCAeA,qEACF,mEACF,iEACF,gE,qEAnCe,wDAA4B,uFAA5B,CAA4B,uHAA5B,CAA4B,cAA5B,CAA4B,8BAUE,6HACA,8HACA,+IACjC,8HAIgB,gK,0BAoB5B,0CAEE,yB,qCACF,+B,4CADE,oJCjGJ,IAAK,GAAL,SAAKL,G,OACH,IAAAyC,QAAA,aACA,IAAAxC,YAAA,iBACA,IAAAyC,cAAA,mBAHG1C,EAAL,CAIC,IASM,a,MAAM2C,EAgDXzR,YAAmBmP,EACCvL,EACAC,EACAgI,EACA5H,EACA6H,GALD,KAAAqD,mBACC,KAAAvL,mBACA,KAAAC,uBACA,KAAAgI,cACA,KAAA5H,oBACA,KAAA6H,SA7CpB,KAAA4F,eAAoE,IAAI1F,EAAA,OAAgB3K,GAIxF,KAAAsQ,WAAgE,IAAI3F,EAAA,OAAgB3K,GAKpF,KAAA2D,KAAkC,IAAIuK,IAKtC,KAAAD,aAA2CpO,OAAOC,OAAO,IAAI,IAA8B,CACzF+D,GAAI,OACJC,SAAU,EACVC,YAAa,IAKf,KAAAH,OAAqC/D,OAAOC,OAAO,IAAI,IAA8B,CACnF+D,GAAI,MACJC,SAAU,EACVC,YAAa,IAqBbxE,KAAKyL,mBAAqB,GAG5B1G,WACE/E,KAAK2L,WAAa3L,KAAKiL,YAAYW,MAAM,CACvCE,MAAO,KAET9L,KAAKoE,KAAKwK,IAAI,GAAOT,YAAanO,KAAKuO,iBAAiBM,iBAAiB/M,UAAWgN,IAC/D,MAAfA,IACF9O,KAAK+O,iBAAmBD,EACxB9O,KAAKgR,wBAWHA,oBACNhR,KAAKiP,UAAU,GAAO0B,SACtB3Q,KAAKoE,KAAKwK,IACR,GAAO+B,QACP3Q,KAAKqD,kBAAkBsJ,qBAAqB3M,KAAKqE,OAAOC,GAAItE,KAAKqE,QAAQjD,KACvE,OAAA8F,EAAA,GAAW7C,GAAWrE,KAAKuO,iBAAiBvI,cAAchG,KAAK+O,iBAAiB9I,OAAOgL,UAAU3P,KAAM,CACnGkD,YAAaH,EAAOG,YACpB0B,gBAAiB7B,EAAOE,WAE1B,GACA,EACA,YAAW,aAEbzC,UAAWQ,IACXtC,KAAK+Q,WAAWhF,KAAKzJ,MAQ3B4O,kBAAkBC,GAChB,OAAOnR,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,GACtD,OAAA6H,GAAA,GAAUf,GACW,MAAfA,EACEA,EAAYsC,OAASD,EAAiBC,KACjC,aAAa,GAEbpR,KAAKuO,iBAAiBvI,cAAc8I,EAAY7I,OAAOgL,UAAU3P,KAAM,CAC5EkD,YAAa,EACb0B,gBAAiB,OAEhB9E,KACC,cACA,cACA,OAAAG,EAAA,GAAK8P,GAA0CA,EAAgBhF,KAAKhL,OAAQiQ,GAAuBA,EAAYhN,KAAO6M,EAAiB7M,KACvI,OAAA/C,EAAA,GAAKwE,GAAoBA,EAAOiK,OAAS,IAGxC,aAAa,KAS5BuB,cAAc3F,GACZ,OAAO5L,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,GACtD,OAAA6H,GAAA,GAAUf,GACW,MAAfA,GAAuBA,EAAYsC,OAASxF,EAAMwF,KAC7C,aAAa,GAEf,aAAa,KAQ1BI,wBAAwBC,GACtBzR,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgN,IAC9D,GAAmB,MAAfA,EAAqB,CACvB,MAAMjF,EAAW7J,KAAKuO,iBAAiBmD,wBAAwB5C,EAAa2C,GAC5EzR,KAAKmQ,kBAAkB,iBAAkBtG,EAAU4H,EAASrM,KAAM0J,QAElE9O,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,0CASrFkO,mBAAmBF,GACjBzR,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgN,IAC9D,GAAmB,MAAfA,EACF,GAAIA,EAAYsC,OAASK,EAASL,KAAM,CACtC,MAAMvH,EAAW7J,KAAKuO,iBAAiBqD,mBAAmB9C,EAAa2C,GACvEzR,KAAKmQ,kBAAkB,cAAetG,EAAU4H,EAASrM,KAAM0J,QAE/D9O,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,0DAGjFzD,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,0CASrFwI,OAAOvM,GACL,MAAMoM,EAAgBpM,EAAKoM,MACd,MAATA,GAAiB9L,KAAKyL,qBAAuBK,IAC/C9L,KAAKkL,OAAO2G,cAAc7R,KAAKuO,iBAAiBuD,2BAA2B9R,KAAK+O,mBAChF/O,KAAKyL,mBAAqBK,EAC1B9L,KAAK0O,aAAalK,YAAc,GAElCxE,KAAKsQ,YAAa,EAElBtQ,KAAKiP,UAAU,GAAO2B,eACtB5Q,KAAKoE,KAAKwK,IAAI,GAAOgC,cAAe5Q,KAAKqD,kBAAkBsJ,qBAAqB3M,KAAK0O,aAAapK,GAAItE,KAAK0O,cAActN,KACvH,OAAA8F,EAAA,GAAW7C,GAAWrE,KAAKuO,iBAAiBwD,aAAa/R,KAAKyL,mBAAoB,CAChFjH,YAAaH,EAAOG,YACpB0B,gBAAiB7B,EAAOE,WACvB,GAAM,EAAM,YAAW,aAE1BzC,UAAWQ,IACXtC,KAAK8Q,eAAe/E,KAAKzJ,MAWrB2M,UAAUxP,GACZO,KAAKoE,KAAK6L,IAAIxQ,KAChBO,KAAKoE,KAAKa,IAAIxF,GAAK8K,cACnBvK,KAAKoE,KAAK8E,OAAOzJ,IAOrB2K,cACE,IAAK,MAAM3K,KAAOO,KAAKoE,KAAKmM,OAC1BvQ,KAAKiP,UAAUxP,GAEjBO,KAAKqD,kBAAkBmH,gBAAgBxK,KAAKqE,OAAOC,IACnDtE,KAAKqD,kBAAkBmH,gBAAgBxK,KAAK0O,aAAapK,IAU3D6L,kBAAkBK,EAAuB3G,EAAmD4G,EAAoB3B,GAC9GjF,EAASzI,KAAK,SAAAY,EAAA,IAA+BF,UAAWQ,IAClDA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,yBAA2B+M,EAAe,CAAEpL,KAAMqL,KACnIzQ,KAAKuO,iBAAiByD,uBAAuBlD,EAAY7I,OAAOgL,UAAU3P,OAE1EtB,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,yBAA2B+M,EAAe,CAAEpL,KAAMqL,OAQvI1C,0BACE/N,KAAK2L,WAAWxF,WAAW,CACzB2F,MAAO,KAET9L,KAAKiM,OAAO,CAAEH,MAAO,M,6CAnPZ+E,GAAsB,gP,mDAAtBA,EAAsB,wjD,GAAA,MDrCnC,0CACE,wEAA+B,yB,qCAAuC,8BAEtE,0EAA2C,yB,qCAE3C,8BACA,2EAA+B,wDAAY,EAAA5E,OAAA,uBACzC,6EACE,+EACE,8EAEA,kFACI,wFACE,gFAA8B,0B,sCAChC,8BACJ,qEAEF,qEACF,iEACA,2EACE,kFAAQ,qDAAS,EAAA8B,6BACf,0B,sCACF,8BACF,iEACF,+DAEA,6F,kCAgDA,iF,kCAKA,0EAAI,0B,sCAAgD,8BAEpD,6F,kCAsCA,iF,kCAKF,wEACA,gC,qCA5HiC,uHAEY,2IAGrC,gFAOoC,wJAQpC,2JAKU,6KAgDV,4LAKF,iIAEY,yKAsCV,4K,oNClFD,G,sBCjCD,kC,0BAGE,+EAA+B,yB,qCAA8C,8BAC/E,qC,4CADiC,8H,0BAI/B,+EAA+B,yB,qCAA4C,8BAC7E,qC,4CADiC,4H,yBAGjC,0C,4CAA8C,0DAA8B,+C,mGAE5E,+C,wIAEA,mE,uDAFqF,0DAA8B,2a,mEAcjH,0CACE,qFACQ,gI,iCACN,6EAA4B,yB,qCAC9B,8BACF,oE,+CAJ+C,4IAEf,qJ,yBAMhC,iD,4CACiB,4E,yBAEnB,mD,4CACmB,8ECalB,a,MAAMkE,EA+EX7S,YAAmBmP,EACT/H,EACA0L,EACAnP,EACAC,EACAC,EACA1D,EACE2L,EACF/H,EACAC,EACDzC,EACGkC,GAXO,KAAA0L,mBACT,KAAA/H,qBACA,KAAA0L,0BACA,KAAAnP,qBACA,KAAAC,mBACA,KAAAC,uBACA,KAAA1D,QACE,KAAA2L,SACF,KAAA/H,uBACA,KAAAC,eACD,KAAAzC,iBACG,KAAAkC,oBAxFZ,KAAAY,cAAgB,mCAKhB,KAAAD,OAAS,aAiBT,KAAAE,WAAgC,CAC9ByO,UAAW,CACTvO,KAAM,CACJC,KAAM,QAGVuO,iBAAkB,CAChBxO,KAAM,CACJC,KAAM,SAaF,KAAAI,WAAgC,IAAI,EAAAC,aAKpC,KAAAC,WAAgC,IAAI,EAAAD,aAK9C,KAAAE,KAAuB,GAgBhB,KAAAiO,cAAgB,KAsBvBtN,WACE/E,KAAKgF,iBAGPA,iBACEhF,KAAKoE,KAAKM,KAAK1E,KAAKT,MAAM+S,OAAOxQ,UAAWwQ,IACnB,aAAnBA,EAAOC,SACTvS,KAAKwS,eAAeF,EAAOC,YAG/BvS,KAAKyS,SAAWzS,KAAKuO,iBAAiBM,iBAAiBzN,KACrD,cACA,OAAA8F,EAAA,GAAW0E,GACF,YACL5L,KAAKmD,qBAAqBmE,aAAa,IAAUI,UAAW,YAAWkE,GAASA,EAAMpE,UAAO/G,GAC7FT,KAAK0S,aAAa9G,GAAOA,CACxBtE,EAAoDoL,IAC5CpL,IAAiBoL,KAIhC,YACE1S,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,2BAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,gCAClCzD,KAAKgD,iBAAiBiC,IAAI,GAAGjF,KAAKyD,mCAClC3B,UAAUA,EAAEqQ,EAAWQ,EAAgBP,MACvCpS,KAAKmS,UAAY,IAAI,IAAkB,CACrC7N,GAAI,YACJa,MAAOgN,EACP/M,KAAM,YACNC,WAAY,CACVC,SAAU,MAEZA,UAAU,IAEZtF,KAAK2S,eAAiB,IAAI,IAAkB,CAC1CrO,GAAI,iBACJa,MAAOwN,EACPvN,KAAM,iBACNE,UAAU,EACVsN,UAAU,IAEZ5S,KAAKoS,iBAAmB,IAAI,IAAqB,CAC/C9N,GAAI,mBACJa,MAAOiN,EACPhN,KAAM,mBACNE,UAAU,IAEZtF,KAAK4F,UAAY,CACf5F,KAAKmS,UACLnS,KAAKoS,kBAEPpS,KAAK6F,UAAY7F,KAAK+C,mBAAmB+C,gBAAgB9F,KAAK4F,WAExD5F,KAAK6F,UAAUQ,SAAS8L,YAC5BnS,KAAK6F,UAAUQ,SAAS8L,UAAU7L,mBCpMnC,MAOLC,uBAAuBgI,GACrB,OAAQ9H,GACC8H,EAAiBwD,aAAatL,EAAQd,MAAO,CAC9CnB,YAAa,EACb0B,gBAAiB,MAEpB9E,KACC,cACA,OAAAG,EAAA,GAAMwE,GACGA,EAAO1E,OAAOuK,GAASA,EAAMxG,OAASqB,EAAQd,QAEvD,OAAApE,EAAA,GAAMwE,GACGA,EAAOiK,OAAS,EAAI,CAAE6C,aAAa,GAAS,SDiLkBjM,gBAAgB5G,KAAKuO,mBAC9FvO,KAAK8S,8BAAgC9S,KAAKmS,UAAUrL,aAAa1F,KAAK,OAAA2F,EAAA,GAAa,MAAMjF,UAAUA,KACjG9B,KAAK6C,kBAAkBmE,mBAI3BhH,KAAKoE,KAAKM,KACR,YACE1E,KAAKuO,iBAAiBM,iBACtB7O,KAAKyS,SACLzS,KAAKuO,iBAAiBM,iBACnBzN,KAAK,OAAAC,GAAA,GAAQyN,GAAgB,YAASA,IAAc,OAAA5H,EAAA,GAAW4H,GAAgB9O,KAAK+S,aAAajE,GAAa1N,KAAK,kBACtHU,UAAUA,EAAEgN,EAAakE,EAASC,M,MAEf,MAAfnE,IAGF9O,KAAK6F,UAAUQ,SAAS8L,UAAUe,uBAElClT,KAAK+O,iBAAmBD,GAEpBmE,aAAY,EAAZA,EAAc7N,OAChBpF,KAAK+C,mBAAmBoQ,uBAAuB,EAAGnT,KAAK6F,UAAW7F,KAAK4F,UAAW5F,KAAK2S,gBACvF3S,KAAK6F,UAAUM,WAAW,CACxBgM,UAAWrD,EAAY1J,KACvBuN,eAAkC,QAApB,EAAEM,aAAY,EAAZA,EAAc7N,YAAI,QAAI,GACtCgN,iBAAkBtD,EAAY1I,mBAAmB,sBAGnDpG,KAAK4F,UAAY,CACf5F,KAAKmS,UACLnS,KAAKoS,kBAEPpS,KAAK6F,UAAUM,WAAW,CACxBgM,UAAWrD,EAAY1J,KACvBgN,iBAAkBtD,EAAY1I,mBAAmB,qBAGrDgN,WAAWA,KACJJ,IAAWlE,EAAYuE,WAC1BrT,KAAK6F,UAAUyN,WAEhB,WAUb1L,WACE5H,KAAKuO,iBAAiBgF,kBACtBvT,KAAKmE,WAAW2D,OAChB9H,KAAKkL,OAAO0B,SAAS,CAAC5M,KAAKuO,iBAAiBiF,+BAS9CzL,WACE/H,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAClD8J,IAWe,OAAVA,EACF5L,KAAKyT,eAXQ,CACbrO,KAAMpF,KAAKmS,UAAUxM,MACrBwC,SAAU,CACR,iBAAkB,CAChB,CACExC,MAAO3F,KAAKoS,iBAAiBzM,WAQnC3F,KAAK0T,UAAU9H,KAUvB6H,eAAevL,GACb,MAAMyL,EAAgBrT,OAAOC,OAAO,IAAI,KAAS2H,GACjDlI,KAAKuO,iBAAiBhG,OAAOoL,GAAevS,KAC1C,SAAAY,EAAA,IACAF,UAAWQ,IACPA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,gCAAiC,CAAE2B,KAAMuO,EAAcvO,QACxIpF,KAAKiE,WAAW6D,KAAK6L,GACjB,YAAWrR,EAAGlC,WAEhBJ,KAAK4T,uBADiBtR,EAAGlC,QAAQ6F,OAAOuB,KAAKlG,MAE7CtB,KAAKuO,iBAAiBsF,sBACtB7T,KAAKkL,OAAO2G,cAAc7R,KAAKuO,iBAAiBuF,iCAAiCxR,EAAGlC,QAAQgR,UAG9FpR,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,gCAAiC,CAAE2B,KAAMuO,EAAcvO,QACtIpF,KAAK+T,4BAA4BJ,EAAe,WAChD3T,KAAKmE,WAAW2D,UAWdiM,4BAA4BnI,EAAcjB,GAEhD3K,KAAKoE,KAAKM,KAAK1E,KAAKuO,iBAAiBwD,aAAanG,EAAMxG,KAAM,CAC5DZ,YAAa,EACb0B,gBAAiB,IAChB9E,KAAK,cAA+B,eACpCU,UAAW+I,IACNA,EAAKC,cAAgB,GACvB9K,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,iBAAmBkH,EAAsB,0BAA2B,CACjJvF,KAAMwG,EAAMxG,WAUtBsO,UAAU9H,GACR,IAAIoI,EAA0B,GAE1B,YAAShU,KAAKoS,iBAAiBzM,SACjCqO,EAAa,IAAIA,EAAY,CAC3BC,GAAI,UACJC,KAAM,mCACNvO,MAAO3F,KAAKoS,iBAAiBzM,SAI7B,YAAS3F,KAAKmS,UAAUxM,SAC1BqO,EAAa,IAAIA,EAAY,CAC3BC,GAAI,UACJC,KAAM,QACNvO,MAAO3F,KAAKmS,UAAUxM,SAI1B3F,KAAKuO,iBAAiB4F,MAAMvI,EAAOoI,GAAY5S,KAC7C,SAAAY,EAAA,IACAF,UAAWQ,IACPA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,+BAAgC,CAAE2B,KAAM9C,EAAGlC,QAAQgF,QACpIpF,KAAKiE,WAAW6D,KAAKxF,EAAGlC,WAExBJ,KAAKiD,qBAAqByF,MAAM1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,+BAAgC,CAAE2B,KAAMwG,EAAMxG,QAC7HpF,KAAKmE,WAAW2D,UAStB0K,eAAeD,GACbvS,KAAKuO,iBAAiBgF,kBACtBvT,KAAKuO,iBAAiB6F,SAAS7B,GAC5BnR,KACC,cACA,eACDU,UAAW8J,IACV5L,KAAKuO,iBAAiBmF,UAAU9H,KAQtCgI,uBAAuBS,GACrBrU,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgN,IAC1C,OAAhBA,IACF9O,KAAKuO,iBAAiBgF,kBACtBvT,KAAKuO,iBAAiB+F,WAAWD,GAAe,GAAO,EAAO,YAAW,aAAc,YAAW,YAAa,YAAW,WACvHjT,KACC,cACA,eACDU,UAAW8J,IACV5L,KAAKuO,iBAAiBmF,UAAU9H,QAU1C1C,SACElJ,KAAKuO,iBAAiBM,iBAAiBzN,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAW8J,IAC9D,MAAMzC,EAAWnJ,KAAKoD,aAAagG,KAAK,KACxCD,EAASE,kBAAkBC,IAAMsC,EACjCzC,EAASE,kBAAkBE,YAAcvJ,KAAKyD,cAAgB,6BAC9D0F,EAASE,kBAAkBG,UAAYxJ,KAAKyD,cAAgB,2BAC5D0F,EAASE,kBAAkBI,YAAczJ,KAAKyD,cAAgB,6BAC9D0F,EAASE,kBAAkBK,aAAe1J,KAAKyD,cAAgB,8BAC/D0F,EAASE,kBAAkBM,WAAa,SACxCR,EAASE,kBAAkBO,YAAc,eACzCT,EAASE,kBAAkBQ,SAASzI,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWgI,IACvDA,GACE,YAAS8B,EAAMtH,KACjBtE,KAAKuO,iBAAiBrF,OAAO0C,EAAMtH,IAAIlD,KAAK,SAAAY,EAAA,IACzCF,UAAWQ,IACNA,EAAGkG,cACLxI,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,gCAAiC,CAAE2B,KAAMwG,EAAMxG,QAChIpF,KAAKyK,SAELzK,KAAKiD,qBAAqByF,MACxB1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,sCAAuC,CAAE2B,KAAMwG,EAAMxG,OACpGpF,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,wCAAyC,CAAE4L,MAAO/M,EAAG0H,sBAYtHS,QACEzK,KAAKuO,iBAAiBP,oBAAoB5M,KAAK,OAAA4G,EAAA,GAAK,IAAIlG,UAAWR,IACjEtB,KAAKW,eAAe+J,sBAAsBpJ,KAE5CtB,KAAK4H,WAOPwC,cACEpK,KAAKuO,iBAAiBgF,kBACtBvT,KAAKoE,KAAK/C,OAAQgJ,GAAQ,YAASA,IAAMC,QAASD,GAAQA,EAAIE,eAEzD,YAASvK,KAAK8S,gCACjB9S,KAAK8S,8BAA8BvI,cASvCmI,aAAa9G,GACX,GAAI,YAASA,IAAU,YAASA,EAAM3F,OAAOsO,OAAOjT,MAClD,OAAOtB,KAAK+S,aAAanH,GAAOxK,KAC9B,OAAAG,EAAA,GAAKe,GACI,YAASA,IAAO,YAASA,EAAGlC,UAErC,OAAAoU,GAAA,OAAiB,aAAa,KASpCzB,aAAanH,GACX,GAAI,YAASA,IAAU,YAASA,EAAM3F,OAAOsO,OAAOjT,MAClD,YAAqBb,IAAjBmL,EAAM2I,OACDvU,KAAKkS,wBAAwBoC,WAAW1I,EAAM3F,OAAOsO,OAAOjT,MAE9DsK,EAAM2I,OAQjBE,wBAAwB7I,GACtB,GAAI,YAASA,IAAU,YAASA,EAAM3F,OAAOsO,OAAOjT,MAClD,OAAOtB,KAAK+S,aAAanH,GAAOxK,KAC9B,OAAAG,EAAA,GAAKe,IACH,GAAI,YAASA,IAAO,YAASA,EAAGlC,SAE9B,OADYkC,EAAGlC,QACMsU,MACnB,KAAK,KAAUA,KAAK/O,MAClB,OAAO,aAA2BrD,EAAGlC,QAAQkE,IAC/C,KAAK,KAAWoQ,KAAK/O,MACnB,OAAO,UAAA3D,EAAA,CAA4BM,EAAGlC,QAAQkE,S,6CAncjD2N,GAAkB,2d,mDAAlBA,EAAkB,8D,4DAAlB,mBAAa,mC,+rBDxD1B,yCACE,yEACE,2EAEE,kF,iCAEA,qIAIA,uIAIA,yFAEA,wF,oEAIA,qFAKS,0DAAc,EAAAlK,cACrB,iFACE,sFAAQ,qDAAS,EAAAH,cACyB,oCAAkC,0B,sCAAyC,8BACvH,qEACA,qFAMF,mEAEA,kFACE,iGAEF,mEACA,iGAKF,uEACF,+DACF,6DACA,gC,6EA9CY,mIAAiD,aAAjD,CAAiD,cAU5C,yHAEA,mLAIF,yEAAiB,wBAAjB,CAAiB,wBAAjB,CAAiB,0BAAjB,CAAiB,oBAQsD,kIAElE,uFASM,uFAGA,yF,iHCcnB,G,iBEjDA,MAAM+M,I,uCC4BP,yC,+DA6Bc,6C,qCAKE,uFACF,iF,wFAHE,0KAFA,4F,uBAMF,6C,qCAME,uFACF,iF,KANE,yCAAiB,8G,mEAQrB,6CACQ,wL,qCAEN,qFACF,8E,2FAFQ,6K,0BA1Bd,sCACE,kFAAI,yBAAqB,8BACzB,kFAAI,yBAAuB,8BAC3B,kFAAI,yB,kCAAkD,8BACtD,oFAAI,0BAAwE,8BAC5E,oFACE,0FACE,+FACE,oGAOA,oGAQF,wFACA,kGAKF,6EACF,2EACF,0E,oCA9BM,yEACA,2EACA,6JACA,kKAGc,+EACH,yEAOA,yEASF,mH,0BA5CrB,oD,iCAQE,kFACE,oFACE,mFACA,gFACE,uFAAgB,0B,sCAA0C,8BAC1D,uFAAgB,0B,sCAA4C,8BAC5D,uFAAgB,0B,sCAA6D,8BAC7E,uFAAgB,0B,sCAA+C,8BAC/D,oFAAI,0B,sCAA4C,8BAClD,yEACA,yEACA,qFACA,0F,kCAgCA,yEACF,uEACF,qEACF,oE,8DArDE,wDAA4B,iCAA5B,CAA4B,kGAA5B,CAA4B,cAA5B,CAA4B,8BAUN,4HACA,6HACA,8IACA,gIACZ,6HAImB,uI,0BAqC/B,0CACE,yB,qCACF,+B,4CADE,mJ,wCC/CD,a,MAAMC,EAgDXxV,YAAmByV,EACCrO,EACA0L,EACAlP,EACAC,EACAgI,EACE6J,EACF5J,EACA/H,EACAE,EACD1C,GAVA,KAAAkU,eACC,KAAArO,qBACA,KAAA0L,0BACA,KAAAlP,mBACA,KAAAC,uBACA,KAAAgI,cACE,KAAA6J,eACF,KAAA5J,SACA,KAAA/H,uBACA,KAAAE,oBACD,KAAA1C,iBAxDnB,KAAA8C,cAAgB,+BAKhB,KAAAY,OAAqC/D,OAAOC,OAAO,IAAI,IAA8B,CACnF+D,GAAI,KACJC,SAAU,EACVC,YAAa,IAOf,KAAAuQ,WAA4D,IAAI3J,EAAA,EAA8C,IAC9G,KAAA4J,iBAA6B,GAK7B,KAAAzJ,eAA4C,IAAIH,EAAA,OAA0B3K,GAQ1E,KAAAwU,SAAqC,IAAI7J,EAAA,GAAyB,GAelE,KAAAhH,KAAuB,GAarBpE,KAAKyL,mBAAqB,GAC1BzL,KAAK2L,WAAa3L,KAAKiL,YAAYW,MAAM,CACvCE,MAAO9L,KAAKyL,qBAIhB1G,WACE/E,KAAKiM,OAAO,CAAEH,MAAO9L,KAAKyL,qBAO5BQ,OAAOvM,GACD,YAASM,KAAKkV,aAChBlV,KAAKkV,UAAU3K,cACfvK,KAAKoE,KAAOpE,KAAKoE,KAAK/C,OAAQgJ,GAAsBA,IAAQrK,KAAKkV,YAEnElV,KAAKkV,UAAYlV,KAAKqD,kBAAkBsJ,qBAAqB3M,KAAKqE,OAAOC,GAAItE,KAAKqE,QAAQjD,KACxF,OAAA+T,GAAA,OAAUnV,KAAKiV,SAASlJ,MAAK,IAC7B,OAAA7E,EAAA,GAAWmJ,IACT,MAAMvE,EAAgBpM,EAAKoM,MAK3B,OAJa,MAATA,GAAiB9L,KAAKyL,qBAAuBK,IAC/C9L,KAAKyL,mBAAqBK,EAC1B9L,KAAKqD,kBAAkB+R,mBAAmBpV,KAAKqE,OAAOC,GAAI,GAAI,CAAC+H,KAAM,KAEhErM,KAAK6U,aAAa9C,aAAa/R,KAAKyL,mBAAmB4J,OAAQ,CACpE7Q,YAAa6L,EAAkB7L,YAC/B0B,gBAAiBmK,EAAkB9L,WAClC,GAAM,EAAM,YAAW,aAE5B,cACA,cACA,OAAA2C,EAAA,GAAWnB,GACkB,IAAvBA,EAAOsG,KAAK2D,OACP,YAAa,SAAA3E,EAAA,CAAmBtF,EAAOoG,SAAU,KAEnDnM,KAAKmD,qBAAqBmE,aAAa,IAAUgO,iBAAiBlU,KACvE,OAAA8F,EAAA,GAAWqO,GACF,YAAwBxP,EAAOsG,KAAK9K,IAAKqK,IAC9C,GAAI,YAASA,KAAW5L,KAAKgV,iBAAiBQ,SAAS5J,EAAMtH,IAC3D,OAAO,YAAwB,CAC7BtE,KAAKmD,qBAAqBmE,aAAa,IAAUI,UAAWkE,EAAMpE,MAClExH,KAAKyV,gBAAgBF,EAAa3J,GAClC5L,KAAK0S,aAAa9G,GAClB5L,KAAK0V,aAAa9J,GAClB5L,KAAK2V,WAAW/J,KACfxK,KACD,OAAAG,EAAA,KAAMqU,EAAWC,EAAgBnD,EAAczB,EAAW6E,MAEtD,MAAMC,EAA+B,IAAIpB,GAMzC,OALAoB,EAAcvJ,aAAeoJ,IAAclD,EAC3CqD,EAAcC,WAAaH,EAC3BE,EAAcnK,MAAQA,EACtBmK,EAAc9E,UAAYA,EAAU7Q,QACpC2V,EAAc5G,SAAW2G,EAAQ1V,QAC1B2V,QAKb3U,KAAK,OAAAG,EAAA,GAAKkL,GACL,SAAApB,EAAA,CAAmBtF,EAAOoG,SAAUM,SAKnD3K,UAAW6D,IACX3F,KAAK+U,WAAWhJ,KAAKpG,GACrB3F,KAAKuL,eAAeQ,KAAKpG,EAAMwG,UAC/BnM,KAAKiV,SAASlJ,MAAK,KAGrB/L,KAAKoE,KAAKM,KAAK1E,KAAKkV,WAGtBO,gBAAgBF,EAAsB3J,GACpC,OAAI2J,EACK,aAAa,GAEbvV,KAAKmD,qBAAqBmE,aAAa,IAAU2O,eAAgBrK,EAAMpE,MAOlF0O,YAAYtK,GACN,YAASA,EAAMA,MAAMtH,KACvBtE,KAAK6U,aAAa3L,OAAO0C,EAAMA,MAAMtH,IAAIlD,KAAK,SAAAY,EAAA,IAC3CF,UAAWQ,IACNA,EAAGkG,cACLxI,KAAKgV,iBAAmB,IAAIhV,KAAKgV,iBAAkBpJ,EAAMA,MAAMtH,IAC/DtE,KAAKiD,qBAAqBwF,QAAQzI,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,+BAAgC,CAAE2B,KAAMwG,EAAMA,MAAMxG,QACrIpF,KAAKyK,SAELzK,KAAKiD,qBAAqByF,MACxB1I,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,qCAAsC,CAAE2B,KAAMwG,EAAMA,MAAMxG,OACzGpF,KAAKgD,iBAAiBiC,IAAIjF,KAAKyD,cAAgB,uCAAwC,CAAE4L,MAAO/M,EAAG0H,kBAS/GS,QACEzK,KAAK6U,aAAa7G,oBAAoB5M,KACpC,OAAA4G,EAAA,GAAK,IACLlG,UAAWR,IACXtB,KAAKW,eAAesN,wBAAwB3M,KAQhDqU,WAAW/J,GACT,OAAO5L,KAAKwG,mBAAmBR,cAAc4F,EAAM3F,OAAOkJ,SAAS7N,MAAMF,KAAK,eAOhFsU,aAAa9J,GACX,OAAO5L,KAAK6U,aAAa7O,cAAc4F,EAAM3F,OAAOgL,UAAU3P,MAAMF,KAAK,eAO3EsR,aAAa9G,GACX,OAAO5L,KAAKkS,wBAAwBoC,WAAW1I,EAAM3F,OAAOsO,OAAOjT,MAAMF,KACvE,cACA,OAAAG,EAAA,GAAKe,GAAiC,YAASA,IAAO,YAASA,EAAGlC,UAClE,OAAAoU,GAAA,OAAiB,aAAa,KAOlCzG,0BACE/N,KAAK2L,WAAWxF,WAAW,CACzB2F,MAAO,KAET9L,KAAKiM,OAAO,CAAEH,MAAO,KAMvB1B,cACEpK,KAAKqN,oBACLrN,KAAKqD,kBAAkBmH,gBAAgBxK,KAAKqE,OAAOC,IAIrD+I,oBACM,YAASrN,KAAKmW,gBAChBnW,KAAKmW,cAAc5L,cAErBvK,KAAKoE,KAAK/C,OAAQgJ,GAAQ,YAASA,IAAMC,QAASD,GAAQA,EAAIE,eAC9DvK,KAAKqD,kBAAkBmH,gBAAgBxK,KAAKqE,OAAOC,K,6CAnO1CsQ,GAAuB,gb,mDAAvBA,EAAuB,swD,GAAA,MD/CpC,yCACE,yEACE,2EACE,6EACE,8EAA6B,yB,sCAAsC,8BACnE,+EACE,sFAEE,8EACA,sFAAiC,0B,sCAA4C,8BAC/E,uEACF,qEACF,mEAEA,gFAA2C,0B,sCAA6C,8BACxF,gFAA+B,wDAAY,EAAA3I,OAAA,uBACzC,kFACE,oFACE,mF,4EAGA,uFACE,2FACE,mFAA8B,0B,sCAChC,8BACF,yEACF,uEACF,qEACA,+EACE,uFAAQ,qDAAS,EAAA8B,6BACf,0B,sCACF,8BACF,qEACF,mEAEA,4F,kCACA,+F,oEAyDA,qF,kCAIF,mEACF,+DACF,6DACA,gC,uBAhGqC,uHAGnB,0GAE2B,6HAKI,8HACrC,gFAKO,4IADqB,gHAIM,wJAOlC,kKAKO,2GAEV,mMAwDG,uJ,oOC9CL,G,wDClCA,a,MAAMqI,UAAuB,KAIlChX,YAAsBiX,EACAlT,EACA+H,EACAhI,GACpBoT,MAAMnT,EAAsB+H,EAAQhI,GAJhB,KAAAmT,qBACA,KAAAlT,uBACA,KAAA+H,SACA,KAAAhI,cALZ,KAAAqT,eAAiB,SAS3BC,cAAcjX,EAA+BC,GAC3C,OAAO,YAAa,CAAC,IAAUyW,iBAGjCQ,aAAalX,EAA+BC,GAC1C,OAAOQ,KAAKqW,mBAAmBpV,YAAYjB,KAAKuW,gBAAgBnV,KAC9D,OAAAG,EAAA,GAAImV,IAAY,MAAC,SAAGA,KAA0B,QAAb,EAAAnX,aAAK,EAALA,EAAO+S,cAAM,eAAEC,c,6CAjBzC6D,GAAc,uH,sDAAdA,EAAc,QAAdA,EAAc,qBAFb,S,GAEP,G,8BC2CA,a,MAAMO,G,6CAAAA,I,kDAAAA,I,sDA5CF,CACP,IAAaC,SAAS,CACpB,CACE1C,KAAM,UACN2C,UAAW,GACXvX,QAAS,CACPwX,WAAY,MAEdpX,KAAM,CAAEqX,MAAO,qCAAsCpX,cAAe,gCACpEqX,YAAa,CAAC,OAEhB,CACE9C,KAAM,KACN2C,UAAW,GACXvX,QAAS,CACPwX,WAAY,MAEdpX,KAAM,CAAEqX,MAAO,oCAAqCpX,cAAe,+BACnEqX,YAAa,CAAC,OAEhB,CACE9C,KAAM,GAAG,gBACT2C,UAAW,GACXvX,QAAS,CACPwX,WAAY,MAEdpX,KAAM,CAAEqX,MAAO,6CAA8CpX,cAAe,wCAC5EqX,YAAa,CAAC,OAEhB,CACE9C,KAAM,GAAG,gBACT2C,UAAW,GACXvX,QAAS,CACPwX,WAAY,MAEdpX,KAAM,CAAEqX,MAAO,gDAAiDpX,cAAe,2CAC/EqX,YAAa,CAAC,W,GAQf,G,iBCvBA,a,MAAMC,G,6CAAAA,I,kDAAAA,I,sDAnBF,CACP,IACA,IACA,IACA,GACA,S,GAcG,I,sMCjCP,uEASmC,2JAAsC,oIAAtC,CAAsC,kIAAtC,CAAsC,uIAGO,8B,6DAX7C,6CAAiB,oBAAjB,CAAiB,uCAAjB,CAAiB,kBAAjB,CAAiB,sBAAjB,CAAiB,UAAjB,CAAiB,wBAAjB,CAAiB,4BCyB7C,Y,MAAMC,UAA+B,IAmB1C9X,YAAYyD,EAAsCsU,GAChDb,MAAMzT,EAAmBsU,GAZT,KAAAC,KAA8C,IAAI,EAAAlT,aAChD,KAAAmT,OAAgD,IAAI,EAAAnT,aACrD,KAAAoT,MAA+C,IAAI,EAAApT,aAG5D,KAAAqT,SAAkD,IAAI,EAAArT,c,6CAbrDgT,GAAsB,8F,mDAAtBA,EAAsB,+D,GAAA,K,gCAehB,IAAwB,G,uJAE3B,IAAsC,G,mrBD3CtD,yEAaA,+B,KAbqD,iDAAc,6B,0CC0B5D,G,kRCsDA,Y,MAAMM,G,6CAAAA,I,kDAAAA,I,uDAPA,CACT,CACEC,QAAS,IACTC,SAAU,MAEb,SAhBQ,CACP,IACA,IACA,IACA,IACA,IACA,Q,GAYG,G,mCA/BL,IAA2B,qEAb3B,KAAsC,I,mCActC,IAA2B,qGAd3B,KAAsC,I,mCAmBtC,IAAa,wFApBb,EAAsB,qB,kCCnCxB,gGAGO,MAAMC,EAAkB,SAMxB,SAASC,EAAkBtT,GAChC,OAAO,IAAI,IAAY,cAA+BqT,EAAiBrT,GAAIuT,a,kCCV7E,0EAgBO,Y,MAAMC,EAOXC,eAAetY,EAAaI,GAC1B,OAAO,YAAa,CAAC,IAAI,IAAWJ,EAhBE,eAgBgCI,M,6CAR7DiY,I,sDAAAA,EAAsB,QAAtBA,EAAsB,qBAFrB,S,GAEP,I,oCChBP,kCAGO,MAAME,EACX5Y,YAIS6Y,EAIApY,GAJA,KAAAoY,OAIA,KAAApY","file":"x","sourcesContent":["import { BreadcrumbConfig } from '../../breadcrumbs/breadcrumb/breadcrumb-config.model';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { I18nBreadcrumbsService } from './i18n-breadcrumbs.service';\nimport { hasNoValue } from '../../shared/empty.util';\nimport { currentPathFromSnapshot } from '../../shared/utils/route.utils';\n\n/**\n * The class that resolves a BreadcrumbConfig object with an i18n key string for a route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbResolver implements Resolve<BreadcrumbConfig<string>> {\n  constructor(protected breadcrumbService: I18nBreadcrumbsService) {\n  }\n\n  /**\n   * Method for resolving an I18n breadcrumb configuration object\n   * @param {ActivatedRouteSnapshot} route The current ActivatedRouteSnapshot\n   * @param {RouterStateSnapshot} state The current RouterStateSnapshot\n   * @returns BreadcrumbConfig object\n   */\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BreadcrumbConfig<string> {\n    const key = route.data.breadcrumbKey;\n    if (hasNoValue(key)) {\n      throw new Error('You provided an i18nBreadcrumbResolver for url \\\"' + route.url + '\\\" but no breadcrumbKey in the route\\'s data');\n    }\n    const fullPath = currentPathFromSnapshot(route);\n    return { provider: this.breadcrumbService, key: key, url: fullPath };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ParsedResponse\n} from '../cache/response.models';\nimport { RawRestResponse } from '../dspace-rest/raw-rest-response.model';\nimport { ResponseParsingService } from './parsing.service';\nimport { RestRequest } from './request.models';\nimport { Registration } from '../shared/registration.model';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Parsing service responsible for parsing a Registration response\n */\nexport class RegistrationResponseParsingService implements ResponseParsingService {\n\n  parse(request: RestRequest, data: RawRestResponse): ParsedResponse {\n    const payload = data.payload;\n\n    const registration = Object.assign(new Registration(), payload);\n\n    return new ParsedResponse(data.statusCode, undefined, registration);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { RequestService } from './request.service';\nimport { HALEndpointService } from '../shared/hal-endpoint.service';\nimport { GetRequest, PostRequest } from './request.models';\nimport { Observable } from 'rxjs';\nimport { filter, find, map, skipWhile } from 'rxjs/operators';\nimport { hasValue, isNotEmpty } from '../../shared/empty.util';\nimport { Registration } from '../shared/registration.model';\nimport { getFirstCompletedRemoteData, getFirstSucceededRemoteData } from '../shared/operators';\nimport { ResponseParsingService } from './parsing.service';\nimport { GenericConstructor } from '../shared/generic-constructor';\nimport { RegistrationResponseParsingService } from './registration-response-parsing.service';\nimport { RemoteData } from './remote-data';\nimport { RemoteDataBuildService } from '../cache/builders/remote-data-build.service';\n\n@Injectable(\n  {\n    providedIn: 'root',\n  }\n)\n/**\n * Service that will register a new email address and request a token\n */\nexport class EpersonRegistrationService {\n\n  protected linkPath = 'registrations';\n  protected searchByTokenPath = '/search/findByToken?token=';\n\n  constructor(\n    protected requestService: RequestService,\n    protected rdbService: RemoteDataBuildService,\n    protected halService: HALEndpointService,\n  ) {\n\n  }\n\n  /**\n   * Retrieves the Registration endpoint\n   */\n  getRegistrationEndpoint(): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath);\n  }\n\n  /**\n   * Retrieves the endpoint to search by registration token\n   */\n  getTokenSearchEndpoint(token: string): Observable<string> {\n    return this.halService.getEndpoint(this.linkPath).pipe(\n      filter((href: string) => isNotEmpty(href)),\n      map((href: string) => `${href}${this.searchByTokenPath}${token}`));\n  }\n\n  /**\n   * Register a new email address\n   * @param email\n   */\n  registerEmail(email: string): Observable<RemoteData<Registration>> {\n    const registration = new Registration();\n    registration.email = email;\n\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getRegistrationEndpoint();\n\n    href$.pipe(\n      find((href: string) => hasValue(href)),\n      map((href: string) => {\n        const request = new PostRequest(requestId, href, registration);\n        this.requestService.send(request);\n      })\n    ).subscribe();\n\n    return this.rdbService.buildFromRequestUUID<Registration>(requestId).pipe(\n      getFirstCompletedRemoteData()\n    );\n  }\n\n  /**\n   * Search a registration based on the provided token\n   * @param token\n   */\n  searchByToken(token: string): Observable<Registration> {\n    const requestId = this.requestService.generateRequestId();\n\n    const href$ = this.getTokenSearchEndpoint(token).pipe(\n      find((href: string) => hasValue(href)),\n    );\n\n    href$.subscribe((href: string) => {\n      const request = new GetRequest(requestId, href);\n      Object.assign(request, {\n        getResponseParser(): GenericConstructor<ResponseParsingService> {\n          return RegistrationResponseParsingService;\n        }\n      });\n      this.requestService.send(request, true);\n    });\n\n    return this.rdbService.buildSingle<Registration>(href$).pipe(\n      skipWhile((rd: RemoteData<Registration>) => rd.isStale),\n      getFirstSucceededRemoteData(),\n      map((restResponse: RemoteData<Registration>) => {\n        return Object.assign(new Registration(), {\n          email: restResponse.payload.email, token: token, user: restResponse.payload.user\n        });\n      }),\n    );\n\n  }\n\n}\n","import { EPerson } from './eperson.model';\n\n/**\n * This class serves as a Data Transfer Model that contains the EPerson and whether or not it's able to be deleted\n */\nexport class EpersonDtoModel {\n\n    /**\n     * The EPerson linked to this object\n     */\n    public eperson: EPerson;\n    /**\n     * Whether or not the linked EPerson is able to be deleted\n     */\n    public ableToDelete: boolean;\n    /**\n     * Whether or not this EPerson is member of group on page it is being used on\n     */\n    public memberOfGroup: boolean;\n\n}\n","<div *ngIf=\"epersonService.getActiveEPerson() | async; then editheader; else createHeader\"></div>\n\n<ng-template #createHeader>\n  <h4>{{messagePrefix + '.create' | translate}}</h4>\n</ng-template>\n\n<ng-template #editheader>\n  <h4>{{messagePrefix + '.edit' | translate}}</h4>\n</ng-template>\n\n<ds-form [formId]=\"formId\"\n         [formModel]=\"formModel\"\n         [formGroup]=\"formGroup\"\n         [formLayout]=\"formLayout\"\n         [displayCancel]=\"false\"\n         (submitForm)=\"onSubmit()\">\n  <div before class=\"btn-group\">\n    <button (click)=\"onCancel()\"\n            class=\"btn btn-outline-secondary\"><i class=\"fas fa-arrow-left\"></i> {{messagePrefix + '.return' | translate}}</button>\n  </div>\n  <div between class=\"btn-group\">\n    <button class=\"btn btn-primary\" [disabled]=\"!(canReset$ | async)\" (click)=\"resetPassword()\">\n      <i class=\"fa fa-key\"></i> {{'admin.access-control.epeople.actions.reset' | translate}}\n    </button>\n  </div>\n  <div between class=\"btn-group ml-1\">\n    <button *ngIf=\"!isImpersonated\" class=\"btn btn-primary\" [ngClass]=\"{'d-none' : !(canImpersonate$ | async)}\" (click)=\"impersonate()\">\n      <i class=\"fa fa-user-secret\"></i> {{'admin.access-control.epeople.actions.impersonate' | translate}}\n    </button>\n    <button *ngIf=\"isImpersonated\" class=\"btn btn-primary\" (click)=\"stopImpersonating()\">\n      <i class=\"fa fa-user-secret\"></i> {{'admin.access-control.epeople.actions.stop-impersonating' | translate}}\n    </button>\n  </div>\n  <button after class=\"btn btn-danger delete-button\" [disabled]=\"!(canDelete$ | async)\" (click)=\"delete()\">\n    <i class=\"fas fa-trash\"></i> {{'admin.access-control.epeople.actions.delete' | translate}}\n  </button>\n</ds-form>\n\n<ds-loading [showMessage]=\"false\" *ngIf=\"!formGroup\"></ds-loading>\n\n<div *ngIf=\"epersonService.getActiveEPerson() | async\">\n  <h5>{{messagePrefix + '.groupsEPersonIsMemberOf' | translate}}</h5>\n\n  <ds-loading [showMessage]=\"false\" *ngIf=\"!(groups | async)\"></ds-loading>\n\n  <ds-pagination\n    *ngIf=\"(groups | async)?.payload?.totalElements > 0\"\n    [paginationOptions]=\"config\"\n    [pageInfoState]=\"(groups | async)?.payload\"\n    [collectionSize]=\"(groups | async)?.payload?.totalElements\"\n    [hideGear]=\"true\"\n    [hidePagerWhenSinglePage]=\"true\"\n    (pageChange)=\"onPageChange($event)\">\n\n    <div class=\"table-responsive\">\n      <table id=\"groups\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.collectionOrCommunity' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let group of (groups | async)?.payload?.page\">\n          <td class=\"align-middle\">{{group.id}}</td>\n          <td class=\"align-middle\"><a (click)=\"groupsDataService.startEditingNewGroup(group)\"\n                 [routerLink]=\"[groupsDataService.getGroupEditPageRouterLink(group)]\">{{group.name}}</a></td>\n          <td class=\"align-middle\">{{(group.object | async)?.payload?.name}}</td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n\n  <div *ngIf=\"(groups | async)?.payload?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n    <div>{{messagePrefix + '.memberOfNoGroups' | translate}}</div>\n    <div>\n      <button [routerLink]=\"[groupsDataService.getGroupRegistryRouterLink()]\"\n              class=\"btn btn-primary\">{{messagePrefix + '.goToGroups' | translate}}</button>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectorRef, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicCheckboxModel,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicInputModel\n} from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest as observableCombineLatest, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { debounceTime, switchMap, take } from 'rxjs/operators';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { EPersonDataService } from '../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { EPerson } from '../../../core/eperson/models/eperson.model';\nimport { Group } from '../../../core/eperson/models/group.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../../core/shared/operators';\nimport { hasValue } from '../../../shared/empty.util';\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../../shared/pagination/pagination-component-options.model';\nimport { AuthService } from '../../../core/auth/auth.service';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { ConfirmationModalComponent } from '../../../shared/confirmation-modal/confirmation-modal.component';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RequestService } from '../../../core/data/request.service';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { PaginationService } from '../../../core/pagination/pagination.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { ValidateEmailNotTaken } from './validators/email-taken.validator';\nimport { Registration } from '../../../core/shared/registration.model';\nimport { EpersonRegistrationService } from '../../../core/data/eperson-registration.service';\n\n@Component({\n  selector: 'ds-eperson-form',\n  templateUrl: './eperson-form.component.html',\n})\n/**\n * A form used for creating and editing EPeople\n */\nexport class EPersonFormComponent implements OnInit, OnDestroy {\n\n  labelPrefix = 'admin.access-control.epeople.form.';\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'eperson-form';\n\n  /**\n   * The labelPrefix for all messages related to this form\n   */\n  messagePrefix = 'admin.access-control.epeople.form';\n\n  /**\n   * Dynamic input models for the inputs of form\n   */\n  firstName: DynamicInputModel;\n  lastName: DynamicInputModel;\n  email: DynamicInputModel;\n  // booleans\n  canLogIn: DynamicCheckboxModel;\n  requireCertificate: DynamicCheckboxModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    firstName: {\n      grid: {\n        host: 'row'\n      }\n    },\n    lastName: {\n      grid: {\n        host: 'row'\n      }\n    },\n    email: {\n      grid: {\n        host: 'row'\n      }\n    },\n    canLogIn: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n    requireCertificate: {\n      grid: {\n        host: 'col col-sm-6 d-inline-block'\n      }\n    },\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: FormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * An EventEmitter that's fired whenever the form is cancelled\n   */\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Observable whether or not the admin is allowed to reset the EPerson's password\n   * TODO: Initialize the observable once the REST API supports this (currently hardcoded to return false)\n   */\n  canReset$: Observable<boolean>;\n\n  /**\n   * Observable whether or not the admin is allowed to delete the EPerson\n   */\n  canDelete$: Observable<boolean>;\n\n  /**\n   * Observable whether or not the admin is allowed to impersonate the EPerson\n   */\n  canImpersonate$: Observable<boolean>;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * A list of all the groups this EPerson is a member of\n   */\n  groups: Observable<RemoteData<PaginatedList<Group>>>;\n\n  /**\n   * Pagination config used to display the list of groups\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'gem',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * Try to retrieve initial active eperson, to fill in checkboxes at component creation\n   */\n  epersonInitial: EPerson;\n\n  /**\n   * Whether or not this EPerson is currently being impersonated\n   */\n  isImpersonated = false;\n\n  /**\n   * Subscription to email field value change\n   */\n  emailValueChangeSubscribe: Subscription;\n\n  constructor(\n    protected changeDetectorRef: ChangeDetectorRef,\n    public epersonService: EPersonDataService,\n    public groupsDataService: GroupDataService,\n    private formBuilderService: FormBuilderService,\n    private translateService: TranslateService,\n    private notificationsService: NotificationsService,\n    private authService: AuthService,\n    private authorizationService: AuthorizationDataService,\n    private modalService: NgbModal,\n    private paginationService: PaginationService,\n    public requestService: RequestService,\n    private epersonRegistrationService: EpersonRegistrationService,\n  ) {\n    this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n      this.epersonInitial = eperson;\n      if (hasValue(eperson)) {\n        this.isImpersonated = this.authService.isImpersonatingUser(eperson.id);\n      }\n    }));\n  }\n\n  ngOnInit() {\n    this.initialisePage();\n  }\n\n  /**\n   * This method will initialise the page\n   */\n  initialisePage() {\n\n    observableCombineLatest(\n      this.translateService.get(`${this.messagePrefix}.firstName`),\n      this.translateService.get(`${this.messagePrefix}.lastName`),\n      this.translateService.get(`${this.messagePrefix}.email`),\n      this.translateService.get(`${this.messagePrefix}.canLogIn`),\n      this.translateService.get(`${this.messagePrefix}.requireCertificate`),\n      this.translateService.get(`${this.messagePrefix}.emailHint`),\n    ).subscribe(([firstName, lastName, email, canLogIn, requireCertificate, emailHint]) => {\n      this.firstName = new DynamicInputModel({\n        id: 'firstName',\n        label: firstName,\n        name: 'firstName',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.lastName = new DynamicInputModel({\n        id: 'lastName',\n        label: lastName,\n        name: 'lastName',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.email = new DynamicInputModel({\n        id: 'email',\n        label: email,\n        name: 'email',\n        validators: {\n          required: null,\n          pattern: '^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$',\n        },\n        required: true,\n        errorMessages: {\n          emailTaken: 'error.validation.emailTaken',\n          pattern: 'error.validation.NotValidEmail'\n        },\n        hint: emailHint\n      });\n      this.canLogIn = new DynamicCheckboxModel(\n        {\n          id: 'canLogIn',\n          label: canLogIn,\n          name: 'canLogIn',\n          value: (this.epersonInitial != null ? this.epersonInitial.canLogIn : true)\n        });\n      this.requireCertificate = new DynamicCheckboxModel(\n        {\n          id: 'requireCertificate',\n          label: requireCertificate,\n          name: 'requireCertificate',\n          value: (this.epersonInitial != null ? this.epersonInitial.requireCertificate : false)\n        });\n      this.formModel = [\n        this.firstName,\n        this.lastName,\n        this.email,\n        this.canLogIn,\n        this.requireCertificate,\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n      this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n        if (eperson != null) {\n          this.groups = this.groupsDataService.findAllByHref(eperson._links.groups.href, {\n            currentPage: 1,\n            elementsPerPage: this.config.pageSize\n          });\n        }\n        this.formGroup.patchValue({\n          firstName: eperson != null ? eperson.firstMetadataValue('eperson.firstname') : '',\n          lastName: eperson != null ? eperson.firstMetadataValue('eperson.lastname') : '',\n          email: eperson != null ? eperson.email : '',\n          canLogIn: eperson != null ? eperson.canLogIn : true,\n          requireCertificate: eperson != null ? eperson.requireCertificate : false\n        });\n\n        if (eperson === null && !!this.formGroup.controls.email) {\n          this.formGroup.controls.email.setAsyncValidators(ValidateEmailNotTaken.createValidator(this.epersonService));\n          this.emailValueChangeSubscribe = this.email.valueChanges.pipe(debounceTime(300)).subscribe(() => {\n            this.changeDetectorRef.detectChanges();\n          });\n        }\n      }));\n\n      const activeEPerson$ = this.epersonService.getActiveEPerson();\n\n      this.groups = activeEPerson$.pipe(\n        switchMap((eperson) => {\n          return observableCombineLatest([observableOf(eperson), this.paginationService.getFindListOptions(this.config.id, {\n            currentPage: 1,\n            elementsPerPage: this.config.pageSize\n          })]);\n        }),\n        switchMap(([eperson, findListOptions]) => {\n          if (eperson != null) {\n            return this.groupsDataService.findAllByHref(eperson._links.groups.href, findListOptions, true, true, followLink('object'));\n          }\n          return observableOf(undefined);\n        })\n      );\n\n      this.canImpersonate$ = activeEPerson$.pipe(\n        switchMap((eperson) => {\n          if (hasValue(eperson)) {\n            return this.authorizationService.isAuthorized(FeatureID.LoginOnBehalfOf, eperson.self);\n          } else {\n            return observableOf(false);\n          }\n        })\n      );\n      this.canDelete$ = activeEPerson$.pipe(\n        switchMap((eperson) => this.authorizationService.isAuthorized(FeatureID.CanDelete, hasValue(eperson) ? eperson.self : undefined))\n      );\n      this.canReset$ = observableOf(true);\n    });\n  }\n\n  /**\n   * Stop editing the currently selected eperson\n   */\n  onCancel() {\n    this.epersonService.cancelEditEPerson();\n    this.cancelForm.emit();\n  }\n\n  /**\n   * Submit the form\n   * When the eperson has an id attached -> Edit the eperson\n   * When the eperson has no id attached -> Create new eperson\n   * Emit the updated/created eperson using the EventEmitter submitForm\n   */\n  onSubmit() {\n    this.epersonService.getActiveEPerson().pipe(take(1)).subscribe(\n      (ePerson: EPerson) => {\n        const values = {\n          metadata: {\n            'eperson.firstname': [\n              {\n                value: this.firstName.value\n              }\n            ],\n            'eperson.lastname': [\n              {\n                value: this.lastName.value\n              },\n            ],\n          },\n          email: this.email.value,\n          canLogIn: this.canLogIn.value,\n          requireCertificate: this.requireCertificate.value,\n        };\n        if (ePerson == null) {\n          this.createNewEPerson(values);\n        } else {\n          this.editEPerson(ePerson, values);\n        }\n      }\n    );\n  }\n\n  /**\n   * Creates new EPerson based on given values from form\n   * @param values\n   */\n  createNewEPerson(values) {\n    const ePersonToCreate = Object.assign(new EPerson(), values);\n\n    const response = this.epersonService.create(ePersonToCreate);\n    response.pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<EPerson>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.created.success', { name: ePersonToCreate.name }));\n        this.submitForm.emit(ePersonToCreate);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.labelPrefix + 'notification.created.failure', { name: ePersonToCreate.name }));\n        this.cancelForm.emit();\n      }\n    });\n    this.showNotificationIfEmailInUse(ePersonToCreate, 'created');\n  }\n\n  /**\n   * Edits existing EPerson based on given values from form and old EPerson\n   * @param ePerson   ePerson to edit\n   * @param values    new ePerson values (of form)\n   */\n  editEPerson(ePerson: EPerson, values) {\n    const editedEperson = Object.assign(new EPerson(), {\n      id: ePerson.id,\n      metadata: {\n        'eperson.firstname': [\n          {\n            value: (this.firstName.value ? this.firstName.value : ePerson.firstMetadataValue('eperson.firstname'))\n          }\n        ],\n        'eperson.lastname': [\n          {\n            value: (this.lastName.value ? this.lastName.value : ePerson.firstMetadataValue('eperson.lastname'))\n          },\n        ],\n      },\n      email: (hasValue(values.email) ? values.email : ePerson.email),\n      canLogIn: (hasValue(values.canLogIn) ? values.canLogIn : ePerson.canLogIn),\n      requireCertificate: (hasValue(values.requireCertificate) ? values.requireCertificate : ePerson.requireCertificate),\n      _links: ePerson._links,\n    });\n\n    const response = this.epersonService.updateEPerson(editedEperson);\n    response.pipe(getFirstCompletedRemoteData()).subscribe((rd: RemoteData<EPerson>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.edited.success', { name: editedEperson.name }));\n        this.submitForm.emit(editedEperson);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.labelPrefix + 'notification.edited.failure', { name: editedEperson.name }));\n        this.cancelForm.emit();\n      }\n    });\n\n    if (values.email != null && values.email !== ePerson.email) {\n      this.showNotificationIfEmailInUse(editedEperson, 'edited');\n    }\n  }\n\n  /**\n   * Event triggered when the user changes page\n   * @param event\n   */\n  onPageChange(event) {\n    this.updateGroups({\n      currentPage: event,\n      elementsPerPage: this.config.pageSize\n    });\n  }\n\n  /**\n   * Start impersonating the EPerson\n   */\n  impersonate() {\n    this.authService.impersonate(this.epersonInitial.id);\n    this.isImpersonated = true;\n  }\n\n  /**\n   * Deletes the EPerson from the Repository. The EPerson will be the only that this form is showing.\n   * It'll either show a success or error message depending on whether the delete was successful or not.\n   */\n  delete() {\n    this.epersonService.getActiveEPerson().pipe(take(1)).subscribe((eperson: EPerson) => {\n      const modalRef = this.modalService.open(ConfirmationModalComponent);\n      modalRef.componentInstance.dso = eperson;\n      modalRef.componentInstance.headerLabel = 'confirmation-modal.delete-eperson.header';\n      modalRef.componentInstance.infoLabel = 'confirmation-modal.delete-eperson.info';\n      modalRef.componentInstance.cancelLabel = 'confirmation-modal.delete-eperson.cancel';\n      modalRef.componentInstance.confirmLabel = 'confirmation-modal.delete-eperson.confirm';\n      modalRef.componentInstance.brandColor = 'danger';\n      modalRef.componentInstance.confirmIcon = 'fas fa-trash';\n      modalRef.componentInstance.response.pipe(take(1)).subscribe((confirm: boolean) => {\n        if (confirm) {\n          if (hasValue(eperson.id)) {\n            this.epersonService.deleteEPerson(eperson).pipe(getFirstCompletedRemoteData()).subscribe((restResponse: RemoteData<NoContent>) => {\n              if (restResponse.hasSucceeded) {\n                this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.deleted.success', { name: eperson.name }));\n                this.submitForm.emit();\n              } else {\n                this.notificationsService.error('Error occured when trying to delete EPerson with id: ' + eperson.id + ' with code: ' + restResponse.statusCode + ' and message: ' + restResponse.errorMessage);\n              }\n              this.cancelForm.emit();\n            });\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Stop impersonating the EPerson\n   */\n  stopImpersonating() {\n    this.authService.stopImpersonatingAndRefresh();\n    this.isImpersonated = false;\n  }\n\n  /**\n   * Sends an email to current eperson address with the information\n   * to reset password\n   */\n  resetPassword() {\n    if (hasValue(this.epersonInitial.email)) {\n      this.epersonRegistrationService.registerEmail(this.epersonInitial.email).pipe(getFirstCompletedRemoteData())\n        .subscribe((response: RemoteData<Registration>) => {\n            if (response.hasSucceeded) {\n              this.notificationsService.success(this.translateService.get('admin.access-control.epeople.actions.reset'),\n                this.translateService.get('forgot-email.form.success.content', {email: this.epersonInitial.email}));\n            } else {\n              this.notificationsService.error(this.translateService.get('forgot-email.form.error.head'),\n                this.translateService.get('forgot-email.form.error.content', {email: this.epersonInitial.email}));\n            }\n          }\n        );\n    }\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed & unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.onCancel();\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.config.id);\n    if (hasValue(this.emailValueChangeSubscribe)) {\n      this.emailValueChangeSubscribe.unsubscribe();\n    }\n  }\n\n  /**\n   * This method will ensure that the page gets reset and that the cache is cleared\n   */\n  reset() {\n    this.epersonService.getActiveEPerson().pipe(take(1)).subscribe((eperson: EPerson) => {\n      this.requestService.removeByHrefSubstring(eperson.self);\n    });\n    this.initialisePage();\n  }\n\n  /**\n   * Checks for the given ePerson if there is already an ePerson in the system with that email\n   * and shows notification if this is the case\n   * @param ePerson               ePerson values to check\n   * @param notificationSection   whether in create or edit\n   */\n  private showNotificationIfEmailInUse(ePerson: EPerson, notificationSection: string) {\n    // Relevant message for email in use\n    this.subs.push(this.epersonService.searchByScope('email', ePerson.email, {\n      currentPage: 1,\n      elementsPerPage: 0\n    }).pipe(getFirstSucceededRemoteData(), getRemoteDataPayload())\n      .subscribe((list: PaginatedList<EPerson>) => {\n        if (list.totalElements > 0) {\n          this.notificationsService.error(this.translateService.get(this.labelPrefix + 'notification.' + notificationSection + '.failure.emailInUse', {\n            name: ePerson.name,\n            email: ePerson.email\n          }));\n        }\n      }));\n  }\n\n  /**\n   * Update the list of groups by fetching it from the rest api or cache\n   */\n  private updateGroups(options) {\n    this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n      this.groups = this.groupsDataService.findAllByHref(eperson._links.groups.href, options);\n    }));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { EPersonDataService } from '../../../../core/eperson/eperson-data.service';\nimport { getFirstSucceededRemoteData, } from '../../../../core/shared/operators';\n\nexport class ValidateEmailNotTaken {\n\n  /**\n   * This method will create the validator with the ePersonDataService requested from component\n   * @param ePersonDataService the service with DI in the component that this validator is being utilized.\n   */\n  static createValidator(ePersonDataService: EPersonDataService) {\n    return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\n      return ePersonDataService.getEPersonByEmail(control.value)\n        .pipe(\n          getFirstSucceededRemoteData(),\n          map(res => {\n            return !!res.payload ? { emailTaken: true } : null;\n          })\n        );\n    };\n  }\n}\n","<div class=\"container\">\n  <div class=\"epeople-registry row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom mb-3\">\n        <h2 id=\"header\" class=\"pb-2\">{{labelPrefix + 'head' | translate}}</h2>\n\n        <div *ngIf=\"!isEPersonFormShown\">\n          <button class=\"mr-auto btn btn-success addEPerson-button\"\n                  (click)=\"isEPersonFormShown = true\">\n            <i class=\"fas fa-plus\"></i>\n            <span class=\"d-none d-sm-inline\">{{labelPrefix + 'button.add' | translate}}</span>\n          </button>\n        </div>\n      </div>\n\n      <ds-eperson-form *ngIf=\"isEPersonFormShown\" (submitForm)=\"reset()\"\n                       (cancelForm)=\"isEPersonFormShown = false\"></ds-eperson-form>\n\n      <div *ngIf=\"!isEPersonFormShown\">\n        <h3 id=\"search\" class=\"border-bottom pb-2\">{{labelPrefix + 'search.head' | translate}}\n\n        </h3>\n        <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n          <div>\n            <select name=\"scope\" id=\"scope\" formControlName=\"scope\" class=\"form-control\" aria-label=\"Search scope\">\n              <option value=\"metadata\">{{labelPrefix + 'search.scope.metadata' | translate}}</option>\n              <option value=\"email\">{{labelPrefix + 'search.scope.email' | translate}}</option>\n            </select>\n          </div>\n          <div class=\"flex-grow-1 mr-3 ml-3\">\n            <div class=\"form-group input-group\">\n              <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n                    class=\"form-control\" attr.aria-label=\"{{labelPrefix + 'search.placeholder' | translate}}\"\n                     [placeholder]=\"(labelPrefix + 'search.placeholder' | translate)\">\n              <span class=\"input-group-append\">\n                <button type=\"submit\" class=\"search-button btn btn-primary\">\n                  <i class=\"fas fa-search\"></i> {{ labelPrefix + 'search.button' | translate }}\n                </button>\n              </span>\n            </div>\n          </div>\n          <div>\n            <button (click)=\"clearFormAndResetResult();\"\n                    class=\"search-button btn btn-secondary\">{{labelPrefix + 'button.see-all' | translate}}</button>\n          </div>\n        </form>\n\n        <ds-loading *ngIf=\"searching$ | async\"></ds-loading>\n        <ds-pagination\n          *ngIf=\"(pageInfoState$ | async)?.totalElements > 0 && !(searching$ | async)\"\n          [paginationOptions]=\"config\"\n          [pageInfoState]=\"pageInfoState$\"\n          [collectionSize]=\"(pageInfoState$ | async)?.totalElements\"\n          [hideGear]=\"true\"\n          [hidePagerWhenSinglePage]=\"true\">\n\n          <div class=\"table-responsive\">\n            <table id=\"epeople\" class=\"table table-striped table-hover table-bordered\">\n              <thead>\n              <tr>\n                <th scope=\"col\">{{labelPrefix + 'table.id' | translate}}</th>\n                <th scope=\"col\">{{labelPrefix + 'table.name' | translate}}</th>\n                <th scope=\"col\">{{labelPrefix + 'table.email' | translate}}</th>\n                <th>{{labelPrefix + 'table.edit' | translate}}</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr *ngFor=\"let epersonDto of (ePeopleDto$ | async)?.page\"\n                  [ngClass]=\"{'table-primary' : isActive(epersonDto.eperson) | async}\">\n                <td>{{epersonDto.eperson.id}}</td>\n                <td>{{epersonDto.eperson.name}}</td>\n                <td>{{epersonDto.eperson.email}}</td>\n                <td>\n                  <div class=\"btn-group edit-field\">\n                    <button class=\"delete-button\" (click)=\"toggleEditEPerson(epersonDto.eperson)\"\n                            class=\"btn btn-outline-primary btn-sm access-control-editEPersonButton\"\n                            title=\"{{labelPrefix + 'table.edit.buttons.edit' | translate: {name: epersonDto.eperson.name} }}\">\n                      <i class=\"fas fa-edit fa-fw\"></i>\n                    </button>\n                    <button [disabled]=\"!epersonDto.ableToDelete\" (click)=\"deleteEPerson(epersonDto.eperson)\"\n                            class=\"btn btn-outline-danger btn-sm access-control-deleteEPersonButton\"\n                            title=\"{{labelPrefix + 'table.edit.buttons.remove' | translate: {name: epersonDto.eperson.name} }}\">\n                      <i class=\"fas fa-trash-alt fa-fw\"></i>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n\n        </ds-pagination>\n\n        <div *ngIf=\"(pageInfoState$ | async)?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n          {{labelPrefix + 'no-items' | translate}}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { buildPaginatedList, PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { hasValue } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { EpersonDtoModel } from '../../core/eperson/models/eperson-dto.model';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { getAllSucceededRemoteData, getFirstCompletedRemoteData } from '../../core/shared/operators';\nimport { ConfirmationModalComponent } from '../../shared/confirmation-modal/confirmation-modal.component';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { RequestService } from '../../core/data/request.service';\nimport { PageInfo } from '../../core/shared/page-info.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { PaginationService } from '../../core/pagination/pagination.service';\n\n@Component({\n  selector: 'ds-epeople-registry',\n  templateUrl: './epeople-registry.component.html',\n})\n/**\n * A component used for managing all existing epeople within the repository.\n * The admin can create, edit or delete epeople here.\n */\nexport class EPeopleRegistryComponent implements OnInit, OnDestroy {\n\n  labelPrefix = 'admin.access-control.epeople.';\n\n  /**\n   * A list of all the current EPeople within the repository or the result of the search\n   */\n  ePeople$: BehaviorSubject<PaginatedList<EPerson>> = new BehaviorSubject(buildPaginatedList<EPerson>(new PageInfo(), []));\n  /**\n   * A BehaviorSubject with the list of EpersonDtoModel objects made from the EPeople in the repository or\n   * as the result of the search\n   */\n  ePeopleDto$: BehaviorSubject<PaginatedList<EpersonDtoModel>> = new BehaviorSubject<PaginatedList<EpersonDtoModel>>({} as any);\n\n  /**\n   * An observable for the pageInfo, needed to pass to the pagination component\n   */\n  pageInfoState$: BehaviorSubject<PageInfo> = new BehaviorSubject<PageInfo>(undefined);\n\n  /**\n   * A boolean representing if a search is pending\n   */\n  searching$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Pagination config used to display the list of epeople\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'elp',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * Whether or not to show the EPerson form\n   */\n  isEPersonFormShown: boolean;\n\n  // The search form\n  searchForm;\n\n  // Current search in epersons registry\n  currentSearchQuery: string;\n  currentSearchScope: string;\n\n  /**\n   * FindListOptions\n   */\n  findListOptionsSub: Subscription;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  constructor(private epersonService: EPersonDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private authorizationService: AuthorizationDataService,\n              private formBuilder: FormBuilder,\n              private router: Router,\n              private modalService: NgbModal,\n              private paginationService: PaginationService,\n              public requestService: RequestService) {\n    this.currentSearchQuery = '';\n    this.currentSearchScope = 'metadata';\n    this.searchForm = this.formBuilder.group(({\n      scope: 'metadata',\n      query: '',\n    }));\n  }\n\n  ngOnInit() {\n    this.initialisePage();\n  }\n\n  /**\n   * This method will initialise the page\n   */\n  initialisePage() {\n    this.searching$.next(true);\n    this.isEPersonFormShown = false;\n    this.search({scope: this.currentSearchScope, query: this.currentSearchQuery});\n    this.subs.push(this.epersonService.getActiveEPerson().subscribe((eperson: EPerson) => {\n      if (eperson != null && eperson.id) {\n        this.isEPersonFormShown = true;\n      }\n    }));\n    this.subs.push(this.ePeople$.pipe(\n      switchMap((epeople: PaginatedList<EPerson>) => {\n        if (epeople.pageInfo.totalElements > 0) {\n          return combineLatest(...epeople.page.map((eperson) => {\n            return this.authorizationService.isAuthorized(FeatureID.CanDelete, hasValue(eperson) ? eperson.self : undefined).pipe(\n              map((authorized) => {\n                const epersonDtoModel: EpersonDtoModel = new EpersonDtoModel();\n                epersonDtoModel.ableToDelete = authorized;\n                epersonDtoModel.eperson = eperson;\n                return epersonDtoModel;\n              })\n            );\n          })).pipe(map((dtos: EpersonDtoModel[]) => {\n            return buildPaginatedList(epeople.pageInfo, dtos);\n          }));\n        } else {\n          // if it's empty, simply forward the empty list\n          return [epeople];\n        }\n      })).subscribe((value: PaginatedList<EpersonDtoModel>) => {\n      this.searching$.next(false);this.ePeopleDto$.next(value);\n      this.pageInfoState$.next(value.pageInfo);\n    }));\n  }\n\n  /**\n   * Search in the EPeople by metadata (default) or email\n   * @param data  Contains scope and query param\n   */\n  search(data: any) {\n    this.searching$.next(true);\n    if (hasValue(this.findListOptionsSub)) {\n      this.findListOptionsSub.unsubscribe();\n    }\n    this.findListOptionsSub = this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n      switchMap((findListOptions) => {\n          const query: string = data.query;\n          const scope: string = data.scope;\n          if (query != null && this.currentSearchQuery !== query) {\n            this.router.navigate([this.epersonService.getEPeoplePageRouterLink()], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchQuery = query;\n            this.paginationService.resetPage(this.config.id);\n          }\n          if (scope != null && this.currentSearchScope !== scope) {\n            this.router.navigate([this.epersonService.getEPeoplePageRouterLink()], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchScope = scope;\n            this.paginationService.resetPage(this.config.id);\n\n          }\n          return this.epersonService.searchByScope(this.currentSearchScope, this.currentSearchQuery, {\n            currentPage: findListOptions.currentPage,\n            elementsPerPage: findListOptions.pageSize\n          });\n        }\n      ),\n      getAllSucceededRemoteData(),\n    ).subscribe((peopleRD) => {\n        this.ePeople$.next(peopleRD.payload);\n        this.pageInfoState$.next(peopleRD.payload.pageInfo);\n      }\n    );\n  }\n\n  /**\n   * Checks whether the given EPerson is active (being edited)\n   * @param eperson\n   */\n  isActive(eperson: EPerson): Observable<boolean> {\n    return this.getActiveEPerson().pipe(\n      map((activeEPerson) => eperson === activeEPerson)\n    );\n  }\n\n  /**\n   * Gets the active eperson (being edited)\n   */\n  getActiveEPerson(): Observable<EPerson> {\n    return this.epersonService.getActiveEPerson();\n  }\n\n  /**\n   * Start editing the selected EPerson\n   * @param ePerson\n   */\n  toggleEditEPerson(ePerson: EPerson) {\n    this.getActiveEPerson().pipe(take(1)).subscribe((activeEPerson: EPerson) => {\n      if (ePerson === activeEPerson) {\n        this.epersonService.cancelEditEPerson();\n        this.isEPersonFormShown = false;\n      } else {\n        this.epersonService.editEPerson(ePerson);\n        this.isEPersonFormShown = true;\n      }\n    });\n    this.scrollToTop();\n  }\n\n  /**\n   * Deletes EPerson, show notification on success/failure & updates EPeople list\n   */\n  deleteEPerson(ePerson: EPerson) {\n    if (hasValue(ePerson.id)) {\n      const modalRef = this.modalService.open(ConfirmationModalComponent);\n      modalRef.componentInstance.dso = ePerson;\n      modalRef.componentInstance.headerLabel = 'confirmation-modal.delete-eperson.header';\n      modalRef.componentInstance.infoLabel = 'confirmation-modal.delete-eperson.info';\n      modalRef.componentInstance.cancelLabel = 'confirmation-modal.delete-eperson.cancel';\n      modalRef.componentInstance.confirmLabel = 'confirmation-modal.delete-eperson.confirm';\n      modalRef.componentInstance.brandColor = 'danger';\n      modalRef.componentInstance.confirmIcon = 'fas fa-trash';\n      modalRef.componentInstance.response.pipe(take(1)).subscribe((confirm: boolean) => {\n        if (confirm) {\n          if (hasValue(ePerson.id)) {\n            this.epersonService.deleteEPerson(ePerson).pipe(getFirstCompletedRemoteData()).subscribe((restResponse: RemoteData<NoContent>) => {\n              if (restResponse.hasSucceeded) {\n                this.notificationsService.success(this.translateService.get(this.labelPrefix + 'notification.deleted.success', {name: ePerson.name}));\n                this.reset();\n              } else {\n                this.notificationsService.error('Error occured when trying to delete EPerson with id: ' + ePerson.id + ' with code: ' + restResponse.statusCode + ' and message: ' + restResponse.errorMessage);\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.cleanupSubscribes();\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n\n  cleanupSubscribes() {\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n  }\n\n  scrollToTop() {\n    (function smoothscroll() {\n      const currentScroll = document.documentElement.scrollTop || document.body.scrollTop;\n      if (currentScroll > 0) {\n        window.requestAnimationFrame(smoothscroll);\n        window.scrollTo(0, currentScroll - (currentScroll / 8));\n      }\n    })();\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({query: ''});\n  }\n\n  /**\n   * This method will set everything to stale, which will cause the lists on this page to update.\n   */\n  reset() {\n    this.epersonService.getBrowseEndpoint().pipe(\n      take(1)\n    ).subscribe((href: string) => {\n      this.requestService.setStaleByHrefSubstring(href).pipe(take(1)).subscribe(() => {\n        this.epersonService.cancelEditEPerson();\n        this.isEPersonFormShown = false;\n      });\n    });\n  }\n}\n","<ng-container>\n  <h3 class=\"border-bottom pb-2\">{{messagePrefix + '.head' | translate}}</h3>\n\n  <h4 id=\"search\" class=\"border-bottom pb-2\">{{messagePrefix + '.search.head' | translate}}\n\n  </h4>\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n    <div>\n      <select name=\"scope\" id=\"scope\" formControlName=\"scope\" class=\"form-control\" aria-label=\"Search scope\">\n        <option value=\"metadata\">{{messagePrefix + '.search.scope.metadata' | translate}}</option>\n        <option value=\"email\">{{messagePrefix + '.search.scope.email' | translate}}</option>\n      </select>\n    </div>\n    <div class=\"flex-grow-1 mr-3 ml-3\">\n      <div class=\"form-group input-group\">\n        <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n               class=\"form-control\" aria-label=\"Search input\">\n        <span class=\"input-group-append\">\n            <button type=\"submit\" class=\"search-button btn btn-primary\">\n              <i class=\"fas fa-search\"></i> {{ messagePrefix + '.search.button' | translate }}</button>\n        </span>\n      </div>\n    </div>\n    <div>\n      <button (click)=\"clearFormAndResetResult();\"\n              class=\"btn btn-secondary\">{{messagePrefix + '.button.see-all' | translate}}</button>\n    </div>\n  </form>\n\n  <ds-pagination *ngIf=\"(ePeopleSearchDtos | async)?.totalElements > 0\"\n                 [paginationOptions]=\"configSearch\"\n                 [pageInfoState]=\"(ePeopleSearchDtos | async)\"\n                 [collectionSize]=\"(ePeopleSearchDtos | async)?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"epersonsSearch\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.identity' | translate}}</th>\n          <th class=\"align-middle\">{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let ePerson of (ePeopleSearchDtos | async)?.page\">\n          <td class=\"align-middle\">{{ePerson.eperson.id}}</td>\n          <td class=\"align-middle\"><a (click)=\"ePersonDataService.startEditingNewEPerson(ePerson.eperson)\"\n                 [routerLink]=\"[ePersonDataService.getEPeoplePageRouterLink()]\">{{ePerson.eperson.name}}</a></td>\n          <td class=\"align-middle\">\n            {{messagePrefix + '.table.email' | translate}}: {{ ePerson.eperson.email ? ePerson.eperson.email : '-' }}<br/>\n            {{messagePrefix + '.table.netid' | translate}}: {{ ePerson.eperson.netid ? ePerson.eperson.netid : '-' }}\n          </td>\n          <td class=\"align-middle\">\n            <div class=\"btn-group edit-field\">\n              <button *ngIf=\"(ePerson.memberOfGroup)\"\n                      (click)=\"deleteMemberFromGroup(ePerson)\"\n                      class=\"btn btn-outline-danger btn-sm\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: ePerson.eperson.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n\n              <button *ngIf=\"!(ePerson.memberOfGroup)\"\n                      (click)=\"addMemberToGroup(ePerson)\"\n                      class=\"btn btn-outline-primary btn-sm\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.add' | translate: {name: ePerson.eperson.name} }}\">\n                <i class=\"fas fa-plus fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n\n  <div *ngIf=\"(ePeopleSearchDtos | async)?.totalElements == 0 && searchDone\"\n       class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-items' | translate}}\n  </div>\n\n  <h4>{{messagePrefix + '.headMembers' | translate}}</h4>\n\n  <ds-pagination *ngIf=\"(ePeopleMembersOfGroupDtos | async)?.totalElements > 0\"\n                 [paginationOptions]=\"config\"\n                 [pageInfoState]=\"(ePeopleMembersOfGroupDtos | async)\"\n                 [collectionSize]=\"(ePeopleMembersOfGroupDtos | async)?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"ePeopleMembersOfGroup\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.identity' | translate}}</th>\n          <th class=\"align-middle\">{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let ePerson of (ePeopleMembersOfGroupDtos | async)?.page\">\n          <td class=\"align-middle\">{{ePerson.eperson.id}}</td>\n          <td class=\"align-middle\"><a (click)=\"ePersonDataService.startEditingNewEPerson(ePerson.eperson)\"\n                 [routerLink]=\"[ePersonDataService.getEPeoplePageRouterLink()]\">{{ePerson.eperson.name}}</a></td>\n          <td class=\"align-middle\">\n            {{messagePrefix + '.table.email' | translate}}: {{ ePerson.eperson.email ? ePerson.eperson.email : '-' }}<br/>\n            {{messagePrefix + '.table.netid' | translate}}: {{ ePerson.eperson.netid ? ePerson.eperson.netid : '-' }}\n          </td>\n          <td class=\"align-middle\">\n            <div class=\"btn-group edit-field\">\n              <button (click)=\"deleteMemberFromGroup(ePerson)\"\n                      class=\"btn btn-outline-danger btn-sm\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: ePerson.eperson.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </ds-pagination>\n\n  <div *ngIf=\"(ePeopleMembersOfGroupDtos | async) == undefined || (ePeopleMembersOfGroupDtos | async)?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-members-yet' | translate}}\n  </div>\n\n</ng-container>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Observable,\n  of as observableOf,\n  Subscription,\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  ObservedValueOf,\n} from 'rxjs';\nimport { map, mergeMap, switchMap, take } from 'rxjs/operators';\nimport {buildPaginatedList, PaginatedList} from '../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { EPersonDataService } from '../../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { EPerson } from '../../../../core/eperson/models/eperson.model';\nimport { Group } from '../../../../core/eperson/models/group.model';\nimport {\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData, getAllCompletedRemoteData, getRemoteDataPayload\n} from '../../../../core/shared/operators';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../../../shared/pagination/pagination-component-options.model';\nimport {EpersonDtoModel} from '../../../../core/eperson/models/eperson-dto.model';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\n\n/**\n * Keys to keep track of specific subscriptions\n */\nenum SubKey {\n  ActiveGroup,\n  MembersDTO,\n  SearchResultsDTO,\n}\n\n@Component({\n  selector: 'ds-members-list',\n  templateUrl: './members-list.component.html'\n})\n/**\n * The list of members in the edit group page\n */\nexport class MembersListComponent implements OnInit, OnDestroy {\n\n  @Input()\n  messagePrefix: string;\n\n  /**\n   * EPeople being displayed in search result, initially all members, after search result of search\n   */\n  ePeopleSearchDtos: BehaviorSubject<PaginatedList<EpersonDtoModel>> = new BehaviorSubject<PaginatedList<EpersonDtoModel>>(undefined);\n  /**\n   * List of EPeople members of currently active group being edited\n   */\n  ePeopleMembersOfGroupDtos: BehaviorSubject<PaginatedList<EpersonDtoModel>> = new BehaviorSubject<PaginatedList<EpersonDtoModel>>(undefined);\n\n  /**\n   * Pagination config used to display the list of EPeople that are result of EPeople search\n   */\n  configSearch: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'sml',\n    pageSize: 5,\n    currentPage: 1\n  });\n  /**\n   * Pagination config used to display the list of EPerson Membes of active group being edited\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'ml',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * Map of active subscriptions\n   */\n  subs: Map<SubKey, Subscription> = new Map();\n\n  // The search form\n  searchForm;\n\n  // Current search in edit group - epeople search form\n  currentSearchQuery: string;\n  currentSearchScope: string;\n\n  // Whether or not user has done a EPeople search yet\n  searchDone: boolean;\n\n  // current active group being edited\n  groupBeingEdited: Group;\n\n  paginationSub: Subscription;\n\n\n  constructor(private groupDataService: GroupDataService,\n              public ePersonDataService: EPersonDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private formBuilder: FormBuilder,\n              private paginationService: PaginationService,\n              private router: Router) {\n    this.currentSearchQuery = '';\n    this.currentSearchScope = 'metadata';\n  }\n\n  ngOnInit() {\n    this.searchForm = this.formBuilder.group(({\n      scope: 'metadata',\n      query: '',\n    }));\n    this.subs.set(SubKey.ActiveGroup, this.groupDataService.getActiveGroup().subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        this.groupBeingEdited = activeGroup;\n        this.retrieveMembers(this.config.currentPage);\n      }\n    }));\n  }\n\n  /**\n   * Retrieve the EPersons that are members of the group\n   *\n   * @param page the number of the page to retrieve\n   * @private\n   */\n  private retrieveMembers(page: number) {\n    this.unsubFrom(SubKey.MembersDTO);\n    this.subs.set(SubKey.MembersDTO,\n      this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n        switchMap((currentPagination) => {\n          return this.ePersonDataService.findAllByHref(this.groupBeingEdited._links.epersons.href, {\n              currentPage: currentPagination.currentPage,\n              elementsPerPage: currentPagination.pageSize\n            }\n          );\n        }),\n      getAllCompletedRemoteData(),\n      map((rd: RemoteData<any>) => {\n        if (rd.hasFailed) {\n          this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure', {cause: rd.errorMessage}));\n        } else {\n          return rd;\n        }\n      }),\n      switchMap((epersonListRD: RemoteData<PaginatedList<EPerson>>) => {\n        const dtos$ = observableCombineLatest(...epersonListRD.payload.page.map((member: EPerson) => {\n          const dto$: Observable<EpersonDtoModel> = observableCombineLatest(\n            this.isMemberOfGroup(member), (isMember: ObservedValueOf<Observable<boolean>>) => {\n              const epersonDtoModel: EpersonDtoModel = new EpersonDtoModel();\n              epersonDtoModel.eperson = member;\n              epersonDtoModel.memberOfGroup = isMember;\n              return epersonDtoModel;\n            });\n          return dto$;\n        }));\n        return dtos$.pipe(map((dtos: EpersonDtoModel[]) => {\n          return buildPaginatedList(epersonListRD.payload.pageInfo, dtos);\n        }));\n      }))\n      .subscribe((paginatedListOfDTOs: PaginatedList<EpersonDtoModel>) => {\n        this.ePeopleMembersOfGroupDtos.next(paginatedListOfDTOs);\n      }));\n  }\n\n  /**\n   * Whether or not the given ePerson is a member of the group currently being edited\n   * @param possibleMember  EPerson that is a possible member (being tested) of the group currently being edited\n   */\n  isMemberOfGroup(possibleMember: EPerson): Observable<boolean> {\n    return this.groupDataService.getActiveGroup().pipe(take(1),\n      mergeMap((group: Group) => {\n        if (group != null) {\n          return this.ePersonDataService.findAllByHref(group._links.epersons.href, {\n            currentPage: 1,\n            elementsPerPage: 9999\n          }, false)\n            .pipe(\n              getFirstSucceededRemoteData(),\n              getRemoteDataPayload(),\n              map((listEPeopleInGroup: PaginatedList<EPerson>) => listEPeopleInGroup.page.filter((ePersonInList: EPerson) => ePersonInList.id === possibleMember.id)),\n              map((epeople: EPerson[]) => epeople.length > 0));\n        } else {\n          return observableOf(false);\n        }\n      }));\n  }\n\n  /**\n   * Unsubscribe from a subscription if it's still subscribed, and remove it from the map of\n   * active subscriptions\n   *\n   * @param key The key of the subscription to unsubscribe from\n   * @private\n   */\n  private unsubFrom(key: SubKey) {\n    if (this.subs.has(key)) {\n      this.subs.get(key).unsubscribe();\n      this.subs.delete(key);\n    }\n  }\n\n  /**\n   * Deletes a given EPerson from the members list of the group currently being edited\n   * @param ePerson   EPerson we want to delete as member from group that is currently being edited\n   */\n  deleteMemberFromGroup(ePerson: EpersonDtoModel) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        const response = this.groupDataService.deleteMemberFromGroup(activeGroup, ePerson.eperson);\n        this.showNotifications('deleteMember', response, ePerson.eperson.name, activeGroup);\n        this.search({ scope: this.currentSearchScope, query: this.currentSearchQuery });\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Adds a given EPerson to the members list of the group currently being edited\n   * @param ePerson   EPerson we want to add as member to group that is currently being edited\n   */\n  addMemberToGroup(ePerson: EpersonDtoModel) {\n    ePerson.memberOfGroup = true;\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        const response = this.groupDataService.addMemberToGroup(activeGroup, ePerson.eperson);\n        this.showNotifications('addMember', response, ePerson.eperson.name, activeGroup);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Search in the EPeople by name, email or metadata\n   * @param data  Contains scope and query param\n   */\n  search(data: any) {\n    this.unsubFrom(SubKey.SearchResultsDTO);\n    this.subs.set(SubKey.SearchResultsDTO,\n      this.paginationService.getCurrentPagination(this.configSearch.id, this.configSearch).pipe(\n        switchMap((paginationOptions) => {\n\n          const query: string = data.query;\n          const scope: string = data.scope;\n          if (query != null && this.currentSearchQuery !== query && this.groupBeingEdited) {\n            this.router.navigate([], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchQuery = query;\n            this.paginationService.resetPage(this.configSearch.id);\n          }\n          if (scope != null && this.currentSearchScope !== scope && this.groupBeingEdited) {\n            this.router.navigate([], {\n              queryParamsHandling: 'merge'\n            });\n            this.currentSearchScope = scope;\n            this.paginationService.resetPage(this.configSearch.id);\n          }\n          this.searchDone = true;\n\n          return this.ePersonDataService.searchByScope(this.currentSearchScope, this.currentSearchQuery, {\n            currentPage: paginationOptions.currentPage,\n            elementsPerPage: paginationOptions.pageSize\n          });\n        }),\n        getAllCompletedRemoteData(),\n        map((rd: RemoteData<any>) => {\n          if (rd.hasFailed) {\n            this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure', {cause: rd.errorMessage}));\n          } else {\n            return rd;\n          }\n        }),\n        switchMap((epersonListRD: RemoteData<PaginatedList<EPerson>>) => {\n          const dtos$ = observableCombineLatest(...epersonListRD.payload.page.map((member: EPerson) => {\n            const dto$: Observable<EpersonDtoModel> = observableCombineLatest(\n              this.isMemberOfGroup(member), (isMember: ObservedValueOf<Observable<boolean>>) => {\n                const epersonDtoModel: EpersonDtoModel = new EpersonDtoModel();\n                epersonDtoModel.eperson = member;\n                epersonDtoModel.memberOfGroup = isMember;\n                return epersonDtoModel;\n              });\n            return dto$;\n          }));\n          return dtos$.pipe(map((dtos: EpersonDtoModel[]) => {\n            return buildPaginatedList(epersonListRD.payload.pageInfo, dtos);\n          }));\n        }))\n        .subscribe((paginatedListOfDTOs: PaginatedList<EpersonDtoModel>) => {\n          this.ePeopleSearchDtos.next(paginatedListOfDTOs);\n        }));\n  }\n\n  /**\n   * unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    for (const key of this.subs.keys()) {\n      this.unsubFrom(key);\n    }\n    this.paginationService.clearPagination(this.config.id);\n    this.paginationService.clearPagination(this.configSearch.id);\n  }\n\n  /**\n   * Shows a notification based on the success/failure of the request\n   * @param messageSuffix   Suffix for message\n   * @param response        RestResponse observable containing success/failure request\n   * @param nameObject      Object request was about\n   * @param activeGroup     Group currently being edited\n   */\n  showNotifications(messageSuffix: string, response: Observable<RemoteData<any>>, nameObject: string, activeGroup: Group) {\n    response.pipe(getFirstCompletedRemoteData()).subscribe((rd: RemoteData<any>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.success.' + messageSuffix, { name: nameObject }));\n        this.ePersonDataService.clearLinkRequests(activeGroup._links.epersons.href);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.' + messageSuffix, { name: nameObject }));\n      }\n    });\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({ query: '' });\n  }\n}\n","<ng-container>\n  <h3 class=\"border-bottom pb-2\">{{messagePrefix + '.head' | translate}}</h3>\n\n  <h4 id=\"search\" class=\"border-bottom pb-2\">{{messagePrefix + '.search.head' | translate}}\n\n  </h4>\n  <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n    <div class=\"flex-grow-1 mr-3\">\n      <div class=\"form-group input-group mr-3\">\n        <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n               class=\"form-control\" aria-label=\"Search input\">\n        <span class=\"input-group-append\">\n            <button type=\"submit\" class=\"search-button btn btn-primary\">\n              <i class=\"fas fa-search\"></i> {{ messagePrefix + '.search.button' | translate }}\n            </button>\n        </span>\n\n      </div>\n    </div>\n    <div>\n      <button (click)=\"clearFormAndResetResult();\" class=\"btn btn-secondary float-right\">\n        {{messagePrefix + '.button.see-all' | translate}}\n      </button>\n    </div>\n  </form>\n\n  <ds-pagination *ngIf=\"(searchResults$ | async)?.payload?.totalElements > 0\"\n                 [paginationOptions]=\"configSearch\"\n                 [pageInfoState]=\"(searchResults$ | async)?.payload\"\n                 [collectionSize]=\"(searchResults$ | async)?.payload?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"groupsSearch\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.collectionOrCommunity' | translate}}</th>\n          <th class=\"align-middle\">{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let group of (searchResults$ | async)?.payload?.page\">\n          <td class=\"align-middle\">{{group.id}}</td>\n          <td class=\"align-middle\"><a (click)=\"groupDataService.startEditingNewGroup(group)\"\n                 [routerLink]=\"[groupDataService.getGroupEditPageRouterLink(group)]\">{{group.name}}</a></td>\n          <td class=\"align-middle\">{{(group.object | async)?.payload?.name}}</td>\n          <td class=\"align-middle\">\n            <div class=\"btn-group edit-field\">\n              <button *ngIf=\"(isSubgroupOfGroup(group) | async) && !(isActiveGroup(group) | async)\"\n                      (click)=\"deleteSubgroupFromGroup(group)\"\n                      class=\"btn btn-outline-danger btn-sm deleteButton\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: group.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n\n              <p *ngIf=\"(isActiveGroup(group) | async)\">{{ messagePrefix + '.table.edit.currentGroup' | translate }}</p>\n\n              <button *ngIf=\"!(isSubgroupOfGroup(group) | async) && !(isActiveGroup(group) | async)\"\n                      (click)=\"addSubgroupToGroup(group)\"\n                      class=\"btn btn-outline-primary btn-sm addButton\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.add' | translate: {name: group.name} }}\">\n                <i class=\"fas fa-plus fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </ds-pagination>\n\n  <div *ngIf=\"(searchResults$ | async)?.payload?.totalElements == 0 && searchDone\" class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-items' | translate}}\n  </div>\n\n  <h4>{{messagePrefix + '.headSubgroups' | translate}}</h4>\n\n  <ds-pagination *ngIf=\"(subGroups$ | async)?.payload?.totalElements > 0\"\n                 [paginationOptions]=\"config\"\n                 [pageInfoState]=\"(subGroups$ | async)?.payload\"\n                 [collectionSize]=\"(subGroups$ | async)?.payload?.totalElements\"\n                 [hideGear]=\"true\"\n                 [hidePagerWhenSinglePage]=\"true\">\n\n    <div class=\"table-responsive\">\n      <table id=\"subgroupsOfGroup\" class=\"table table-striped table-hover table-bordered\">\n        <thead>\n        <tr>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.id' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.name' | translate}}</th>\n          <th scope=\"col\" class=\"align-middle\">{{messagePrefix + '.table.collectionOrCommunity' | translate}}</th>\n          <th>{{messagePrefix + '.table.edit' | translate}}</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let group of (subGroups$ | async)?.payload?.page\">\n          <td class=\"align-middle\">{{group.id}}</td>\n          <td class=\"align-middle\"><a (click)=\"groupDataService.startEditingNewGroup(group)\"\n                 [routerLink]=\"[groupDataService.getGroupEditPageRouterLink(group)]\">{{group.name}}</a></td>\n          <td class=\"align-middle\">{{(group.object | async)?.payload?.name}}</td>\n          <td class=\"align-middle\">\n            <div class=\"btn-group edit-field\">\n              <button (click)=\"deleteSubgroupFromGroup(group)\"\n                      class=\"btn btn-outline-danger btn-sm deleteButton\"\n                      title=\"{{messagePrefix + '.table.edit.buttons.remove' | translate: {name: group.name} }}\">\n                <i class=\"fas fa-trash-alt fa-fw\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </div>\n  </ds-pagination>\n\n  <div *ngIf=\"(subGroups$ | async)?.payload?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\"\n       role=\"alert\">\n    {{messagePrefix + '.no-subgroups-yet' | translate}}\n  </div>\n\n</ng-container>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, of as observableOf, Subscription } from 'rxjs';\nimport { map, mergeMap, switchMap, take } from 'rxjs/operators';\nimport { PaginatedList } from '../../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../../core/data/remote-data';\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { Group } from '../../../../core/eperson/models/group.model';\nimport {\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../../../core/shared/operators';\nimport { NotificationsService } from '../../../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../../../shared/pagination/pagination-component-options.model';\nimport { NoContent } from '../../../../core/shared/NoContent.model';\nimport { PaginationService } from '../../../../core/pagination/pagination.service';\nimport { followLink } from '../../../../shared/utils/follow-link-config.model';\n\n/**\n * Keys to keep track of specific subscriptions\n */\nenum SubKey {\n  Members,\n  ActiveGroup,\n  SearchResults,\n}\n\n@Component({\n  selector: 'ds-subgroups-list',\n  templateUrl: './subgroups-list.component.html'\n})\n/**\n * The list of subgroups in the edit group page\n */\nexport class SubgroupsListComponent implements OnInit, OnDestroy {\n\n  @Input()\n  messagePrefix: string;\n\n  /**\n   * Result of search groups, initially all groups\n   */\n  searchResults$: BehaviorSubject<RemoteData<PaginatedList<Group>>> = new BehaviorSubject(undefined);\n  /**\n   * List of all subgroups of group being edited\n   */\n  subGroups$: BehaviorSubject<RemoteData<PaginatedList<Group>>> = new BehaviorSubject(undefined);\n\n  /**\n   * Map of active subscriptions\n   */\n  subs: Map<SubKey, Subscription> = new Map();\n\n  /**\n   * Pagination config used to display the list of groups that are result of groups search\n   */\n  configSearch: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'ssgl',\n    pageSize: 5,\n    currentPage: 1\n  });\n  /**\n   * Pagination config used to display the list of subgroups of currently active group being edited\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'sgl',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  // The search form\n  searchForm;\n\n  // Current search in edit group - groups search form\n  currentSearchQuery: string;\n\n  // Whether or not user has done a Groups search yet\n  searchDone: boolean;\n\n  // current active group being edited\n  groupBeingEdited: Group;\n\n  constructor(public groupDataService: GroupDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private formBuilder: FormBuilder,\n              private paginationService: PaginationService,\n              private router: Router) {\n    this.currentSearchQuery = '';\n  }\n\n  ngOnInit() {\n    this.searchForm = this.formBuilder.group(({\n      query: '',\n    }));\n    this.subs.set(SubKey.ActiveGroup, this.groupDataService.getActiveGroup().subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        this.groupBeingEdited = activeGroup;\n        this.retrieveSubGroups();\n      }\n    }));\n  }\n\n  /**\n   * Retrieve the Subgroups that are members of the group\n   *\n   * @param page the number of the page to retrieve\n   * @private\n   */\n  private retrieveSubGroups() {\n    this.unsubFrom(SubKey.Members);\n    this.subs.set(\n      SubKey.Members,\n      this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n        switchMap((config) => this.groupDataService.findAllByHref(this.groupBeingEdited._links.subgroups.href, {\n            currentPage: config.currentPage,\n            elementsPerPage: config.pageSize\n          },\n          true,\n          true,\n          followLink('object')\n        ))\n      ).subscribe((rd: RemoteData<PaginatedList<Group>>) => {\n        this.subGroups$.next(rd);\n      }));\n  }\n\n  /**\n   * Whether or not the given group is a subgroup of the group currently being edited\n   * @param possibleSubgroup Group that is a possible subgroup (being tested) of the group currently being edited\n   */\n  isSubgroupOfGroup(possibleSubgroup: Group): Observable<boolean> {\n    return this.groupDataService.getActiveGroup().pipe(take(1),\n      mergeMap((activeGroup: Group) => {\n        if (activeGroup != null) {\n          if (activeGroup.uuid === possibleSubgroup.uuid) {\n            return observableOf(false);\n          } else {\n            return this.groupDataService.findAllByHref(activeGroup._links.subgroups.href, {\n              currentPage: 1,\n              elementsPerPage: 9999\n            })\n              .pipe(\n                getFirstSucceededRemoteData(),\n                getRemoteDataPayload(),\n                map((listTotalGroups: PaginatedList<Group>) => listTotalGroups.page.filter((groupInList: Group) => groupInList.id === possibleSubgroup.id)),\n                map((groups: Group[]) => groups.length > 0));\n          }\n        } else {\n          return observableOf(false);\n        }\n      }));\n  }\n\n  /**\n   * Whether or not the given group is the current group being edited\n   * @param group Group that is possibly the current group being edited\n   */\n  isActiveGroup(group: Group): Observable<boolean> {\n    return this.groupDataService.getActiveGroup().pipe(take(1),\n      mergeMap((activeGroup: Group) => {\n        if (activeGroup != null && activeGroup.uuid === group.uuid) {\n          return observableOf(true);\n        }\n        return observableOf(false);\n      }));\n  }\n\n  /**\n   * Deletes given subgroup from the group currently being edited\n   * @param subgroup  Group we want to delete from the subgroups of the group currently being edited\n   */\n  deleteSubgroupFromGroup(subgroup: Group) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        const response = this.groupDataService.deleteSubGroupFromGroup(activeGroup, subgroup);\n        this.showNotifications('deleteSubgroup', response, subgroup.name, activeGroup);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Adds given subgroup to the group currently being edited\n   * @param subgroup  Subgroup to add to group currently being edited\n   */\n  addSubgroupToGroup(subgroup: Group) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup != null) {\n        if (activeGroup.uuid !== subgroup.uuid) {\n          const response = this.groupDataService.addSubGroupToGroup(activeGroup, subgroup);\n          this.showNotifications('addSubgroup', response, subgroup.name, activeGroup);\n        } else {\n          this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.subgroupToAddIsActiveGroup'));\n        }\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.noActiveGroup'));\n      }\n    });\n  }\n\n  /**\n   * Search in the groups (searches by group name and by uuid exact match)\n   * @param data  Contains query param\n   */\n  search(data: any) {\n    const query: string = data.query;\n    if (query != null && this.currentSearchQuery !== query) {\n      this.router.navigateByUrl(this.groupDataService.getGroupEditPageRouterLink(this.groupBeingEdited));\n      this.currentSearchQuery = query;\n      this.configSearch.currentPage = 1;\n    }\n    this.searchDone = true;\n\n    this.unsubFrom(SubKey.SearchResults);\n    this.subs.set(SubKey.SearchResults, this.paginationService.getCurrentPagination(this.configSearch.id, this.configSearch).pipe(\n      switchMap((config) => this.groupDataService.searchGroups(this.currentSearchQuery, {\n        currentPage: config.currentPage,\n        elementsPerPage: config.pageSize\n      }, true, true, followLink('object')\n      ))\n    ).subscribe((rd: RemoteData<PaginatedList<Group>>) => {\n      this.searchResults$.next(rd);\n    }));\n  }\n\n  /**\n   * Unsubscribe from a subscription if it's still subscribed, and remove it from the map of\n   * active subscriptions\n   *\n   * @param key The key of the subscription to unsubscribe from\n   * @private\n   */\n  private unsubFrom(key: SubKey) {\n    if (this.subs.has(key)) {\n      this.subs.get(key).unsubscribe();\n      this.subs.delete(key);\n    }\n  }\n\n  /**\n   * unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    for (const key of this.subs.keys()) {\n      this.unsubFrom(key);\n    }\n    this.paginationService.clearPagination(this.config.id);\n    this.paginationService.clearPagination(this.configSearch.id);\n  }\n\n  /**\n   * Shows a notification based on the success/failure of the request\n   * @param messageSuffix   Suffix for message\n   * @param response        RestResponse observable containing success/failure request\n   * @param nameObject      Object request was about\n   * @param activeGroup     Group currently being edited\n   */\n  showNotifications(messageSuffix: string, response: Observable<RemoteData<Group|NoContent>>, nameObject: string, activeGroup: Group) {\n    response.pipe(getFirstCompletedRemoteData()).subscribe((rd: RemoteData<Group>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.success.' + messageSuffix, { name: nameObject }));\n        this.groupDataService.clearGroupLinkRequests(activeGroup._links.subgroups.href);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.failure.' + messageSuffix, { name: nameObject }));\n      }\n    });\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({ query: '' });\n  }\n}\n","<div class=\"container\">\n  <div class=\"group-form row\">\n    <div class=\"col-12\">\n\n      <div *ngIf=\"groupDataService.getActiveGroup() | async; then editheader; else createHeader\"></div>\n\n      <ng-template #createHeader>\n        <h2 class=\"border-bottom pb-2\">{{messagePrefix + '.head.create' | translate}}</h2>\n      </ng-template>\n\n      <ng-template #editheader>\n        <h2 class=\"border-bottom pb-2\">{{messagePrefix + '.head.edit' | translate}}</h2>\n      </ng-template>\n\n      <ds-alert *ngIf=\"groupBeingEdited?.permanent\" [type]=\"AlertTypeEnum.Warning\"\n                [content]=\"messagePrefix + '.alert.permanent'\"></ds-alert>\n      <ds-alert *ngIf=\"!(canEdit$ | async) && (groupDataService.getActiveGroup() | async)\" [type]=\"AlertTypeEnum.Warning\"\n                [content]=\"(messagePrefix + '.alert.workflowGroup' | translate:{ name: (getLinkedDSO(groupBeingEdited) | async)?.payload?.name, comcol: (getLinkedDSO(groupBeingEdited) | async)?.payload?.type, comcolEditRolesRoute: (getLinkedEditRolesRoute(groupBeingEdited) | async) })\">\n      </ds-alert>\n\n      <ds-form [formId]=\"formId\"\n               [formModel]=\"formModel\"\n               [formGroup]=\"formGroup\"\n               [formLayout]=\"formLayout\"\n               [displayCancel]=\"false\"\n               (submitForm)=\"onSubmit()\">\n        <div before class=\"btn-group\">\n          <button (click)=\"onCancel()\"\n                  class=\"btn btn-outline-secondary\"><i class=\"fas fa-arrow-left\"></i> {{messagePrefix + '.return' | translate}}</button>\n        </div>\n        <div after *ngIf=\"groupBeingEdited != null\" class=\"btn-group\">\n          <button class=\"btn btn-danger delete-button\" [disabled]=\"!(canEdit$ | async) || groupBeingEdited.permanent\"\n                  (click)=\"delete()\">\n            <i class=\"fa fa-trash\"></i> {{ messagePrefix + '.actions.delete' | translate}}\n          </button>\n        </div>\n      </ds-form>\n\n      <div class=\"mb-5\">\n        <ds-members-list *ngIf=\"groupBeingEdited != null\"\n                         [messagePrefix]=\"messagePrefix + '.members-list'\"></ds-members-list>\n      </div>\n      <ds-subgroups-list *ngIf=\"groupBeingEdited != null\"\n                         [messagePrefix]=\"messagePrefix + '.subgroups-list'\"></ds-subgroups-list>\n\n\n\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, HostListener, OnDestroy, OnInit, Output, ChangeDetectorRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicInputModel,\n  DynamicTextAreaModel\n} from '@ng-dynamic-forms/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  ObservedValueOf,\n  combineLatest as observableCombineLatest,\n  Observable,\n  of as observableOf,\n  Subscription,\n} from 'rxjs';\nimport { catchError, map, switchMap, take, filter, debounceTime } from 'rxjs/operators';\nimport { getCollectionEditRolesRoute } from '../../../collection-page/collection-page-routing-paths';\nimport { getCommunityEditRolesRoute } from '../../../community-page/community-page-routing-paths';\nimport { DSpaceObjectDataService } from '../../../core/data/dspace-object-data.service';\nimport { AuthorizationDataService } from '../../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../../core/data/feature-authorization/feature-id';\nimport { PaginatedList } from '../../../core/data/paginated-list.model';\nimport { RemoteData } from '../../../core/data/remote-data';\nimport { RequestService } from '../../../core/data/request.service';\nimport { EPersonDataService } from '../../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../../core/eperson/group-data.service';\nimport { Group } from '../../../core/eperson/models/group.model';\nimport { Collection } from '../../../core/shared/collection.model';\nimport { Community } from '../../../core/shared/community.model';\nimport { DSpaceObject } from '../../../core/shared/dspace-object.model';\nimport {\n  getRemoteDataPayload,\n  getFirstSucceededRemoteData,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteDataPayload\n} from '../../../core/shared/operators';\nimport { AlertType } from '../../../shared/alert/aletr-type';\nimport { ConfirmationModalComponent } from '../../../shared/confirmation-modal/confirmation-modal.component';\nimport { hasValue, isNotEmpty, hasValueOperator } from '../../../shared/empty.util';\nimport { FormBuilderService } from '../../../shared/form/builder/form-builder.service';\nimport { NotificationsService } from '../../../shared/notifications/notifications.service';\nimport { followLink } from '../../../shared/utils/follow-link-config.model';\nimport { NoContent } from '../../../core/shared/NoContent.model';\nimport { Operation } from 'fast-json-patch';\nimport { ValidateGroupExists } from './validators/group-exists.validator';\n\n@Component({\n  selector: 'ds-group-form',\n  templateUrl: './group-form.component.html'\n})\n/**\n * A form used for creating and editing groups\n */\nexport class GroupFormComponent implements OnInit, OnDestroy {\n\n  messagePrefix = 'admin.access-control.groups.form';\n\n  /**\n   * A unique id used for ds-form\n   */\n  formId = 'group-form';\n\n  /**\n   * Dynamic models for the inputs of form\n   */\n  groupName: DynamicInputModel;\n  groupCommunity: DynamicInputModel;\n  groupDescription: DynamicTextAreaModel;\n\n  /**\n   * A list of all dynamic input models\n   */\n  formModel: DynamicFormControlModel[];\n\n  /**\n   * Layout used for structuring the form inputs\n   */\n  formLayout: DynamicFormLayout = {\n    groupName: {\n      grid: {\n        host: 'row'\n      }\n    },\n    groupDescription: {\n      grid: {\n        host: 'row'\n      }\n    },\n  };\n\n  /**\n   * A FormGroup that combines all inputs\n   */\n  formGroup: FormGroup;\n\n  /**\n   * An EventEmitter that's fired whenever the form is being submitted\n   */\n  @Output() submitForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * An EventEmitter that's fired whenever the form is cancelled\n   */\n  @Output() cancelForm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  /**\n   * Group currently being edited\n   */\n  groupBeingEdited: Group;\n\n  /**\n   * Observable whether or not the logged in user is allowed to delete the Group & doesn't have a linked object (community / collection linked to workspace group\n   */\n  canEdit$: Observable<boolean>;\n\n  /**\n   * The AlertType enumeration\n   * @type {AlertType}\n   */\n  public AlertTypeEnum = AlertType;\n\n  /**\n   * Subscription to email field value change\n   */\n  groupNameValueChangeSubscribe: Subscription;\n\n\n  constructor(public groupDataService: GroupDataService,\n    private ePersonDataService: EPersonDataService,\n    private dSpaceObjectDataService: DSpaceObjectDataService,\n    private formBuilderService: FormBuilderService,\n    private translateService: TranslateService,\n    private notificationsService: NotificationsService,\n    private route: ActivatedRoute,\n    protected router: Router,\n    private authorizationService: AuthorizationDataService,\n    private modalService: NgbModal,\n    public requestService: RequestService,\n    protected changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.initialisePage();\n  }\n\n  initialisePage() {\n    this.subs.push(this.route.params.subscribe((params) => {\n      if (params.groupId !== 'newGroup') {\n        this.setActiveGroup(params.groupId);\n      }\n    }));\n    this.canEdit$ = this.groupDataService.getActiveGroup().pipe(\n      hasValueOperator(),\n      switchMap((group: Group) => {\n        return observableCombineLatest(\n          this.authorizationService.isAuthorized(FeatureID.CanDelete, isNotEmpty(group) ? group.self : undefined),\n          this.hasLinkedDSO(group),\n          (isAuthorized: ObservedValueOf<Observable<boolean>>, hasLinkedDSO: ObservedValueOf<Observable<boolean>>) => {\n            return isAuthorized && !hasLinkedDSO;\n          });\n      })\n    );\n    observableCombineLatest(\n      this.translateService.get(`${this.messagePrefix}.groupName`),\n      this.translateService.get(`${this.messagePrefix}.groupCommunity`),\n      this.translateService.get(`${this.messagePrefix}.groupDescription`)\n    ).subscribe(([groupName, groupCommunity, groupDescription]) => {\n      this.groupName = new DynamicInputModel({\n        id: 'groupName',\n        label: groupName,\n        name: 'groupName',\n        validators: {\n          required: null,\n        },\n        required: true,\n      });\n      this.groupCommunity = new DynamicInputModel({\n        id: 'groupCommunity',\n        label: groupCommunity,\n        name: 'groupCommunity',\n        required: false,\n        readOnly: true,\n      });\n      this.groupDescription = new DynamicTextAreaModel({\n        id: 'groupDescription',\n        label: groupDescription,\n        name: 'groupDescription',\n        required: false,\n      });\n      this.formModel = [\n        this.groupName,\n        this.groupDescription,\n      ];\n      this.formGroup = this.formBuilderService.createFormGroup(this.formModel);\n\n      if (!!this.formGroup.controls.groupName) {\n        this.formGroup.controls.groupName.setAsyncValidators(ValidateGroupExists.createValidator(this.groupDataService));\n        this.groupNameValueChangeSubscribe = this.groupName.valueChanges.pipe(debounceTime(300)).subscribe(() => {\n          this.changeDetectorRef.detectChanges();\n        });\n      }\n\n      this.subs.push(\n        observableCombineLatest(\n          this.groupDataService.getActiveGroup(),\n          this.canEdit$,\n          this.groupDataService.getActiveGroup()\n            .pipe(filter((activeGroup) => hasValue(activeGroup)),switchMap((activeGroup) => this.getLinkedDSO(activeGroup).pipe(getFirstSucceededRemoteDataPayload())))\n        ).subscribe(([activeGroup, canEdit, linkedObject]) => {\n\n          if (activeGroup != null) {\n\n            // Disable group name exists validator\n            this.formGroup.controls.groupName.clearAsyncValidators();\n\n            this.groupBeingEdited = activeGroup;\n\n            if (linkedObject?.name) {\n              this.formBuilderService.insertFormGroupControl(1, this.formGroup, this.formModel, this.groupCommunity);\n              this.formGroup.patchValue({\n                groupName: activeGroup.name,\n                groupCommunity: linkedObject?.name ?? '',\n                groupDescription: activeGroup.firstMetadataValue('dc.description'),\n              });\n            } else {\n              this.formModel = [\n                this.groupName,\n                this.groupDescription,\n              ];\n              this.formGroup.patchValue({\n                groupName: activeGroup.name,\n                groupDescription: activeGroup.firstMetadataValue('dc.description'),\n              });\n            }\n            setTimeout(() => {\n              if (!canEdit || activeGroup.permanent) {\n                this.formGroup.disable();\n              }\n            }, 200);\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Stop editing the currently selected group\n   */\n  onCancel() {\n    this.groupDataService.cancelEditGroup();\n    this.cancelForm.emit();\n    this.router.navigate([this.groupDataService.getGroupRegistryRouterLink()]);\n  }\n\n  /**\n   * Submit the form\n   * When the eperson has an id attached -> Edit the eperson\n   * When the eperson has no id attached -> Create new eperson\n   * Emit the updated/created eperson using the EventEmitter submitForm\n   */\n  onSubmit() {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe(\n      (group: Group) => {\n        const values = {\n          name: this.groupName.value,\n          metadata: {\n            'dc.description': [\n              {\n                value: this.groupDescription.value\n              }\n            ]\n          },\n        };\n        if (group === null) {\n          this.createNewGroup(values);\n        } else {\n          this.editGroup(group);\n        }\n      }\n    );\n  }\n\n  /**\n   * Creates new Group based on given values from form\n   * @param values\n   */\n  createNewGroup(values) {\n    const groupToCreate = Object.assign(new Group(), values);\n    this.groupDataService.create(groupToCreate).pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<Group>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.created.success', { name: groupToCreate.name }));\n        this.submitForm.emit(groupToCreate);\n        if (isNotEmpty(rd.payload)) {\n          const groupSelfLink = rd.payload._links.self.href;\n          this.setActiveGroupWithLink(groupSelfLink);\n          this.groupDataService.clearGroupsRequests();\n          this.router.navigateByUrl(this.groupDataService.getGroupEditPageRouterLinkWithID(rd.payload.uuid));\n        }\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.created.failure', { name: groupToCreate.name }));\n        this.showNotificationIfNameInUse(groupToCreate, 'created');\n        this.cancelForm.emit();\n      }\n    });\n  }\n\n  /**\n   * Checks for the given group if there is already a group in the system with that group name and shows error if that\n   * is the case\n   * @param group                 group to check\n   * @param notificationSection   whether in create or edit\n   */\n  private showNotificationIfNameInUse(group: Group, notificationSection: string) {\n    // Relevant message for group name in use\n    this.subs.push(this.groupDataService.searchGroups(group.name, {\n      currentPage: 1,\n      elementsPerPage: 0\n    }).pipe(getFirstSucceededRemoteData(), getRemoteDataPayload())\n      .subscribe((list: PaginatedList<Group>) => {\n        if (list.totalElements > 0) {\n          this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.' + notificationSection + '.failure.groupNameInUse', {\n            name: group.name\n          }));\n        }\n      }));\n  }\n\n  /**\n   * Edit existing Group based on given values from form and old Group\n   * @param group   Group to edit and old values contained within\n   */\n  editGroup(group: Group) {\n    let operations: Operation[] = [];\n\n    if (hasValue(this.groupDescription.value)) {\n      operations = [...operations, {\n        op: 'replace',\n        path: '/metadata/dc.description/0/value',\n        value: this.groupDescription.value\n      }];\n    }\n\n    if (hasValue(this.groupName.value)) {\n      operations = [...operations, {\n        op: 'replace',\n        path: '/name',\n        value: this.groupName.value\n      }];\n    }\n\n    this.groupDataService.patch(group, operations).pipe(\n      getFirstCompletedRemoteData()\n    ).subscribe((rd: RemoteData<Group>) => {\n      if (rd.hasSucceeded) {\n        this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.edited.success', { name: rd.payload.name }));\n        this.submitForm.emit(rd.payload);\n      } else {\n        this.notificationsService.error(this.translateService.get(this.messagePrefix + '.notification.edited.failure', { name: group.name }));\n        this.cancelForm.emit();\n      }\n    });\n  }\n\n  /**\n   * Start editing the selected group\n   * @param groupId   ID of group to set as active\n   */\n  setActiveGroup(groupId: string) {\n    this.groupDataService.cancelEditGroup();\n    this.groupDataService.findById(groupId)\n      .pipe(\n        getFirstSucceededRemoteData(),\n        getRemoteDataPayload())\n      .subscribe((group: Group) => {\n        this.groupDataService.editGroup(group);\n      });\n  }\n\n  /**\n   * Start editing the selected group\n   * @param groupSelfLink   SelfLink of group to set as active\n   */\n  setActiveGroupWithLink(groupSelfLink: string) {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((activeGroup: Group) => {\n      if (activeGroup === null) {\n        this.groupDataService.cancelEditGroup();\n        this.groupDataService.findByHref(groupSelfLink, false, false, followLink('subgroups'), followLink('epersons'), followLink('object'))\n          .pipe(\n            getFirstSucceededRemoteData(),\n            getRemoteDataPayload())\n          .subscribe((group: Group) => {\n            this.groupDataService.editGroup(group);\n          });\n      }\n    });\n  }\n\n  /**\n   * Deletes the Group from the Repository. The Group will be the only that this form is showing.\n   * It'll either show a success or error message depending on whether the delete was successful or not.\n   */\n  delete() {\n    this.groupDataService.getActiveGroup().pipe(take(1)).subscribe((group: Group) => {\n      const modalRef = this.modalService.open(ConfirmationModalComponent);\n      modalRef.componentInstance.dso = group;\n      modalRef.componentInstance.headerLabel = this.messagePrefix + '.delete-group.modal.header';\n      modalRef.componentInstance.infoLabel = this.messagePrefix + '.delete-group.modal.info';\n      modalRef.componentInstance.cancelLabel = this.messagePrefix + '.delete-group.modal.cancel';\n      modalRef.componentInstance.confirmLabel = this.messagePrefix + '.delete-group.modal.confirm';\n      modalRef.componentInstance.brandColor = 'danger';\n      modalRef.componentInstance.confirmIcon = 'fas fa-trash';\n      modalRef.componentInstance.response.pipe(take(1)).subscribe((confirm: boolean) => {\n        if (confirm) {\n          if (hasValue(group.id)) {\n            this.groupDataService.delete(group.id).pipe(getFirstCompletedRemoteData())\n              .subscribe((rd: RemoteData<NoContent>) => {\n                if (rd.hasSucceeded) {\n                  this.notificationsService.success(this.translateService.get(this.messagePrefix + '.notification.deleted.success', { name: group.name }));\n                  this.reset();\n                } else {\n                  this.notificationsService.error(\n                    this.translateService.get(this.messagePrefix + '.notification.deleted.failure.title', { name: group.name }),\n                    this.translateService.get(this.messagePrefix + '.notification.deleted.failure.content', { cause: rd.errorMessage }));\n                }\n              });\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * This method will ensure that the page gets reset and that the cache is cleared\n   */\n  reset() {\n    this.groupDataService.getBrowseEndpoint().pipe(take(1)).subscribe((href: string) => {\n      this.requestService.removeByHrefSubstring(href);\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Cancel the current edit when component is destroyed & unsub all subscriptions\n   */\n  @HostListener('window:beforeunload')\n  ngOnDestroy(): void {\n    this.groupDataService.cancelEditGroup();\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n\n    if ( hasValue(this.groupNameValueChangeSubscribe) ) {\n      this.groupNameValueChangeSubscribe.unsubscribe();\n    }\n\n  }\n\n  /**\n   * Check if group has a linked object (community or collection linked to a workflow group)\n   * @param group\n   */\n  hasLinkedDSO(group: Group): Observable<boolean> {\n    if (hasValue(group) && hasValue(group._links.object.href)) {\n      return this.getLinkedDSO(group).pipe(\n        map((rd: RemoteData<DSpaceObject>) => {\n          return hasValue(rd) && hasValue(rd.payload);\n        }),\n        catchError(() => observableOf(false)),\n      );\n    }\n  }\n\n  /**\n   * Get group's linked object if it has one (community or collection linked to a workflow group)\n   * @param group\n   */\n  getLinkedDSO(group: Group): Observable<RemoteData<DSpaceObject>> {\n    if (hasValue(group) && hasValue(group._links.object.href)) {\n      if (group.object === undefined) {\n        return this.dSpaceObjectDataService.findByHref(group._links.object.href);\n      }\n      return group.object;\n    }\n  }\n\n  /**\n   * Get the route to the edit roles tab of the group's linked object (community or collection linked to a workflow group) if it has one\n   * @param group\n   */\n  getLinkedEditRolesRoute(group: Group): Observable<string> {\n    if (hasValue(group) && hasValue(group._links.object.href)) {\n      return this.getLinkedDSO(group).pipe(\n        map((rd: RemoteData<DSpaceObject>) => {\n          if (hasValue(rd) && hasValue(rd.payload)) {\n            const dso = rd.payload;\n            switch ((dso as any).type) {\n              case Community.type.value:\n                return getCommunityEditRolesRoute(rd.payload.id);\n              case Collection.type.value:\n                return getCollectionEditRolesRoute(rd.payload.id);\n            }\n          }\n        })\n      );\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map} from 'rxjs/operators';\n\nimport { GroupDataService } from '../../../../core/eperson/group-data.service';\nimport { getFirstSucceededRemoteListPayload } from '../../../../core/shared/operators';\nimport { Group } from '../../../../core/eperson/models/group.model';\n\nexport class ValidateGroupExists {\n\n  /**\n   * This method will create the validator with the groupDataService requested from component\n   * @param groupDataService the service with DI in the component that this validator is being utilized.\n   * @return Observable<ValidationErrors | null>\n   */\n  static createValidator(groupDataService: GroupDataService) {\n    return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\n      return groupDataService.searchGroups(control.value, {\n            currentPage: 1,\n            elementsPerPage: 100\n          })\n        .pipe(\n          getFirstSucceededRemoteListPayload(),\n          map( (groups: Group[]) => {\n            return groups.filter(group => group.name === control.value);\n          }),\n          map( (groups: Group[]) => {\n            return groups.length > 0 ? { groupExists: true } : null;\n          }),\n        );\n    };\n  }\n}\n","import { PaginatedList } from '../../data/paginated-list.model';\nimport { EPerson } from './eperson.model';\nimport { Group } from './group.model';\n\n/**\n * This class serves as a Data Transfer Model that contains the Group, whether or not it's able to be deleted and its members\n */\nexport class GroupDtoModel {\n\n  /**\n   * The Group linked to this object\n   */\n  public group: Group;\n\n  /**\n   * Whether or not the linked Group is able to be deleted\n   */\n  public ableToDelete: boolean;\n\n  /**\n   * Whether or not the current user is able to edit the linked group\n   */\n  public ableToEdit: boolean;\n\n  /**\n   * List of subgroups of this group\n   */\n  public subgroups: PaginatedList<Group>;\n\n  /**\n   * List of members of this group\n   */\n  public epersons: PaginatedList<EPerson>;\n\n}\n","<div class=\"container\">\n  <div class=\"groups-registry row\">\n    <div class=\"col-12\">\n      <div class=\"d-flex justify-content-between border-bottom mb-3\">\n        <h2 id=\"header\" class=\"pb-2\">{{messagePrefix + 'head' | translate}}</h2>\n        <div>\n          <button class=\"mr-auto btn btn-success\"\n                  [routerLink]=\"['newGroup']\">\n            <i class=\"fas fa-plus\"></i>\n            <span class=\"d-none d-sm-inline\">{{messagePrefix + 'button.add' | translate}}</span>\n          </button>\n        </div>\n      </div>\n\n      <h3 id=\"search\" class=\"border-bottom pb-2\">{{messagePrefix + 'search.head' | translate}}</h3>\n      <form [formGroup]=\"searchForm\" (ngSubmit)=\"search(searchForm.value)\" class=\"d-flex justify-content-between\">\n        <div class=\"flex-grow-1 mr-3\">\n          <div class=\"form-group input-group\">\n            <input type=\"text\" name=\"query\" id=\"query\" formControlName=\"query\"\n                   class=\"form-control\" attr.aria-label=\"{{messagePrefix + 'search.placeholder' | translate}}\"\n                   [placeholder]=\"(messagePrefix + 'search.placeholder' | translate)\" >\n            <span class=\"input-group-append\">\n              <button type=\"submit\" class=\"search-button btn btn-primary\">\n                <i class=\"fas fa-search\"></i> {{ messagePrefix + 'search.button' | translate }}\n              </button>\n            </span>\n          </div>\n        </div>\n        <div>\n          <button (click)=\"clearFormAndResetResult();\" class=\"btn btn-secondary\">\n            {{messagePrefix + 'button.see-all' | translate}}\n          </button>\n        </div>\n      </form>\n\n      <ds-loading *ngIf=\"loading$ | async\"></ds-loading>\n      <ds-pagination\n        *ngIf=\"(pageInfoState$ | async)?.totalElements > 0 && !(loading$ | async)\"\n        [paginationOptions]=\"config\"\n        [pageInfoState]=\"pageInfoState$\"\n        [collectionSize]=\"(pageInfoState$ | async)?.totalElements\"\n        [hideGear]=\"true\"\n        [hidePagerWhenSinglePage]=\"true\">\n\n        <div  class=\"table-responsive\">\n          <table id=\"groups\" class=\"table table-striped table-hover table-bordered\">\n            <thead>\n            <tr>\n              <th scope=\"col\">{{messagePrefix + 'table.id' | translate}}</th>\n              <th scope=\"col\">{{messagePrefix + 'table.name' | translate}}</th>\n              <th scope=\"col\">{{messagePrefix + 'table.collectionOrCommunity' | translate}}</th>\n              <th scope=\"col\">{{messagePrefix + 'table.members' | translate}}</th>\n              <th>{{messagePrefix + 'table.edit' | translate}}</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let groupDto of (groupsDto$ | async)?.page\">\n              <td>{{groupDto.group.id}}</td>\n              <td>{{groupDto.group.name}}</td>\n              <td>{{(groupDto.group.object | async)?.payload?.name}}</td>\n              <td>{{groupDto.epersons?.totalElements + groupDto.subgroups?.totalElements}}</td>\n              <td>\n                <div class=\"btn-group edit-field\">\n                  <ng-container [ngSwitch]=\"groupDto.ableToEdit\">\n                    <button *ngSwitchCase=\"true\"\n                      [routerLink]=\"groupService.getGroupEditPageRouterLink(groupDto.group)\"\n                      class=\"btn btn-outline-primary btn-sm btn-edit\"\n                      title=\"{{messagePrefix + 'table.edit.buttons.edit' | translate: {name: groupDto.group.name} }}\"\n                    >\n                      <i class=\"fas fa-edit fa-fw\"></i>\n                    </button>\n                    <button *ngSwitchCase=\"false\"\n                      [disabled]=\"true\"\n                      class=\"btn btn-outline-primary btn-sm btn-edit\"\n                      placement=\"left\"\n                      [ngbTooltip]=\"'admin.access-control.epeople.table.edit.buttons.edit-disabled' | translate\"\n                    >\n                      <i class=\"fas fa-edit fa-fw\"></i>\n                    </button>\n                  </ng-container>\n                  <button *ngIf=\"!groupDto.group?.permanent && groupDto.ableToDelete\"\n                          (click)=\"deleteGroup(groupDto)\" class=\"btn btn-outline-danger btn-sm\"\n                          title=\"{{messagePrefix + 'table.edit.buttons.remove' | translate: {name: groupDto.group.name} }}\">\n                    <i class=\"fas fa-trash-alt fa-fw\"></i>\n                  </button>\n                </div>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n      </ds-pagination>\n\n      <div *ngIf=\"(pageInfoState$ | async)?.totalElements == 0\" class=\"alert alert-info w-100 mb-2\" role=\"alert\">\n        {{messagePrefix + 'no-items' | translate}}\n      </div>\n\n    </div>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  BehaviorSubject,\n  combineLatest as observableCombineLatest,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport { catchError, map, switchMap, take, tap } from 'rxjs/operators';\nimport { DSpaceObjectDataService } from '../../core/data/dspace-object-data.service';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { buildPaginatedList, PaginatedList } from '../../core/data/paginated-list.model';\nimport { RemoteData } from '../../core/data/remote-data';\nimport { RequestService } from '../../core/data/request.service';\nimport { EPersonDataService } from '../../core/eperson/eperson-data.service';\nimport { GroupDataService } from '../../core/eperson/group-data.service';\nimport { EPerson } from '../../core/eperson/models/eperson.model';\nimport { GroupDtoModel } from '../../core/eperson/models/group-dto.model';\nimport { Group } from '../../core/eperson/models/group.model';\nimport { RouteService } from '../../core/services/route.service';\nimport { DSpaceObject } from '../../core/shared/dspace-object.model';\nimport {\n  getAllSucceededRemoteData,\n  getFirstCompletedRemoteData,\n  getFirstSucceededRemoteData,\n  getRemoteDataPayload\n} from '../../core/shared/operators';\nimport { PageInfo } from '../../core/shared/page-info.model';\nimport { hasValue } from '../../shared/empty.util';\nimport { NotificationsService } from '../../shared/notifications/notifications.service';\nimport { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';\nimport { NoContent } from '../../core/shared/NoContent.model';\nimport { PaginationService } from '../../core/pagination/pagination.service';\nimport { followLink } from '../../shared/utils/follow-link-config.model';\n\n@Component({\n  selector: 'ds-groups-registry',\n  templateUrl: './groups-registry.component.html',\n})\n/**\n * A component used for managing all existing groups within the repository.\n * The admin can create, edit or delete groups here.\n */\nexport class GroupsRegistryComponent implements OnInit, OnDestroy {\n\n  messagePrefix = 'admin.access-control.groups.';\n\n  /**\n   * Pagination config used to display the list of groups\n   */\n  config: PaginationComponentOptions = Object.assign(new PaginationComponentOptions(), {\n    id: 'gl',\n    pageSize: 5,\n    currentPage: 1\n  });\n\n  /**\n   * A BehaviorSubject with the list of GroupDtoModel objects made from the Groups in the repository or\n   * as the result of the search\n   */\n  groupsDto$: BehaviorSubject<PaginatedList<GroupDtoModel>> = new BehaviorSubject<PaginatedList<GroupDtoModel>>({} as any);\n  deletedGroupsIds: string[] = [];\n\n  /**\n   * An observable for the pageInfo, needed to pass to the pagination component\n   */\n  pageInfoState$: BehaviorSubject<PageInfo> = new BehaviorSubject<PageInfo>(undefined);\n\n  // The search form\n  searchForm;\n\n  /**\n   * A boolean representing if a search is pending\n   */\n  loading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  // Current search in groups registry\n  currentSearchQuery: string;\n\n  /**\n   * The subscription for the search method\n   */\n  searchSub: Subscription;\n\n  paginationSub: Subscription;\n\n  /**\n   * List of subscriptions\n   */\n  subs: Subscription[] = [];\n\n  constructor(public groupService: GroupDataService,\n              private ePersonDataService: EPersonDataService,\n              private dSpaceObjectDataService: DSpaceObjectDataService,\n              private translateService: TranslateService,\n              private notificationsService: NotificationsService,\n              private formBuilder: FormBuilder,\n              protected routeService: RouteService,\n              private router: Router,\n              private authorizationService: AuthorizationDataService,\n              private paginationService: PaginationService,\n              public requestService: RequestService) {\n    this.currentSearchQuery = '';\n    this.searchForm = this.formBuilder.group(({\n      query: this.currentSearchQuery,\n    }));\n  }\n\n  ngOnInit() {\n    this.search({ query: this.currentSearchQuery });\n  }\n\n  /**\n   * Search in the groups (searches by group name and by uuid exact match)\n   * @param data  Contains query param\n   */\n  search(data: any) {\n    if (hasValue(this.searchSub)) {\n      this.searchSub.unsubscribe();\n      this.subs = this.subs.filter((sub: Subscription) => sub !== this.searchSub);\n    }\n    this.searchSub = this.paginationService.getCurrentPagination(this.config.id, this.config).pipe(\n      tap(() => this.loading$.next(true)),\n      switchMap((paginationOptions) => {\n        const query: string = data.query;\n        if (query != null && this.currentSearchQuery !== query) {\n          this.currentSearchQuery = query;\n          this.paginationService.updateRouteWithUrl(this.config.id, [], {page: 1});\n        }\n        return this.groupService.searchGroups(this.currentSearchQuery.trim(), {\n          currentPage: paginationOptions.currentPage,\n          elementsPerPage: paginationOptions.pageSize,\n        }, true, true, followLink('object'));\n      }),\n      getAllSucceededRemoteData(),\n      getRemoteDataPayload(),\n      switchMap((groups: PaginatedList<Group>) => {\n        if (groups.page.length === 0) {\n          return observableOf(buildPaginatedList(groups.pageInfo, []));\n        }\n        return this.authorizationService.isAuthorized(FeatureID.AdministratorOf).pipe(\n          switchMap((isSiteAdmin: boolean) => {\n            return observableCombineLatest(groups.page.map((group: Group) => {\n              if (hasValue(group) && !this.deletedGroupsIds.includes(group.id)) {\n                return observableCombineLatest([\n                  this.authorizationService.isAuthorized(FeatureID.CanDelete, group.self),\n                  this.canManageGroup$(isSiteAdmin, group),\n                  this.hasLinkedDSO(group),\n                  this.getSubgroups(group),\n                  this.getMembers(group)\n                ]).pipe(\n                  map(([canDelete, canManageGroup, hasLinkedDSO, subgroups, members]:\n                         [boolean, boolean, boolean, RemoteData<PaginatedList<Group>>, RemoteData<PaginatedList<EPerson>>]) => {\n                      const groupDtoModel: GroupDtoModel = new GroupDtoModel();\n                      groupDtoModel.ableToDelete = canDelete && !hasLinkedDSO;\n                      groupDtoModel.ableToEdit = canManageGroup;\n                      groupDtoModel.group = group;\n                      groupDtoModel.subgroups = subgroups.payload;\n                      groupDtoModel.epersons = members.payload;\n                      return groupDtoModel;\n                    }\n                  )\n                );\n              }\n            })).pipe(map((dtos: GroupDtoModel[]) => {\n              return buildPaginatedList(groups.pageInfo, dtos);\n            }));\n          })\n        );\n      })\n    ).subscribe((value: PaginatedList<GroupDtoModel>) => {\n      this.groupsDto$.next(value);\n      this.pageInfoState$.next(value.pageInfo);\n      this.loading$.next(false);\n    });\n\n    this.subs.push(this.searchSub);\n      }\n\n  canManageGroup$(isSiteAdmin: boolean, group: Group): Observable<boolean> {\n    if (isSiteAdmin) {\n      return observableOf(true);\n    } else {\n      return this.authorizationService.isAuthorized(FeatureID.CanManageGroup, group.self);\n    }\n  }\n\n  /**\n   * Delete Group\n   */\n  deleteGroup(group: GroupDtoModel) {\n    if (hasValue(group.group.id)) {\n      this.groupService.delete(group.group.id).pipe(getFirstCompletedRemoteData())\n        .subscribe((rd: RemoteData<NoContent>) => {\n          if (rd.hasSucceeded) {\n            this.deletedGroupsIds = [...this.deletedGroupsIds, group.group.id];\n            this.notificationsService.success(this.translateService.get(this.messagePrefix + 'notification.deleted.success', { name: group.group.name }));\n            this.reset();\n          } else {\n            this.notificationsService.error(\n              this.translateService.get(this.messagePrefix + 'notification.deleted.failure.title', { name: group.group.name }),\n              this.translateService.get(this.messagePrefix + 'notification.deleted.failure.content', { cause: rd.errorMessage }));\n          }\n      });\n    }\n  }\n\n  /**\n   * This method will set everything to stale, which will cause the lists on this page to update.\n   */\n  reset() {\n    this.groupService.getBrowseEndpoint().pipe(\n      take(1)\n    ).subscribe((href: string) => {\n      this.requestService.setStaleByHrefSubstring(href);\n    });\n  }\n\n  /**\n   * Get the members (epersons embedded value of a group)\n   * @param group\n   */\n  getMembers(group: Group): Observable<RemoteData<PaginatedList<EPerson>>> {\n    return this.ePersonDataService.findAllByHref(group._links.epersons.href).pipe(getFirstSucceededRemoteData());\n  }\n\n  /**\n   * Get the subgroups (groups embedded value of a group)\n   * @param group\n   */\n  getSubgroups(group: Group): Observable<RemoteData<PaginatedList<Group>>> {\n    return this.groupService.findAllByHref(group._links.subgroups.href).pipe(getFirstSucceededRemoteData());\n  }\n\n  /**\n   * Check if group has a linked object (community or collection linked to a workflow group)\n   * @param group\n   */\n  hasLinkedDSO(group: Group): Observable<boolean> {\n    return this.dSpaceObjectDataService.findByHref(group._links.object.href).pipe(\n      getFirstSucceededRemoteData(),\n      map((rd: RemoteData<DSpaceObject>) => hasValue(rd) && hasValue(rd.payload)),\n      catchError(() => observableOf(false)),\n    );\n  }\n\n  /**\n   * Reset all input-fields to be empty and search all search\n   */\n  clearFormAndResetResult() {\n    this.searchForm.patchValue({\n      query: '',\n    });\n    this.search({ query: '' });\n  }\n\n  /**\n   * Unsub all subscriptions\n   */\n  ngOnDestroy(): void {\n    this.cleanupSubscribes();\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n\n  cleanupSubscribes() {\n    if (hasValue(this.paginationSub)) {\n      this.paginationSub.unsubscribe();\n    }\n    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());\n    this.paginationService.clearPagination(this.config.id);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { FeatureID } from '../../core/data/feature-authorization/feature-id';\nimport { AuthorizationDataService } from '../../core/data/feature-authorization/authorization-data.service';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { SomeFeatureAuthorizationGuard } from '../../core/data/feature-authorization/feature-authorization-guard/some-feature-authorization.guard';\nimport { HALEndpointService } from '../../core/shared/hal-endpoint.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupPageGuard extends SomeFeatureAuthorizationGuard {\n\n  protected groupsEndpoint = 'groups';\n\n  constructor(protected halEndpointService: HALEndpointService,\n              protected authorizationService: AuthorizationDataService,\n              protected router: Router,\n              protected authService: AuthService) {\n    super(authorizationService, router, authService);\n  }\n\n  getFeatureIDs(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<FeatureID[]> {\n    return observableOf([FeatureID.CanManageGroup]);\n  }\n\n  getObjectUrl(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string> {\n    return this.halEndpointService.getEndpoint(this.groupsEndpoint).pipe(\n      map(groupsUrl => `${groupsUrl}/${route?.params?.groupId}`)\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EPeopleRegistryComponent } from './epeople-registry/epeople-registry.component';\nimport { GroupFormComponent } from './group-registry/group-form/group-form.component';\nimport { GroupsRegistryComponent } from './group-registry/groups-registry.component';\nimport { GROUP_EDIT_PATH } from './access-control-routing-paths';\nimport { I18nBreadcrumbResolver } from '../core/breadcrumbs/i18n-breadcrumb.resolver';\nimport { GroupPageGuard } from './group-registry/group-page.guard';\nimport { GroupAdministratorGuard } from '../core/data/feature-authorization/feature-authorization-guard/group-administrator.guard';\nimport { SiteAdministratorGuard } from '../core/data/feature-authorization/feature-authorization-guard/site-administrator.guard';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: 'epeople',\n        component: EPeopleRegistryComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.epeople.title', breadcrumbKey: 'admin.access-control.epeople' },\n        canActivate: [SiteAdministratorGuard]\n      },\n      {\n        path: GROUP_EDIT_PATH,\n        component: GroupsRegistryComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.groups.title', breadcrumbKey: 'admin.access-control.groups' },\n        canActivate: [GroupAdministratorGuard]\n      },\n      {\n        path: `${GROUP_EDIT_PATH}/newGroup`,\n        component: GroupFormComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.groups.title.addGroup', breadcrumbKey: 'admin.access-control.groups.addGroup' },\n        canActivate: [GroupAdministratorGuard]\n      },\n      {\n        path: `${GROUP_EDIT_PATH}/:groupId`,\n        component: GroupFormComponent,\n        resolve: {\n          breadcrumb: I18nBreadcrumbResolver\n        },\n        data: { title: 'admin.access-control.groups.title.singleGroup', breadcrumbKey: 'admin.access-control.groups.singleGroup' },\n        canActivate: [GroupPageGuard]\n      }\n    ])\n  ]\n})\n/**\n * Routing module for the AccessControl section of the admin sidebar\n */\nexport class AccessControlRoutingModule {\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '../shared/shared.module';\nimport { AccessControlRoutingModule } from './access-control-routing.module';\nimport { EPeopleRegistryComponent } from './epeople-registry/epeople-registry.component';\nimport { EPersonFormComponent } from './epeople-registry/eperson-form/eperson-form.component';\nimport { GroupFormComponent } from './group-registry/group-form/group-form.component';\nimport { MembersListComponent } from './group-registry/group-form/members-list/members-list.component';\nimport { SubgroupsListComponent } from './group-registry/group-form/subgroup-list/subgroups-list.component';\nimport { GroupsRegistryComponent } from './group-registry/groups-registry.component';\nimport { FormModule } from '../shared/form/form.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule,\n    AccessControlRoutingModule,\n    FormModule\n  ],\n  declarations: [\n    EPeopleRegistryComponent,\n    EPersonFormComponent,\n    GroupsRegistryComponent,\n    GroupFormComponent,\n    SubgroupsListComponent,\n    MembersListComponent\n  ]\n})\n/**\n * This module handles all components related to the access control pages\n */\nexport class AccessControlModule {\n\n}\n","<ds-dynamic-form-control-container *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                                   [formId]=\"formId\"\n                                   [group]=\"formGroup\"\n                                   [hasErrorMessaging]=\"model.hasErrorMessages\"\n                                   [hidden]=\"model.hidden\"\n                                   [layout]=\"formLayout\"\n                                   [model]=\"model\"\n                                   [templates]=\"templates\"\n                                   [asBootstrapFormGroup]=\"true\"\n                                   (dfBlur)=\"onCustomEvent($event, blur)\"\n                                   (dfChange)=\"onCustomEvent($event, change)\"\n                                   (dfFocus)=\"onCustomEvent($event, focus)\"\n                                   (ngbEvent)=\"onCustomEvent($event, ngbEvent)\"></ds-dynamic-form-control-container>\n","import {\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  DynamicFormComponent,\n  DynamicFormControlContainerComponent,\n  DynamicFormControlEvent,\n  DynamicFormControlModel,\n  DynamicFormLayout,\n  DynamicFormComponentService,\n  DynamicTemplateDirective,\n} from '@ng-dynamic-forms/core';\nimport { DsDynamicFormControlContainerComponent } from './ds-dynamic-form-control-container.component';\n\n@Component({\n  selector: 'ds-dynamic-form',\n  templateUrl: './ds-dynamic-form.component.html'\n})\nexport class DsDynamicFormComponent extends DynamicFormComponent {\n\n  @Input() formId: string;\n  @Input() formGroup: FormGroup;\n  @Input() formModel: DynamicFormControlModel[];\n  @Input() formLayout: DynamicFormLayout;\n\n  /* tslint:disable:no-output-rename */\n  @Output('dfBlur') blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfChange') change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  @Output('dfFocus') focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n  /* tslint:enable:no-output-rename */\n\n  @Output() ngbEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n  @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n  @ViewChildren(DsDynamicFormControlContainerComponent) components: QueryList<DynamicFormControlContainerComponent>;\n\n  constructor(changeDetectorRef: ChangeDetectorRef, componentService: DynamicFormComponentService) {\n    super(changeDetectorRef, componentService);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormComponent } from './form.component';\nimport { DsDynamicFormComponent } from './builder/ds-dynamic-form-ui/ds-dynamic-form.component';\nimport {\n  DsDynamicFormControlContainerComponent,\n  dsDynamicFormControlMapFn\n} from './builder/ds-dynamic-form-ui/ds-dynamic-form-control-container.component';\nimport { DsDynamicListComponent } from './builder/ds-dynamic-form-ui/models/list/dynamic-list.component';\nimport { DsDynamicLookupComponent } from './builder/ds-dynamic-form-ui/models/lookup/dynamic-lookup.component';\nimport { DsDynamicDisabledComponent } from './builder/ds-dynamic-form-ui/models/disabled/dynamic-disabled.component';\nimport { DsDynamicLookupRelationModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/dynamic-lookup-relation-modal.component';\nimport { DsDynamicScrollableDropdownComponent } from './builder/ds-dynamic-form-ui/models/scrollable-dropdown/dynamic-scrollable-dropdown.component';\nimport { DsDynamicTagComponent } from './builder/ds-dynamic-form-ui/models/tag/dynamic-tag.component';\nimport { DsDynamicOneboxComponent } from './builder/ds-dynamic-form-ui/models/onebox/dynamic-onebox.component';\nimport { DsDynamicRelationGroupComponent } from './builder/ds-dynamic-form-ui/models/relation-group/dynamic-relation-group.components';\nimport { DsDatePickerComponent } from './builder/ds-dynamic-form-ui/models/date-picker/date-picker.component';\nimport { DsDynamicFormGroupComponent } from './builder/ds-dynamic-form-ui/models/form-group/dynamic-form-group.component';\nimport { DsDynamicFormArrayComponent } from './builder/ds-dynamic-form-ui/models/array-group/dynamic-form-array.component';\nimport { DsDatePickerInlineComponent } from './builder/ds-dynamic-form-ui/models/date-picker-inline/dynamic-date-picker-inline.component';\nimport { DsDynamicLookupRelationSearchTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/search-tab/dynamic-lookup-relation-search-tab.component';\nimport { DsDynamicLookupRelationSelectionTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/selection-tab/dynamic-lookup-relation-selection-tab.component';\nimport { DsDynamicLookupRelationExternalSourceTabComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/dynamic-lookup-relation-external-source-tab.component';\nimport { SharedModule } from '../shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SearchModule } from '../search/search.module';\nimport { DYNAMIC_FORM_CONTROL_MAP_FN, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport { ExistingMetadataListElementComponent } from './builder/ds-dynamic-form-ui/existing-metadata-list-element/existing-metadata-list-element.component';\nimport { ExistingRelationListElementComponent } from './builder/ds-dynamic-form-ui/existing-relation-list-element/existing-relation-list-element.component';\nimport { ExternalSourceEntryImportModalComponent } from './builder/ds-dynamic-form-ui/relation-lookup-modal/external-source-tab/external-source-entry-import-modal/external-source-entry-import-modal.component';\nimport { CustomSwitchComponent } from './builder/ds-dynamic-form-ui/models/custom-switch/custom-switch.component';\nimport { DynamicFormsNGBootstrapUIModule } from '@ng-dynamic-forms/ui-ng-bootstrap';\n\nconst COMPONENTS = [\n  CustomSwitchComponent,\n  DsDynamicFormComponent,\n  DsDynamicFormControlContainerComponent,\n  DsDynamicListComponent,\n  DsDynamicLookupComponent,\n  DsDynamicLookupRelationSearchTabComponent,\n  DsDynamicLookupRelationSelectionTabComponent,\n  DsDynamicLookupRelationExternalSourceTabComponent,\n  DsDynamicDisabledComponent,\n  DsDynamicLookupRelationModalComponent,\n  DsDynamicScrollableDropdownComponent,\n  DsDynamicTagComponent,\n  DsDynamicOneboxComponent,\n  DsDynamicRelationGroupComponent,\n  DsDatePickerComponent,\n  DsDynamicFormGroupComponent,\n  DsDynamicFormArrayComponent,\n  DsDatePickerInlineComponent,\n  ExistingMetadataListElementComponent,\n  ExistingRelationListElementComponent,\n  ExternalSourceEntryImportModalComponent,\n  FormComponent\n];\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    DynamicFormsCoreModule,\n    DynamicFormsNGBootstrapUIModule,\n    SearchModule,\n    SharedModule,\n    TranslateModule\n  ],\n  exports: [\n    ...COMPONENTS\n  ],\n  providers: [\n    {\n      provide: DYNAMIC_FORM_CONTROL_MAP_FN,\n      useValue: dsDynamicFormControlMapFn\n    }\n  ]\n})\nexport class FormModule {\n}\n","import { URLCombiner } from '../core/url-combiner/url-combiner';\nimport { getAccessControlModuleRoute } from '../app-routing-paths';\n\nexport const GROUP_EDIT_PATH = 'groups';\n\nexport function getGroupsRoute() {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH).toString();\n}\n\nexport function getGroupEditRoute(id: string) {\n  return new URLCombiner(getAccessControlModuleRoute(), GROUP_EDIT_PATH, id).toString();\n}\n","import { Breadcrumb } from '../../breadcrumbs/breadcrumb/breadcrumb.model';\nimport { BreadcrumbsProviderService } from './breadcrumbsProviderService';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n/**\n * The postfix for i18n breadcrumbs\n */\nexport const BREADCRUMB_MESSAGE_POSTFIX = '.breadcrumbs';\n\n/**\n * Service to calculate i18n breadcrumbs for a single part of the route\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nBreadcrumbsService implements BreadcrumbsProviderService<string> {\n\n  /**\n   * Method to calculate the breadcrumbs\n   * @param key The key used to resolve the breadcrumb\n   * @param url The url to use as a link for this breadcrumb\n   */\n  getBreadcrumbs(key: string, url: string): Observable<Breadcrumb[]> {\n    return observableOf([new Breadcrumb(key + BREADCRUMB_MESSAGE_POSTFIX, url)]);\n  }\n}\n","/**\n * Class representing a single breadcrumb\n */\nexport class Breadcrumb {\n  constructor(\n    /**\n     * The display value of the breadcrumb\n     */\n    public text: string,\n    /**\n     * The optional url of the breadcrumb\n     */\n    public url?: string) {\n  }\n}\n"]}